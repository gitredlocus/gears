/*===- TableGen'erated file -------------------------------------*- C++ -*-===*\
|*                                                                            *|
|*Target Register Enum Values                                                 *|
|*                                                                            *|
|* Automatically generated file, do not edit!                                 *|
|*                                                                            *|
\*===----------------------------------------------------------------------===*/


#ifdef GET_REGINFO_ENUM
#undef GET_REGINFO_ENUM
namespace llvm {

class MCRegisterClass;
extern const MCRegisterClass ARMMCRegisterClasses[];

namespace ARM {
enum {
  NoRegister,
  APSR = 1,
  APSR_NZCV = 2,
  CPSR = 3,
  FPEXC = 4,
  FPINST = 5,
  FPSCR = 6,
  FPSCR_NZCV = 7,
  FPSID = 8,
  ITSTATE = 9,
  LR = 10,
  PC = 11,
  SP = 12,
  SPSR = 13,
  D0 = 14,
  D1 = 15,
  D2 = 16,
  D3 = 17,
  D4 = 18,
  D5 = 19,
  D6 = 20,
  D7 = 21,
  D8 = 22,
  D9 = 23,
  D10 = 24,
  D11 = 25,
  D12 = 26,
  D13 = 27,
  D14 = 28,
  D15 = 29,
  D16 = 30,
  D17 = 31,
  D18 = 32,
  D19 = 33,
  D20 = 34,
  D21 = 35,
  D22 = 36,
  D23 = 37,
  D24 = 38,
  D25 = 39,
  D26 = 40,
  D27 = 41,
  D28 = 42,
  D29 = 43,
  D30 = 44,
  D31 = 45,
  FPINST2 = 46,
  MVFR0 = 47,
  MVFR1 = 48,
  Q0 = 49,
  Q1 = 50,
  Q2 = 51,
  Q3 = 52,
  Q4 = 53,
  Q5 = 54,
  Q6 = 55,
  Q7 = 56,
  Q8 = 57,
  Q9 = 58,
  Q10 = 59,
  Q11 = 60,
  Q12 = 61,
  Q13 = 62,
  Q14 = 63,
  Q15 = 64,
  R0 = 65,
  R1 = 66,
  R2 = 67,
  R3 = 68,
  R4 = 69,
  R5 = 70,
  R6 = 71,
  R7 = 72,
  R8 = 73,
  R9 = 74,
  R10 = 75,
  R11 = 76,
  R12 = 77,
  S0 = 78,
  S1 = 79,
  S2 = 80,
  S3 = 81,
  S4 = 82,
  S5 = 83,
  S6 = 84,
  S7 = 85,
  S8 = 86,
  S9 = 87,
  S10 = 88,
  S11 = 89,
  S12 = 90,
  S13 = 91,
  S14 = 92,
  S15 = 93,
  S16 = 94,
  S17 = 95,
  S18 = 96,
  S19 = 97,
  S20 = 98,
  S21 = 99,
  S22 = 100,
  S23 = 101,
  S24 = 102,
  S25 = 103,
  S26 = 104,
  S27 = 105,
  S28 = 106,
  S29 = 107,
  S30 = 108,
  S31 = 109,
  D0_D2 = 110,
  D1_D3 = 111,
  D2_D4 = 112,
  D3_D5 = 113,
  D4_D6 = 114,
  D5_D7 = 115,
  D6_D8 = 116,
  D7_D9 = 117,
  D8_D10 = 118,
  D9_D11 = 119,
  D10_D12 = 120,
  D11_D13 = 121,
  D12_D14 = 122,
  D13_D15 = 123,
  D14_D16 = 124,
  D15_D17 = 125,
  D16_D18 = 126,
  D17_D19 = 127,
  D18_D20 = 128,
  D19_D21 = 129,
  D20_D22 = 130,
  D21_D23 = 131,
  D22_D24 = 132,
  D23_D25 = 133,
  D24_D26 = 134,
  D25_D27 = 135,
  D26_D28 = 136,
  D27_D29 = 137,
  D28_D30 = 138,
  D29_D31 = 139,
  Q0_Q1 = 140,
  Q1_Q2 = 141,
  Q2_Q3 = 142,
  Q3_Q4 = 143,
  Q4_Q5 = 144,
  Q5_Q6 = 145,
  Q6_Q7 = 146,
  Q7_Q8 = 147,
  Q8_Q9 = 148,
  Q9_Q10 = 149,
  Q10_Q11 = 150,
  Q11_Q12 = 151,
  Q12_Q13 = 152,
  Q13_Q14 = 153,
  Q14_Q15 = 154,
  Q0_Q1_Q2_Q3 = 155,
  Q1_Q2_Q3_Q4 = 156,
  Q2_Q3_Q4_Q5 = 157,
  Q3_Q4_Q5_Q6 = 158,
  Q4_Q5_Q6_Q7 = 159,
  Q5_Q6_Q7_Q8 = 160,
  Q6_Q7_Q8_Q9 = 161,
  Q7_Q8_Q9_Q10 = 162,
  Q8_Q9_Q10_Q11 = 163,
  Q9_Q10_Q11_Q12 = 164,
  Q10_Q11_Q12_Q13 = 165,
  Q11_Q12_Q13_Q14 = 166,
  Q12_Q13_Q14_Q15 = 167,
  R12_SP = 168,
  R0_R1 = 169,
  R2_R3 = 170,
  R4_R5 = 171,
  R6_R7 = 172,
  R8_R9 = 173,
  R10_R11 = 174,
  D0_D1_D2 = 175,
  D1_D2_D3 = 176,
  D2_D3_D4 = 177,
  D3_D4_D5 = 178,
  D4_D5_D6 = 179,
  D5_D6_D7 = 180,
  D6_D7_D8 = 181,
  D7_D8_D9 = 182,
  D8_D9_D10 = 183,
  D9_D10_D11 = 184,
  D10_D11_D12 = 185,
  D11_D12_D13 = 186,
  D12_D13_D14 = 187,
  D13_D14_D15 = 188,
  D14_D15_D16 = 189,
  D15_D16_D17 = 190,
  D16_D17_D18 = 191,
  D17_D18_D19 = 192,
  D18_D19_D20 = 193,
  D19_D20_D21 = 194,
  D20_D21_D22 = 195,
  D21_D22_D23 = 196,
  D22_D23_D24 = 197,
  D23_D24_D25 = 198,
  D24_D25_D26 = 199,
  D25_D26_D27 = 200,
  D26_D27_D28 = 201,
  D27_D28_D29 = 202,
  D28_D29_D30 = 203,
  D29_D30_D31 = 204,
  D0_D2_D4 = 205,
  D1_D3_D5 = 206,
  D2_D4_D6 = 207,
  D3_D5_D7 = 208,
  D4_D6_D8 = 209,
  D5_D7_D9 = 210,
  D6_D8_D10 = 211,
  D7_D9_D11 = 212,
  D8_D10_D12 = 213,
  D9_D11_D13 = 214,
  D10_D12_D14 = 215,
  D11_D13_D15 = 216,
  D12_D14_D16 = 217,
  D13_D15_D17 = 218,
  D14_D16_D18 = 219,
  D15_D17_D19 = 220,
  D16_D18_D20 = 221,
  D17_D19_D21 = 222,
  D18_D20_D22 = 223,
  D19_D21_D23 = 224,
  D20_D22_D24 = 225,
  D21_D23_D25 = 226,
  D22_D24_D26 = 227,
  D23_D25_D27 = 228,
  D24_D26_D28 = 229,
  D25_D27_D29 = 230,
  D26_D28_D30 = 231,
  D27_D29_D31 = 232,
  D0_D2_D4_D6 = 233,
  D1_D3_D5_D7 = 234,
  D2_D4_D6_D8 = 235,
  D3_D5_D7_D9 = 236,
  D4_D6_D8_D10 = 237,
  D5_D7_D9_D11 = 238,
  D6_D8_D10_D12 = 239,
  D7_D9_D11_D13 = 240,
  D8_D10_D12_D14 = 241,
  D9_D11_D13_D15 = 242,
  D10_D12_D14_D16 = 243,
  D11_D13_D15_D17 = 244,
  D12_D14_D16_D18 = 245,
  D13_D15_D17_D19 = 246,
  D14_D16_D18_D20 = 247,
  D15_D17_D19_D21 = 248,
  D16_D18_D20_D22 = 249,
  D17_D19_D21_D23 = 250,
  D18_D20_D22_D24 = 251,
  D19_D21_D23_D25 = 252,
  D20_D22_D24_D26 = 253,
  D21_D23_D25_D27 = 254,
  D22_D24_D26_D28 = 255,
  D23_D25_D27_D29 = 256,
  D24_D26_D28_D30 = 257,
  D25_D27_D29_D31 = 258,
  D1_D2 = 259,
  D3_D4 = 260,
  D5_D6 = 261,
  D7_D8 = 262,
  D9_D10 = 263,
  D11_D12 = 264,
  D13_D14 = 265,
  D15_D16 = 266,
  D17_D18 = 267,
  D19_D20 = 268,
  D21_D22 = 269,
  D23_D24 = 270,
  D25_D26 = 271,
  D27_D28 = 272,
  D29_D30 = 273,
  D1_D2_D3_D4 = 274,
  D3_D4_D5_D6 = 275,
  D5_D6_D7_D8 = 276,
  D7_D8_D9_D10 = 277,
  D9_D10_D11_D12 = 278,
  D11_D12_D13_D14 = 279,
  D13_D14_D15_D16 = 280,
  D15_D16_D17_D18 = 281,
  D17_D18_D19_D20 = 282,
  D19_D20_D21_D22 = 283,
  D21_D22_D23_D24 = 284,
  D23_D24_D25_D26 = 285,
  D25_D26_D27_D28 = 286,
  D27_D28_D29_D30 = 287,
  NUM_TARGET_REGS 	// 288
};
}

// Register classes
namespace ARM {
enum {
  SPRRegClassID = 0,
  GPRRegClassID = 1,
  GPRwithAPSRRegClassID = 2,
  SPR_8RegClassID = 3,
  GPRnopcRegClassID = 4,
  rGPRRegClassID = 5,
  hGPRRegClassID = 6,
  tGPRRegClassID = 7,
  GPRnopc_and_hGPRRegClassID = 8,
  hGPR_and_rGPRRegClassID = 9,
  tcGPRRegClassID = 10,
  tGPR_and_tcGPRRegClassID = 11,
  hGPR_and_tcGPRRegClassID = 12,
  CCRRegClassID = 13,
  GPRspRegClassID = 14,
  DPRRegClassID = 15,
  DPR_VFP2RegClassID = 16,
  DPR_8RegClassID = 17,
  GPRPairRegClassID = 18,
  GPRPair_with_gsub_1_in_rGPRRegClassID = 19,
  GPRPair_with_gsub_0_in_tGPRRegClassID = 20,
  GPRPair_with_gsub_0_in_hGPRRegClassID = 21,
  GPRPair_with_gsub_0_in_tcGPRRegClassID = 22,
  GPRPair_with_gsub_1_in_tcGPRRegClassID = 23,
  GPRPair_with_gsub_0_in_tGPR_and_tcGPRRegClassID = 24,
  GPRPair_with_gsub_1_in_hGPR_and_rGPRRegClassID = 25,
  GPRPair_with_gsub_1_in_GPRspRegClassID = 26,
  GPRPair_with_gsub_1_in_hGPR_and_tcGPRRegClassID = 27,
  DPairSpcRegClassID = 28,
  DPairSpc_with_ssub_0RegClassID = 29,
  DPairSpc_with_dsub_2_then_ssub_0RegClassID = 30,
  DPairSpc_with_dsub_0_in_DPR_8RegClassID = 31,
  DPairSpc_with_dsub_2_in_DPR_8RegClassID = 32,
  DPairRegClassID = 33,
  DPair_with_ssub_0RegClassID = 34,
  QPRRegClassID = 35,
  DPair_with_ssub_2RegClassID = 36,
  DPair_with_dsub_0_in_DPR_8RegClassID = 37,
  QPR_VFP2RegClassID = 38,
  DPair_with_dsub_1_in_DPR_8RegClassID = 39,
  QPR_8RegClassID = 40,
  DTripleRegClassID = 41,
  DTripleSpcRegClassID = 42,
  DTripleSpc_with_ssub_0RegClassID = 43,
  DTriple_with_ssub_0RegClassID = 44,
  DTriple_with_dsub_1_dsub_2_in_QPRRegClassID = 45,
  DTriple_with_qsub_0_in_QPRRegClassID = 46,
  DTriple_with_ssub_2RegClassID = 47,
  DTripleSpc_with_dsub_2_then_ssub_0RegClassID = 48,
  DTriple_with_dsub_2_then_ssub_0RegClassID = 49,
  DTripleSpc_with_dsub_4_then_ssub_0RegClassID = 50,
  DTripleSpc_with_dsub_0_in_DPR_8RegClassID = 51,
  DTriple_with_dsub_0_in_DPR_8RegClassID = 52,
  DTriple_with_qsub_0_in_QPR_VFP2RegClassID = 53,
  DTriple_with_ssub_0_and_DTriple_with_dsub_1_dsub_2_in_QPRRegClassID = 54,
  DTriple_with_dsub_1_dsub_2_in_QPR_VFP2RegClassID = 55,
  DTriple_with_dsub_1_in_DPR_8RegClassID = 56,
  DTriple_with_dsub_2_then_ssub_0_and_DTriple_with_qsub_0_in_QPRRegClassID = 57,
  DTripleSpc_with_dsub_2_in_DPR_8RegClassID = 58,
  DTriple_with_dsub_2_in_DPR_8RegClassID = 59,
  DTripleSpc_with_dsub_4_in_DPR_8RegClassID = 60,
  DTriple_with_dsub_0_in_DPR_8_and_DTriple_with_dsub_1_dsub_2_in_QPRRegClassID = 61,
  DTriple_with_qsub_0_in_QPR_8RegClassID = 62,
  DTriple_with_dsub_1_dsub_2_in_QPR_8RegClassID = 63,
  DTriple_with_dsub_2_in_DPR_8_and_DTriple_with_qsub_0_in_QPRRegClassID = 64,
  DQuadSpcRegClassID = 65,
  DQuadSpc_with_ssub_0RegClassID = 66,
  DQuadSpc_with_dsub_2_then_ssub_0RegClassID = 67,
  DQuadSpc_with_dsub_4_then_ssub_0RegClassID = 68,
  DQuadSpc_with_dsub_0_in_DPR_8RegClassID = 69,
  DQuadSpc_with_dsub_2_in_DPR_8RegClassID = 70,
  DQuadSpc_with_dsub_4_in_DPR_8RegClassID = 71,
  DQuadRegClassID = 72,
  DQuad_with_ssub_0RegClassID = 73,
  DQuad_with_ssub_2RegClassID = 74,
  QQPRRegClassID = 75,
  DQuad_with_dsub_1_dsub_2_in_QPRRegClassID = 76,
  DQuad_with_dsub_2_then_ssub_0RegClassID = 77,
  DQuad_with_dsub_3_then_ssub_0RegClassID = 78,
  DQuad_with_dsub_0_in_DPR_8RegClassID = 79,
  DQuad_with_qsub_0_in_QPR_VFP2RegClassID = 80,
  DQuad_with_ssub_0_and_DQuad_with_dsub_1_dsub_2_in_QPRRegClassID = 81,
  DQuad_with_dsub_1_dsub_2_in_QPR_VFP2RegClassID = 82,
  DQuad_with_dsub_1_in_DPR_8RegClassID = 83,
  DQuad_with_qsub_1_in_QPR_VFP2RegClassID = 84,
  DQuad_with_dsub_2_in_DPR_8RegClassID = 85,
  DQuad_with_dsub_3_then_ssub_0_and_DQuad_with_dsub_1_dsub_2_in_QPRRegClassID = 86,
  DQuad_with_dsub_3_in_DPR_8RegClassID = 87,
  DQuad_with_dsub_0_in_DPR_8_and_DQuad_with_dsub_1_dsub_2_in_QPRRegClassID = 88,
  DQuad_with_qsub_0_in_QPR_8RegClassID = 89,
  DQuad_with_dsub_1_dsub_2_in_QPR_8RegClassID = 90,
  DQuad_with_qsub_1_in_QPR_8RegClassID = 91,
  DQuad_with_dsub_3_in_DPR_8_and_DQuad_with_dsub_1_dsub_2_in_QPRRegClassID = 92,
  QQQQPRRegClassID = 93,
  QQQQPR_with_ssub_0RegClassID = 94,
  QQQQPR_with_dsub_2_then_ssub_0RegClassID = 95,
  QQQQPR_with_dsub_5_then_ssub_0RegClassID = 96,
  QQQQPR_with_dsub_7_then_ssub_0RegClassID = 97,
  QQQQPR_with_dsub_0_in_DPR_8RegClassID = 98,
  QQQQPR_with_dsub_2_in_DPR_8RegClassID = 99,
  QQQQPR_with_dsub_4_in_DPR_8RegClassID = 100,
  QQQQPR_with_dsub_6_in_DPR_8RegClassID = 101
  };
}

// Subregister indices
namespace ARM {
enum {
  NoSubRegister,
  dsub_0,	// 1
  dsub_1,	// 2
  dsub_2,	// 3
  dsub_3,	// 4
  dsub_4,	// 5
  dsub_5,	// 6
  dsub_6,	// 7
  dsub_7,	// 8
  gsub_0,	// 9
  gsub_1,	// 10
  qqsub_0,	// 11
  qqsub_1,	// 12
  qsub_0,	// 13
  qsub_1,	// 14
  qsub_2,	// 15
  qsub_3,	// 16
  ssub_0,	// 17
  ssub_1,	// 18
  ssub_2,	// 19
  ssub_3,	// 20
  dsub_2_then_ssub_0,	// 21
  dsub_2_then_ssub_1,	// 22
  dsub_3_then_ssub_0,	// 23
  dsub_3_then_ssub_1,	// 24
  dsub_7_then_ssub_0,	// 25
  dsub_7_then_ssub_1,	// 26
  dsub_6_then_ssub_0,	// 27
  dsub_6_then_ssub_1,	// 28
  dsub_5_then_ssub_0,	// 29
  dsub_5_then_ssub_1,	// 30
  dsub_4_then_ssub_0,	// 31
  dsub_4_then_ssub_1,	// 32
  dsub_0_dsub_2,	// 33
  dsub_0_dsub_1_dsub_2,	// 34
  dsub_1_dsub_3,	// 35
  dsub_1_dsub_2_dsub_3,	// 36
  dsub_1_dsub_2,	// 37
  dsub_0_dsub_2_dsub_4,	// 38
  dsub_0_dsub_2_dsub_4_dsub_6,	// 39
  dsub_1_dsub_3_dsub_5,	// 40
  dsub_1_dsub_3_dsub_5_dsub_7,	// 41
  dsub_1_dsub_2_dsub_3_dsub_4,	// 42
  dsub_2_dsub_4,	// 43
  dsub_2_dsub_3_dsub_4,	// 44
  dsub_2_dsub_4_dsub_6,	// 45
  dsub_3_dsub_5,	// 46
  dsub_3_dsub_4_dsub_5,	// 47
  dsub_3_dsub_5_dsub_7,	// 48
  dsub_3_dsub_4,	// 49
  dsub_3_dsub_4_dsub_5_dsub_6,	// 50
  dsub_4_dsub_6,	// 51
  dsub_4_dsub_5_dsub_6,	// 52
  dsub_5_dsub_7,	// 53
  dsub_5_dsub_6_dsub_7,	// 54
  dsub_5_dsub_6,	// 55
  qsub_1_qsub_2,	// 56
  NUM_TARGET_SUBREGS
};
}
} // End llvm namespace 
#endif // GET_REGINFO_ENUM

/*===- TableGen'erated file -------------------------------------*- C++ -*-===*\
|*                                                                            *|
|*MC Register Information                                                     *|
|*                                                                            *|
|* Automatically generated file, do not edit!                                 *|
|*                                                                            *|
\*===----------------------------------------------------------------------===*/


#ifdef GET_REGINFO_MC_DESC
#undef GET_REGINFO_MC_DESC
namespace llvm {

extern const MCPhysReg ARMRegDiffLists[] = {
  /* 0 */ 64928, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0,
  /* 17 */ 32, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0,
  /* 32 */ 36, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0,
  /* 45 */ 40, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0,
  /* 56 */ 64454, 1, 1, 1, 1, 1, 1, 1, 0,
  /* 65 */ 64988, 1, 1, 1, 1, 1, 1, 1, 0,
  /* 74 */ 65254, 1, 1, 1, 1, 1, 1, 1, 0,
  /* 83 */ 38, 1, 1, 1, 1, 1, 1, 0,
  /* 91 */ 40, 1, 1, 1, 1, 1, 0,
  /* 98 */ 65198, 1, 1, 1, 1, 1, 0,
  /* 105 */ 40, 1, 1, 1, 1, 0,
  /* 111 */ 42, 1, 1, 1, 1, 0,
  /* 117 */ 42, 1, 1, 1, 0,
  /* 122 */ 64514, 1, 1, 1, 0,
  /* 127 */ 65017, 1, 1, 1, 0,
  /* 132 */ 65284, 1, 1, 1, 0,
  /* 137 */ 65352, 1, 1, 1, 0,
  /* 142 */ 13, 1, 1, 0,
  /* 146 */ 42, 1, 1, 0,
  /* 150 */ 65389, 1, 1, 0,
  /* 154 */ 137, 65489, 48, 65489, 12, 121, 65416, 1, 1, 0,
  /* 164 */ 136, 65490, 47, 65490, 12, 121, 65416, 1, 1, 0,
  /* 174 */ 135, 65491, 46, 65491, 12, 121, 65416, 1, 1, 0,
  /* 184 */ 134, 65492, 45, 65492, 12, 121, 65416, 1, 1, 0,
  /* 194 */ 133, 65493, 44, 65493, 12, 121, 65416, 1, 1, 0,
  /* 204 */ 132, 65494, 43, 65494, 12, 121, 65416, 1, 1, 0,
  /* 214 */ 131, 65495, 42, 65495, 12, 121, 65416, 1, 1, 0,
  /* 224 */ 130, 65496, 41, 65496, 12, 121, 65416, 1, 1, 0,
  /* 234 */ 129, 65497, 40, 65497, 12, 121, 65416, 1, 1, 0,
  /* 244 */ 128, 65498, 39, 65498, 12, 121, 65416, 1, 1, 0,
  /* 254 */ 65489, 133, 65416, 1, 1, 0,
  /* 260 */ 65490, 133, 65416, 1, 1, 0,
  /* 266 */ 65491, 133, 65416, 1, 1, 0,
  /* 272 */ 65492, 133, 65416, 1, 1, 0,
  /* 278 */ 65493, 133, 65416, 1, 1, 0,
  /* 284 */ 65494, 133, 65416, 1, 1, 0,
  /* 290 */ 65495, 133, 65416, 1, 1, 0,
  /* 296 */ 65496, 133, 65416, 1, 1, 0,
  /* 302 */ 65497, 133, 65416, 1, 1, 0,
  /* 308 */ 65498, 133, 65416, 1, 1, 0,
  /* 314 */ 127, 65499, 38, 65499, 133, 65416, 1, 1, 0,
  /* 323 */ 65082, 1, 3, 1, 3, 1, 3, 1, 0,
  /* 332 */ 65138, 1, 3, 1, 3, 1, 0,
  /* 339 */ 65328, 1, 3, 1, 0,
  /* 344 */ 13, 1, 0,
  /* 347 */ 14, 1, 0,
  /* 350 */ 64, 1, 0,
  /* 353 */ 65501, 64, 1, 65472, 65, 1, 0,
  /* 360 */ 65292, 65, 1, 65471, 66, 1, 0,
  /* 367 */ 65440, 64, 1, 65473, 66, 1, 0,
  /* 374 */ 65502, 66, 1, 65470, 67, 1, 0,
  /* 381 */ 65440, 65, 1, 65472, 67, 1, 0,
  /* 388 */ 65293, 67, 1, 65469, 68, 1, 0,
  /* 395 */ 65440, 66, 1, 65471, 68, 1, 0,
  /* 402 */ 65503, 68, 1, 65468, 69, 1, 0,
  /* 409 */ 65440, 67, 1, 65470, 69, 1, 0,
  /* 416 */ 65294, 69, 1, 65467, 70, 1, 0,
  /* 423 */ 65440, 68, 1, 65469, 70, 1, 0,
  /* 430 */ 65504, 70, 1, 65466, 71, 1, 0,
  /* 437 */ 65440, 69, 1, 65468, 71, 1, 0,
  /* 444 */ 65295, 71, 1, 65465, 72, 1, 0,
  /* 451 */ 65440, 70, 1, 65467, 72, 1, 0,
  /* 458 */ 65505, 72, 1, 65464, 73, 1, 0,
  /* 465 */ 65440, 71, 1, 65466, 73, 1, 0,
  /* 472 */ 65296, 73, 1, 65463, 74, 1, 0,
  /* 479 */ 65440, 72, 1, 65465, 74, 1, 0,
  /* 486 */ 65506, 74, 1, 65462, 75, 1, 0,
  /* 493 */ 65440, 73, 1, 65464, 75, 1, 0,
  /* 500 */ 65297, 75, 1, 65461, 76, 1, 0,
  /* 507 */ 65440, 74, 1, 65463, 76, 1, 0,
  /* 514 */ 65507, 76, 1, 65460, 77, 1, 0,
  /* 521 */ 65440, 75, 1, 65462, 77, 1, 0,
  /* 528 */ 65298, 77, 1, 65459, 78, 1, 0,
  /* 535 */ 65440, 76, 1, 65461, 78, 1, 0,
  /* 542 */ 65508, 78, 1, 65458, 79, 1, 0,
  /* 549 */ 65440, 77, 1, 65460, 79, 1, 0,
  /* 556 */ 65047, 1, 0,
  /* 559 */ 65261, 1, 0,
  /* 562 */ 65300, 1, 0,
  /* 565 */ 65301, 1, 0,
  /* 568 */ 65302, 1, 0,
  /* 571 */ 65303, 1, 0,
  /* 574 */ 65304, 1, 0,
  /* 577 */ 65305, 1, 0,
  /* 580 */ 65306, 1, 0,
  /* 583 */ 65453, 1, 65499, 133, 1, 65416, 1, 0,
  /* 591 */ 138, 65488, 49, 65488, 12, 121, 65416, 1, 0,
  /* 600 */ 65488, 13, 121, 65416, 1, 0,
  /* 606 */ 65489, 13, 121, 65416, 1, 0,
  /* 612 */ 65490, 13, 121, 65416, 1, 0,
  /* 618 */ 65491, 13, 121, 65416, 1, 0,
  /* 624 */ 65492, 13, 121, 65416, 1, 0,
  /* 630 */ 65493, 13, 121, 65416, 1, 0,
  /* 636 */ 65494, 13, 121, 65416, 1, 0,
  /* 642 */ 65495, 13, 121, 65416, 1, 0,
  /* 648 */ 65496, 13, 121, 65416, 1, 0,
  /* 654 */ 65497, 13, 121, 65416, 1, 0,
  /* 660 */ 65498, 13, 121, 65416, 1, 0,
  /* 666 */ 65464, 1, 65488, 133, 65416, 121, 65416, 1, 0,
  /* 675 */ 65463, 1, 65489, 133, 65416, 121, 65416, 1, 0,
  /* 684 */ 65462, 1, 65490, 133, 65416, 121, 65416, 1, 0,
  /* 693 */ 65461, 1, 65491, 133, 65416, 121, 65416, 1, 0,
  /* 702 */ 65460, 1, 65492, 133, 65416, 121, 65416, 1, 0,
  /* 711 */ 65459, 1, 65493, 133, 65416, 121, 65416, 1, 0,
  /* 720 */ 65458, 1, 65494, 133, 65416, 121, 65416, 1, 0,
  /* 729 */ 65457, 1, 65495, 133, 65416, 121, 65416, 1, 0,
  /* 738 */ 65456, 1, 65496, 133, 65416, 121, 65416, 1, 0,
  /* 747 */ 65455, 1, 65497, 133, 65416, 121, 65416, 1, 0,
  /* 756 */ 65454, 1, 65498, 133, 65416, 121, 65416, 1, 0,
  /* 765 */ 65488, 133, 65416, 1, 0,
  /* 770 */ 65499, 134, 65416, 1, 0,
  /* 775 */ 126, 65500, 37, 65500, 133, 65417, 1, 0,
  /* 783 */ 65432, 1, 0,
  /* 786 */ 65433, 1, 0,
  /* 789 */ 65434, 1, 0,
  /* 792 */ 65435, 1, 0,
  /* 795 */ 65436, 1, 0,
  /* 798 */ 65437, 1, 0,
  /* 801 */ 65466, 1, 0,
  /* 804 */ 65509, 1, 0,
  /* 807 */ 65510, 1, 0,
  /* 810 */ 65511, 1, 0,
  /* 813 */ 65512, 1, 0,
  /* 816 */ 65513, 1, 0,
  /* 819 */ 65514, 1, 0,
  /* 822 */ 65515, 1, 0,
  /* 825 */ 65516, 1, 0,
  /* 828 */ 65520, 1, 0,
  /* 831 */ 65082, 1, 3, 1, 3, 1, 2, 0,
  /* 839 */ 65138, 1, 3, 1, 2, 0,
  /* 845 */ 65328, 1, 2, 0,
  /* 849 */ 65082, 1, 3, 1, 2, 2, 0,
  /* 856 */ 65138, 1, 2, 2, 0,
  /* 861 */ 65082, 1, 2, 2, 2, 0,
  /* 867 */ 65331, 2, 2, 2, 0,
  /* 872 */ 65082, 1, 3, 2, 2, 0,
  /* 878 */ 65359, 2, 2, 0,
  /* 882 */ 65082, 1, 3, 1, 3, 2, 0,
  /* 889 */ 65138, 1, 3, 2, 0,
  /* 894 */ 65345, 75, 1, 65462, 77, 1, 65460, 79, 1, 12, 2, 0,
  /* 906 */ 65345, 74, 1, 65463, 76, 1, 65461, 78, 1, 13, 2, 0,
  /* 918 */ 65345, 73, 1, 65464, 75, 1, 65462, 77, 1, 14, 2, 0,
  /* 930 */ 65345, 72, 1, 65465, 74, 1, 65463, 76, 1, 15, 2, 0,
  /* 942 */ 65345, 71, 1, 65466, 73, 1, 65464, 75, 1, 16, 2, 0,
  /* 954 */ 65345, 70, 1, 65467, 72, 1, 65465, 74, 1, 17, 2, 0,
  /* 966 */ 65345, 69, 1, 65468, 71, 1, 65466, 73, 1, 18, 2, 0,
  /* 978 */ 65345, 68, 1, 65469, 70, 1, 65467, 72, 1, 19, 2, 0,
  /* 990 */ 65345, 67, 1, 65470, 69, 1, 65468, 71, 1, 20, 2, 0,
  /* 1002 */ 65345, 66, 1, 65471, 68, 1, 65469, 70, 1, 21, 2, 0,
  /* 1014 */ 65345, 65, 1, 65472, 67, 1, 65470, 69, 1, 22, 2, 0,
  /* 1026 */ 65345, 64, 1, 65473, 66, 1, 65471, 68, 1, 23, 2, 0,
  /* 1038 */ 65345, 2, 2, 92, 2, 0,
  /* 1044 */ 65345, 79, 1, 65458, 2, 92, 2, 0,
  /* 1052 */ 65345, 78, 1, 65459, 2, 92, 2, 0,
  /* 1060 */ 65345, 77, 1, 65460, 79, 1, 65458, 92, 2, 0,
  /* 1070 */ 65345, 76, 1, 65461, 78, 1, 65459, 92, 2, 0,
  /* 1080 */ 65440, 2, 0,
  /* 1083 */ 65454, 2, 0,
  /* 1086 */ 65082, 1, 3, 1, 3, 1, 3, 0,
  /* 1094 */ 65138, 1, 3, 1, 3, 0,
  /* 1100 */ 65328, 1, 3, 0,
  /* 1104 */ 5, 0,
  /* 1106 */ 140, 65486, 13, 0,
  /* 1110 */ 14, 0,
  /* 1112 */ 126, 65501, 15, 0,
  /* 1116 */ 10, 65, 0,
  /* 1119 */ 65445, 65515, 1, 21, 65516, 1, 93, 65, 65472, 65, 69, 0,
  /* 1131 */ 65445, 65514, 1, 22, 65515, 1, 93, 65, 65472, 65, 70, 0,
  /* 1143 */ 65445, 65513, 1, 23, 65514, 1, 93, 65, 65472, 65, 71, 0,
  /* 1155 */ 65445, 65512, 1, 24, 65513, 1, 93, 65, 65472, 65, 72, 0,
  /* 1167 */ 65445, 65511, 1, 25, 65512, 1, 93, 65, 65472, 65, 73, 0,
  /* 1179 */ 65445, 65510, 1, 26, 65511, 1, 93, 65, 65472, 65, 74, 0,
  /* 1191 */ 65445, 65509, 1, 27, 65510, 1, 93, 65, 65472, 65, 75, 0,
  /* 1203 */ 65445, 65508, 78, 1, 65458, 79, 1, 65484, 65509, 1, 93, 65, 65472, 65, 76, 0,
  /* 1219 */ 65445, 65507, 76, 1, 65460, 77, 1, 65487, 65508, 78, 1, 65458, 79, 1, 13, 65, 65472, 65, 77, 0,
  /* 1239 */ 65445, 65506, 74, 1, 65462, 75, 1, 65490, 65507, 76, 1, 65460, 77, 1, 15, 65, 65472, 65, 78, 0,
  /* 1259 */ 65445, 65505, 72, 1, 65464, 73, 1, 65493, 65506, 74, 1, 65462, 75, 1, 17, 65, 65472, 65, 79, 0,
  /* 1279 */ 65445, 65504, 70, 1, 65466, 71, 1, 65496, 65505, 72, 1, 65464, 73, 1, 19, 65, 65472, 65, 80, 0,
  /* 1299 */ 65445, 65503, 68, 1, 65468, 69, 1, 65499, 65504, 70, 1, 65466, 71, 1, 21, 65, 65472, 65, 81, 0,
  /* 1319 */ 65445, 65502, 66, 1, 65470, 67, 1, 65502, 65503, 68, 1, 65468, 69, 1, 23, 65, 65472, 65, 82, 0,
  /* 1339 */ 65445, 65501, 64, 1, 65472, 65, 1, 65505, 65502, 66, 1, 65470, 67, 1, 25, 65, 65472, 65, 83, 0,
  /* 1359 */ 91, 0,
  /* 1361 */ 98, 0,
  /* 1363 */ 99, 0,
  /* 1365 */ 100, 0,
  /* 1367 */ 101, 0,
  /* 1369 */ 102, 0,
  /* 1371 */ 103, 0,
  /* 1373 */ 104, 0,
  /* 1375 */ 65375, 1, 1, 19, 75, 135, 0,
  /* 1382 */ 65375, 1, 1, 20, 74, 136, 0,
  /* 1389 */ 65375, 1, 1, 21, 73, 137, 0,
  /* 1396 */ 65375, 1, 1, 22, 72, 138, 0,
  /* 1403 */ 65375, 1, 1, 23, 71, 139, 0,
  /* 1410 */ 65375, 1, 1, 24, 70, 140, 0,
  /* 1417 */ 65375, 1, 1, 25, 69, 141, 0,
  /* 1424 */ 65375, 78, 1, 65458, 79, 1, 65457, 26, 68, 142, 0,
  /* 1435 */ 65375, 76, 1, 65460, 77, 1, 65459, 78, 1, 65484, 67, 143, 0,
  /* 1448 */ 65375, 74, 1, 65462, 75, 1, 65461, 76, 1, 65487, 66, 144, 0,
  /* 1461 */ 65375, 72, 1, 65464, 73, 1, 65463, 74, 1, 65490, 65, 145, 0,
  /* 1474 */ 65375, 70, 1, 65466, 71, 1, 65465, 72, 1, 65493, 64, 146, 0,
  /* 1487 */ 65375, 68, 1, 65468, 69, 1, 65467, 70, 1, 65496, 63, 147, 0,
  /* 1500 */ 65375, 66, 1, 65470, 67, 1, 65469, 68, 1, 65499, 62, 148, 0,
  /* 1513 */ 65375, 64, 1, 65472, 65, 1, 65471, 66, 1, 65502, 61, 149, 0,
  /* 1526 */ 156, 0,
  /* 1528 */ 65290, 1, 1, 1, 228, 1, 65400, 65, 65472, 65, 65396, 0,
  /* 1540 */ 65289, 1, 1, 1, 229, 1, 65399, 65, 65472, 65, 65397, 0,
  /* 1552 */ 65288, 1, 1, 1, 230, 1, 65398, 65, 65472, 65, 65398, 0,
  /* 1564 */ 65287, 1, 1, 1, 231, 1, 65397, 65, 65472, 65, 65399, 0,
  /* 1576 */ 65286, 1, 1, 1, 232, 1, 65396, 65, 65472, 65, 65400, 0,
  /* 1588 */ 65285, 1, 1, 1, 233, 1, 65395, 65, 65472, 65, 65401, 0,
  /* 1600 */ 65521, 65445, 65513, 1, 23, 65514, 1, 93, 65, 65472, 65, 71, 65419, 65445, 65515, 1, 21, 65516, 1, 93, 65, 65472, 65, 69, 65492, 28, 65509, 28, 28, 65386, 65, 30, 65442, 65, 30, 40, 15, 65402, 0,
  /* 1639 */ 65521, 65445, 65512, 1, 24, 65513, 1, 93, 65, 65472, 65, 72, 65419, 65445, 65514, 1, 22, 65515, 1, 93, 65, 65472, 65, 70, 65491, 28, 65509, 28, 29, 65385, 65, 30, 65442, 65, 30, 41, 15, 65402, 0,
  /* 1678 */ 65521, 65445, 65511, 1, 25, 65512, 1, 93, 65, 65472, 65, 73, 65419, 65445, 65513, 1, 23, 65514, 1, 93, 65, 65472, 65, 71, 65490, 28, 65509, 28, 30, 65384, 65, 30, 65442, 65, 30, 42, 15, 65402, 0,
  /* 1717 */ 65521, 65445, 65510, 1, 26, 65511, 1, 93, 65, 65472, 65, 74, 65419, 65445, 65512, 1, 24, 65513, 1, 93, 65, 65472, 65, 72, 65489, 28, 65509, 28, 31, 65383, 65, 30, 65442, 65, 30, 43, 15, 65402, 0,
  /* 1756 */ 65521, 65445, 65509, 1, 27, 65510, 1, 93, 65, 65472, 65, 75, 65419, 65445, 65511, 1, 25, 65512, 1, 93, 65, 65472, 65, 73, 65488, 28, 65509, 28, 32, 65382, 65, 30, 65442, 65, 30, 44, 15, 65402, 0,
  /* 1795 */ 65521, 65445, 65508, 78, 1, 65458, 79, 1, 65484, 65509, 1, 93, 65, 65472, 65, 76, 65419, 65445, 65510, 1, 26, 65511, 1, 93, 65, 65472, 65, 74, 65487, 28, 65509, 28, 33, 65381, 65, 30, 65442, 65, 30, 45, 15, 65402, 0,
  /* 1838 */ 65521, 65445, 65507, 76, 1, 65460, 77, 1, 65487, 65508, 78, 1, 65458, 79, 1, 13, 65, 65472, 65, 77, 65419, 65445, 65509, 1, 27, 65510, 1, 93, 65, 65472, 65, 75, 65486, 28, 65509, 28, 34, 65380, 65, 30, 65442, 65, 30, 46, 15, 65402, 0,
  /* 1885 */ 65521, 65445, 65506, 74, 1, 65462, 75, 1, 65490, 65507, 76, 1, 65460, 77, 1, 15, 65, 65472, 65, 78, 65419, 65445, 65508, 78, 1, 65458, 79, 1, 65484, 65509, 1, 93, 65, 65472, 65, 76, 65485, 28, 65509, 28, 35, 65379, 65, 30, 65442, 65, 30, 47, 15, 65402, 0,
  /* 1936 */ 65521, 65445, 65505, 72, 1, 65464, 73, 1, 65493, 65506, 74, 1, 65462, 75, 1, 17, 65, 65472, 65, 79, 65419, 65445, 65507, 76, 1, 65460, 77, 1, 65487, 65508, 78, 1, 65458, 79, 1, 13, 65, 65472, 65, 77, 65484, 28, 65509, 28, 36, 65378, 65, 30, 65442, 65, 30, 48, 15, 65402, 0,
  /* 1991 */ 65521, 65445, 65504, 70, 1, 65466, 71, 1, 65496, 65505, 72, 1, 65464, 73, 1, 19, 65, 65472, 65, 80, 65419, 65445, 65506, 74, 1, 65462, 75, 1, 65490, 65507, 76, 1, 65460, 77, 1, 15, 65, 65472, 65, 78, 65483, 28, 65509, 28, 37, 65377, 65, 30, 65442, 65, 30, 49, 15, 65402, 0,
  /* 2046 */ 65521, 65445, 65503, 68, 1, 65468, 69, 1, 65499, 65504, 70, 1, 65466, 71, 1, 21, 65, 65472, 65, 81, 65419, 65445, 65505, 72, 1, 65464, 73, 1, 65493, 65506, 74, 1, 65462, 75, 1, 17, 65, 65472, 65, 79, 65482, 28, 65509, 28, 38, 65376, 65, 30, 65442, 65, 30, 50, 15, 65402, 0,
  /* 2101 */ 65521, 65445, 65502, 66, 1, 65470, 67, 1, 65502, 65503, 68, 1, 65468, 69, 1, 23, 65, 65472, 65, 82, 65419, 65445, 65504, 70, 1, 65466, 71, 1, 65496, 65505, 72, 1, 65464, 73, 1, 19, 65, 65472, 65, 80, 65481, 28, 65509, 28, 39, 65375, 65, 30, 65442, 65, 30, 51, 15, 65402, 0,
  /* 2156 */ 65521, 65445, 65501, 64, 1, 65472, 65, 1, 65505, 65502, 66, 1, 65470, 67, 1, 25, 65, 65472, 65, 83, 65419, 65445, 65503, 68, 1, 65468, 69, 1, 65499, 65504, 70, 1, 65466, 71, 1, 21, 65, 65472, 65, 81, 65480, 28, 65509, 28, 40, 65374, 65, 30, 65442, 65, 30, 52, 15, 65402, 0,
  /* 2211 */ 65284, 79, 1, 65457, 1, 1, 234, 1, 65394, 65, 65472, 65, 65402, 0,
  /* 2225 */ 65283, 77, 1, 65459, 78, 1, 65458, 79, 1, 65457, 235, 1, 65393, 65, 65472, 65, 65403, 0,
  /* 2243 */ 65282, 75, 1, 65461, 76, 1, 65460, 77, 1, 65459, 78, 1, 157, 1, 65392, 65, 65472, 65, 65404, 0,
  /* 2263 */ 65281, 73, 1, 65463, 74, 1, 65462, 75, 1, 65461, 76, 1, 160, 1, 65391, 65, 65472, 65, 65405, 0,
  /* 2283 */ 65280, 71, 1, 65465, 72, 1, 65464, 73, 1, 65463, 74, 1, 163, 1, 65390, 65, 65472, 65, 65406, 0,
  /* 2303 */ 65279, 69, 1, 65467, 70, 1, 65466, 71, 1, 65465, 72, 1, 166, 1, 65389, 65, 65472, 65, 65407, 0,
  /* 2323 */ 65278, 67, 1, 65469, 68, 1, 65468, 69, 1, 65467, 70, 1, 169, 1, 65388, 65, 65472, 65, 65408, 0,
  /* 2343 */ 65277, 65, 1, 65471, 66, 1, 65470, 67, 1, 65469, 68, 1, 172, 1, 65387, 65, 65472, 65, 65409, 0,
  /* 2363 */ 21, 73, 2, 63, 65488, 120, 65465, 1, 65487, 75, 26, 65447, 65, 26, 30, 65416, 66, 26, 29, 65416, 0,
  /* 2384 */ 20, 74, 2, 63, 65487, 120, 65466, 1, 65486, 76, 26, 65446, 66, 26, 29, 65416, 0,
  /* 2401 */ 65, 65487, 77, 26, 65446, 66, 26, 29, 65416, 0,
  /* 2411 */ 21, 73, 2, 134, 65465, 1, 65487, 50, 65487, 75, 26, 31, 65416, 65, 26, 30, 65416, 0,
  /* 2429 */ 20, 74, 135, 65466, 1, 65486, 77, 26, 30, 65416, 0,
  /* 2440 */ 65, 65487, 77, 26, 30, 65416, 0,
  /* 2447 */ 139, 65487, 50, 65487, 12, 121, 65416, 0,
  /* 2455 */ 65487, 13, 121, 65416, 0,
  /* 2460 */ 65465, 1, 65487, 133, 65416, 121, 65416, 0,
  /* 2468 */ 65466, 1, 65486, 133, 65416, 0,
  /* 2474 */ 65487, 133, 65416, 0,
  /* 2478 */ 65470, 34, 62, 148, 65452, 1, 65500, 66, 28, 40, 65417, 0,
  /* 2490 */ 65471, 34, 62, 148, 65452, 1, 65500, 66, 28, 40, 65417, 0,
  /* 2502 */ 65, 65500, 66, 28, 40, 65417, 0,
  /* 2509 */ 65452, 1, 65500, 134, 65417, 0,
  /* 2515 */ 65317, 73, 1, 65464, 75, 1, 65462, 77, 1, 65460, 79, 1, 10, 95, 65443, 95, 65443, 0,
  /* 2533 */ 65317, 72, 1, 65465, 74, 1, 65463, 76, 1, 65461, 78, 1, 11, 95, 65443, 95, 65443, 0,
  /* 2551 */ 65317, 71, 1, 65466, 73, 1, 65464, 75, 1, 65462, 77, 1, 12, 95, 65443, 95, 65443, 0,
  /* 2569 */ 65317, 70, 1, 65467, 72, 1, 65465, 74, 1, 65463, 76, 1, 13, 95, 65443, 95, 65443, 0,
  /* 2587 */ 65317, 69, 1, 65468, 71, 1, 65466, 73, 1, 65464, 75, 1, 14, 95, 65443, 95, 65443, 0,
  /* 2605 */ 65317, 68, 1, 65469, 70, 1, 65467, 72, 1, 65465, 74, 1, 15, 95, 65443, 95, 65443, 0,
  /* 2623 */ 65317, 67, 1, 65470, 69, 1, 65468, 71, 1, 65466, 73, 1, 16, 95, 65443, 95, 65443, 0,
  /* 2641 */ 65317, 66, 1, 65471, 68, 1, 65469, 70, 1, 65467, 72, 1, 17, 95, 65443, 95, 65443, 0,
  /* 2659 */ 65317, 65, 1, 65472, 67, 1, 65470, 69, 1, 65468, 71, 1, 18, 95, 65443, 95, 65443, 0,
  /* 2677 */ 65317, 64, 1, 65473, 66, 1, 65471, 68, 1, 65469, 70, 1, 19, 95, 65443, 95, 65443, 0,
  /* 2695 */ 65317, 2, 2, 2, 90, 95, 65443, 95, 65443, 0,
  /* 2705 */ 65317, 79, 1, 65458, 2, 2, 90, 95, 65443, 95, 65443, 0,
  /* 2717 */ 65317, 78, 1, 65459, 2, 2, 90, 95, 65443, 95, 65443, 0,
  /* 2729 */ 65317, 77, 1, 65460, 79, 1, 65458, 2, 90, 95, 65443, 95, 65443, 0,
  /* 2743 */ 65317, 76, 1, 65461, 78, 1, 65459, 2, 90, 95, 65443, 95, 65443, 0,
  /* 2757 */ 65317, 75, 1, 65462, 77, 1, 65460, 79, 1, 65458, 90, 95, 65443, 95, 65443, 0,
  /* 2773 */ 65317, 74, 1, 65463, 76, 1, 65461, 78, 1, 65459, 90, 95, 65443, 95, 65443, 0,
  /* 2789 */ 19, 75, 65, 65486, 78, 26, 65445, 0,
  /* 2797 */ 22, 72, 2, 63, 65489, 120, 65464, 1, 65488, 74, 26, 65448, 64, 26, 31, 65416, 65, 26, 30, 65416, 92, 65445, 0,
  /* 2820 */ 65, 65488, 76, 26, 65447, 65, 26, 30, 65416, 92, 65445, 0,
  /* 2832 */ 26, 65446, 92, 65445, 0,
  /* 2837 */ 22, 72, 2, 135, 65464, 1, 65488, 49, 65488, 74, 26, 32, 65416, 64, 26, 31, 65416, 65, 26, 65446, 0,
  /* 2858 */ 65, 65488, 76, 26, 31, 65416, 65, 26, 65446, 0,
  /* 2868 */ 23, 71, 2, 63, 65490, 120, 65463, 1, 65489, 73, 26, 65449, 63, 26, 32, 65416, 64, 26, 31, 65416, 91, 65446, 0,
  /* 2891 */ 65, 65489, 75, 26, 65448, 64, 26, 31, 65416, 91, 65446, 0,
  /* 2903 */ 23, 71, 2, 136, 65463, 1, 65489, 48, 65489, 73, 26, 33, 65416, 63, 26, 32, 65416, 64, 26, 65447, 91, 65446, 0,
  /* 2926 */ 65, 65489, 75, 26, 32, 65416, 64, 26, 65447, 91, 65446, 0,
  /* 2938 */ 24, 70, 2, 63, 65491, 120, 65462, 1, 65490, 72, 26, 65450, 62, 26, 33, 65416, 63, 26, 32, 65416, 90, 65447, 0,
  /* 2961 */ 65, 65490, 74, 26, 65449, 63, 26, 32, 65416, 90, 65447, 0,
  /* 2973 */ 24, 70, 2, 137, 65462, 1, 65490, 47, 65490, 72, 26, 34, 65416, 62, 26, 33, 65416, 63, 26, 65448, 90, 65447, 0,
  /* 2996 */ 65, 65490, 74, 26, 33, 65416, 63, 26, 65448, 90, 65447, 0,
  /* 3008 */ 25, 69, 2, 63, 65492, 120, 65461, 1, 65491, 71, 26, 65451, 61, 26, 34, 65416, 62, 26, 33, 65416, 89, 65448, 0,
  /* 3031 */ 65, 65491, 73, 26, 65450, 62, 26, 33, 65416, 89, 65448, 0,
  /* 3043 */ 25, 69, 2, 138, 65461, 1, 65491, 46, 65491, 71, 26, 35, 65416, 61, 26, 34, 65416, 62, 26, 65449, 89, 65448, 0,
  /* 3066 */ 65, 65491, 73, 26, 34, 65416, 62, 26, 65449, 89, 65448, 0,
  /* 3078 */ 26, 68, 2, 63, 65493, 120, 65460, 1, 65492, 70, 26, 65452, 60, 26, 35, 65416, 61, 26, 34, 65416, 88, 65449, 0,
  /* 3101 */ 65, 65492, 72, 26, 65451, 61, 26, 34, 65416, 88, 65449, 0,
  /* 3113 */ 26, 68, 2, 139, 65460, 1, 65492, 45, 65492, 70, 26, 36, 65416, 60, 26, 35, 65416, 61, 26, 65450, 88, 65449, 0,
  /* 3136 */ 65, 65492, 72, 26, 35, 65416, 61, 26, 65450, 88, 65449, 0,
  /* 3148 */ 65456, 27, 67, 2, 63, 65494, 120, 65459, 1, 65493, 69, 26, 65453, 59, 26, 36, 65416, 60, 26, 35, 65416, 87, 65450, 0,
  /* 3172 */ 65457, 27, 67, 2, 63, 65494, 120, 65459, 1, 65493, 69, 26, 65453, 59, 26, 36, 65416, 60, 26, 35, 65416, 87, 65450, 0,
  /* 3196 */ 65, 65493, 71, 26, 65452, 60, 26, 35, 65416, 87, 65450, 0,
  /* 3208 */ 27, 67, 2, 140, 65459, 1, 65493, 44, 65493, 69, 26, 37, 65416, 59, 26, 36, 65416, 60, 26, 65451, 87, 65450, 0,
  /* 3231 */ 65, 65493, 71, 26, 36, 65416, 60, 26, 65451, 87, 65450, 0,
  /* 3243 */ 65458, 28, 66, 2, 63, 65495, 120, 65458, 1, 65494, 68, 26, 65454, 58, 26, 37, 65416, 59, 26, 36, 65416, 86, 65451, 0,
  /* 3267 */ 65459, 28, 66, 2, 63, 65495, 120, 65458, 1, 65494, 68, 26, 65454, 58, 26, 37, 65416, 59, 26, 36, 65416, 86, 65451, 0,
  /* 3291 */ 65, 65494, 70, 26, 65453, 59, 26, 36, 65416, 86, 65451, 0,
  /* 3303 */ 65457, 28, 66, 2, 141, 65458, 1, 65494, 43, 65494, 68, 26, 38, 65416, 58, 26, 37, 65416, 59, 26, 65452, 86, 65451, 0,
  /* 3327 */ 65458, 28, 66, 2, 141, 65458, 1, 65494, 43, 65494, 68, 26, 38, 65416, 58, 26, 37, 65416, 59, 26, 65452, 86, 65451, 0,
  /* 3351 */ 65, 65494, 70, 26, 37, 65416, 59, 26, 65452, 86, 65451, 0,
  /* 3363 */ 65460, 29, 65, 2, 63, 65496, 120, 65457, 1, 65495, 67, 26, 65455, 57, 26, 38, 65416, 58, 26, 37, 65416, 85, 65452, 0,
  /* 3387 */ 65461, 29, 65, 2, 63, 65496, 120, 65457, 1, 65495, 67, 26, 65455, 57, 26, 38, 65416, 58, 26, 37, 65416, 85, 65452, 0,
  /* 3411 */ 65, 65495, 69, 26, 65454, 58, 26, 37, 65416, 85, 65452, 0,
  /* 3423 */ 65459, 29, 65, 2, 142, 65457, 1, 65495, 42, 65495, 67, 26, 39, 65416, 57, 26, 38, 65416, 58, 26, 65453, 85, 65452, 0,
  /* 3447 */ 65460, 29, 65, 2, 142, 65457, 1, 65495, 42, 65495, 67, 26, 39, 65416, 57, 26, 38, 65416, 58, 26, 65453, 85, 65452, 0,
  /* 3471 */ 65, 65495, 69, 26, 38, 65416, 58, 26, 65453, 85, 65452, 0,
  /* 3483 */ 65462, 30, 64, 2, 63, 65497, 120, 65456, 1, 65496, 66, 26, 65456, 56, 26, 39, 65416, 57, 26, 38, 65416, 84, 65453, 0,
  /* 3507 */ 65463, 30, 64, 2, 63, 65497, 120, 65456, 1, 65496, 66, 26, 65456, 56, 26, 39, 65416, 57, 26, 38, 65416, 84, 65453, 0,
  /* 3531 */ 65, 65496, 68, 26, 65455, 57, 26, 38, 65416, 84, 65453, 0,
  /* 3543 */ 65461, 30, 64, 2, 143, 65456, 1, 65496, 41, 65496, 66, 26, 40, 65416, 56, 26, 39, 65416, 57, 26, 65454, 84, 65453, 0,
  /* 3567 */ 65462, 30, 64, 2, 143, 65456, 1, 65496, 41, 65496, 66, 26, 40, 65416, 56, 26, 39, 65416, 57, 26, 65454, 84, 65453, 0,
  /* 3591 */ 65, 65496, 68, 26, 39, 65416, 57, 26, 65454, 84, 65453, 0,
  /* 3603 */ 65464, 31, 63, 2, 63, 65498, 120, 65455, 1, 65497, 65, 26, 65457, 55, 26, 40, 65416, 56, 26, 39, 65416, 83, 65454, 0,
  /* 3627 */ 65465, 31, 63, 2, 63, 65498, 120, 65455, 1, 65497, 65, 26, 65457, 55, 26, 40, 65416, 56, 26, 39, 65416, 83, 65454, 0,
  /* 3651 */ 65, 65497, 67, 26, 65456, 56, 26, 39, 65416, 83, 65454, 0,
  /* 3663 */ 65463, 31, 63, 2, 144, 65455, 1, 65497, 40, 65497, 65, 26, 41, 65416, 55, 26, 40, 65416, 56, 26, 65455, 83, 65454, 0,
  /* 3687 */ 65464, 31, 63, 2, 144, 65455, 1, 65497, 40, 65497, 65, 26, 41, 65416, 55, 26, 40, 65416, 56, 26, 65455, 83, 65454, 0,
  /* 3711 */ 65, 65497, 67, 26, 40, 65416, 56, 26, 65455, 83, 65454, 0,
  /* 3723 */ 65466, 32, 62, 2, 63, 65499, 120, 65454, 1, 65498, 64, 2, 26, 41, 65416, 55, 26, 40, 65416, 82, 65455, 0,
  /* 3745 */ 65467, 32, 62, 2, 63, 65499, 120, 65454, 1, 65498, 64, 2, 26, 41, 65416, 55, 26, 40, 65416, 82, 65455, 0,
  /* 3767 */ 65, 65498, 66, 26, 65457, 55, 26, 40, 65416, 82, 65455, 0,
  /* 3779 */ 65465, 32, 62, 2, 145, 65454, 1, 65498, 39, 65498, 64, 26, 42, 65416, 54, 26, 41, 65416, 55, 26, 65456, 82, 65455, 0,
  /* 3803 */ 65466, 32, 62, 2, 145, 65454, 1, 65498, 39, 65498, 64, 26, 42, 65416, 54, 26, 41, 65416, 55, 26, 65456, 82, 65455, 0,
  /* 3827 */ 65, 65498, 66, 26, 41, 65416, 55, 26, 65456, 82, 65455, 0,
  /* 3839 */ 65468, 33, 61, 2, 63, 65500, 120, 65453, 1, 65499, 65, 2, 26, 40, 1, 65416, 81, 65456, 0,
  /* 3858 */ 65469, 33, 61, 2, 63, 65500, 120, 65453, 1, 65499, 65, 2, 26, 40, 1, 65416, 81, 65456, 0,
  /* 3877 */ 65, 65499, 65, 2, 26, 41, 65416, 81, 65456, 0,
  /* 3887 */ 65467, 33, 61, 2, 146, 65453, 1, 65499, 38, 65499, 63, 2, 26, 41, 1, 65416, 54, 26, 65457, 81, 65456, 0,
  /* 3909 */ 65468, 33, 61, 2, 146, 65453, 1, 65499, 38, 65499, 63, 2, 26, 41, 1, 65416, 54, 26, 65457, 81, 65456, 0,
  /* 3931 */ 65, 65499, 65, 26, 42, 65416, 54, 26, 65457, 81, 65456, 0,
  /* 3943 */ 65299, 79, 1, 65457, 0,
  /* 3948 */ 28, 65457, 0,
  /* 3951 */ 65469, 34, 60, 2, 147, 65452, 1, 65500, 37, 65500, 64, 2, 26, 41, 65417, 80, 65457, 0,
  /* 3969 */ 65470, 34, 60, 2, 147, 65452, 1, 65500, 37, 65500, 64, 2, 26, 41, 65417, 80, 65457, 0,
  /* 3987 */ 65, 65500, 64, 2, 26, 41, 65417, 80, 65457, 0,
  /* 3997 */ 26, 65458, 80, 65457, 0,
  /* 4002 */ 65440, 79, 1, 65458, 0,
  /* 4007 */ 65471, 35, 61, 65, 65501, 65, 28, 65458, 0,
  /* 4016 */ 65472, 35, 61, 65, 65501, 65, 28, 65458, 0,
  /* 4025 */ 65440, 78, 1, 65459, 0,
  /* 4030 */ 65375, 1, 1, 228, 65402, 65461, 0,
  /* 4037 */ 65375, 1, 1, 229, 65401, 65462, 0,
  /* 4044 */ 65375, 1, 1, 230, 65400, 65463, 0,
  /* 4051 */ 65375, 1, 1, 231, 65399, 65464, 0,
  /* 4058 */ 65375, 1, 1, 232, 65398, 65465, 0,
  /* 4065 */ 65375, 1, 1, 233, 65397, 65466, 0,
  /* 4072 */ 65375, 1, 1, 234, 65396, 65467, 0,
  /* 4079 */ 65375, 79, 1, 65457, 1, 235, 65395, 65468, 0,
  /* 4088 */ 65375, 77, 1, 65459, 78, 1, 65458, 79, 1, 156, 65394, 65469, 0,
  /* 4101 */ 65375, 75, 1, 65461, 76, 1, 65460, 77, 1, 159, 65393, 65470, 0,
  /* 4114 */ 65375, 73, 1, 65463, 74, 1, 65462, 75, 1, 162, 65392, 65471, 0,
  /* 4127 */ 65445, 65471, 0,
  /* 4130 */ 65375, 71, 1, 65465, 72, 1, 65464, 73, 1, 165, 65391, 65472, 0,
  /* 4143 */ 65375, 69, 1, 65467, 70, 1, 65466, 71, 1, 168, 65390, 65473, 0,
  /* 4156 */ 65375, 67, 1, 65469, 68, 1, 65468, 69, 1, 171, 65389, 65474, 0,
  /* 4169 */ 65375, 65, 1, 65471, 66, 1, 65470, 67, 1, 174, 65388, 65475, 0,
  /* 4182 */ 65534, 0,
  /* 4184 */ 65535, 0,
};

extern const uint16_t ARMSubRegIdxLists[] = {
  /* 0 */ 1, 2, 0,
  /* 3 */ 1, 17, 18, 2, 0,
  /* 8 */ 1, 3, 0,
  /* 11 */ 1, 17, 18, 3, 0,
  /* 16 */ 17, 18, 0,
  /* 19 */ 9, 10, 0,
  /* 22 */ 1, 17, 18, 2, 19, 20, 0,
  /* 29 */ 1, 17, 18, 3, 21, 22, 0,
  /* 36 */ 1, 2, 3, 13, 33, 37, 0,
  /* 43 */ 1, 17, 18, 2, 3, 13, 33, 37, 0,
  /* 52 */ 1, 17, 18, 2, 19, 20, 3, 13, 33, 37, 0,
  /* 63 */ 1, 17, 18, 2, 19, 20, 3, 21, 22, 13, 33, 37, 0,
  /* 76 */ 13, 1, 2, 14, 3, 4, 33, 34, 35, 36, 37, 0,
  /* 88 */ 13, 1, 17, 18, 2, 19, 20, 14, 3, 4, 33, 34, 35, 36, 37, 0,
  /* 104 */ 1, 2, 3, 4, 13, 14, 33, 34, 35, 36, 37, 0,
  /* 116 */ 1, 17, 18, 2, 3, 4, 13, 14, 33, 34, 35, 36, 37, 0,
  /* 130 */ 1, 17, 18, 2, 19, 20, 3, 21, 22, 4, 13, 14, 33, 34, 35, 36, 37, 0,
  /* 148 */ 1, 17, 18, 2, 19, 20, 3, 21, 22, 4, 23, 24, 13, 14, 33, 34, 35, 36, 37, 0,
  /* 168 */ 13, 1, 17, 18, 2, 19, 20, 14, 3, 21, 22, 4, 23, 24, 33, 34, 35, 36, 37, 0,
  /* 188 */ 1, 3, 5, 33, 43, 0,
  /* 194 */ 1, 17, 18, 3, 5, 33, 43, 0,
  /* 202 */ 1, 17, 18, 3, 21, 22, 5, 33, 43, 0,
  /* 212 */ 1, 17, 18, 3, 21, 22, 5, 31, 32, 33, 43, 0,
  /* 224 */ 1, 3, 5, 7, 33, 38, 43, 45, 51, 0,
  /* 234 */ 1, 17, 18, 3, 5, 7, 33, 38, 43, 45, 51, 0,
  /* 246 */ 1, 17, 18, 3, 21, 22, 5, 7, 33, 38, 43, 45, 51, 0,
  /* 260 */ 1, 17, 18, 3, 21, 22, 5, 31, 32, 7, 33, 38, 43, 45, 51, 0,
  /* 276 */ 1, 17, 18, 3, 21, 22, 5, 31, 32, 7, 27, 28, 33, 38, 43, 45, 51, 0,
  /* 294 */ 11, 13, 1, 2, 14, 3, 4, 33, 34, 35, 36, 37, 12, 15, 5, 6, 16, 7, 8, 51, 52, 53, 54, 55, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 56, 0,
  /* 333 */ 11, 13, 1, 17, 18, 2, 19, 20, 14, 3, 4, 33, 34, 35, 36, 37, 12, 15, 5, 6, 16, 7, 8, 51, 52, 53, 54, 55, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 56, 0,
  /* 376 */ 11, 13, 1, 17, 18, 2, 19, 20, 14, 3, 21, 22, 4, 23, 24, 33, 34, 35, 36, 37, 12, 15, 5, 6, 16, 7, 8, 51, 52, 53, 54, 55, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 56, 0,
  /* 423 */ 11, 13, 1, 17, 18, 2, 19, 20, 14, 3, 21, 22, 4, 23, 24, 33, 34, 35, 36, 37, 12, 15, 5, 31, 32, 6, 29, 30, 16, 7, 8, 51, 52, 53, 54, 55, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 56, 0,
  /* 474 */ 11, 13, 1, 17, 18, 2, 19, 20, 14, 3, 21, 22, 4, 23, 24, 33, 34, 35, 36, 37, 12, 15, 5, 31, 32, 6, 29, 30, 16, 7, 27, 28, 8, 25, 26, 51, 52, 53, 54, 55, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 56, 0,
};

extern const MCRegisterInfo::SubRegCoveredBits ARMSubRegIdxRanges[] = {
  { 65535, 65535 },
  { 0, 64 },	// dsub_0
  { 64, 64 },	// dsub_1
  { 128, 64 },	// dsub_2
  { 192, 64 },	// dsub_3
  { 256, 64 },	// dsub_4
  { 320, 64 },	// dsub_5
  { 384, 64 },	// dsub_6
  { 448, 64 },	// dsub_7
  { 0, 32 },	// gsub_0
  { 32, 32 },	// gsub_1
  { 0, 256 },	// qqsub_0
  { 256, 256 },	// qqsub_1
  { 0, 128 },	// qsub_0
  { 128, 128 },	// qsub_1
  { 256, 128 },	// qsub_2
  { 384, 128 },	// qsub_3
  { 0, 32 },	// ssub_0
  { 32, 32 },	// ssub_1
  { 64, 32 },	// ssub_2
  { 96, 32 },	// ssub_3
  { 128, 32 },	// dsub_2_then_ssub_0
  { 160, 32 },	// dsub_2_then_ssub_1
  { 192, 32 },	// dsub_3_then_ssub_0
  { 224, 32 },	// dsub_3_then_ssub_1
  { 448, 32 },	// dsub_7_then_ssub_0
  { 480, 32 },	// dsub_7_then_ssub_1
  { 384, 32 },	// dsub_6_then_ssub_0
  { 416, 32 },	// dsub_6_then_ssub_1
  { 320, 32 },	// dsub_5_then_ssub_0
  { 352, 32 },	// dsub_5_then_ssub_1
  { 256, 32 },	// dsub_4_then_ssub_0
  { 288, 32 },	// dsub_4_then_ssub_1
  { 65535, 128 },	// dsub_0_dsub_2
  { 0, 192 },	// dsub_0_dsub_1_dsub_2
  { 65535, 128 },	// dsub_1_dsub_3
  { 64, 192 },	// dsub_1_dsub_2_dsub_3
  { 64, 128 },	// dsub_1_dsub_2
  { 65535, 192 },	// dsub_0_dsub_2_dsub_4
  { 65535, 256 },	// dsub_0_dsub_2_dsub_4_dsub_6
  { 65535, 192 },	// dsub_1_dsub_3_dsub_5
  { 65535, 256 },	// dsub_1_dsub_3_dsub_5_dsub_7
  { 64, 256 },	// dsub_1_dsub_2_dsub_3_dsub_4
  { 65535, 128 },	// dsub_2_dsub_4
  { 128, 192 },	// dsub_2_dsub_3_dsub_4
  { 65535, 192 },	// dsub_2_dsub_4_dsub_6
  { 65535, 128 },	// dsub_3_dsub_5
  { 192, 192 },	// dsub_3_dsub_4_dsub_5
  { 65535, 192 },	// dsub_3_dsub_5_dsub_7
  { 192, 128 },	// dsub_3_dsub_4
  { 192, 256 },	// dsub_3_dsub_4_dsub_5_dsub_6
  { 65535, 128 },	// dsub_4_dsub_6
  { 256, 192 },	// dsub_4_dsub_5_dsub_6
  { 65535, 128 },	// dsub_5_dsub_7
  { 320, 192 },	// dsub_5_dsub_6_dsub_7
  { 320, 128 },	// dsub_5_dsub_6
  { 128, 256 },	// qsub_1_qsub_2
};

extern const char ARMRegStrings[] = {
  /* 0 */ 'D', '4', '_', 'D', '6', '_', 'D', '8', '_', 'D', '1', '0', 0,
  /* 13 */ 'D', '7', '_', 'D', '8', '_', 'D', '9', '_', 'D', '1', '0', 0,
  /* 26 */ 'Q', '7', '_', 'Q', '8', '_', 'Q', '9', '_', 'Q', '1', '0', 0,
  /* 39 */ 'R', '1', '0', 0,
  /* 43 */ 'S', '1', '0', 0,
  /* 47 */ 'D', '1', '4', '_', 'D', '1', '6', '_', 'D', '1', '8', '_', 'D', '2', '0', 0,
  /* 63 */ 'D', '1', '7', '_', 'D', '1', '8', '_', 'D', '1', '9', '_', 'D', '2', '0', 0,
  /* 79 */ 'S', '2', '0', 0,
  /* 83 */ 'D', '2', '4', '_', 'D', '2', '6', '_', 'D', '2', '8', '_', 'D', '3', '0', 0,
  /* 99 */ 'D', '2', '7', '_', 'D', '2', '8', '_', 'D', '2', '9', '_', 'D', '3', '0', 0,
  /* 115 */ 'S', '3', '0', 0,
  /* 119 */ 'D', '0', 0,
  /* 122 */ 'Q', '0', 0,
  /* 125 */ 'M', 'V', 'F', 'R', '0', 0,
  /* 131 */ 'S', '0', 0,
  /* 134 */ 'D', '9', '_', 'D', '1', '0', '_', 'D', '1', '1', 0,
  /* 145 */ 'D', '5', '_', 'D', '7', '_', 'D', '9', '_', 'D', '1', '1', 0,
  /* 158 */ 'Q', '8', '_', 'Q', '9', '_', 'Q', '1', '0', '_', 'Q', '1', '1', 0,
  /* 172 */ 'R', '1', '0', '_', 'R', '1', '1', 0,
  /* 180 */ 'S', '1', '1', 0,
  /* 184 */ 'D', '1', '9', '_', 'D', '2', '0', '_', 'D', '2', '1', 0,
  /* 196 */ 'D', '1', '5', '_', 'D', '1', '7', '_', 'D', '1', '9', '_', 'D', '2', '1', 0,
  /* 212 */ 'S', '2', '1', 0,
  /* 216 */ 'D', '2', '9', '_', 'D', '3', '0', '_', 'D', '3', '1', 0,
  /* 228 */ 'D', '2', '5', '_', 'D', '2', '7', '_', 'D', '2', '9', '_', 'D', '3', '1', 0,
  /* 244 */ 'S', '3', '1', 0,
  /* 248 */ 'D', '1', 0,
  /* 251 */ 'Q', '0', '_', 'Q', '1', 0,
  /* 257 */ 'M', 'V', 'F', 'R', '1', 0,
  /* 263 */ 'R', '0', '_', 'R', '1', 0,
  /* 269 */ 'S', '1', 0,
  /* 272 */ 'D', '6', '_', 'D', '8', '_', 'D', '1', '0', '_', 'D', '1', '2', 0,
  /* 286 */ 'D', '9', '_', 'D', '1', '0', '_', 'D', '1', '1', '_', 'D', '1', '2', 0,
  /* 301 */ 'Q', '9', '_', 'Q', '1', '0', '_', 'Q', '1', '1', '_', 'Q', '1', '2', 0,
  /* 316 */ 'R', '1', '2', 0,
  /* 320 */ 'S', '1', '2', 0,
  /* 324 */ 'D', '1', '6', '_', 'D', '1', '8', '_', 'D', '2', '0', '_', 'D', '2', '2', 0,
  /* 340 */ 'D', '1', '9', '_', 'D', '2', '0', '_', 'D', '2', '1', '_', 'D', '2', '2', 0,
  /* 356 */ 'S', '2', '2', 0,
  /* 360 */ 'D', '0', '_', 'D', '2', 0,
  /* 366 */ 'D', '0', '_', 'D', '1', '_', 'D', '2', 0,
  /* 375 */ 'Q', '1', '_', 'Q', '2', 0,
  /* 381 */ 'R', '2', 0,
  /* 384 */ 'S', '2', 0,
  /* 387 */ 'F', 'P', 'I', 'N', 'S', 'T', '2', 0,
  /* 395 */ 'D', '7', '_', 'D', '9', '_', 'D', '1', '1', '_', 'D', '1', '3', 0,
  /* 409 */ 'D', '1', '1', '_', 'D', '1', '2', '_', 'D', '1', '3', 0,
  /* 421 */ 'Q', '1', '0', '_', 'Q', '1', '1', '_', 'Q', '1', '2', '_', 'Q', '1', '3', 0,
  /* 437 */ 'S', '1', '3', 0,
  /* 441 */ 'D', '1', '7', '_', 'D', '1', '9', '_', 'D', '2', '1', '_', 'D', '2', '3', 0,
  /* 457 */ 'D', '2', '1', '_', 'D', '2', '2', '_', 'D', '2', '3', 0,
  /* 469 */ 'S', '2', '3', 0,
  /* 473 */ 'D', '1', '_', 'D', '3', 0,
  /* 479 */ 'D', '1', '_', 'D', '2', '_', 'D', '3', 0,
  /* 488 */ 'Q', '0', '_', 'Q', '1', '_', 'Q', '2', '_', 'Q', '3', 0,
  /* 500 */ 'R', '2', '_', 'R', '3', 0,
  /* 506 */ 'S', '3', 0,
  /* 509 */ 'D', '8', '_', 'D', '1', '0', '_', 'D', '1', '2', '_', 'D', '1', '4', 0,
  /* 524 */ 'D', '1', '1', '_', 'D', '1', '2', '_', 'D', '1', '3', '_', 'D', '1', '4', 0,
  /* 540 */ 'Q', '1', '1', '_', 'Q', '1', '2', '_', 'Q', '1', '3', '_', 'Q', '1', '4', 0,
  /* 556 */ 'S', '1', '4', 0,
  /* 560 */ 'D', '1', '8', '_', 'D', '2', '0', '_', 'D', '2', '2', '_', 'D', '2', '4', 0,
  /* 576 */ 'D', '2', '1', '_', 'D', '2', '2', '_', 'D', '2', '3', '_', 'D', '2', '4', 0,
  /* 592 */ 'S', '2', '4', 0,
  /* 596 */ 'D', '0', '_', 'D', '2', '_', 'D', '4', 0,
  /* 605 */ 'D', '1', '_', 'D', '2', '_', 'D', '3', '_', 'D', '4', 0,
  /* 617 */ 'Q', '1', '_', 'Q', '2', '_', 'Q', '3', '_', 'Q', '4', 0,
  /* 629 */ 'R', '4', 0,
  /* 632 */ 'S', '4', 0,
  /* 635 */ 'D', '9', '_', 'D', '1', '1', '_', 'D', '1', '3', '_', 'D', '1', '5', 0,
  /* 650 */ 'D', '1', '3', '_', 'D', '1', '4', '_', 'D', '1', '5', 0,
  /* 662 */ 'Q', '1', '2', '_', 'Q', '1', '3', '_', 'Q', '1', '4', '_', 'Q', '1', '5', 0,
  /* 678 */ 'S', '1', '5', 0,
  /* 682 */ 'D', '1', '9', '_', 'D', '2', '1', '_', 'D', '2', '3', '_', 'D', '2', '5', 0,
  /* 698 */ 'D', '2', '3', '_', 'D', '2', '4', '_', 'D', '2', '5', 0,
  /* 710 */ 'S', '2', '5', 0,
  /* 714 */ 'D', '1', '_', 'D', '3', '_', 'D', '5', 0,
  /* 723 */ 'D', '3', '_', 'D', '4', '_', 'D', '5', 0,
  /* 732 */ 'Q', '2', '_', 'Q', '3', '_', 'Q', '4', '_', 'Q', '5', 0,
  /* 744 */ 'R', '4', '_', 'R', '5', 0,
  /* 750 */ 'S', '5', 0,
  /* 753 */ 'D', '1', '0', '_', 'D', '1', '2', '_', 'D', '1', '4', '_', 'D', '1', '6', 0,
  /* 769 */ 'D', '1', '3', '_', 'D', '1', '4', '_', 'D', '1', '5', '_', 'D', '1', '6', 0,
  /* 785 */ 'S', '1', '6', 0,
  /* 789 */ 'D', '2', '0', '_', 'D', '2', '2', '_', 'D', '2', '4', '_', 'D', '2', '6', 0,
  /* 805 */ 'D', '2', '3', '_', 'D', '2', '4', '_', 'D', '2', '5', '_', 'D', '2', '6', 0,
  /* 821 */ 'S', '2', '6', 0,
  /* 825 */ 'D', '0', '_', 'D', '2', '_', 'D', '4', '_', 'D', '6', 0,
  /* 837 */ 'D', '3', '_', 'D', '4', '_', 'D', '5', '_', 'D', '6', 0,
  /* 849 */ 'Q', '3', '_', 'Q', '4', '_', 'Q', '5', '_', 'Q', '6', 0,
  /* 861 */ 'R', '6', 0,
  /* 864 */ 'S', '6', 0,
  /* 867 */ 'D', '1', '1', '_', 'D', '1', '3', '_', 'D', '1', '5', '_', 'D', '1', '7', 0,
  /* 883 */ 'D', '1', '5', '_', 'D', '1', '6', '_', 'D', '1', '7', 0,
  /* 895 */ 'S', '1', '7', 0,
  /* 899 */ 'D', '2', '1', '_', 'D', '2', '3', '_', 'D', '2', '5', '_', 'D', '2', '7', 0,
  /* 915 */ 'D', '2', '5', '_', 'D', '2', '6', '_', 'D', '2', '7', 0,
  /* 927 */ 'S', '2', '7', 0,
  /* 931 */ 'D', '1', '_', 'D', '3', '_', 'D', '5', '_', 'D', '7', 0,
  /* 943 */ 'D', '5', '_', 'D', '6', '_', 'D', '7', 0,
  /* 952 */ 'Q', '4', '_', 'Q', '5', '_', 'Q', '6', '_', 'Q', '7', 0,
  /* 964 */ 'R', '6', '_', 'R', '7', 0,
  /* 970 */ 'S', '7', 0,
  /* 973 */ 'D', '1', '2', '_', 'D', '1', '4', '_', 'D', '1', '6', '_', 'D', '1', '8', 0,
  /* 989 */ 'D', '1', '5', '_', 'D', '1', '6', '_', 'D', '1', '7', '_', 'D', '1', '8', 0,
  /* 1005 */ 'S', '1', '8', 0,
  /* 1009 */ 'D', '2', '2', '_', 'D', '2', '4', '_', 'D', '2', '6', '_', 'D', '2', '8', 0,
  /* 1025 */ 'D', '2', '5', '_', 'D', '2', '6', '_', 'D', '2', '7', '_', 'D', '2', '8', 0,
  /* 1041 */ 'S', '2', '8', 0,
  /* 1045 */ 'D', '2', '_', 'D', '4', '_', 'D', '6', '_', 'D', '8', 0,
  /* 1057 */ 'D', '5', '_', 'D', '6', '_', 'D', '7', '_', 'D', '8', 0,
  /* 1069 */ 'Q', '5', '_', 'Q', '6', '_', 'Q', '7', '_', 'Q', '8', 0,
  /* 1081 */ 'R', '8', 0,
  /* 1084 */ 'S', '8', 0,
  /* 1087 */ 'D', '1', '3', '_', 'D', '1', '5', '_', 'D', '1', '7', '_', 'D', '1', '9', 0,
  /* 1103 */ 'D', '1', '7', '_', 'D', '1', '8', '_', 'D', '1', '9', 0,
  /* 1115 */ 'S', '1', '9', 0,
  /* 1119 */ 'D', '2', '3', '_', 'D', '2', '5', '_', 'D', '2', '7', '_', 'D', '2', '9', 0,
  /* 1135 */ 'D', '2', '7', '_', 'D', '2', '8', '_', 'D', '2', '9', 0,
  /* 1147 */ 'S', '2', '9', 0,
  /* 1151 */ 'D', '3', '_', 'D', '5', '_', 'D', '7', '_', 'D', '9', 0,
  /* 1163 */ 'D', '7', '_', 'D', '8', '_', 'D', '9', 0,
  /* 1172 */ 'Q', '6', '_', 'Q', '7', '_', 'Q', '8', '_', 'Q', '9', 0,
  /* 1184 */ 'R', '8', '_', 'R', '9', 0,
  /* 1190 */ 'S', '9', 0,
  /* 1193 */ 'P', 'C', 0,
  /* 1196 */ 'F', 'P', 'E', 'X', 'C', 0,
  /* 1202 */ 'F', 'P', 'S', 'I', 'D', 0,
  /* 1208 */ 'I', 'T', 'S', 'T', 'A', 'T', 'E', 0,
  /* 1216 */ 'R', '1', '2', '_', 'S', 'P', 0,
  /* 1223 */ 'F', 'P', 'S', 'C', 'R', 0,
  /* 1229 */ 'L', 'R', 0,
  /* 1232 */ 'A', 'P', 'S', 'R', 0,
  /* 1237 */ 'C', 'P', 'S', 'R', 0,
  /* 1242 */ 'S', 'P', 'S', 'R', 0,
  /* 1247 */ 'F', 'P', 'I', 'N', 'S', 'T', 0,
  /* 1254 */ 'F', 'P', 'S', 'C', 'R', '_', 'N', 'Z', 'C', 'V', 0,
  /* 1265 */ 'A', 'P', 'S', 'R', '_', 'N', 'Z', 'C', 'V', 0,
};

extern const MCRegisterDesc ARMRegDesc[] = { // Descriptors
  { 12, 0, 0, 0, 0 },
  { 1232, 16, 16, 2, 66945 },
  { 1265, 16, 16, 2, 66945 },
  { 1237, 16, 16, 2, 66945 },
  { 1196, 16, 16, 2, 66945 },
  { 1247, 16, 16, 2, 66945 },
  { 1223, 16, 16, 2, 17664 },
  { 1254, 16, 16, 2, 17664 },
  { 1202, 16, 16, 2, 66913 },
  { 1208, 16, 16, 2, 66913 },
  { 1229, 16, 16, 2, 66913 },
  { 1193, 16, 16, 2, 66913 },
  { 1220, 16, 1526, 2, 66913 },
  { 1242, 16, 16, 2, 66913 },
  { 119, 350, 4008, 16, 13250 },
  { 248, 357, 2479, 16, 13250 },
  { 363, 364, 3952, 16, 13250 },
  { 476, 378, 3840, 16, 13250 },
  { 602, 392, 3888, 16, 13250 },
  { 720, 406, 3724, 16, 13250 },
  { 834, 420, 3780, 16, 13250 },
  { 940, 434, 3604, 16, 13250 },
  { 1054, 448, 3664, 16, 13250 },
  { 1160, 462, 3484, 16, 13250 },
  { 9, 476, 3544, 16, 13250 },
  { 141, 490, 3364, 16, 13250 },
  { 282, 504, 3424, 16, 13250 },
  { 405, 518, 3244, 16, 13250 },
  { 520, 532, 3304, 16, 13250 },
  { 646, 546, 3149, 16, 13250 },
  { 765, 16, 3208, 2, 17761 },
  { 879, 16, 3078, 2, 17761 },
  { 985, 16, 3113, 2, 17761 },
  { 1099, 16, 3008, 2, 17761 },
  { 59, 16, 3043, 2, 17761 },
  { 192, 16, 2938, 2, 17761 },
  { 336, 16, 2973, 2, 17761 },
  { 453, 16, 2868, 2, 17761 },
  { 572, 16, 2903, 2, 17761 },
  { 694, 16, 2797, 2, 17761 },
  { 801, 16, 2837, 2, 17761 },
  { 911, 16, 2363, 2, 17761 },
  { 1021, 16, 2411, 2, 17761 },
  { 1131, 16, 2384, 2, 17761 },
  { 95, 16, 2429, 2, 17761 },
  { 224, 16, 2789, 2, 17761 },
  { 387, 16, 16, 2, 17761 },
  { 125, 16, 16, 2, 17761 },
  { 257, 16, 16, 2, 17761 },
  { 122, 353, 1112, 22, 2196 },
  { 254, 374, 775, 22, 2196 },
  { 378, 402, 314, 22, 2196 },
  { 497, 430, 244, 22, 2196 },
  { 626, 458, 234, 22, 2196 },
  { 741, 486, 224, 22, 2196 },
  { 858, 514, 214, 22, 2196 },
  { 961, 542, 204, 22, 2196 },
  { 1078, 804, 194, 0, 12818 },
  { 1181, 807, 184, 0, 12818 },
  { 35, 810, 174, 0, 12818 },
  { 168, 813, 164, 0, 12818 },
  { 312, 816, 154, 0, 12818 },
  { 433, 819, 591, 0, 12818 },
  { 552, 822, 2447, 0, 12818 },
  { 674, 825, 1106, 0, 12818 },
  { 128, 16, 1373, 2, 66913 },
  { 260, 16, 1371, 2, 66913 },
  { 381, 16, 1371, 2, 66913 },
  { 503, 16, 1369, 2, 66913 },
  { 629, 16, 1369, 2, 66913 },
  { 747, 16, 1367, 2, 66913 },
  { 861, 16, 1367, 2, 66913 },
  { 967, 16, 1365, 2, 66913 },
  { 1081, 16, 1365, 2, 66913 },
  { 1187, 16, 1363, 2, 66913 },
  { 39, 16, 1363, 2, 66913 },
  { 176, 16, 1361, 2, 66913 },
  { 316, 16, 1359, 2, 66913 },
  { 131, 16, 4016, 2, 65793 },
  { 269, 16, 4007, 2, 65793 },
  { 384, 16, 2490, 2, 65793 },
  { 506, 16, 2478, 2, 65793 },
  { 632, 16, 3969, 2, 65793 },
  { 750, 16, 3951, 2, 65793 },
  { 864, 16, 3858, 2, 65793 },
  { 970, 16, 3839, 2, 65793 },
  { 1084, 16, 3909, 2, 65793 },
  { 1190, 16, 3887, 2, 65793 },
  { 43, 16, 3745, 2, 65793 },
  { 180, 16, 3723, 2, 65793 },
  { 320, 16, 3803, 2, 65793 },
  { 437, 16, 3779, 2, 65793 },
  { 556, 16, 3627, 2, 65793 },
  { 678, 16, 3603, 2, 65793 },
  { 785, 16, 3687, 2, 65793 },
  { 895, 16, 3663, 2, 65793 },
  { 1005, 16, 3507, 2, 65793 },
  { 1115, 16, 3483, 2, 65793 },
  { 79, 16, 3567, 2, 65793 },
  { 212, 16, 3543, 2, 65793 },
  { 356, 16, 3387, 2, 65793 },
  { 469, 16, 3363, 2, 65793 },
  { 592, 16, 3447, 2, 65793 },
  { 710, 16, 3423, 2, 65793 },
  { 821, 16, 3267, 2, 65793 },
  { 927, 16, 3243, 2, 65793 },
  { 1041, 16, 3327, 2, 65793 },
  { 1147, 16, 3303, 2, 65793 },
  { 115, 16, 3172, 2, 65793 },
  { 244, 16, 3148, 2, 65793 },
  { 360, 367, 4010, 29, 5426 },
  { 473, 381, 2502, 29, 5426 },
  { 599, 395, 3987, 29, 5426 },
  { 717, 409, 3877, 29, 5426 },
  { 831, 423, 3931, 29, 5426 },
  { 937, 437, 3767, 29, 5426 },
  { 1051, 451, 3827, 29, 5426 },
  { 1157, 465, 3651, 29, 5426 },
  { 6, 479, 3711, 29, 5426 },
  { 151, 493, 3531, 29, 5426 },
  { 278, 507, 3591, 29, 5426 },
  { 401, 521, 3411, 29, 5426 },
  { 516, 535, 3471, 29, 5426 },
  { 642, 549, 3291, 29, 5426 },
  { 761, 4025, 3351, 11, 17602 },
  { 875, 4002, 3196, 11, 13522 },
  { 981, 1080, 3231, 8, 17329 },
  { 1095, 1080, 3101, 8, 17329 },
  { 55, 1080, 3136, 8, 17329 },
  { 204, 1080, 3031, 8, 17329 },
  { 332, 1080, 3066, 8, 17329 },
  { 449, 1080, 2961, 8, 17329 },
  { 568, 1080, 2996, 8, 17329 },
  { 690, 1080, 2891, 8, 17329 },
  { 797, 1080, 2926, 8, 17329 },
  { 907, 1080, 2820, 8, 17329 },
  { 1017, 1080, 2858, 8, 17329 },
  { 1127, 1080, 2401, 8, 17329 },
  { 91, 1080, 2440, 8, 17329 },
  { 236, 1080, 2791, 8, 17329 },
  { 251, 1339, 1114, 168, 1044 },
  { 375, 1319, 347, 168, 1044 },
  { 494, 1299, 142, 168, 1044 },
  { 623, 1279, 142, 168, 1044 },
  { 738, 1259, 142, 168, 1044 },
  { 855, 1239, 142, 168, 1044 },
  { 958, 1219, 142, 168, 1044 },
  { 1075, 1203, 142, 88, 1456 },
  { 1178, 1191, 142, 76, 2114 },
  { 32, 1179, 142, 76, 2114 },
  { 164, 1167, 142, 76, 2114 },
  { 308, 1155, 142, 76, 2114 },
  { 429, 1143, 142, 76, 2114 },
  { 548, 1131, 344, 76, 2114 },
  { 670, 1119, 1108, 76, 2114 },
  { 488, 2156, 16, 474, 4 },
  { 617, 2101, 16, 474, 4 },
  { 732, 2046, 16, 474, 4 },
  { 849, 1991, 16, 474, 4 },
  { 952, 1936, 16, 474, 4 },
  { 1069, 1885, 16, 423, 272 },
  { 1172, 1838, 16, 376, 512 },
  { 26, 1795, 16, 333, 720 },
  { 158, 1756, 16, 294, 1186 },
  { 301, 1717, 16, 294, 1186 },
  { 421, 1678, 16, 294, 1186 },
  { 540, 1639, 16, 294, 1186 },
  { 662, 1600, 16, 294, 1186 },
  { 1216, 4127, 16, 19, 17856 },
  { 263, 783, 16, 19, 8946 },
  { 500, 786, 16, 19, 8946 },
  { 744, 789, 16, 19, 8946 },
  { 964, 792, 16, 19, 8946 },
  { 1184, 795, 16, 19, 8946 },
  { 172, 798, 16, 19, 8946 },
  { 366, 1513, 1113, 63, 1570 },
  { 479, 4169, 2511, 63, 1570 },
  { 608, 1500, 778, 63, 1570 },
  { 723, 4156, 770, 63, 1570 },
  { 840, 1487, 317, 63, 1570 },
  { 943, 4143, 660, 63, 1570 },
  { 1060, 1474, 308, 63, 1570 },
  { 1163, 4130, 654, 63, 1570 },
  { 16, 1461, 302, 63, 1570 },
  { 134, 4114, 648, 63, 1570 },
  { 289, 1448, 296, 63, 1570 },
  { 409, 4101, 642, 63, 1570 },
  { 528, 1435, 290, 63, 1570 },
  { 650, 4088, 636, 63, 1570 },
  { 773, 1424, 284, 52, 1680 },
  { 883, 4079, 630, 43, 1872 },
  { 993, 1417, 278, 36, 2401 },
  { 1103, 4072, 624, 36, 2401 },
  { 67, 1410, 272, 36, 2401 },
  { 184, 4065, 618, 36, 2401 },
  { 344, 1403, 266, 36, 2401 },
  { 457, 4058, 612, 36, 2401 },
  { 580, 1396, 260, 36, 2401 },
  { 698, 4051, 606, 36, 2401 },
  { 809, 1389, 254, 36, 2401 },
  { 915, 4044, 600, 36, 2401 },
  { 1029, 1382, 765, 36, 2401 },
  { 1135, 4037, 2455, 36, 2401 },
  { 103, 1375, 2474, 36, 2401 },
  { 216, 4030, 1107, 36, 2401 },
  { 596, 1026, 4013, 212, 5314 },
  { 714, 1014, 3948, 212, 5314 },
  { 828, 1002, 3997, 212, 5314 },
  { 934, 990, 3904, 212, 5314 },
  { 1048, 978, 3904, 212, 5314 },
  { 1154, 966, 3798, 212, 5314 },
  { 3, 954, 3798, 212, 5314 },
  { 148, 942, 3682, 212, 5314 },
  { 275, 930, 3682, 212, 5314 },
  { 398, 918, 3562, 212, 5314 },
  { 512, 906, 3562, 212, 5314 },
  { 638, 894, 3442, 212, 5314 },
  { 757, 1070, 3442, 202, 17506 },
  { 871, 1060, 3322, 202, 13426 },
  { 977, 1052, 3322, 194, 14226 },
  { 1091, 1044, 3226, 194, 13698 },
  { 51, 1038, 3226, 188, 14049 },
  { 200, 1038, 3131, 188, 14049 },
  { 328, 1038, 3131, 188, 14049 },
  { 445, 1038, 3061, 188, 14049 },
  { 564, 1038, 3061, 188, 14049 },
  { 686, 1038, 2991, 188, 14049 },
  { 793, 1038, 2991, 188, 14049 },
  { 903, 1038, 2921, 188, 14049 },
  { 1013, 1038, 2921, 188, 14049 },
  { 1123, 1038, 2832, 188, 14049 },
  { 87, 1038, 2855, 188, 14049 },
  { 232, 1038, 2794, 188, 14049 },
  { 825, 2677, 4005, 276, 5170 },
  { 931, 2659, 3946, 276, 5170 },
  { 1045, 2641, 3946, 276, 5170 },
  { 1151, 2623, 3856, 276, 5170 },
  { 0, 2605, 3856, 276, 5170 },
  { 145, 2587, 3743, 276, 5170 },
  { 272, 2569, 3743, 276, 5170 },
  { 395, 2551, 3625, 276, 5170 },
  { 509, 2533, 3625, 276, 5170 },
  { 635, 2515, 3505, 276, 5170 },
  { 753, 2773, 3505, 260, 17378 },
  { 867, 2757, 3385, 260, 13298 },
  { 973, 2743, 3385, 246, 14114 },
  { 1087, 2729, 3265, 246, 13586 },
  { 47, 2717, 3265, 234, 13954 },
  { 196, 2705, 3170, 234, 13778 },
  { 324, 2695, 3170, 224, 13873 },
  { 441, 2695, 3099, 224, 13873 },
  { 560, 2695, 3099, 224, 13873 },
  { 682, 2695, 3029, 224, 13873 },
  { 789, 2695, 3029, 224, 13873 },
  { 899, 2695, 2959, 224, 13873 },
  { 1009, 2695, 2959, 224, 13873 },
  { 1119, 2695, 2856, 224, 13873 },
  { 83, 2695, 2856, 224, 13873 },
  { 228, 2695, 2795, 224, 13873 },
  { 369, 360, 2509, 22, 1956 },
  { 611, 388, 583, 22, 1956 },
  { 843, 416, 756, 22, 1956 },
  { 1063, 444, 747, 22, 1956 },
  { 19, 472, 738, 22, 1956 },
  { 293, 500, 729, 22, 1956 },
  { 532, 528, 720, 22, 1956 },
  { 777, 3943, 711, 3, 2336 },
  { 997, 562, 702, 0, 8898 },
  { 71, 565, 693, 0, 8898 },
  { 348, 568, 684, 0, 8898 },
  { 584, 571, 675, 0, 8898 },
  { 813, 574, 666, 0, 8898 },
  { 1033, 577, 2460, 0, 8898 },
  { 107, 580, 2468, 0, 8898 },
  { 605, 2343, 2488, 148, 900 },
  { 837, 2323, 588, 148, 900 },
  { 1057, 2303, 588, 148, 900 },
  { 13, 2283, 588, 148, 900 },
  { 286, 2263, 588, 148, 900 },
  { 524, 2243, 588, 148, 900 },
  { 769, 2225, 588, 130, 1328 },
  { 989, 2211, 588, 116, 1776 },
  { 63, 1588, 588, 104, 2034 },
  { 340, 1576, 588, 104, 2034 },
  { 576, 1564, 588, 104, 2034 },
  { 805, 1552, 588, 104, 2034 },
  { 1025, 1540, 588, 104, 2034 },
  { 99, 1528, 2382, 104, 2034 },
};

extern const uint16_t ARMRegUnitRoots[][2] = {
  { ARM::APSR },
  { ARM::APSR_NZCV },
  { ARM::CPSR },
  { ARM::FPEXC },
  { ARM::FPINST },
  { ARM::FPSCR, ARM::FPSCR_NZCV },
  { ARM::FPSID },
  { ARM::ITSTATE },
  { ARM::LR },
  { ARM::PC },
  { ARM::SP },
  { ARM::SPSR },
  { ARM::S0 },
  { ARM::S1 },
  { ARM::S2 },
  { ARM::S3 },
  { ARM::S4 },
  { ARM::S5 },
  { ARM::S6 },
  { ARM::S7 },
  { ARM::S8 },
  { ARM::S9 },
  { ARM::S10 },
  { ARM::S11 },
  { ARM::S12 },
  { ARM::S13 },
  { ARM::S14 },
  { ARM::S15 },
  { ARM::S16 },
  { ARM::S17 },
  { ARM::S18 },
  { ARM::S19 },
  { ARM::S20 },
  { ARM::S21 },
  { ARM::S22 },
  { ARM::S23 },
  { ARM::S24 },
  { ARM::S25 },
  { ARM::S26 },
  { ARM::S27 },
  { ARM::S28 },
  { ARM::S29 },
  { ARM::S30 },
  { ARM::S31 },
  { ARM::D16 },
  { ARM::D17 },
  { ARM::D18 },
  { ARM::D19 },
  { ARM::D20 },
  { ARM::D21 },
  { ARM::D22 },
  { ARM::D23 },
  { ARM::D24 },
  { ARM::D25 },
  { ARM::D26 },
  { ARM::D27 },
  { ARM::D28 },
  { ARM::D29 },
  { ARM::D30 },
  { ARM::D31 },
  { ARM::FPINST2 },
  { ARM::MVFR0 },
  { ARM::MVFR1 },
  { ARM::R0 },
  { ARM::R1 },
  { ARM::R2 },
  { ARM::R3 },
  { ARM::R4 },
  { ARM::R5 },
  { ARM::R6 },
  { ARM::R7 },
  { ARM::R8 },
  { ARM::R9 },
  { ARM::R10 },
  { ARM::R11 },
  { ARM::R12 },
};

namespace {     // Register classes...
  // SPR Register Class...
  const uint16_t SPR[] = {
    ARM::S0, ARM::S2, ARM::S4, ARM::S6, ARM::S8, ARM::S10, ARM::S12, ARM::S14, ARM::S16, ARM::S18, ARM::S20, ARM::S22, ARM::S24, ARM::S26, ARM::S28, ARM::S30, ARM::S1, ARM::S3, ARM::S5, ARM::S7, ARM::S9, ARM::S11, ARM::S13, ARM::S15, ARM::S17, ARM::S19, ARM::S21, ARM::S23, ARM::S25, ARM::S27, ARM::S29, ARM::S31, 
  };

  // SPR Bit set.
  const uint8_t SPRBits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0xff, 0xff, 0xff, 0x3f, 
  };

  // GPR Register Class...
  const uint16_t GPR[] = {
    ARM::R0, ARM::R1, ARM::R2, ARM::R3, ARM::R4, ARM::R5, ARM::R6, ARM::R7, ARM::R8, ARM::R9, ARM::R10, ARM::R11, ARM::R12, ARM::SP, ARM::LR, ARM::PC, 
  };

  // GPR Bit set.
  const uint8_t GPRBits[] = {
    0x00, 0x1c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x3f, 
  };

  // GPRwithAPSR Register Class...
  const uint16_t GPRwithAPSR[] = {
    ARM::R0, ARM::R1, ARM::R2, ARM::R3, ARM::R4, ARM::R5, ARM::R6, ARM::R7, ARM::R8, ARM::R9, ARM::R10, ARM::R11, ARM::R12, ARM::SP, ARM::LR, ARM::APSR_NZCV, 
  };

  // GPRwithAPSR Bit set.
  const uint8_t GPRwithAPSRBits[] = {
    0x04, 0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x3f, 
  };

  // SPR_8 Register Class...
  const uint16_t SPR_8[] = {
    ARM::S0, ARM::S1, ARM::S2, ARM::S3, ARM::S4, ARM::S5, ARM::S6, ARM::S7, ARM::S8, ARM::S9, ARM::S10, ARM::S11, ARM::S12, ARM::S13, ARM::S14, ARM::S15, 
  };

  // SPR_8 Bit set.
  const uint8_t SPR_8Bits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0xff, 0x3f, 
  };

  // GPRnopc Register Class...
  const uint16_t GPRnopc[] = {
    ARM::R0, ARM::R1, ARM::R2, ARM::R3, ARM::R4, ARM::R5, ARM::R6, ARM::R7, ARM::R8, ARM::R9, ARM::R10, ARM::R11, ARM::R12, ARM::SP, ARM::LR, 
  };

  // GPRnopc Bit set.
  const uint8_t GPRnopcBits[] = {
    0x00, 0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x3f, 
  };

  // rGPR Register Class...
  const uint16_t rGPR[] = {
    ARM::R0, ARM::R1, ARM::R2, ARM::R3, ARM::R4, ARM::R5, ARM::R6, ARM::R7, ARM::R8, ARM::R9, ARM::R10, ARM::R11, ARM::R12, ARM::LR, 
  };

  // rGPR Bit set.
  const uint8_t rGPRBits[] = {
    0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x3f, 
  };

  // hGPR Register Class...
  const uint16_t hGPR[] = {
    ARM::R8, ARM::R9, ARM::R10, ARM::R11, ARM::R12, ARM::SP, ARM::LR, ARM::PC, 
  };

  // hGPR Bit set.
  const uint8_t hGPRBits[] = {
    0x00, 0x1c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3e, 
  };

  // tGPR Register Class...
  const uint16_t tGPR[] = {
    ARM::R0, ARM::R1, ARM::R2, ARM::R3, ARM::R4, ARM::R5, ARM::R6, ARM::R7, 
  };

  // tGPR Bit set.
  const uint8_t tGPRBits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x01, 
  };

  // GPRnopc_and_hGPR Register Class...
  const uint16_t GPRnopc_and_hGPR[] = {
    ARM::R8, ARM::R9, ARM::R10, ARM::R11, ARM::R12, ARM::SP, ARM::LR, 
  };

  // GPRnopc_and_hGPR Bit set.
  const uint8_t GPRnopc_and_hGPRBits[] = {
    0x00, 0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3e, 
  };

  // hGPR_and_rGPR Register Class...
  const uint16_t hGPR_and_rGPR[] = {
    ARM::R8, ARM::R9, ARM::R10, ARM::R11, ARM::R12, ARM::LR, 
  };

  // hGPR_and_rGPR Bit set.
  const uint8_t hGPR_and_rGPRBits[] = {
    0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3e, 
  };

  // tcGPR Register Class...
  const uint16_t tcGPR[] = {
    ARM::R0, ARM::R1, ARM::R2, ARM::R3, ARM::R9, ARM::R12, 
  };

  // tcGPR Bit set.
  const uint8_t tcGPRBits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1e, 0x24, 
  };

  // tGPR_and_tcGPR Register Class...
  const uint16_t tGPR_and_tcGPR[] = {
    ARM::R0, ARM::R1, ARM::R2, ARM::R3, 
  };

  // tGPR_and_tcGPR Bit set.
  const uint8_t tGPR_and_tcGPRBits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1e, 
  };

  // hGPR_and_tcGPR Register Class...
  const uint16_t hGPR_and_tcGPR[] = {
    ARM::R9, ARM::R12, 
  };

  // hGPR_and_tcGPR Bit set.
  const uint8_t hGPR_and_tcGPRBits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x24, 
  };

  // CCR Register Class...
  const uint16_t CCR[] = {
    ARM::CPSR, 
  };

  // CCR Bit set.
  const uint8_t CCRBits[] = {
    0x08, 
  };

  // GPRsp Register Class...
  const uint16_t GPRsp[] = {
    ARM::SP, 
  };

  // GPRsp Bit set.
  const uint8_t GPRspBits[] = {
    0x00, 0x10, 
  };

  // DPR Register Class...
  const uint16_t DPR[] = {
    ARM::D0, ARM::D1, ARM::D2, ARM::D3, ARM::D4, ARM::D5, ARM::D6, ARM::D7, ARM::D8, ARM::D9, ARM::D10, ARM::D11, ARM::D12, ARM::D13, ARM::D14, ARM::D15, ARM::D16, ARM::D17, ARM::D18, ARM::D19, ARM::D20, ARM::D21, ARM::D22, ARM::D23, ARM::D24, ARM::D25, ARM::D26, ARM::D27, ARM::D28, ARM::D29, ARM::D30, ARM::D31, 
  };

  // DPR Bit set.
  const uint8_t DPRBits[] = {
    0x00, 0xc0, 0xff, 0xff, 0xff, 0x3f, 
  };

  // DPR_VFP2 Register Class...
  const uint16_t DPR_VFP2[] = {
    ARM::D0, ARM::D1, ARM::D2, ARM::D3, ARM::D4, ARM::D5, ARM::D6, ARM::D7, ARM::D8, ARM::D9, ARM::D10, ARM::D11, ARM::D12, ARM::D13, ARM::D14, ARM::D15, 
  };

  // DPR_VFP2 Bit set.
  const uint8_t DPR_VFP2Bits[] = {
    0x00, 0xc0, 0xff, 0x3f, 
  };

  // DPR_8 Register Class...
  const uint16_t DPR_8[] = {
    ARM::D0, ARM::D1, ARM::D2, ARM::D3, ARM::D4, ARM::D5, ARM::D6, ARM::D7, 
  };

  // DPR_8 Bit set.
  const uint8_t DPR_8Bits[] = {
    0x00, 0xc0, 0x3f, 
  };

  // GPRPair Register Class...
  const uint16_t GPRPair[] = {
    ARM::R0_R1, ARM::R2_R3, ARM::R4_R5, ARM::R6_R7, ARM::R8_R9, ARM::R10_R11, ARM::R12_SP, 
  };

  // GPRPair Bit set.
  const uint8_t GPRPairBits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 
  };

  // GPRPair_with_gsub_1_in_rGPR Register Class...
  const uint16_t GPRPair_with_gsub_1_in_rGPR[] = {
    ARM::R0_R1, ARM::R2_R3, ARM::R4_R5, ARM::R6_R7, ARM::R8_R9, ARM::R10_R11, 
  };

  // GPRPair_with_gsub_1_in_rGPR Bit set.
  const uint8_t GPRPair_with_gsub_1_in_rGPRBits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7e, 
  };

  // GPRPair_with_gsub_0_in_tGPR Register Class...
  const uint16_t GPRPair_with_gsub_0_in_tGPR[] = {
    ARM::R0_R1, ARM::R2_R3, ARM::R4_R5, ARM::R6_R7, 
  };

  // GPRPair_with_gsub_0_in_tGPR Bit set.
  const uint8_t GPRPair_with_gsub_0_in_tGPRBits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1e, 
  };

  // GPRPair_with_gsub_0_in_hGPR Register Class...
  const uint16_t GPRPair_with_gsub_0_in_hGPR[] = {
    ARM::R8_R9, ARM::R10_R11, ARM::R12_SP, 
  };

  // GPRPair_with_gsub_0_in_hGPR Bit set.
  const uint8_t GPRPair_with_gsub_0_in_hGPRBits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x61, 
  };

  // GPRPair_with_gsub_0_in_tcGPR Register Class...
  const uint16_t GPRPair_with_gsub_0_in_tcGPR[] = {
    ARM::R0_R1, ARM::R2_R3, ARM::R12_SP, 
  };

  // GPRPair_with_gsub_0_in_tcGPR Bit set.
  const uint8_t GPRPair_with_gsub_0_in_tcGPRBits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 
  };

  // GPRPair_with_gsub_1_in_tcGPR Register Class...
  const uint16_t GPRPair_with_gsub_1_in_tcGPR[] = {
    ARM::R0_R1, ARM::R2_R3, ARM::R8_R9, 
  };

  // GPRPair_with_gsub_1_in_tcGPR Bit set.
  const uint8_t GPRPair_with_gsub_1_in_tcGPRBits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x26, 
  };

  // GPRPair_with_gsub_0_in_tGPR_and_tcGPR Register Class...
  const uint16_t GPRPair_with_gsub_0_in_tGPR_and_tcGPR[] = {
    ARM::R0_R1, ARM::R2_R3, 
  };

  // GPRPair_with_gsub_0_in_tGPR_and_tcGPR Bit set.
  const uint8_t GPRPair_with_gsub_0_in_tGPR_and_tcGPRBits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 
  };

  // GPRPair_with_gsub_1_in_hGPR_and_rGPR Register Class...
  const uint16_t GPRPair_with_gsub_1_in_hGPR_and_rGPR[] = {
    ARM::R8_R9, ARM::R10_R11, 
  };

  // GPRPair_with_gsub_1_in_hGPR_and_rGPR Bit set.
  const uint8_t GPRPair_with_gsub_1_in_hGPR_and_rGPRBits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 
  };

  // GPRPair_with_gsub_1_in_GPRsp Register Class...
  const uint16_t GPRPair_with_gsub_1_in_GPRsp[] = {
    ARM::R12_SP, 
  };

  // GPRPair_with_gsub_1_in_GPRsp Bit set.
  const uint8_t GPRPair_with_gsub_1_in_GPRspBits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 
  };

  // GPRPair_with_gsub_1_in_hGPR_and_tcGPR Register Class...
  const uint16_t GPRPair_with_gsub_1_in_hGPR_and_tcGPR[] = {
    ARM::R8_R9, 
  };

  // GPRPair_with_gsub_1_in_hGPR_and_tcGPR Bit set.
  const uint8_t GPRPair_with_gsub_1_in_hGPR_and_tcGPRBits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 
  };

  // DPairSpc Register Class...
  const uint16_t DPairSpc[] = {
    ARM::D0_D2, ARM::D1_D3, ARM::D2_D4, ARM::D3_D5, ARM::D4_D6, ARM::D5_D7, ARM::D6_D8, ARM::D7_D9, ARM::D8_D10, ARM::D9_D11, ARM::D10_D12, ARM::D11_D13, ARM::D12_D14, ARM::D13_D15, ARM::D14_D16, ARM::D15_D17, ARM::D16_D18, ARM::D17_D19, ARM::D18_D20, ARM::D19_D21, ARM::D20_D22, ARM::D21_D23, ARM::D22_D24, ARM::D23_D25, ARM::D24_D26, ARM::D25_D27, ARM::D26_D28, ARM::D27_D29, ARM::D28_D30, ARM::D29_D31, 
  };

  // DPairSpc Bit set.
  const uint8_t DPairSpcBits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0xff, 0xff, 0xff, 0x0f, 
  };

  // DPairSpc_with_ssub_0 Register Class...
  const uint16_t DPairSpc_with_ssub_0[] = {
    ARM::D0_D2, ARM::D1_D3, ARM::D2_D4, ARM::D3_D5, ARM::D4_D6, ARM::D5_D7, ARM::D6_D8, ARM::D7_D9, ARM::D8_D10, ARM::D9_D11, ARM::D10_D12, ARM::D11_D13, ARM::D12_D14, ARM::D13_D15, ARM::D14_D16, ARM::D15_D17, 
  };

  // DPairSpc_with_ssub_0 Bit set.
  const uint8_t DPairSpc_with_ssub_0Bits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0xff, 0x3f, 
  };

  // DPairSpc_with_dsub_2_then_ssub_0 Register Class...
  const uint16_t DPairSpc_with_dsub_2_then_ssub_0[] = {
    ARM::D0_D2, ARM::D1_D3, ARM::D2_D4, ARM::D3_D5, ARM::D4_D6, ARM::D5_D7, ARM::D6_D8, ARM::D7_D9, ARM::D8_D10, ARM::D9_D11, ARM::D10_D12, ARM::D11_D13, ARM::D12_D14, ARM::D13_D15, 
  };

  // DPairSpc_with_dsub_2_then_ssub_0 Bit set.
  const uint8_t DPairSpc_with_dsub_2_then_ssub_0Bits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0xff, 0x0f, 
  };

  // DPairSpc_with_dsub_0_in_DPR_8 Register Class...
  const uint16_t DPairSpc_with_dsub_0_in_DPR_8[] = {
    ARM::D0_D2, ARM::D1_D3, ARM::D2_D4, ARM::D3_D5, ARM::D4_D6, ARM::D5_D7, ARM::D6_D8, ARM::D7_D9, 
  };

  // DPairSpc_with_dsub_0_in_DPR_8 Bit set.
  const uint8_t DPairSpc_with_dsub_0_in_DPR_8Bits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x3f, 
  };

  // DPairSpc_with_dsub_2_in_DPR_8 Register Class...
  const uint16_t DPairSpc_with_dsub_2_in_DPR_8[] = {
    ARM::D0_D2, ARM::D1_D3, ARM::D2_D4, ARM::D3_D5, ARM::D4_D6, ARM::D5_D7, 
  };

  // DPairSpc_with_dsub_2_in_DPR_8 Bit set.
  const uint8_t DPairSpc_with_dsub_2_in_DPR_8Bits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x0f, 
  };

  // DPair Register Class...
  const uint16_t DPair[] = {
    ARM::Q0, ARM::D1_D2, ARM::Q1, ARM::D3_D4, ARM::Q2, ARM::D5_D6, ARM::Q3, ARM::D7_D8, ARM::Q4, ARM::D9_D10, ARM::Q5, ARM::D11_D12, ARM::Q6, ARM::D13_D14, ARM::Q7, ARM::D15_D16, ARM::Q8, ARM::D17_D18, ARM::Q9, ARM::D19_D20, ARM::Q10, ARM::D21_D22, ARM::Q11, ARM::D23_D24, ARM::Q12, ARM::D25_D26, ARM::Q13, ARM::D27_D28, ARM::Q14, ARM::D29_D30, ARM::Q15, 
  };

  // DPair Bit set.
  const uint8_t DPairBits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0xff, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0xff, 0x03, 
  };

  // DPair_with_ssub_0 Register Class...
  const uint16_t DPair_with_ssub_0[] = {
    ARM::Q0, ARM::D1_D2, ARM::Q1, ARM::D3_D4, ARM::Q2, ARM::D5_D6, ARM::Q3, ARM::D7_D8, ARM::Q4, ARM::D9_D10, ARM::Q5, ARM::D11_D12, ARM::Q6, ARM::D13_D14, ARM::Q7, ARM::D15_D16, 
  };

  // DPair_with_ssub_0 Bit set.
  const uint8_t DPair_with_ssub_0Bits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0x07, 
  };

  // QPR Register Class...
  const uint16_t QPR[] = {
    ARM::Q0, ARM::Q1, ARM::Q2, ARM::Q3, ARM::Q4, ARM::Q5, ARM::Q6, ARM::Q7, ARM::Q8, ARM::Q9, ARM::Q10, ARM::Q11, ARM::Q12, ARM::Q13, ARM::Q14, ARM::Q15, 
  };

  // QPR Bit set.
  const uint8_t QPRBits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0xff, 0x01, 
  };

  // DPair_with_ssub_2 Register Class...
  const uint16_t DPair_with_ssub_2[] = {
    ARM::Q0, ARM::D1_D2, ARM::Q1, ARM::D3_D4, ARM::Q2, ARM::D5_D6, ARM::Q3, ARM::D7_D8, ARM::Q4, ARM::D9_D10, ARM::Q5, ARM::D11_D12, ARM::Q6, ARM::D13_D14, ARM::Q7, 
  };

  // DPair_with_ssub_2 Bit set.
  const uint8_t DPair_with_ssub_2Bits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0x03, 
  };

  // DPair_with_dsub_0_in_DPR_8 Register Class...
  const uint16_t DPair_with_dsub_0_in_DPR_8[] = {
    ARM::Q0, ARM::D1_D2, ARM::Q1, ARM::D3_D4, ARM::Q2, ARM::D5_D6, ARM::Q3, ARM::D7_D8, 
  };

  // DPair_with_dsub_0_in_DPR_8 Bit set.
  const uint8_t DPair_with_dsub_0_in_DPR_8Bits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x78, 
  };

  // QPR_VFP2 Register Class...
  const uint16_t QPR_VFP2[] = {
    ARM::Q0, ARM::Q1, ARM::Q2, ARM::Q3, ARM::Q4, ARM::Q5, ARM::Q6, ARM::Q7, 
  };

  // QPR_VFP2 Bit set.
  const uint8_t QPR_VFP2Bits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x01, 
  };

  // DPair_with_dsub_1_in_DPR_8 Register Class...
  const uint16_t DPair_with_dsub_1_in_DPR_8[] = {
    ARM::Q0, ARM::D1_D2, ARM::Q1, ARM::D3_D4, ARM::Q2, ARM::D5_D6, ARM::Q3, 
  };

  // DPair_with_dsub_1_in_DPR_8 Bit set.
  const uint8_t DPair_with_dsub_1_in_DPR_8Bits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 
  };

  // QPR_8 Register Class...
  const uint16_t QPR_8[] = {
    ARM::Q0, ARM::Q1, ARM::Q2, ARM::Q3, 
  };

  // QPR_8 Bit set.
  const uint8_t QPR_8Bits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1e, 
  };

  // DTriple Register Class...
  const uint16_t DTriple[] = {
    ARM::D0_D1_D2, ARM::D1_D2_D3, ARM::D2_D3_D4, ARM::D3_D4_D5, ARM::D4_D5_D6, ARM::D5_D6_D7, ARM::D6_D7_D8, ARM::D7_D8_D9, ARM::D8_D9_D10, ARM::D9_D10_D11, ARM::D10_D11_D12, ARM::D11_D12_D13, ARM::D12_D13_D14, ARM::D13_D14_D15, ARM::D14_D15_D16, ARM::D15_D16_D17, ARM::D16_D17_D18, ARM::D17_D18_D19, ARM::D18_D19_D20, ARM::D19_D20_D21, ARM::D20_D21_D22, ARM::D21_D22_D23, ARM::D22_D23_D24, ARM::D23_D24_D25, ARM::D24_D25_D26, ARM::D25_D26_D27, ARM::D26_D27_D28, ARM::D27_D28_D29, ARM::D28_D29_D30, ARM::D29_D30_D31, 
  };

  // DTriple Bit set.
  const uint8_t DTripleBits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xff, 0xff, 0xff, 0x1f, 
  };

  // DTripleSpc Register Class...
  const uint16_t DTripleSpc[] = {
    ARM::D0_D2_D4, ARM::D1_D3_D5, ARM::D2_D4_D6, ARM::D3_D5_D7, ARM::D4_D6_D8, ARM::D5_D7_D9, ARM::D6_D8_D10, ARM::D7_D9_D11, ARM::D8_D10_D12, ARM::D9_D11_D13, ARM::D10_D12_D14, ARM::D11_D13_D15, ARM::D12_D14_D16, ARM::D13_D15_D17, ARM::D14_D16_D18, ARM::D15_D17_D19, ARM::D16_D18_D20, ARM::D17_D19_D21, ARM::D18_D20_D22, ARM::D19_D21_D23, ARM::D20_D22_D24, ARM::D21_D23_D25, ARM::D22_D24_D26, ARM::D23_D25_D27, ARM::D24_D26_D28, ARM::D25_D27_D29, ARM::D26_D28_D30, ARM::D27_D29_D31, 
  };

  // DTripleSpc Bit set.
  const uint8_t DTripleSpcBits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 0xff, 0xff, 0xff, 0x01, 
  };

  // DTripleSpc_with_ssub_0 Register Class...
  const uint16_t DTripleSpc_with_ssub_0[] = {
    ARM::D0_D2_D4, ARM::D1_D3_D5, ARM::D2_D4_D6, ARM::D3_D5_D7, ARM::D4_D6_D8, ARM::D5_D7_D9, ARM::D6_D8_D10, ARM::D7_D9_D11, ARM::D8_D10_D12, ARM::D9_D11_D13, ARM::D10_D12_D14, ARM::D11_D13_D15, ARM::D12_D14_D16, ARM::D13_D15_D17, ARM::D14_D16_D18, ARM::D15_D17_D19, 
  };

  // DTripleSpc_with_ssub_0 Bit set.
  const uint8_t DTripleSpc_with_ssub_0Bits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 0xff, 0x1f, 
  };

  // DTriple_with_ssub_0 Register Class...
  const uint16_t DTriple_with_ssub_0[] = {
    ARM::D0_D1_D2, ARM::D1_D2_D3, ARM::D2_D3_D4, ARM::D3_D4_D5, ARM::D4_D5_D6, ARM::D5_D6_D7, ARM::D6_D7_D8, ARM::D7_D8_D9, ARM::D8_D9_D10, ARM::D9_D10_D11, ARM::D10_D11_D12, ARM::D11_D12_D13, ARM::D12_D13_D14, ARM::D13_D14_D15, ARM::D14_D15_D16, ARM::D15_D16_D17, 
  };

  // DTriple_with_ssub_0 Bit set.
  const uint8_t DTriple_with_ssub_0Bits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xff, 0x7f, 
  };

  // DTriple_with_dsub_1_dsub_2_in_QPR Register Class...
  const uint16_t DTriple_with_dsub_1_dsub_2_in_QPR[] = {
    ARM::D1_D2_D3, ARM::D3_D4_D5, ARM::D5_D6_D7, ARM::D7_D8_D9, ARM::D9_D10_D11, ARM::D11_D12_D13, ARM::D13_D14_D15, ARM::D15_D16_D17, ARM::D17_D18_D19, ARM::D19_D20_D21, ARM::D21_D22_D23, ARM::D23_D24_D25, ARM::D25_D26_D27, ARM::D27_D28_D29, ARM::D29_D30_D31, 
  };

  // DTriple_with_dsub_1_dsub_2_in_QPR Bit set.
  const uint8_t DTriple_with_dsub_1_dsub_2_in_QPRBits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x55, 0x55, 0x55, 0x15, 
  };

  // DTriple_with_qsub_0_in_QPR Register Class...
  const uint16_t DTriple_with_qsub_0_in_QPR[] = {
    ARM::D0_D1_D2, ARM::D2_D3_D4, ARM::D4_D5_D6, ARM::D6_D7_D8, ARM::D8_D9_D10, ARM::D10_D11_D12, ARM::D12_D13_D14, ARM::D14_D15_D16, ARM::D16_D17_D18, ARM::D18_D19_D20, ARM::D20_D21_D22, ARM::D22_D23_D24, ARM::D24_D25_D26, ARM::D26_D27_D28, ARM::D28_D29_D30, 
  };

  // DTriple_with_qsub_0_in_QPR Bit set.
  const uint8_t DTriple_with_qsub_0_in_QPRBits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xaa, 0xaa, 0xaa, 0x0a, 
  };

  // DTriple_with_ssub_2 Register Class...
  const uint16_t DTriple_with_ssub_2[] = {
    ARM::D0_D1_D2, ARM::D1_D2_D3, ARM::D2_D3_D4, ARM::D3_D4_D5, ARM::D4_D5_D6, ARM::D5_D6_D7, ARM::D6_D7_D8, ARM::D7_D8_D9, ARM::D8_D9_D10, ARM::D9_D10_D11, ARM::D10_D11_D12, ARM::D11_D12_D13, ARM::D12_D13_D14, ARM::D13_D14_D15, ARM::D14_D15_D16, 
  };

  // DTriple_with_ssub_2 Bit set.
  const uint8_t DTriple_with_ssub_2Bits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xff, 0x3f, 
  };

  // DTripleSpc_with_dsub_2_then_ssub_0 Register Class...
  const uint16_t DTripleSpc_with_dsub_2_then_ssub_0[] = {
    ARM::D0_D2_D4, ARM::D1_D3_D5, ARM::D2_D4_D6, ARM::D3_D5_D7, ARM::D4_D6_D8, ARM::D5_D7_D9, ARM::D6_D8_D10, ARM::D7_D9_D11, ARM::D8_D10_D12, ARM::D9_D11_D13, ARM::D10_D12_D14, ARM::D11_D13_D15, ARM::D12_D14_D16, ARM::D13_D15_D17, 
  };

  // DTripleSpc_with_dsub_2_then_ssub_0 Bit set.
  const uint8_t DTripleSpc_with_dsub_2_then_ssub_0Bits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 0xff, 0x07, 
  };

  // DTriple_with_dsub_2_then_ssub_0 Register Class...
  const uint16_t DTriple_with_dsub_2_then_ssub_0[] = {
    ARM::D0_D1_D2, ARM::D1_D2_D3, ARM::D2_D3_D4, ARM::D3_D4_D5, ARM::D4_D5_D6, ARM::D5_D6_D7, ARM::D6_D7_D8, ARM::D7_D8_D9, ARM::D8_D9_D10, ARM::D9_D10_D11, ARM::D10_D11_D12, ARM::D11_D12_D13, ARM::D12_D13_D14, ARM::D13_D14_D15, 
  };

  // DTriple_with_dsub_2_then_ssub_0 Bit set.
  const uint8_t DTriple_with_dsub_2_then_ssub_0Bits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xff, 0x1f, 
  };

  // DTripleSpc_with_dsub_4_then_ssub_0 Register Class...
  const uint16_t DTripleSpc_with_dsub_4_then_ssub_0[] = {
    ARM::D0_D2_D4, ARM::D1_D3_D5, ARM::D2_D4_D6, ARM::D3_D5_D7, ARM::D4_D6_D8, ARM::D5_D7_D9, ARM::D6_D8_D10, ARM::D7_D9_D11, ARM::D8_D10_D12, ARM::D9_D11_D13, ARM::D10_D12_D14, ARM::D11_D13_D15, 
  };

  // DTripleSpc_with_dsub_4_then_ssub_0 Bit set.
  const uint8_t DTripleSpc_with_dsub_4_then_ssub_0Bits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 0xff, 0x01, 
  };

  // DTripleSpc_with_dsub_0_in_DPR_8 Register Class...
  const uint16_t DTripleSpc_with_dsub_0_in_DPR_8[] = {
    ARM::D0_D2_D4, ARM::D1_D3_D5, ARM::D2_D4_D6, ARM::D3_D5_D7, ARM::D4_D6_D8, ARM::D5_D7_D9, ARM::D6_D8_D10, ARM::D7_D9_D11, 
  };

  // DTripleSpc_with_dsub_0_in_DPR_8 Bit set.
  const uint8_t DTripleSpc_with_dsub_0_in_DPR_8Bits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 0x1f, 
  };

  // DTriple_with_dsub_0_in_DPR_8 Register Class...
  const uint16_t DTriple_with_dsub_0_in_DPR_8[] = {
    ARM::D0_D1_D2, ARM::D1_D2_D3, ARM::D2_D3_D4, ARM::D3_D4_D5, ARM::D4_D5_D6, ARM::D5_D6_D7, ARM::D6_D7_D8, ARM::D7_D8_D9, 
  };

  // DTriple_with_dsub_0_in_DPR_8 Bit set.
  const uint8_t DTriple_with_dsub_0_in_DPR_8Bits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x7f, 
  };

  // DTriple_with_qsub_0_in_QPR_VFP2 Register Class...
  const uint16_t DTriple_with_qsub_0_in_QPR_VFP2[] = {
    ARM::D0_D1_D2, ARM::D2_D3_D4, ARM::D4_D5_D6, ARM::D6_D7_D8, ARM::D8_D9_D10, ARM::D10_D11_D12, ARM::D12_D13_D14, ARM::D14_D15_D16, 
  };

  // DTriple_with_qsub_0_in_QPR_VFP2 Bit set.
  const uint8_t DTriple_with_qsub_0_in_QPR_VFP2Bits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xaa, 0x2a, 
  };

  // DTriple_with_ssub_0_and_DTriple_with_dsub_1_dsub_2_in_QPR Register Class...
  const uint16_t DTriple_with_ssub_0_and_DTriple_with_dsub_1_dsub_2_in_QPR[] = {
    ARM::D1_D2_D3, ARM::D3_D4_D5, ARM::D5_D6_D7, ARM::D7_D8_D9, ARM::D9_D10_D11, ARM::D11_D12_D13, ARM::D13_D14_D15, ARM::D15_D16_D17, 
  };

  // DTriple_with_ssub_0_and_DTriple_with_dsub_1_dsub_2_in_QPR Bit set.
  const uint8_t DTriple_with_ssub_0_and_DTriple_with_dsub_1_dsub_2_in_QPRBits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x55, 0x55, 
  };

  // DTriple_with_dsub_1_dsub_2_in_QPR_VFP2 Register Class...
  const uint16_t DTriple_with_dsub_1_dsub_2_in_QPR_VFP2[] = {
    ARM::D1_D2_D3, ARM::D3_D4_D5, ARM::D5_D6_D7, ARM::D7_D8_D9, ARM::D9_D10_D11, ARM::D11_D12_D13, ARM::D13_D14_D15, 
  };

  // DTriple_with_dsub_1_dsub_2_in_QPR_VFP2 Bit set.
  const uint8_t DTriple_with_dsub_1_dsub_2_in_QPR_VFP2Bits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x55, 0x15, 
  };

  // DTriple_with_dsub_1_in_DPR_8 Register Class...
  const uint16_t DTriple_with_dsub_1_in_DPR_8[] = {
    ARM::D0_D1_D2, ARM::D1_D2_D3, ARM::D2_D3_D4, ARM::D3_D4_D5, ARM::D4_D5_D6, ARM::D5_D6_D7, ARM::D6_D7_D8, 
  };

  // DTriple_with_dsub_1_in_DPR_8 Bit set.
  const uint8_t DTriple_with_dsub_1_in_DPR_8Bits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x3f, 
  };

  // DTriple_with_dsub_2_then_ssub_0_and_DTriple_with_qsub_0_in_QPR Register Class...
  const uint16_t DTriple_with_dsub_2_then_ssub_0_and_DTriple_with_qsub_0_in_QPR[] = {
    ARM::D0_D1_D2, ARM::D2_D3_D4, ARM::D4_D5_D6, ARM::D6_D7_D8, ARM::D8_D9_D10, ARM::D10_D11_D12, ARM::D12_D13_D14, 
  };

  // DTriple_with_dsub_2_then_ssub_0_and_DTriple_with_qsub_0_in_QPR Bit set.
  const uint8_t DTriple_with_dsub_2_then_ssub_0_and_DTriple_with_qsub_0_in_QPRBits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xaa, 0x0a, 
  };

  // DTripleSpc_with_dsub_2_in_DPR_8 Register Class...
  const uint16_t DTripleSpc_with_dsub_2_in_DPR_8[] = {
    ARM::D0_D2_D4, ARM::D1_D3_D5, ARM::D2_D4_D6, ARM::D3_D5_D7, ARM::D4_D6_D8, ARM::D5_D7_D9, 
  };

  // DTripleSpc_with_dsub_2_in_DPR_8 Bit set.
  const uint8_t DTripleSpc_with_dsub_2_in_DPR_8Bits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 0x07, 
  };

  // DTriple_with_dsub_2_in_DPR_8 Register Class...
  const uint16_t DTriple_with_dsub_2_in_DPR_8[] = {
    ARM::D0_D1_D2, ARM::D1_D2_D3, ARM::D2_D3_D4, ARM::D3_D4_D5, ARM::D4_D5_D6, ARM::D5_D6_D7, 
  };

  // DTriple_with_dsub_2_in_DPR_8 Bit set.
  const uint8_t DTriple_with_dsub_2_in_DPR_8Bits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x1f, 
  };

  // DTripleSpc_with_dsub_4_in_DPR_8 Register Class...
  const uint16_t DTripleSpc_with_dsub_4_in_DPR_8[] = {
    ARM::D0_D2_D4, ARM::D1_D3_D5, ARM::D2_D4_D6, ARM::D3_D5_D7, 
  };

  // DTripleSpc_with_dsub_4_in_DPR_8 Bit set.
  const uint8_t DTripleSpc_with_dsub_4_in_DPR_8Bits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 0x01, 
  };

  // DTriple_with_dsub_0_in_DPR_8_and_DTriple_with_dsub_1_dsub_2_in_QPR Register Class...
  const uint16_t DTriple_with_dsub_0_in_DPR_8_and_DTriple_with_dsub_1_dsub_2_in_QPR[] = {
    ARM::D1_D2_D3, ARM::D3_D4_D5, ARM::D5_D6_D7, ARM::D7_D8_D9, 
  };

  // DTriple_with_dsub_0_in_DPR_8_and_DTriple_with_dsub_1_dsub_2_in_QPR Bit set.
  const uint8_t DTriple_with_dsub_0_in_DPR_8_and_DTriple_with_dsub_1_dsub_2_in_QPRBits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x55, 
  };

  // DTriple_with_qsub_0_in_QPR_8 Register Class...
  const uint16_t DTriple_with_qsub_0_in_QPR_8[] = {
    ARM::D0_D1_D2, ARM::D2_D3_D4, ARM::D4_D5_D6, ARM::D6_D7_D8, 
  };

  // DTriple_with_qsub_0_in_QPR_8 Bit set.
  const uint8_t DTriple_with_qsub_0_in_QPR_8Bits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x2a, 
  };

  // DTriple_with_dsub_1_dsub_2_in_QPR_8 Register Class...
  const uint16_t DTriple_with_dsub_1_dsub_2_in_QPR_8[] = {
    ARM::D1_D2_D3, ARM::D3_D4_D5, ARM::D5_D6_D7, 
  };

  // DTriple_with_dsub_1_dsub_2_in_QPR_8 Bit set.
  const uint8_t DTriple_with_dsub_1_dsub_2_in_QPR_8Bits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x15, 
  };

  // DTriple_with_dsub_2_in_DPR_8_and_DTriple_with_qsub_0_in_QPR Register Class...
  const uint16_t DTriple_with_dsub_2_in_DPR_8_and_DTriple_with_qsub_0_in_QPR[] = {
    ARM::D0_D1_D2, ARM::D2_D3_D4, ARM::D4_D5_D6, 
  };

  // DTriple_with_dsub_2_in_DPR_8_and_DTriple_with_qsub_0_in_QPR Bit set.
  const uint8_t DTriple_with_dsub_2_in_DPR_8_and_DTriple_with_qsub_0_in_QPRBits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x0a, 
  };

  // DQuadSpc Register Class...
  const uint16_t DQuadSpc[] = {
    ARM::D0_D2_D4, ARM::D1_D3_D5, ARM::D2_D4_D6, ARM::D3_D5_D7, ARM::D4_D6_D8, ARM::D5_D7_D9, ARM::D6_D8_D10, ARM::D7_D9_D11, ARM::D8_D10_D12, ARM::D9_D11_D13, ARM::D10_D12_D14, ARM::D11_D13_D15, ARM::D12_D14_D16, ARM::D13_D15_D17, ARM::D14_D16_D18, ARM::D15_D17_D19, ARM::D16_D18_D20, ARM::D17_D19_D21, ARM::D18_D20_D22, ARM::D19_D21_D23, ARM::D20_D22_D24, ARM::D21_D23_D25, ARM::D22_D24_D26, ARM::D23_D25_D27, ARM::D24_D26_D28, ARM::D25_D27_D29, ARM::D26_D28_D30, ARM::D27_D29_D31, 
  };

  // DQuadSpc Bit set.
  const uint8_t DQuadSpcBits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 0xff, 0xff, 0xff, 0x01, 
  };

  // DQuadSpc_with_ssub_0 Register Class...
  const uint16_t DQuadSpc_with_ssub_0[] = {
    ARM::D0_D2_D4, ARM::D1_D3_D5, ARM::D2_D4_D6, ARM::D3_D5_D7, ARM::D4_D6_D8, ARM::D5_D7_D9, ARM::D6_D8_D10, ARM::D7_D9_D11, ARM::D8_D10_D12, ARM::D9_D11_D13, ARM::D10_D12_D14, ARM::D11_D13_D15, ARM::D12_D14_D16, ARM::D13_D15_D17, ARM::D14_D16_D18, ARM::D15_D17_D19, 
  };

  // DQuadSpc_with_ssub_0 Bit set.
  const uint8_t DQuadSpc_with_ssub_0Bits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 0xff, 0x1f, 
  };

  // DQuadSpc_with_dsub_2_then_ssub_0 Register Class...
  const uint16_t DQuadSpc_with_dsub_2_then_ssub_0[] = {
    ARM::D0_D2_D4, ARM::D1_D3_D5, ARM::D2_D4_D6, ARM::D3_D5_D7, ARM::D4_D6_D8, ARM::D5_D7_D9, ARM::D6_D8_D10, ARM::D7_D9_D11, ARM::D8_D10_D12, ARM::D9_D11_D13, ARM::D10_D12_D14, ARM::D11_D13_D15, ARM::D12_D14_D16, ARM::D13_D15_D17, 
  };

  // DQuadSpc_with_dsub_2_then_ssub_0 Bit set.
  const uint8_t DQuadSpc_with_dsub_2_then_ssub_0Bits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 0xff, 0x07, 
  };

  // DQuadSpc_with_dsub_4_then_ssub_0 Register Class...
  const uint16_t DQuadSpc_with_dsub_4_then_ssub_0[] = {
    ARM::D0_D2_D4, ARM::D1_D3_D5, ARM::D2_D4_D6, ARM::D3_D5_D7, ARM::D4_D6_D8, ARM::D5_D7_D9, ARM::D6_D8_D10, ARM::D7_D9_D11, ARM::D8_D10_D12, ARM::D9_D11_D13, ARM::D10_D12_D14, ARM::D11_D13_D15, 
  };

  // DQuadSpc_with_dsub_4_then_ssub_0 Bit set.
  const uint8_t DQuadSpc_with_dsub_4_then_ssub_0Bits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 0xff, 0x01, 
  };

  // DQuadSpc_with_dsub_0_in_DPR_8 Register Class...
  const uint16_t DQuadSpc_with_dsub_0_in_DPR_8[] = {
    ARM::D0_D2_D4, ARM::D1_D3_D5, ARM::D2_D4_D6, ARM::D3_D5_D7, ARM::D4_D6_D8, ARM::D5_D7_D9, ARM::D6_D8_D10, ARM::D7_D9_D11, 
  };

  // DQuadSpc_with_dsub_0_in_DPR_8 Bit set.
  const uint8_t DQuadSpc_with_dsub_0_in_DPR_8Bits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 0x1f, 
  };

  // DQuadSpc_with_dsub_2_in_DPR_8 Register Class...
  const uint16_t DQuadSpc_with_dsub_2_in_DPR_8[] = {
    ARM::D0_D2_D4, ARM::D1_D3_D5, ARM::D2_D4_D6, ARM::D3_D5_D7, ARM::D4_D6_D8, ARM::D5_D7_D9, 
  };

  // DQuadSpc_with_dsub_2_in_DPR_8 Bit set.
  const uint8_t DQuadSpc_with_dsub_2_in_DPR_8Bits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 0x07, 
  };

  // DQuadSpc_with_dsub_4_in_DPR_8 Register Class...
  const uint16_t DQuadSpc_with_dsub_4_in_DPR_8[] = {
    ARM::D0_D2_D4, ARM::D1_D3_D5, ARM::D2_D4_D6, ARM::D3_D5_D7, 
  };

  // DQuadSpc_with_dsub_4_in_DPR_8 Bit set.
  const uint8_t DQuadSpc_with_dsub_4_in_DPR_8Bits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 0x01, 
  };

  // DQuad Register Class...
  const uint16_t DQuad[] = {
    ARM::Q0_Q1, ARM::D1_D2_D3_D4, ARM::Q1_Q2, ARM::D3_D4_D5_D6, ARM::Q2_Q3, ARM::D5_D6_D7_D8, ARM::Q3_Q4, ARM::D7_D8_D9_D10, ARM::Q4_Q5, ARM::D9_D10_D11_D12, ARM::Q5_Q6, ARM::D11_D12_D13_D14, ARM::Q6_Q7, ARM::D13_D14_D15_D16, ARM::Q7_Q8, ARM::D15_D16_D17_D18, ARM::Q8_Q9, ARM::D17_D18_D19_D20, ARM::Q9_Q10, ARM::D19_D20_D21_D22, ARM::Q10_Q11, ARM::D21_D22_D23_D24, ARM::Q11_Q12, ARM::D23_D24_D25_D26, ARM::Q12_Q13, ARM::D25_D26_D27_D28, ARM::Q13_Q14, ARM::D27_D28_D29_D30, ARM::Q14_Q15, 
  };

  // DQuad Bit set.
  const uint8_t DQuadBits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0xff, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfc, 0xff, 
  };

  // DQuad_with_ssub_0 Register Class...
  const uint16_t DQuad_with_ssub_0[] = {
    ARM::Q0_Q1, ARM::D1_D2_D3_D4, ARM::Q1_Q2, ARM::D3_D4_D5_D6, ARM::Q2_Q3, ARM::D5_D6_D7_D8, ARM::Q3_Q4, ARM::D7_D8_D9_D10, ARM::Q4_Q5, ARM::D9_D10_D11_D12, ARM::Q5_Q6, ARM::D11_D12_D13_D14, ARM::Q6_Q7, ARM::D13_D14_D15_D16, ARM::Q7_Q8, ARM::D15_D16_D17_D18, 
  };

  // DQuad_with_ssub_0 Bit set.
  const uint8_t DQuad_with_ssub_0Bits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfc, 0x03, 
  };

  // DQuad_with_ssub_2 Register Class...
  const uint16_t DQuad_with_ssub_2[] = {
    ARM::Q0_Q1, ARM::D1_D2_D3_D4, ARM::Q1_Q2, ARM::D3_D4_D5_D6, ARM::Q2_Q3, ARM::D5_D6_D7_D8, ARM::Q3_Q4, ARM::D7_D8_D9_D10, ARM::Q4_Q5, ARM::D9_D10_D11_D12, ARM::Q5_Q6, ARM::D11_D12_D13_D14, ARM::Q6_Q7, ARM::D13_D14_D15_D16, ARM::Q7_Q8, 
  };

  // DQuad_with_ssub_2 Bit set.
  const uint8_t DQuad_with_ssub_2Bits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfc, 0x01, 
  };

  // QQPR Register Class...
  const uint16_t QQPR[] = {
    ARM::Q0_Q1, ARM::Q1_Q2, ARM::Q2_Q3, ARM::Q3_Q4, ARM::Q4_Q5, ARM::Q5_Q6, ARM::Q6_Q7, ARM::Q7_Q8, ARM::Q8_Q9, ARM::Q9_Q10, ARM::Q10_Q11, ARM::Q11_Q12, ARM::Q12_Q13, ARM::Q13_Q14, ARM::Q14_Q15, 
  };

  // QQPR Bit set.
  const uint8_t QQPRBits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0xff, 0x07, 
  };

  // DQuad_with_dsub_1_dsub_2_in_QPR Register Class...
  const uint16_t DQuad_with_dsub_1_dsub_2_in_QPR[] = {
    ARM::D1_D2_D3_D4, ARM::D3_D4_D5_D6, ARM::D5_D6_D7_D8, ARM::D7_D8_D9_D10, ARM::D9_D10_D11_D12, ARM::D11_D12_D13_D14, ARM::D13_D14_D15_D16, ARM::D15_D16_D17_D18, ARM::D17_D18_D19_D20, ARM::D19_D20_D21_D22, ARM::D21_D22_D23_D24, ARM::D23_D24_D25_D26, ARM::D25_D26_D27_D28, ARM::D27_D28_D29_D30, 
  };

  // DQuad_with_dsub_1_dsub_2_in_QPR Bit set.
  const uint8_t DQuad_with_dsub_1_dsub_2_in_QPRBits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfc, 0xff, 
  };

  // DQuad_with_dsub_2_then_ssub_0 Register Class...
  const uint16_t DQuad_with_dsub_2_then_ssub_0[] = {
    ARM::Q0_Q1, ARM::D1_D2_D3_D4, ARM::Q1_Q2, ARM::D3_D4_D5_D6, ARM::Q2_Q3, ARM::D5_D6_D7_D8, ARM::Q3_Q4, ARM::D7_D8_D9_D10, ARM::Q4_Q5, ARM::D9_D10_D11_D12, ARM::Q5_Q6, ARM::D11_D12_D13_D14, ARM::Q6_Q7, ARM::D13_D14_D15_D16, 
  };

  // DQuad_with_dsub_2_then_ssub_0 Bit set.
  const uint8_t DQuad_with_dsub_2_then_ssub_0Bits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfc, 0x01, 
  };

  // DQuad_with_dsub_3_then_ssub_0 Register Class...
  const uint16_t DQuad_with_dsub_3_then_ssub_0[] = {
    ARM::Q0_Q1, ARM::D1_D2_D3_D4, ARM::Q1_Q2, ARM::D3_D4_D5_D6, ARM::Q2_Q3, ARM::D5_D6_D7_D8, ARM::Q3_Q4, ARM::D7_D8_D9_D10, ARM::Q4_Q5, ARM::D9_D10_D11_D12, ARM::Q5_Q6, ARM::D11_D12_D13_D14, ARM::Q6_Q7, 
  };

  // DQuad_with_dsub_3_then_ssub_0 Bit set.
  const uint8_t DQuad_with_dsub_3_then_ssub_0Bits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfc, 
  };

  // DQuad_with_dsub_0_in_DPR_8 Register Class...
  const uint16_t DQuad_with_dsub_0_in_DPR_8[] = {
    ARM::Q0_Q1, ARM::D1_D2_D3_D4, ARM::Q1_Q2, ARM::D3_D4_D5_D6, ARM::Q2_Q3, ARM::D5_D6_D7_D8, ARM::Q3_Q4, ARM::D7_D8_D9_D10, 
  };

  // DQuad_with_dsub_0_in_DPR_8 Bit set.
  const uint8_t DQuad_with_dsub_0_in_DPR_8Bits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3c, 
  };

  // DQuad_with_qsub_0_in_QPR_VFP2 Register Class...
  const uint16_t DQuad_with_qsub_0_in_QPR_VFP2[] = {
    ARM::Q0_Q1, ARM::Q1_Q2, ARM::Q2_Q3, ARM::Q3_Q4, ARM::Q4_Q5, ARM::Q5_Q6, ARM::Q6_Q7, ARM::Q7_Q8, 
  };

  // DQuad_with_qsub_0_in_QPR_VFP2 Bit set.
  const uint8_t DQuad_with_qsub_0_in_QPR_VFP2Bits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0x0f, 
  };

  // DQuad_with_ssub_0_and_DQuad_with_dsub_1_dsub_2_in_QPR Register Class...
  const uint16_t DQuad_with_ssub_0_and_DQuad_with_dsub_1_dsub_2_in_QPR[] = {
    ARM::D1_D2_D3_D4, ARM::D3_D4_D5_D6, ARM::D5_D6_D7_D8, ARM::D7_D8_D9_D10, ARM::D9_D10_D11_D12, ARM::D11_D12_D13_D14, ARM::D13_D14_D15_D16, ARM::D15_D16_D17_D18, 
  };

  // DQuad_with_ssub_0_and_DQuad_with_dsub_1_dsub_2_in_QPR Bit set.
  const uint8_t DQuad_with_ssub_0_and_DQuad_with_dsub_1_dsub_2_in_QPRBits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfc, 0x03, 
  };

  // DQuad_with_dsub_1_dsub_2_in_QPR_VFP2 Register Class...
  const uint16_t DQuad_with_dsub_1_dsub_2_in_QPR_VFP2[] = {
    ARM::D1_D2_D3_D4, ARM::D3_D4_D5_D6, ARM::D5_D6_D7_D8, ARM::D7_D8_D9_D10, ARM::D9_D10_D11_D12, ARM::D11_D12_D13_D14, ARM::D13_D14_D15_D16, 
  };

  // DQuad_with_dsub_1_dsub_2_in_QPR_VFP2 Bit set.
  const uint8_t DQuad_with_dsub_1_dsub_2_in_QPR_VFP2Bits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfc, 0x01, 
  };

  // DQuad_with_dsub_1_in_DPR_8 Register Class...
  const uint16_t DQuad_with_dsub_1_in_DPR_8[] = {
    ARM::Q0_Q1, ARM::D1_D2_D3_D4, ARM::Q1_Q2, ARM::D3_D4_D5_D6, ARM::Q2_Q3, ARM::D5_D6_D7_D8, ARM::Q3_Q4, 
  };

  // DQuad_with_dsub_1_in_DPR_8 Bit set.
  const uint8_t DQuad_with_dsub_1_in_DPR_8Bits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1c, 
  };

  // DQuad_with_qsub_1_in_QPR_VFP2 Register Class...
  const uint16_t DQuad_with_qsub_1_in_QPR_VFP2[] = {
    ARM::Q0_Q1, ARM::Q1_Q2, ARM::Q2_Q3, ARM::Q3_Q4, ARM::Q4_Q5, ARM::Q5_Q6, ARM::Q6_Q7, 
  };

  // DQuad_with_qsub_1_in_QPR_VFP2 Bit set.
  const uint8_t DQuad_with_qsub_1_in_QPR_VFP2Bits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0x07, 
  };

  // DQuad_with_dsub_2_in_DPR_8 Register Class...
  const uint16_t DQuad_with_dsub_2_in_DPR_8[] = {
    ARM::Q0_Q1, ARM::D1_D2_D3_D4, ARM::Q1_Q2, ARM::D3_D4_D5_D6, ARM::Q2_Q3, ARM::D5_D6_D7_D8, 
  };

  // DQuad_with_dsub_2_in_DPR_8 Bit set.
  const uint8_t DQuad_with_dsub_2_in_DPR_8Bits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1c, 
  };

  // DQuad_with_dsub_3_then_ssub_0_and_DQuad_with_dsub_1_dsub_2_in_QPR Register Class...
  const uint16_t DQuad_with_dsub_3_then_ssub_0_and_DQuad_with_dsub_1_dsub_2_in_QPR[] = {
    ARM::D1_D2_D3_D4, ARM::D3_D4_D5_D6, ARM::D5_D6_D7_D8, ARM::D7_D8_D9_D10, ARM::D9_D10_D11_D12, ARM::D11_D12_D13_D14, 
  };

  // DQuad_with_dsub_3_then_ssub_0_and_DQuad_with_dsub_1_dsub_2_in_QPR Bit set.
  const uint8_t DQuad_with_dsub_3_then_ssub_0_and_DQuad_with_dsub_1_dsub_2_in_QPRBits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfc, 
  };

  // DQuad_with_dsub_3_in_DPR_8 Register Class...
  const uint16_t DQuad_with_dsub_3_in_DPR_8[] = {
    ARM::Q0_Q1, ARM::D1_D2_D3_D4, ARM::Q1_Q2, ARM::D3_D4_D5_D6, ARM::Q2_Q3, 
  };

  // DQuad_with_dsub_3_in_DPR_8 Bit set.
  const uint8_t DQuad_with_dsub_3_in_DPR_8Bits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 
  };

  // DQuad_with_dsub_0_in_DPR_8_and_DQuad_with_dsub_1_dsub_2_in_QPR Register Class...
  const uint16_t DQuad_with_dsub_0_in_DPR_8_and_DQuad_with_dsub_1_dsub_2_in_QPR[] = {
    ARM::D1_D2_D3_D4, ARM::D3_D4_D5_D6, ARM::D5_D6_D7_D8, ARM::D7_D8_D9_D10, 
  };

  // DQuad_with_dsub_0_in_DPR_8_and_DQuad_with_dsub_1_dsub_2_in_QPR Bit set.
  const uint8_t DQuad_with_dsub_0_in_DPR_8_and_DQuad_with_dsub_1_dsub_2_in_QPRBits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3c, 
  };

  // DQuad_with_qsub_0_in_QPR_8 Register Class...
  const uint16_t DQuad_with_qsub_0_in_QPR_8[] = {
    ARM::Q0_Q1, ARM::Q1_Q2, ARM::Q2_Q3, ARM::Q3_Q4, 
  };

  // DQuad_with_qsub_0_in_QPR_8 Bit set.
  const uint8_t DQuad_with_qsub_0_in_QPR_8Bits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 
  };

  // DQuad_with_dsub_1_dsub_2_in_QPR_8 Register Class...
  const uint16_t DQuad_with_dsub_1_dsub_2_in_QPR_8[] = {
    ARM::D1_D2_D3_D4, ARM::D3_D4_D5_D6, ARM::D5_D6_D7_D8, 
  };

  // DQuad_with_dsub_1_dsub_2_in_QPR_8 Bit set.
  const uint8_t DQuad_with_dsub_1_dsub_2_in_QPR_8Bits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1c, 
  };

  // DQuad_with_qsub_1_in_QPR_8 Register Class...
  const uint16_t DQuad_with_qsub_1_in_QPR_8[] = {
    ARM::Q0_Q1, ARM::Q1_Q2, ARM::Q2_Q3, 
  };

  // DQuad_with_qsub_1_in_QPR_8 Bit set.
  const uint8_t DQuad_with_qsub_1_in_QPR_8Bits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x70, 
  };

  // DQuad_with_dsub_3_in_DPR_8_and_DQuad_with_dsub_1_dsub_2_in_QPR Register Class...
  const uint16_t DQuad_with_dsub_3_in_DPR_8_and_DQuad_with_dsub_1_dsub_2_in_QPR[] = {
    ARM::D1_D2_D3_D4, ARM::D3_D4_D5_D6, 
  };

  // DQuad_with_dsub_3_in_DPR_8_and_DQuad_with_dsub_1_dsub_2_in_QPR Bit set.
  const uint8_t DQuad_with_dsub_3_in_DPR_8_and_DQuad_with_dsub_1_dsub_2_in_QPRBits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 
  };

  // QQQQPR Register Class...
  const uint16_t QQQQPR[] = {
    ARM::Q0_Q1_Q2_Q3, ARM::Q1_Q2_Q3_Q4, ARM::Q2_Q3_Q4_Q5, ARM::Q3_Q4_Q5_Q6, ARM::Q4_Q5_Q6_Q7, ARM::Q5_Q6_Q7_Q8, ARM::Q6_Q7_Q8_Q9, ARM::Q7_Q8_Q9_Q10, ARM::Q8_Q9_Q10_Q11, ARM::Q9_Q10_Q11_Q12, ARM::Q10_Q11_Q12_Q13, ARM::Q11_Q12_Q13_Q14, ARM::Q12_Q13_Q14_Q15, 
  };

  // QQQQPR Bit set.
  const uint8_t QQQQPRBits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0xff, 
  };

  // QQQQPR_with_ssub_0 Register Class...
  const uint16_t QQQQPR_with_ssub_0[] = {
    ARM::Q0_Q1_Q2_Q3, ARM::Q1_Q2_Q3_Q4, ARM::Q2_Q3_Q4_Q5, ARM::Q3_Q4_Q5_Q6, ARM::Q4_Q5_Q6_Q7, ARM::Q5_Q6_Q7_Q8, ARM::Q6_Q7_Q8_Q9, ARM::Q7_Q8_Q9_Q10, 
  };

  // QQQQPR_with_ssub_0 Bit set.
  const uint8_t QQQQPR_with_ssub_0Bits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0x07, 
  };

  // QQQQPR_with_dsub_2_then_ssub_0 Register Class...
  const uint16_t QQQQPR_with_dsub_2_then_ssub_0[] = {
    ARM::Q0_Q1_Q2_Q3, ARM::Q1_Q2_Q3_Q4, ARM::Q2_Q3_Q4_Q5, ARM::Q3_Q4_Q5_Q6, ARM::Q4_Q5_Q6_Q7, ARM::Q5_Q6_Q7_Q8, ARM::Q6_Q7_Q8_Q9, 
  };

  // QQQQPR_with_dsub_2_then_ssub_0 Bit set.
  const uint8_t QQQQPR_with_dsub_2_then_ssub_0Bits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0x03, 
  };

  // QQQQPR_with_dsub_5_then_ssub_0 Register Class...
  const uint16_t QQQQPR_with_dsub_5_then_ssub_0[] = {
    ARM::Q0_Q1_Q2_Q3, ARM::Q1_Q2_Q3_Q4, ARM::Q2_Q3_Q4_Q5, ARM::Q3_Q4_Q5_Q6, ARM::Q4_Q5_Q6_Q7, ARM::Q5_Q6_Q7_Q8, 
  };

  // QQQQPR_with_dsub_5_then_ssub_0 Bit set.
  const uint8_t QQQQPR_with_dsub_5_then_ssub_0Bits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0x01, 
  };

  // QQQQPR_with_dsub_7_then_ssub_0 Register Class...
  const uint16_t QQQQPR_with_dsub_7_then_ssub_0[] = {
    ARM::Q0_Q1_Q2_Q3, ARM::Q1_Q2_Q3_Q4, ARM::Q2_Q3_Q4_Q5, ARM::Q3_Q4_Q5_Q6, ARM::Q4_Q5_Q6_Q7, 
  };

  // QQQQPR_with_dsub_7_then_ssub_0 Bit set.
  const uint8_t QQQQPR_with_dsub_7_then_ssub_0Bits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 
  };

  // QQQQPR_with_dsub_0_in_DPR_8 Register Class...
  const uint16_t QQQQPR_with_dsub_0_in_DPR_8[] = {
    ARM::Q0_Q1_Q2_Q3, ARM::Q1_Q2_Q3_Q4, ARM::Q2_Q3_Q4_Q5, ARM::Q3_Q4_Q5_Q6, 
  };

  // QQQQPR_with_dsub_0_in_DPR_8 Bit set.
  const uint8_t QQQQPR_with_dsub_0_in_DPR_8Bits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x78, 
  };

  // QQQQPR_with_dsub_2_in_DPR_8 Register Class...
  const uint16_t QQQQPR_with_dsub_2_in_DPR_8[] = {
    ARM::Q0_Q1_Q2_Q3, ARM::Q1_Q2_Q3_Q4, ARM::Q2_Q3_Q4_Q5, 
  };

  // QQQQPR_with_dsub_2_in_DPR_8 Bit set.
  const uint8_t QQQQPR_with_dsub_2_in_DPR_8Bits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 
  };

  // QQQQPR_with_dsub_4_in_DPR_8 Register Class...
  const uint16_t QQQQPR_with_dsub_4_in_DPR_8[] = {
    ARM::Q0_Q1_Q2_Q3, ARM::Q1_Q2_Q3_Q4, 
  };

  // QQQQPR_with_dsub_4_in_DPR_8 Bit set.
  const uint8_t QQQQPR_with_dsub_4_in_DPR_8Bits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 
  };

  // QQQQPR_with_dsub_6_in_DPR_8 Register Class...
  const uint16_t QQQQPR_with_dsub_6_in_DPR_8[] = {
    ARM::Q0_Q1_Q2_Q3, 
  };

  // QQQQPR_with_dsub_6_in_DPR_8 Bit set.
  const uint8_t QQQQPR_with_dsub_6_in_DPR_8Bits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 
  };

}

extern const MCRegisterClass ARMMCRegisterClasses[] = {
  { "SPR", SPR, SPRBits, 32, sizeof(SPRBits), ARM::SPRRegClassID, 4, 4, 1, 1 },
  { "GPR", GPR, GPRBits, 16, sizeof(GPRBits), ARM::GPRRegClassID, 4, 4, 1, 1 },
  { "GPRwithAPSR", GPRwithAPSR, GPRwithAPSRBits, 16, sizeof(GPRwithAPSRBits), ARM::GPRwithAPSRRegClassID, 4, 4, 1, 1 },
  { "SPR_8", SPR_8, SPR_8Bits, 16, sizeof(SPR_8Bits), ARM::SPR_8RegClassID, 4, 4, 1, 1 },
  { "GPRnopc", GPRnopc, GPRnopcBits, 15, sizeof(GPRnopcBits), ARM::GPRnopcRegClassID, 4, 4, 1, 1 },
  { "rGPR", rGPR, rGPRBits, 14, sizeof(rGPRBits), ARM::rGPRRegClassID, 4, 4, 1, 1 },
  { "hGPR", hGPR, hGPRBits, 8, sizeof(hGPRBits), ARM::hGPRRegClassID, 4, 4, 1, 1 },
  { "tGPR", tGPR, tGPRBits, 8, sizeof(tGPRBits), ARM::tGPRRegClassID, 4, 4, 1, 1 },
  { "GPRnopc_and_hGPR", GPRnopc_and_hGPR, GPRnopc_and_hGPRBits, 7, sizeof(GPRnopc_and_hGPRBits), ARM::GPRnopc_and_hGPRRegClassID, 4, 4, 1, 1 },
  { "hGPR_and_rGPR", hGPR_and_rGPR, hGPR_and_rGPRBits, 6, sizeof(hGPR_and_rGPRBits), ARM::hGPR_and_rGPRRegClassID, 4, 4, 1, 1 },
  { "tcGPR", tcGPR, tcGPRBits, 6, sizeof(tcGPRBits), ARM::tcGPRRegClassID, 4, 4, 1, 1 },
  { "tGPR_and_tcGPR", tGPR_and_tcGPR, tGPR_and_tcGPRBits, 4, sizeof(tGPR_and_tcGPRBits), ARM::tGPR_and_tcGPRRegClassID, 4, 4, 1, 1 },
  { "hGPR_and_tcGPR", hGPR_and_tcGPR, hGPR_and_tcGPRBits, 2, sizeof(hGPR_and_tcGPRBits), ARM::hGPR_and_tcGPRRegClassID, 4, 4, 1, 1 },
  { "CCR", CCR, CCRBits, 1, sizeof(CCRBits), ARM::CCRRegClassID, 4, 4, -1, 0 },
  { "GPRsp", GPRsp, GPRspBits, 1, sizeof(GPRspBits), ARM::GPRspRegClassID, 4, 4, 1, 1 },
  { "DPR", DPR, DPRBits, 32, sizeof(DPRBits), ARM::DPRRegClassID, 8, 8, 1, 1 },
  { "DPR_VFP2", DPR_VFP2, DPR_VFP2Bits, 16, sizeof(DPR_VFP2Bits), ARM::DPR_VFP2RegClassID, 8, 8, 1, 1 },
  { "DPR_8", DPR_8, DPR_8Bits, 8, sizeof(DPR_8Bits), ARM::DPR_8RegClassID, 8, 8, 1, 1 },
  { "GPRPair", GPRPair, GPRPairBits, 7, sizeof(GPRPairBits), ARM::GPRPairRegClassID, 8, 8, 1, 1 },
  { "GPRPair_with_gsub_1_in_rGPR", GPRPair_with_gsub_1_in_rGPR, GPRPair_with_gsub_1_in_rGPRBits, 6, sizeof(GPRPair_with_gsub_1_in_rGPRBits), ARM::GPRPair_with_gsub_1_in_rGPRRegClassID, 8, 8, 1, 1 },
  { "GPRPair_with_gsub_0_in_tGPR", GPRPair_with_gsub_0_in_tGPR, GPRPair_with_gsub_0_in_tGPRBits, 4, sizeof(GPRPair_with_gsub_0_in_tGPRBits), ARM::GPRPair_with_gsub_0_in_tGPRRegClassID, 8, 8, 1, 1 },
  { "GPRPair_with_gsub_0_in_hGPR", GPRPair_with_gsub_0_in_hGPR, GPRPair_with_gsub_0_in_hGPRBits, 3, sizeof(GPRPair_with_gsub_0_in_hGPRBits), ARM::GPRPair_with_gsub_0_in_hGPRRegClassID, 8, 8, 1, 1 },
  { "GPRPair_with_gsub_0_in_tcGPR", GPRPair_with_gsub_0_in_tcGPR, GPRPair_with_gsub_0_in_tcGPRBits, 3, sizeof(GPRPair_with_gsub_0_in_tcGPRBits), ARM::GPRPair_with_gsub_0_in_tcGPRRegClassID, 8, 8, 1, 1 },
  { "GPRPair_with_gsub_1_in_tcGPR", GPRPair_with_gsub_1_in_tcGPR, GPRPair_with_gsub_1_in_tcGPRBits, 3, sizeof(GPRPair_with_gsub_1_in_tcGPRBits), ARM::GPRPair_with_gsub_1_in_tcGPRRegClassID, 8, 8, 1, 1 },
  { "GPRPair_with_gsub_0_in_tGPR_and_tcGPR", GPRPair_with_gsub_0_in_tGPR_and_tcGPR, GPRPair_with_gsub_0_in_tGPR_and_tcGPRBits, 2, sizeof(GPRPair_with_gsub_0_in_tGPR_and_tcGPRBits), ARM::GPRPair_with_gsub_0_in_tGPR_and_tcGPRRegClassID, 8, 8, 1, 1 },
  { "GPRPair_with_gsub_1_in_hGPR_and_rGPR", GPRPair_with_gsub_1_in_hGPR_and_rGPR, GPRPair_with_gsub_1_in_hGPR_and_rGPRBits, 2, sizeof(GPRPair_with_gsub_1_in_hGPR_and_rGPRBits), ARM::GPRPair_with_gsub_1_in_hGPR_and_rGPRRegClassID, 8, 8, 1, 1 },
  { "GPRPair_with_gsub_1_in_GPRsp", GPRPair_with_gsub_1_in_GPRsp, GPRPair_with_gsub_1_in_GPRspBits, 1, sizeof(GPRPair_with_gsub_1_in_GPRspBits), ARM::GPRPair_with_gsub_1_in_GPRspRegClassID, 8, 8, 1, 1 },
  { "GPRPair_with_gsub_1_in_hGPR_and_tcGPR", GPRPair_with_gsub_1_in_hGPR_and_tcGPR, GPRPair_with_gsub_1_in_hGPR_and_tcGPRBits, 1, sizeof(GPRPair_with_gsub_1_in_hGPR_and_tcGPRBits), ARM::GPRPair_with_gsub_1_in_hGPR_and_tcGPRRegClassID, 8, 8, 1, 1 },
  { "DPairSpc", DPairSpc, DPairSpcBits, 30, sizeof(DPairSpcBits), ARM::DPairSpcRegClassID, 16, 8, 1, 1 },
  { "DPairSpc_with_ssub_0", DPairSpc_with_ssub_0, DPairSpc_with_ssub_0Bits, 16, sizeof(DPairSpc_with_ssub_0Bits), ARM::DPairSpc_with_ssub_0RegClassID, 16, 8, 1, 1 },
  { "DPairSpc_with_dsub_2_then_ssub_0", DPairSpc_with_dsub_2_then_ssub_0, DPairSpc_with_dsub_2_then_ssub_0Bits, 14, sizeof(DPairSpc_with_dsub_2_then_ssub_0Bits), ARM::DPairSpc_with_dsub_2_then_ssub_0RegClassID, 16, 8, 1, 1 },
  { "DPairSpc_with_dsub_0_in_DPR_8", DPairSpc_with_dsub_0_in_DPR_8, DPairSpc_with_dsub_0_in_DPR_8Bits, 8, sizeof(DPairSpc_with_dsub_0_in_DPR_8Bits), ARM::DPairSpc_with_dsub_0_in_DPR_8RegClassID, 16, 8, 1, 1 },
  { "DPairSpc_with_dsub_2_in_DPR_8", DPairSpc_with_dsub_2_in_DPR_8, DPairSpc_with_dsub_2_in_DPR_8Bits, 6, sizeof(DPairSpc_with_dsub_2_in_DPR_8Bits), ARM::DPairSpc_with_dsub_2_in_DPR_8RegClassID, 16, 8, 1, 1 },
  { "DPair", DPair, DPairBits, 31, sizeof(DPairBits), ARM::DPairRegClassID, 16, 16, 1, 1 },
  { "DPair_with_ssub_0", DPair_with_ssub_0, DPair_with_ssub_0Bits, 16, sizeof(DPair_with_ssub_0Bits), ARM::DPair_with_ssub_0RegClassID, 16, 16, 1, 1 },
  { "QPR", QPR, QPRBits, 16, sizeof(QPRBits), ARM::QPRRegClassID, 16, 16, 1, 1 },
  { "DPair_with_ssub_2", DPair_with_ssub_2, DPair_with_ssub_2Bits, 15, sizeof(DPair_with_ssub_2Bits), ARM::DPair_with_ssub_2RegClassID, 16, 16, 1, 1 },
  { "DPair_with_dsub_0_in_DPR_8", DPair_with_dsub_0_in_DPR_8, DPair_with_dsub_0_in_DPR_8Bits, 8, sizeof(DPair_with_dsub_0_in_DPR_8Bits), ARM::DPair_with_dsub_0_in_DPR_8RegClassID, 16, 16, 1, 1 },
  { "QPR_VFP2", QPR_VFP2, QPR_VFP2Bits, 8, sizeof(QPR_VFP2Bits), ARM::QPR_VFP2RegClassID, 16, 16, 1, 1 },
  { "DPair_with_dsub_1_in_DPR_8", DPair_with_dsub_1_in_DPR_8, DPair_with_dsub_1_in_DPR_8Bits, 7, sizeof(DPair_with_dsub_1_in_DPR_8Bits), ARM::DPair_with_dsub_1_in_DPR_8RegClassID, 16, 16, 1, 1 },
  { "QPR_8", QPR_8, QPR_8Bits, 4, sizeof(QPR_8Bits), ARM::QPR_8RegClassID, 16, 16, 1, 1 },
  { "DTriple", DTriple, DTripleBits, 30, sizeof(DTripleBits), ARM::DTripleRegClassID, 24, 8, 1, 1 },
  { "DTripleSpc", DTripleSpc, DTripleSpcBits, 28, sizeof(DTripleSpcBits), ARM::DTripleSpcRegClassID, 24, 8, 1, 1 },
  { "DTripleSpc_with_ssub_0", DTripleSpc_with_ssub_0, DTripleSpc_with_ssub_0Bits, 16, sizeof(DTripleSpc_with_ssub_0Bits), ARM::DTripleSpc_with_ssub_0RegClassID, 24, 8, 1, 1 },
  { "DTriple_with_ssub_0", DTriple_with_ssub_0, DTriple_with_ssub_0Bits, 16, sizeof(DTriple_with_ssub_0Bits), ARM::DTriple_with_ssub_0RegClassID, 24, 8, 1, 1 },
  { "DTriple_with_dsub_1_dsub_2_in_QPR", DTriple_with_dsub_1_dsub_2_in_QPR, DTriple_with_dsub_1_dsub_2_in_QPRBits, 15, sizeof(DTriple_with_dsub_1_dsub_2_in_QPRBits), ARM::DTriple_with_dsub_1_dsub_2_in_QPRRegClassID, 24, 8, 1, 1 },
  { "DTriple_with_qsub_0_in_QPR", DTriple_with_qsub_0_in_QPR, DTriple_with_qsub_0_in_QPRBits, 15, sizeof(DTriple_with_qsub_0_in_QPRBits), ARM::DTriple_with_qsub_0_in_QPRRegClassID, 24, 8, 1, 1 },
  { "DTriple_with_ssub_2", DTriple_with_ssub_2, DTriple_with_ssub_2Bits, 15, sizeof(DTriple_with_ssub_2Bits), ARM::DTriple_with_ssub_2RegClassID, 24, 8, 1, 1 },
  { "DTripleSpc_with_dsub_2_then_ssub_0", DTripleSpc_with_dsub_2_then_ssub_0, DTripleSpc_with_dsub_2_then_ssub_0Bits, 14, sizeof(DTripleSpc_with_dsub_2_then_ssub_0Bits), ARM::DTripleSpc_with_dsub_2_then_ssub_0RegClassID, 24, 8, 1, 1 },
  { "DTriple_with_dsub_2_then_ssub_0", DTriple_with_dsub_2_then_ssub_0, DTriple_with_dsub_2_then_ssub_0Bits, 14, sizeof(DTriple_with_dsub_2_then_ssub_0Bits), ARM::DTriple_with_dsub_2_then_ssub_0RegClassID, 24, 8, 1, 1 },
  { "DTripleSpc_with_dsub_4_then_ssub_0", DTripleSpc_with_dsub_4_then_ssub_0, DTripleSpc_with_dsub_4_then_ssub_0Bits, 12, sizeof(DTripleSpc_with_dsub_4_then_ssub_0Bits), ARM::DTripleSpc_with_dsub_4_then_ssub_0RegClassID, 24, 8, 1, 1 },
  { "DTripleSpc_with_dsub_0_in_DPR_8", DTripleSpc_with_dsub_0_in_DPR_8, DTripleSpc_with_dsub_0_in_DPR_8Bits, 8, sizeof(DTripleSpc_with_dsub_0_in_DPR_8Bits), ARM::DTripleSpc_with_dsub_0_in_DPR_8RegClassID, 24, 8, 1, 1 },
  { "DTriple_with_dsub_0_in_DPR_8", DTriple_with_dsub_0_in_DPR_8, DTriple_with_dsub_0_in_DPR_8Bits, 8, sizeof(DTriple_with_dsub_0_in_DPR_8Bits), ARM::DTriple_with_dsub_0_in_DPR_8RegClassID, 24, 8, 1, 1 },
  { "DTriple_with_qsub_0_in_QPR_VFP2", DTriple_with_qsub_0_in_QPR_VFP2, DTriple_with_qsub_0_in_QPR_VFP2Bits, 8, sizeof(DTriple_with_qsub_0_in_QPR_VFP2Bits), ARM::DTriple_with_qsub_0_in_QPR_VFP2RegClassID, 24, 8, 1, 1 },
  { "DTriple_with_ssub_0_and_DTriple_with_dsub_1_dsub_2_in_QPR", DTriple_with_ssub_0_and_DTriple_with_dsub_1_dsub_2_in_QPR, DTriple_with_ssub_0_and_DTriple_with_dsub_1_dsub_2_in_QPRBits, 8, sizeof(DTriple_with_ssub_0_and_DTriple_with_dsub_1_dsub_2_in_QPRBits), ARM::DTriple_with_ssub_0_and_DTriple_with_dsub_1_dsub_2_in_QPRRegClassID, 24, 8, 1, 1 },
  { "DTriple_with_dsub_1_dsub_2_in_QPR_VFP2", DTriple_with_dsub_1_dsub_2_in_QPR_VFP2, DTriple_with_dsub_1_dsub_2_in_QPR_VFP2Bits, 7, sizeof(DTriple_with_dsub_1_dsub_2_in_QPR_VFP2Bits), ARM::DTriple_with_dsub_1_dsub_2_in_QPR_VFP2RegClassID, 24, 8, 1, 1 },
  { "DTriple_with_dsub_1_in_DPR_8", DTriple_with_dsub_1_in_DPR_8, DTriple_with_dsub_1_in_DPR_8Bits, 7, sizeof(DTriple_with_dsub_1_in_DPR_8Bits), ARM::DTriple_with_dsub_1_in_DPR_8RegClassID, 24, 8, 1, 1 },
  { "DTriple_with_dsub_2_then_ssub_0_and_DTriple_with_qsub_0_in_QPR", DTriple_with_dsub_2_then_ssub_0_and_DTriple_with_qsub_0_in_QPR, DTriple_with_dsub_2_then_ssub_0_and_DTriple_with_qsub_0_in_QPRBits, 7, sizeof(DTriple_with_dsub_2_then_ssub_0_and_DTriple_with_qsub_0_in_QPRBits), ARM::DTriple_with_dsub_2_then_ssub_0_and_DTriple_with_qsub_0_in_QPRRegClassID, 24, 8, 1, 1 },
  { "DTripleSpc_with_dsub_2_in_DPR_8", DTripleSpc_with_dsub_2_in_DPR_8, DTripleSpc_with_dsub_2_in_DPR_8Bits, 6, sizeof(DTripleSpc_with_dsub_2_in_DPR_8Bits), ARM::DTripleSpc_with_dsub_2_in_DPR_8RegClassID, 24, 8, 1, 1 },
  { "DTriple_with_dsub_2_in_DPR_8", DTriple_with_dsub_2_in_DPR_8, DTriple_with_dsub_2_in_DPR_8Bits, 6, sizeof(DTriple_with_dsub_2_in_DPR_8Bits), ARM::DTriple_with_dsub_2_in_DPR_8RegClassID, 24, 8, 1, 1 },
  { "DTripleSpc_with_dsub_4_in_DPR_8", DTripleSpc_with_dsub_4_in_DPR_8, DTripleSpc_with_dsub_4_in_DPR_8Bits, 4, sizeof(DTripleSpc_with_dsub_4_in_DPR_8Bits), ARM::DTripleSpc_with_dsub_4_in_DPR_8RegClassID, 24, 8, 1, 1 },
  { "DTriple_with_dsub_0_in_DPR_8_and_DTriple_with_dsub_1_dsub_2_in_QPR", DTriple_with_dsub_0_in_DPR_8_and_DTriple_with_dsub_1_dsub_2_in_QPR, DTriple_with_dsub_0_in_DPR_8_and_DTriple_with_dsub_1_dsub_2_in_QPRBits, 4, sizeof(DTriple_with_dsub_0_in_DPR_8_and_DTriple_with_dsub_1_dsub_2_in_QPRBits), ARM::DTriple_with_dsub_0_in_DPR_8_and_DTriple_with_dsub_1_dsub_2_in_QPRRegClassID, 24, 8, 1, 1 },
  { "DTriple_with_qsub_0_in_QPR_8", DTriple_with_qsub_0_in_QPR_8, DTriple_with_qsub_0_in_QPR_8Bits, 4, sizeof(DTriple_with_qsub_0_in_QPR_8Bits), ARM::DTriple_with_qsub_0_in_QPR_8RegClassID, 24, 8, 1, 1 },
  { "DTriple_with_dsub_1_dsub_2_in_QPR_8", DTriple_with_dsub_1_dsub_2_in_QPR_8, DTriple_with_dsub_1_dsub_2_in_QPR_8Bits, 3, sizeof(DTriple_with_dsub_1_dsub_2_in_QPR_8Bits), ARM::DTriple_with_dsub_1_dsub_2_in_QPR_8RegClassID, 24, 8, 1, 1 },
  { "DTriple_with_dsub_2_in_DPR_8_and_DTriple_with_qsub_0_in_QPR", DTriple_with_dsub_2_in_DPR_8_and_DTriple_with_qsub_0_in_QPR, DTriple_with_dsub_2_in_DPR_8_and_DTriple_with_qsub_0_in_QPRBits, 3, sizeof(DTriple_with_dsub_2_in_DPR_8_and_DTriple_with_qsub_0_in_QPRBits), ARM::DTriple_with_dsub_2_in_DPR_8_and_DTriple_with_qsub_0_in_QPRRegClassID, 24, 8, 1, 1 },
  { "DQuadSpc", DQuadSpc, DQuadSpcBits, 28, sizeof(DQuadSpcBits), ARM::DQuadSpcRegClassID, 32, 8, 1, 1 },
  { "DQuadSpc_with_ssub_0", DQuadSpc_with_ssub_0, DQuadSpc_with_ssub_0Bits, 16, sizeof(DQuadSpc_with_ssub_0Bits), ARM::DQuadSpc_with_ssub_0RegClassID, 32, 8, 1, 1 },
  { "DQuadSpc_with_dsub_2_then_ssub_0", DQuadSpc_with_dsub_2_then_ssub_0, DQuadSpc_with_dsub_2_then_ssub_0Bits, 14, sizeof(DQuadSpc_with_dsub_2_then_ssub_0Bits), ARM::DQuadSpc_with_dsub_2_then_ssub_0RegClassID, 32, 8, 1, 1 },
  { "DQuadSpc_with_dsub_4_then_ssub_0", DQuadSpc_with_dsub_4_then_ssub_0, DQuadSpc_with_dsub_4_then_ssub_0Bits, 12, sizeof(DQuadSpc_with_dsub_4_then_ssub_0Bits), ARM::DQuadSpc_with_dsub_4_then_ssub_0RegClassID, 32, 8, 1, 1 },
  { "DQuadSpc_with_dsub_0_in_DPR_8", DQuadSpc_with_dsub_0_in_DPR_8, DQuadSpc_with_dsub_0_in_DPR_8Bits, 8, sizeof(DQuadSpc_with_dsub_0_in_DPR_8Bits), ARM::DQuadSpc_with_dsub_0_in_DPR_8RegClassID, 32, 8, 1, 1 },
  { "DQuadSpc_with_dsub_2_in_DPR_8", DQuadSpc_with_dsub_2_in_DPR_8, DQuadSpc_with_dsub_2_in_DPR_8Bits, 6, sizeof(DQuadSpc_with_dsub_2_in_DPR_8Bits), ARM::DQuadSpc_with_dsub_2_in_DPR_8RegClassID, 32, 8, 1, 1 },
  { "DQuadSpc_with_dsub_4_in_DPR_8", DQuadSpc_with_dsub_4_in_DPR_8, DQuadSpc_with_dsub_4_in_DPR_8Bits, 4, sizeof(DQuadSpc_with_dsub_4_in_DPR_8Bits), ARM::DQuadSpc_with_dsub_4_in_DPR_8RegClassID, 32, 8, 1, 1 },
  { "DQuad", DQuad, DQuadBits, 29, sizeof(DQuadBits), ARM::DQuadRegClassID, 32, 32, 1, 1 },
  { "DQuad_with_ssub_0", DQuad_with_ssub_0, DQuad_with_ssub_0Bits, 16, sizeof(DQuad_with_ssub_0Bits), ARM::DQuad_with_ssub_0RegClassID, 32, 32, 1, 1 },
  { "DQuad_with_ssub_2", DQuad_with_ssub_2, DQuad_with_ssub_2Bits, 15, sizeof(DQuad_with_ssub_2Bits), ARM::DQuad_with_ssub_2RegClassID, 32, 32, 1, 1 },
  { "QQPR", QQPR, QQPRBits, 15, sizeof(QQPRBits), ARM::QQPRRegClassID, 32, 32, 1, 1 },
  { "DQuad_with_dsub_1_dsub_2_in_QPR", DQuad_with_dsub_1_dsub_2_in_QPR, DQuad_with_dsub_1_dsub_2_in_QPRBits, 14, sizeof(DQuad_with_dsub_1_dsub_2_in_QPRBits), ARM::DQuad_with_dsub_1_dsub_2_in_QPRRegClassID, 32, 32, 1, 1 },
  { "DQuad_with_dsub_2_then_ssub_0", DQuad_with_dsub_2_then_ssub_0, DQuad_with_dsub_2_then_ssub_0Bits, 14, sizeof(DQuad_with_dsub_2_then_ssub_0Bits), ARM::DQuad_with_dsub_2_then_ssub_0RegClassID, 32, 32, 1, 1 },
  { "DQuad_with_dsub_3_then_ssub_0", DQuad_with_dsub_3_then_ssub_0, DQuad_with_dsub_3_then_ssub_0Bits, 13, sizeof(DQuad_with_dsub_3_then_ssub_0Bits), ARM::DQuad_with_dsub_3_then_ssub_0RegClassID, 32, 32, 1, 1 },
  { "DQuad_with_dsub_0_in_DPR_8", DQuad_with_dsub_0_in_DPR_8, DQuad_with_dsub_0_in_DPR_8Bits, 8, sizeof(DQuad_with_dsub_0_in_DPR_8Bits), ARM::DQuad_with_dsub_0_in_DPR_8RegClassID, 32, 32, 1, 1 },
  { "DQuad_with_qsub_0_in_QPR_VFP2", DQuad_with_qsub_0_in_QPR_VFP2, DQuad_with_qsub_0_in_QPR_VFP2Bits, 8, sizeof(DQuad_with_qsub_0_in_QPR_VFP2Bits), ARM::DQuad_with_qsub_0_in_QPR_VFP2RegClassID, 32, 32, 1, 1 },
  { "DQuad_with_ssub_0_and_DQuad_with_dsub_1_dsub_2_in_QPR", DQuad_with_ssub_0_and_DQuad_with_dsub_1_dsub_2_in_QPR, DQuad_with_ssub_0_and_DQuad_with_dsub_1_dsub_2_in_QPRBits, 8, sizeof(DQuad_with_ssub_0_and_DQuad_with_dsub_1_dsub_2_in_QPRBits), ARM::DQuad_with_ssub_0_and_DQuad_with_dsub_1_dsub_2_in_QPRRegClassID, 32, 32, 1, 1 },
  { "DQuad_with_dsub_1_dsub_2_in_QPR_VFP2", DQuad_with_dsub_1_dsub_2_in_QPR_VFP2, DQuad_with_dsub_1_dsub_2_in_QPR_VFP2Bits, 7, sizeof(DQuad_with_dsub_1_dsub_2_in_QPR_VFP2Bits), ARM::DQuad_with_dsub_1_dsub_2_in_QPR_VFP2RegClassID, 32, 32, 1, 1 },
  { "DQuad_with_dsub_1_in_DPR_8", DQuad_with_dsub_1_in_DPR_8, DQuad_with_dsub_1_in_DPR_8Bits, 7, sizeof(DQuad_with_dsub_1_in_DPR_8Bits), ARM::DQuad_with_dsub_1_in_DPR_8RegClassID, 32, 32, 1, 1 },
  { "DQuad_with_qsub_1_in_QPR_VFP2", DQuad_with_qsub_1_in_QPR_VFP2, DQuad_with_qsub_1_in_QPR_VFP2Bits, 7, sizeof(DQuad_with_qsub_1_in_QPR_VFP2Bits), ARM::DQuad_with_qsub_1_in_QPR_VFP2RegClassID, 32, 32, 1, 1 },
  { "DQuad_with_dsub_2_in_DPR_8", DQuad_with_dsub_2_in_DPR_8, DQuad_with_dsub_2_in_DPR_8Bits, 6, sizeof(DQuad_with_dsub_2_in_DPR_8Bits), ARM::DQuad_with_dsub_2_in_DPR_8RegClassID, 32, 32, 1, 1 },
  { "DQuad_with_dsub_3_then_ssub_0_and_DQuad_with_dsub_1_dsub_2_in_QPR", DQuad_with_dsub_3_then_ssub_0_and_DQuad_with_dsub_1_dsub_2_in_QPR, DQuad_with_dsub_3_then_ssub_0_and_DQuad_with_dsub_1_dsub_2_in_QPRBits, 6, sizeof(DQuad_with_dsub_3_then_ssub_0_and_DQuad_with_dsub_1_dsub_2_in_QPRBits), ARM::DQuad_with_dsub_3_then_ssub_0_and_DQuad_with_dsub_1_dsub_2_in_QPRRegClassID, 32, 32, 1, 1 },
  { "DQuad_with_dsub_3_in_DPR_8", DQuad_with_dsub_3_in_DPR_8, DQuad_with_dsub_3_in_DPR_8Bits, 5, sizeof(DQuad_with_dsub_3_in_DPR_8Bits), ARM::DQuad_with_dsub_3_in_DPR_8RegClassID, 32, 32, 1, 1 },
  { "DQuad_with_dsub_0_in_DPR_8_and_DQuad_with_dsub_1_dsub_2_in_QPR", DQuad_with_dsub_0_in_DPR_8_and_DQuad_with_dsub_1_dsub_2_in_QPR, DQuad_with_dsub_0_in_DPR_8_and_DQuad_with_dsub_1_dsub_2_in_QPRBits, 4, sizeof(DQuad_with_dsub_0_in_DPR_8_and_DQuad_with_dsub_1_dsub_2_in_QPRBits), ARM::DQuad_with_dsub_0_in_DPR_8_and_DQuad_with_dsub_1_dsub_2_in_QPRRegClassID, 32, 32, 1, 1 },
  { "DQuad_with_qsub_0_in_QPR_8", DQuad_with_qsub_0_in_QPR_8, DQuad_with_qsub_0_in_QPR_8Bits, 4, sizeof(DQuad_with_qsub_0_in_QPR_8Bits), ARM::DQuad_with_qsub_0_in_QPR_8RegClassID, 32, 32, 1, 1 },
  { "DQuad_with_dsub_1_dsub_2_in_QPR_8", DQuad_with_dsub_1_dsub_2_in_QPR_8, DQuad_with_dsub_1_dsub_2_in_QPR_8Bits, 3, sizeof(DQuad_with_dsub_1_dsub_2_in_QPR_8Bits), ARM::DQuad_with_dsub_1_dsub_2_in_QPR_8RegClassID, 32, 32, 1, 1 },
  { "DQuad_with_qsub_1_in_QPR_8", DQuad_with_qsub_1_in_QPR_8, DQuad_with_qsub_1_in_QPR_8Bits, 3, sizeof(DQuad_with_qsub_1_in_QPR_8Bits), ARM::DQuad_with_qsub_1_in_QPR_8RegClassID, 32, 32, 1, 1 },
  { "DQuad_with_dsub_3_in_DPR_8_and_DQuad_with_dsub_1_dsub_2_in_QPR", DQuad_with_dsub_3_in_DPR_8_and_DQuad_with_dsub_1_dsub_2_in_QPR, DQuad_with_dsub_3_in_DPR_8_and_DQuad_with_dsub_1_dsub_2_in_QPRBits, 2, sizeof(DQuad_with_dsub_3_in_DPR_8_and_DQuad_with_dsub_1_dsub_2_in_QPRBits), ARM::DQuad_with_dsub_3_in_DPR_8_and_DQuad_with_dsub_1_dsub_2_in_QPRRegClassID, 32, 32, 1, 1 },
  { "QQQQPR", QQQQPR, QQQQPRBits, 13, sizeof(QQQQPRBits), ARM::QQQQPRRegClassID, 64, 32, 1, 1 },
  { "QQQQPR_with_ssub_0", QQQQPR_with_ssub_0, QQQQPR_with_ssub_0Bits, 8, sizeof(QQQQPR_with_ssub_0Bits), ARM::QQQQPR_with_ssub_0RegClassID, 64, 32, 1, 1 },
  { "QQQQPR_with_dsub_2_then_ssub_0", QQQQPR_with_dsub_2_then_ssub_0, QQQQPR_with_dsub_2_then_ssub_0Bits, 7, sizeof(QQQQPR_with_dsub_2_then_ssub_0Bits), ARM::QQQQPR_with_dsub_2_then_ssub_0RegClassID, 64, 32, 1, 1 },
  { "QQQQPR_with_dsub_5_then_ssub_0", QQQQPR_with_dsub_5_then_ssub_0, QQQQPR_with_dsub_5_then_ssub_0Bits, 6, sizeof(QQQQPR_with_dsub_5_then_ssub_0Bits), ARM::QQQQPR_with_dsub_5_then_ssub_0RegClassID, 64, 32, 1, 1 },
  { "QQQQPR_with_dsub_7_then_ssub_0", QQQQPR_with_dsub_7_then_ssub_0, QQQQPR_with_dsub_7_then_ssub_0Bits, 5, sizeof(QQQQPR_with_dsub_7_then_ssub_0Bits), ARM::QQQQPR_with_dsub_7_then_ssub_0RegClassID, 64, 32, 1, 1 },
  { "QQQQPR_with_dsub_0_in_DPR_8", QQQQPR_with_dsub_0_in_DPR_8, QQQQPR_with_dsub_0_in_DPR_8Bits, 4, sizeof(QQQQPR_with_dsub_0_in_DPR_8Bits), ARM::QQQQPR_with_dsub_0_in_DPR_8RegClassID, 64, 32, 1, 1 },
  { "QQQQPR_with_dsub_2_in_DPR_8", QQQQPR_with_dsub_2_in_DPR_8, QQQQPR_with_dsub_2_in_DPR_8Bits, 3, sizeof(QQQQPR_with_dsub_2_in_DPR_8Bits), ARM::QQQQPR_with_dsub_2_in_DPR_8RegClassID, 64, 32, 1, 1 },
  { "QQQQPR_with_dsub_4_in_DPR_8", QQQQPR_with_dsub_4_in_DPR_8, QQQQPR_with_dsub_4_in_DPR_8Bits, 2, sizeof(QQQQPR_with_dsub_4_in_DPR_8Bits), ARM::QQQQPR_with_dsub_4_in_DPR_8RegClassID, 64, 32, 1, 1 },
  { "QQQQPR_with_dsub_6_in_DPR_8", QQQQPR_with_dsub_6_in_DPR_8, QQQQPR_with_dsub_6_in_DPR_8Bits, 1, sizeof(QQQQPR_with_dsub_6_in_DPR_8Bits), ARM::QQQQPR_with_dsub_6_in_DPR_8RegClassID, 64, 32, 1, 1 },
};

// ARM Dwarf<->LLVM register mappings.
extern const MCRegisterInfo::DwarfLLVMRegPair ARMDwarfFlavour0Dwarf2L[] = {
  { 0U, ARM::R0 },
  { 1U, ARM::R1 },
  { 2U, ARM::R2 },
  { 3U, ARM::R3 },
  { 4U, ARM::R4 },
  { 5U, ARM::R5 },
  { 6U, ARM::R6 },
  { 7U, ARM::R7 },
  { 8U, ARM::R8 },
  { 9U, ARM::R9 },
  { 10U, ARM::R10 },
  { 11U, ARM::R11 },
  { 12U, ARM::R12 },
  { 13U, ARM::SP },
  { 14U, ARM::LR },
  { 15U, ARM::PC },
  { 256U, ARM::D0 },
  { 257U, ARM::D1 },
  { 258U, ARM::D2 },
  { 259U, ARM::D3 },
  { 260U, ARM::D4 },
  { 261U, ARM::D5 },
  { 262U, ARM::D6 },
  { 263U, ARM::D7 },
  { 264U, ARM::D8 },
  { 265U, ARM::D9 },
  { 266U, ARM::D10 },
  { 267U, ARM::D11 },
  { 268U, ARM::D12 },
  { 269U, ARM::D13 },
  { 270U, ARM::D14 },
  { 271U, ARM::D15 },
  { 272U, ARM::D16 },
  { 273U, ARM::D17 },
  { 274U, ARM::D18 },
  { 275U, ARM::D19 },
  { 276U, ARM::D20 },
  { 277U, ARM::D21 },
  { 278U, ARM::D22 },
  { 279U, ARM::D23 },
  { 280U, ARM::D24 },
  { 281U, ARM::D25 },
  { 282U, ARM::D26 },
  { 283U, ARM::D27 },
  { 284U, ARM::D28 },
  { 285U, ARM::D29 },
  { 286U, ARM::D30 },
  { 287U, ARM::D31 },
};
extern const unsigned ARMDwarfFlavour0Dwarf2LSize = sizeof(ARMDwarfFlavour0Dwarf2L)/sizeof(MCRegisterInfo::DwarfLLVMRegPair);

extern const MCRegisterInfo::DwarfLLVMRegPair ARMEHFlavour0Dwarf2L[] = {
  { 0U, ARM::R0 },
  { 1U, ARM::R1 },
  { 2U, ARM::R2 },
  { 3U, ARM::R3 },
  { 4U, ARM::R4 },
  { 5U, ARM::R5 },
  { 6U, ARM::R6 },
  { 7U, ARM::R7 },
  { 8U, ARM::R8 },
  { 9U, ARM::R9 },
  { 10U, ARM::R10 },
  { 11U, ARM::R11 },
  { 12U, ARM::R12 },
  { 13U, ARM::SP },
  { 14U, ARM::LR },
  { 15U, ARM::PC },
  { 256U, ARM::D0 },
  { 257U, ARM::D1 },
  { 258U, ARM::D2 },
  { 259U, ARM::D3 },
  { 260U, ARM::D4 },
  { 261U, ARM::D5 },
  { 262U, ARM::D6 },
  { 263U, ARM::D7 },
  { 264U, ARM::D8 },
  { 265U, ARM::D9 },
  { 266U, ARM::D10 },
  { 267U, ARM::D11 },
  { 268U, ARM::D12 },
  { 269U, ARM::D13 },
  { 270U, ARM::D14 },
  { 271U, ARM::D15 },
  { 272U, ARM::D16 },
  { 273U, ARM::D17 },
  { 274U, ARM::D18 },
  { 275U, ARM::D19 },
  { 276U, ARM::D20 },
  { 277U, ARM::D21 },
  { 278U, ARM::D22 },
  { 279U, ARM::D23 },
  { 280U, ARM::D24 },
  { 281U, ARM::D25 },
  { 282U, ARM::D26 },
  { 283U, ARM::D27 },
  { 284U, ARM::D28 },
  { 285U, ARM::D29 },
  { 286U, ARM::D30 },
  { 287U, ARM::D31 },
};
extern const unsigned ARMEHFlavour0Dwarf2LSize = sizeof(ARMEHFlavour0Dwarf2L)/sizeof(MCRegisterInfo::DwarfLLVMRegPair);

extern const MCRegisterInfo::DwarfLLVMRegPair ARMDwarfFlavour0L2Dwarf[] = {
  { ARM::LR, 14U },
  { ARM::PC, 15U },
  { ARM::SP, 13U },
  { ARM::D0, 256U },
  { ARM::D1, 257U },
  { ARM::D2, 258U },
  { ARM::D3, 259U },
  { ARM::D4, 260U },
  { ARM::D5, 261U },
  { ARM::D6, 262U },
  { ARM::D7, 263U },
  { ARM::D8, 264U },
  { ARM::D9, 265U },
  { ARM::D10, 266U },
  { ARM::D11, 267U },
  { ARM::D12, 268U },
  { ARM::D13, 269U },
  { ARM::D14, 270U },
  { ARM::D15, 271U },
  { ARM::D16, 272U },
  { ARM::D17, 273U },
  { ARM::D18, 274U },
  { ARM::D19, 275U },
  { ARM::D20, 276U },
  { ARM::D21, 277U },
  { ARM::D22, 278U },
  { ARM::D23, 279U },
  { ARM::D24, 280U },
  { ARM::D25, 281U },
  { ARM::D26, 282U },
  { ARM::D27, 283U },
  { ARM::D28, 284U },
  { ARM::D29, 285U },
  { ARM::D30, 286U },
  { ARM::D31, 287U },
  { ARM::R0, 0U },
  { ARM::R1, 1U },
  { ARM::R2, 2U },
  { ARM::R3, 3U },
  { ARM::R4, 4U },
  { ARM::R5, 5U },
  { ARM::R6, 6U },
  { ARM::R7, 7U },
  { ARM::R8, 8U },
  { ARM::R9, 9U },
  { ARM::R10, 10U },
  { ARM::R11, 11U },
  { ARM::R12, 12U },
};
extern const unsigned ARMDwarfFlavour0L2DwarfSize = sizeof(ARMDwarfFlavour0L2Dwarf)/sizeof(MCRegisterInfo::DwarfLLVMRegPair);

extern const MCRegisterInfo::DwarfLLVMRegPair ARMEHFlavour0L2Dwarf[] = {
  { ARM::LR, 14U },
  { ARM::PC, 15U },
  { ARM::SP, 13U },
  { ARM::D0, 256U },
  { ARM::D1, 257U },
  { ARM::D2, 258U },
  { ARM::D3, 259U },
  { ARM::D4, 260U },
  { ARM::D5, 261U },
  { ARM::D6, 262U },
  { ARM::D7, 263U },
  { ARM::D8, 264U },
  { ARM::D9, 265U },
  { ARM::D10, 266U },
  { ARM::D11, 267U },
  { ARM::D12, 268U },
  { ARM::D13, 269U },
  { ARM::D14, 270U },
  { ARM::D15, 271U },
  { ARM::D16, 272U },
  { ARM::D17, 273U },
  { ARM::D18, 274U },
  { ARM::D19, 275U },
  { ARM::D20, 276U },
  { ARM::D21, 277U },
  { ARM::D22, 278U },
  { ARM::D23, 279U },
  { ARM::D24, 280U },
  { ARM::D25, 281U },
  { ARM::D26, 282U },
  { ARM::D27, 283U },
  { ARM::D28, 284U },
  { ARM::D29, 285U },
  { ARM::D30, 286U },
  { ARM::D31, 287U },
  { ARM::R0, 0U },
  { ARM::R1, 1U },
  { ARM::R2, 2U },
  { ARM::R3, 3U },
  { ARM::R4, 4U },
  { ARM::R5, 5U },
  { ARM::R6, 6U },
  { ARM::R7, 7U },
  { ARM::R8, 8U },
  { ARM::R9, 9U },
  { ARM::R10, 10U },
  { ARM::R11, 11U },
  { ARM::R12, 12U },
};
extern const unsigned ARMEHFlavour0L2DwarfSize = sizeof(ARMEHFlavour0L2Dwarf)/sizeof(MCRegisterInfo::DwarfLLVMRegPair);

extern const uint16_t ARMRegEncodingTable[] = {
  0,
  1,
  15,
  0,
  8,
  9,
  3,
  3,
  0,
  4,
  14,
  15,
  13,
  2,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  17,
  18,
  19,
  20,
  21,
  22,
  23,
  24,
  25,
  26,
  27,
  28,
  29,
  30,
  31,
  10,
  7,
  6,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  17,
  18,
  19,
  20,
  21,
  22,
  23,
  24,
  25,
  26,
  27,
  28,
  29,
  30,
  31,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  17,
  18,
  19,
  20,
  21,
  22,
  23,
  24,
  25,
  26,
  27,
  28,
  29,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  12,
  0,
  2,
  4,
  6,
  8,
  10,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  17,
  18,
  19,
  20,
  21,
  22,
  23,
  24,
  25,
  26,
  27,
  28,
  29,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  17,
  18,
  19,
  20,
  21,
  22,
  23,
  24,
  25,
  26,
  27,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  17,
  18,
  19,
  20,
  21,
  22,
  23,
  24,
  25,
  1,
  3,
  5,
  7,
  9,
  11,
  13,
  15,
  17,
  19,
  21,
  23,
  25,
  27,
  29,
  1,
  3,
  5,
  7,
  9,
  11,
  13,
  15,
  17,
  19,
  21,
  23,
  25,
  27,
};
static inline void InitARMMCRegisterInfo(MCRegisterInfo *RI, unsigned RA, unsigned DwarfFlavour = 0, unsigned EHFlavour = 0, unsigned PC = 0) {
  RI->InitMCRegisterInfo(ARMRegDesc, 288, RA, PC, ARMMCRegisterClasses, 102, ARMRegUnitRoots, 76, ARMRegDiffLists, ARMRegStrings, ARMSubRegIdxLists, 57,
ARMSubRegIdxRanges,   ARMRegEncodingTable);

  switch (DwarfFlavour) {
  default:
    llvm_unreachable("Unknown DWARF flavour");
  case 0:
    RI->mapDwarfRegsToLLVMRegs(ARMDwarfFlavour0Dwarf2L, ARMDwarfFlavour0Dwarf2LSize, false);
    break;
  }
  switch (EHFlavour) {
  default:
    llvm_unreachable("Unknown DWARF flavour");
  case 0:
    RI->mapDwarfRegsToLLVMRegs(ARMEHFlavour0Dwarf2L, ARMEHFlavour0Dwarf2LSize, true);
    break;
  }
  switch (DwarfFlavour) {
  default:
    llvm_unreachable("Unknown DWARF flavour");
  case 0:
    RI->mapLLVMRegsToDwarfRegs(ARMDwarfFlavour0L2Dwarf, ARMDwarfFlavour0L2DwarfSize, false);
    break;
  }
  switch (EHFlavour) {
  default:
    llvm_unreachable("Unknown DWARF flavour");
  case 0:
    RI->mapLLVMRegsToDwarfRegs(ARMEHFlavour0L2Dwarf, ARMEHFlavour0L2DwarfSize, true);
    break;
  }
}

} // End llvm namespace 
#endif // GET_REGINFO_MC_DESC

/*===- TableGen'erated file -------------------------------------*- C++ -*-===*\
|*                                                                            *|
|*Register Information Header Fragment                                        *|
|*                                                                            *|
|* Automatically generated file, do not edit!                                 *|
|*                                                                            *|
\*===----------------------------------------------------------------------===*/


#ifdef GET_REGINFO_HEADER
#undef GET_REGINFO_HEADER
#include "llvm/Target/TargetRegisterInfo.h"

namespace llvm {

struct ARMGenRegisterInfo : public TargetRegisterInfo {
  explicit ARMGenRegisterInfo(unsigned RA, unsigned D = 0, unsigned E = 0, unsigned PC = 0);
  virtual bool needsStackRealignment(const MachineFunction &) const
     { return false; }
  virtual unsigned composeSubRegIndicesImpl(unsigned, unsigned) const;
  virtual const TargetRegisterClass *getSubClassWithSubReg(const TargetRegisterClass*, unsigned) const;
  virtual const RegClassWeight &getRegClassWeight(const TargetRegisterClass *RC) const;
  virtual unsigned getRegUnitWeight(unsigned RegUnit) const;
  virtual unsigned getNumRegPressureSets() const;
  virtual const char *getRegPressureSetName(unsigned Idx) const;
  virtual unsigned getRegPressureSetLimit(unsigned Idx) const;
  virtual const int *getRegClassPressureSets(const TargetRegisterClass *RC) const;
  virtual const int *getRegUnitPressureSets(unsigned RegUnit) const;
};

namespace ARM { // Register classes
  extern const TargetRegisterClass SPRRegClass;
  extern const TargetRegisterClass GPRRegClass;
  extern const TargetRegisterClass GPRwithAPSRRegClass;
  extern const TargetRegisterClass SPR_8RegClass;
  extern const TargetRegisterClass GPRnopcRegClass;
  extern const TargetRegisterClass rGPRRegClass;
  extern const TargetRegisterClass hGPRRegClass;
  extern const TargetRegisterClass tGPRRegClass;
  extern const TargetRegisterClass GPRnopc_and_hGPRRegClass;
  extern const TargetRegisterClass hGPR_and_rGPRRegClass;
  extern const TargetRegisterClass tcGPRRegClass;
  extern const TargetRegisterClass tGPR_and_tcGPRRegClass;
  extern const TargetRegisterClass hGPR_and_tcGPRRegClass;
  extern const TargetRegisterClass CCRRegClass;
  extern const TargetRegisterClass GPRspRegClass;
  extern const TargetRegisterClass DPRRegClass;
  extern const TargetRegisterClass DPR_VFP2RegClass;
  extern const TargetRegisterClass DPR_8RegClass;
  extern const TargetRegisterClass GPRPairRegClass;
  extern const TargetRegisterClass GPRPair_with_gsub_1_in_rGPRRegClass;
  extern const TargetRegisterClass GPRPair_with_gsub_0_in_tGPRRegClass;
  extern const TargetRegisterClass GPRPair_with_gsub_0_in_hGPRRegClass;
  extern const TargetRegisterClass GPRPair_with_gsub_0_in_tcGPRRegClass;
  extern const TargetRegisterClass GPRPair_with_gsub_1_in_tcGPRRegClass;
  extern const TargetRegisterClass GPRPair_with_gsub_0_in_tGPR_and_tcGPRRegClass;
  extern const TargetRegisterClass GPRPair_with_gsub_1_in_hGPR_and_rGPRRegClass;
  extern const TargetRegisterClass GPRPair_with_gsub_1_in_GPRspRegClass;
  extern const TargetRegisterClass GPRPair_with_gsub_1_in_hGPR_and_tcGPRRegClass;
  extern const TargetRegisterClass DPairSpcRegClass;
  extern const TargetRegisterClass DPairSpc_with_ssub_0RegClass;
  extern const TargetRegisterClass DPairSpc_with_dsub_2_then_ssub_0RegClass;
  extern const TargetRegisterClass DPairSpc_with_dsub_0_in_DPR_8RegClass;
  extern const TargetRegisterClass DPairSpc_with_dsub_2_in_DPR_8RegClass;
  extern const TargetRegisterClass DPairRegClass;
  extern const TargetRegisterClass DPair_with_ssub_0RegClass;
  extern const TargetRegisterClass QPRRegClass;
  extern const TargetRegisterClass DPair_with_ssub_2RegClass;
  extern const TargetRegisterClass DPair_with_dsub_0_in_DPR_8RegClass;
  extern const TargetRegisterClass QPR_VFP2RegClass;
  extern const TargetRegisterClass DPair_with_dsub_1_in_DPR_8RegClass;
  extern const TargetRegisterClass QPR_8RegClass;
  extern const TargetRegisterClass DTripleRegClass;
  extern const TargetRegisterClass DTripleSpcRegClass;
  extern const TargetRegisterClass DTripleSpc_with_ssub_0RegClass;
  extern const TargetRegisterClass DTriple_with_ssub_0RegClass;
  extern const TargetRegisterClass DTriple_with_dsub_1_dsub_2_in_QPRRegClass;
  extern const TargetRegisterClass DTriple_with_qsub_0_in_QPRRegClass;
  extern const TargetRegisterClass DTriple_with_ssub_2RegClass;
  extern const TargetRegisterClass DTripleSpc_with_dsub_2_then_ssub_0RegClass;
  extern const TargetRegisterClass DTriple_with_dsub_2_then_ssub_0RegClass;
  extern const TargetRegisterClass DTripleSpc_with_dsub_4_then_ssub_0RegClass;
  extern const TargetRegisterClass DTripleSpc_with_dsub_0_in_DPR_8RegClass;
  extern const TargetRegisterClass DTriple_with_dsub_0_in_DPR_8RegClass;
  extern const TargetRegisterClass DTriple_with_qsub_0_in_QPR_VFP2RegClass;
  extern const TargetRegisterClass DTriple_with_ssub_0_and_DTriple_with_dsub_1_dsub_2_in_QPRRegClass;
  extern const TargetRegisterClass DTriple_with_dsub_1_dsub_2_in_QPR_VFP2RegClass;
  extern const TargetRegisterClass DTriple_with_dsub_1_in_DPR_8RegClass;
  extern const TargetRegisterClass DTriple_with_dsub_2_then_ssub_0_and_DTriple_with_qsub_0_in_QPRRegClass;
  extern const TargetRegisterClass DTripleSpc_with_dsub_2_in_DPR_8RegClass;
  extern const TargetRegisterClass DTriple_with_dsub_2_in_DPR_8RegClass;
  extern const TargetRegisterClass DTripleSpc_with_dsub_4_in_DPR_8RegClass;
  extern const TargetRegisterClass DTriple_with_dsub_0_in_DPR_8_and_DTriple_with_dsub_1_dsub_2_in_QPRRegClass;
  extern const TargetRegisterClass DTriple_with_qsub_0_in_QPR_8RegClass;
  extern const TargetRegisterClass DTriple_with_dsub_1_dsub_2_in_QPR_8RegClass;
  extern const TargetRegisterClass DTriple_with_dsub_2_in_DPR_8_and_DTriple_with_qsub_0_in_QPRRegClass;
  extern const TargetRegisterClass DQuadSpcRegClass;
  extern const TargetRegisterClass DQuadSpc_with_ssub_0RegClass;
  extern const TargetRegisterClass DQuadSpc_with_dsub_2_then_ssub_0RegClass;
  extern const TargetRegisterClass DQuadSpc_with_dsub_4_then_ssub_0RegClass;
  extern const TargetRegisterClass DQuadSpc_with_dsub_0_in_DPR_8RegClass;
  extern const TargetRegisterClass DQuadSpc_with_dsub_2_in_DPR_8RegClass;
  extern const TargetRegisterClass DQuadSpc_with_dsub_4_in_DPR_8RegClass;
  extern const TargetRegisterClass DQuadRegClass;
  extern const TargetRegisterClass DQuad_with_ssub_0RegClass;
  extern const TargetRegisterClass DQuad_with_ssub_2RegClass;
  extern const TargetRegisterClass QQPRRegClass;
  extern const TargetRegisterClass DQuad_with_dsub_1_dsub_2_in_QPRRegClass;
  extern const TargetRegisterClass DQuad_with_dsub_2_then_ssub_0RegClass;
  extern const TargetRegisterClass DQuad_with_dsub_3_then_ssub_0RegClass;
  extern const TargetRegisterClass DQuad_with_dsub_0_in_DPR_8RegClass;
  extern const TargetRegisterClass DQuad_with_qsub_0_in_QPR_VFP2RegClass;
  extern const TargetRegisterClass DQuad_with_ssub_0_and_DQuad_with_dsub_1_dsub_2_in_QPRRegClass;
  extern const TargetRegisterClass DQuad_with_dsub_1_dsub_2_in_QPR_VFP2RegClass;
  extern const TargetRegisterClass DQuad_with_dsub_1_in_DPR_8RegClass;
  extern const TargetRegisterClass DQuad_with_qsub_1_in_QPR_VFP2RegClass;
  extern const TargetRegisterClass DQuad_with_dsub_2_in_DPR_8RegClass;
  extern const TargetRegisterClass DQuad_with_dsub_3_then_ssub_0_and_DQuad_with_dsub_1_dsub_2_in_QPRRegClass;
  extern const TargetRegisterClass DQuad_with_dsub_3_in_DPR_8RegClass;
  extern const TargetRegisterClass DQuad_with_dsub_0_in_DPR_8_and_DQuad_with_dsub_1_dsub_2_in_QPRRegClass;
  extern const TargetRegisterClass DQuad_with_qsub_0_in_QPR_8RegClass;
  extern const TargetRegisterClass DQuad_with_dsub_1_dsub_2_in_QPR_8RegClass;
  extern const TargetRegisterClass DQuad_with_qsub_1_in_QPR_8RegClass;
  extern const TargetRegisterClass DQuad_with_dsub_3_in_DPR_8_and_DQuad_with_dsub_1_dsub_2_in_QPRRegClass;
  extern const TargetRegisterClass QQQQPRRegClass;
  extern const TargetRegisterClass QQQQPR_with_ssub_0RegClass;
  extern const TargetRegisterClass QQQQPR_with_dsub_2_then_ssub_0RegClass;
  extern const TargetRegisterClass QQQQPR_with_dsub_5_then_ssub_0RegClass;
  extern const TargetRegisterClass QQQQPR_with_dsub_7_then_ssub_0RegClass;
  extern const TargetRegisterClass QQQQPR_with_dsub_0_in_DPR_8RegClass;
  extern const TargetRegisterClass QQQQPR_with_dsub_2_in_DPR_8RegClass;
  extern const TargetRegisterClass QQQQPR_with_dsub_4_in_DPR_8RegClass;
  extern const TargetRegisterClass QQQQPR_with_dsub_6_in_DPR_8RegClass;
} // end of namespace ARM

} // End llvm namespace 
#endif // GET_REGINFO_HEADER

/*===- TableGen'erated file -------------------------------------*- C++ -*-===*\
|*                                                                            *|
|*Target Register and Register Classes Information                            *|
|*                                                                            *|
|* Automatically generated file, do not edit!                                 *|
|*                                                                            *|
\*===----------------------------------------------------------------------===*/


#ifdef GET_REGINFO_TARGET_DESC
#undef GET_REGINFO_TARGET_DESC
namespace llvm {

extern const MCRegisterClass ARMMCRegisterClasses[];

static const MVT::SimpleValueType VTLists[] = {
  /* 0 */ MVT::i32, MVT::Other,
  /* 2 */ MVT::f32, MVT::Other,
  /* 4 */ MVT::v2i64, MVT::Other,
  /* 6 */ MVT::v4i64, MVT::Other,
  /* 8 */ MVT::v8i64, MVT::Other,
  /* 10 */ MVT::f64, MVT::v8i8, MVT::v4i16, MVT::v2i32, MVT::v1i64, MVT::v2f32, MVT::Other,
  /* 17 */ MVT::v16i8, MVT::v8i16, MVT::v4i32, MVT::v2i64, MVT::v4f32, MVT::v2f64, MVT::Other,
  /* 24 */ MVT::Untyped, MVT::Other,
};

static const char *const SubRegIndexNameTable[] = { "dsub_0", "dsub_1", "dsub_2", "dsub_3", "dsub_4", "dsub_5", "dsub_6", "dsub_7", "gsub_0", "gsub_1", "qqsub_0", "qqsub_1", "qsub_0", "qsub_1", "qsub_2", "qsub_3", "ssub_0", "ssub_1", "ssub_2", "ssub_3", "dsub_2_then_ssub_0", "dsub_2_then_ssub_1", "dsub_3_then_ssub_0", "dsub_3_then_ssub_1", "dsub_7_then_ssub_0", "dsub_7_then_ssub_1", "dsub_6_then_ssub_0", "dsub_6_then_ssub_1", "dsub_5_then_ssub_0", "dsub_5_then_ssub_1", "dsub_4_then_ssub_0", "dsub_4_then_ssub_1", "dsub_0_dsub_2", "dsub_0_dsub_1_dsub_2", "dsub_1_dsub_3", "dsub_1_dsub_2_dsub_3", "dsub_1_dsub_2", "dsub_0_dsub_2_dsub_4", "dsub_0_dsub_2_dsub_4_dsub_6", "dsub_1_dsub_3_dsub_5", "dsub_1_dsub_3_dsub_5_dsub_7", "dsub_1_dsub_2_dsub_3_dsub_4", "dsub_2_dsub_4", "dsub_2_dsub_3_dsub_4", "dsub_2_dsub_4_dsub_6", "dsub_3_dsub_5", "dsub_3_dsub_4_dsub_5", "dsub_3_dsub_5_dsub_7", "dsub_3_dsub_4", "dsub_3_dsub_4_dsub_5_dsub_6", "dsub_4_dsub_6", "dsub_4_dsub_5_dsub_6", "dsub_5_dsub_7", "dsub_5_dsub_6_dsub_7", "dsub_5_dsub_6", "qsub_1_qsub_2" };


static const unsigned SubRegIndexLaneMaskTable[] = {
  ~0u,
  0x0000000c, // dsub_0
  0x00000030, // dsub_1
  0x000000c0, // dsub_2
  0x00000300, // dsub_3
  0x00030000, // dsub_4
  0x0000c000, // dsub_5
  0x00003000, // dsub_6
  0x00000c00, // dsub_7
  0x00000001, // gsub_0
  0x00000002, // gsub_1
  0x000003fc, // qqsub_0
  0x0003fc00, // qqsub_1
  0x0000003c, // qsub_0
  0x000003c0, // qsub_1
  0x0003c000, // qsub_2
  0x00003c00, // qsub_3
  0x00000004, // ssub_0
  0x00000008, // ssub_1
  0x00000010, // ssub_2
  0x00000020, // ssub_3
  0x00000040, // dsub_2_then_ssub_0
  0x00000080, // dsub_2_then_ssub_1
  0x00000100, // dsub_3_then_ssub_0
  0x00000200, // dsub_3_then_ssub_1
  0x00000400, // dsub_7_then_ssub_0
  0x00000800, // dsub_7_then_ssub_1
  0x00001000, // dsub_6_then_ssub_0
  0x00002000, // dsub_6_then_ssub_1
  0x00004000, // dsub_5_then_ssub_0
  0x00008000, // dsub_5_then_ssub_1
  0x00010000, // dsub_4_then_ssub_0
  0x00020000, // dsub_4_then_ssub_1
  0x000000cc, // dsub_0_dsub_2
  0x000000fc, // dsub_0_dsub_1_dsub_2
  0x00000330, // dsub_1_dsub_3
  0x000003f0, // dsub_1_dsub_2_dsub_3
  0x000000f0, // dsub_1_dsub_2
  0x000300cc, // dsub_0_dsub_2_dsub_4
  0x000330cc, // dsub_0_dsub_2_dsub_4_dsub_6
  0x0000c330, // dsub_1_dsub_3_dsub_5
  0x0000cf30, // dsub_1_dsub_3_dsub_5_dsub_7
  0x000303f0, // dsub_1_dsub_2_dsub_3_dsub_4
  0x000300c0, // dsub_2_dsub_4
  0x000303c0, // dsub_2_dsub_3_dsub_4
  0x000330c0, // dsub_2_dsub_4_dsub_6
  0x0000c300, // dsub_3_dsub_5
  0x0003c300, // dsub_3_dsub_4_dsub_5
  0x0000cf00, // dsub_3_dsub_5_dsub_7
  0x00030300, // dsub_3_dsub_4
  0x0003f300, // dsub_3_dsub_4_dsub_5_dsub_6
  0x00033000, // dsub_4_dsub_6
  0x0003f000, // dsub_4_dsub_5_dsub_6
  0x0000cc00, // dsub_5_dsub_7
  0x0000fc00, // dsub_5_dsub_6_dsub_7
  0x0000f000, // dsub_5_dsub_6
  0x0003c3c0, // qsub_1_qsub_2
 };



static const TargetRegisterClass *const NullRegClasses[] = { NULL };

static const uint32_t SPRSubClassMask[] = {
  0x00000009, 0x00000000, 0x00000000, 0x00000000, 
  0xe0030000, 0xffff99f5, 0xdfffe6fd, 0x0000003f, // ssub_0
  0xe0030000, 0xffff99f5, 0xdfffe6fd, 0x0000003f, // ssub_1
  0x00000000, 0xebb281f0, 0xdffde401, 0x0000003f, // ssub_2
  0x00000000, 0xebb281f0, 0xdffde401, 0x0000003f, // ssub_3
  0xc0000000, 0xff9f0001, 0x9ffce0f9, 0x0000003f, // dsub_2_then_ssub_0
  0xc0000000, 0xff9f0001, 0x9ffce0f9, 0x0000003f, // dsub_2_then_ssub_1
  0x00000000, 0x00000000, 0x9ff8c000, 0x0000003f, // dsub_3_then_ssub_0
  0x00000000, 0x00000000, 0x9ff8c000, 0x0000003f, // dsub_3_then_ssub_1
  0x00000000, 0x00000000, 0x00000000, 0x0000003e, // dsub_7_then_ssub_0
  0x00000000, 0x00000000, 0x00000000, 0x0000003e, // dsub_7_then_ssub_1
  0x00000000, 0x00000000, 0x00000000, 0x0000003e, // dsub_6_then_ssub_0
  0x00000000, 0x00000000, 0x00000000, 0x0000003e, // dsub_6_then_ssub_1
  0x00000000, 0x00000000, 0x00000000, 0x0000003f, // dsub_5_then_ssub_0
  0x00000000, 0x00000000, 0x00000000, 0x0000003f, // dsub_5_then_ssub_1
  0x00000000, 0x140c0000, 0x000000f0, 0x0000003f, // dsub_4_then_ssub_0
  0x00000000, 0x140c0000, 0x000000f0, 0x0000003f, // dsub_4_then_ssub_1
};

static const uint32_t GPRSubClassMask[] = {
  0x00005ff2, 0x00000000, 0x00000000, 0x00000000, 
  0x0ffc0000, 0x00000000, 0x00000000, 0x00000000, // gsub_0
  0x0ffc0000, 0x00000000, 0x00000000, 0x00000000, // gsub_1
};

static const uint32_t GPRwithAPSRSubClassMask[] = {
  0x00005fb4, 0x00000000, 0x00000000, 0x00000000, 
  0x0ffc0000, 0x00000000, 0x00000000, 0x00000000, // gsub_0
  0x0ffc0000, 0x00000000, 0x00000000, 0x00000000, // gsub_1
};

static const uint32_t SPR_8SubClassMask[] = {
  0x00000008, 0x00000000, 0x00000000, 0x00000000, 
  0x80020000, 0xfd1801a1, 0x1fa880e1, 0x0000003c, // ssub_0
  0x80020000, 0xfd1801a1, 0x1fa880e1, 0x0000003c, // ssub_1
  0x00000000, 0xc9000180, 0x1ea80001, 0x0000003c, // ssub_2
  0x00000000, 0xc9000180, 0x1ea80001, 0x0000003c, // ssub_3
  0x00000000, 0x9c000001, 0x1ca000c1, 0x00000038, // dsub_2_then_ssub_0
  0x00000000, 0x9c000001, 0x1ca000c1, 0x00000038, // dsub_2_then_ssub_1
  0x00000000, 0x00000000, 0x18800000, 0x00000038, // dsub_3_then_ssub_0
  0x00000000, 0x00000000, 0x18800000, 0x00000038, // dsub_3_then_ssub_1
  0x00000000, 0x00000000, 0x00000000, 0x00000020, // dsub_7_then_ssub_0
  0x00000000, 0x00000000, 0x00000000, 0x00000020, // dsub_7_then_ssub_1
  0x00000000, 0x00000000, 0x00000000, 0x00000020, // dsub_6_then_ssub_0
  0x00000000, 0x00000000, 0x00000000, 0x00000020, // dsub_6_then_ssub_1
  0x00000000, 0x00000000, 0x00000000, 0x00000030, // dsub_5_then_ssub_0
  0x00000000, 0x00000000, 0x00000000, 0x00000030, // dsub_5_then_ssub_1
  0x00000000, 0x10000000, 0x00000080, 0x00000030, // dsub_4_then_ssub_0
  0x00000000, 0x10000000, 0x00000080, 0x00000030, // dsub_4_then_ssub_1
};

static const uint32_t GPRnopcSubClassMask[] = {
  0x00005fb0, 0x00000000, 0x00000000, 0x00000000, 
  0x0ffc0000, 0x00000000, 0x00000000, 0x00000000, // gsub_0
  0x0ffc0000, 0x00000000, 0x00000000, 0x00000000, // gsub_1
};

static const uint32_t rGPRSubClassMask[] = {
  0x00001ea0, 0x00000000, 0x00000000, 0x00000000, 
  0x0ffc0000, 0x00000000, 0x00000000, 0x00000000, // gsub_0
  0x0b980000, 0x00000000, 0x00000000, 0x00000000, // gsub_1
};

static const uint32_t hGPRSubClassMask[] = {
  0x00005340, 0x00000000, 0x00000000, 0x00000000, 
  0x0e200000, 0x00000000, 0x00000000, 0x00000000, // gsub_0
  0x0e200000, 0x00000000, 0x00000000, 0x00000000, // gsub_1
};

static const uint32_t tGPRSubClassMask[] = {
  0x00000880, 0x00000000, 0x00000000, 0x00000000, 
  0x01100000, 0x00000000, 0x00000000, 0x00000000, // gsub_0
  0x01100000, 0x00000000, 0x00000000, 0x00000000, // gsub_1
};

static const uint32_t GPRnopc_and_hGPRSubClassMask[] = {
  0x00005300, 0x00000000, 0x00000000, 0x00000000, 
  0x0e200000, 0x00000000, 0x00000000, 0x00000000, // gsub_0
  0x0e200000, 0x00000000, 0x00000000, 0x00000000, // gsub_1
};

static const uint32_t hGPR_and_rGPRSubClassMask[] = {
  0x00001200, 0x00000000, 0x00000000, 0x00000000, 
  0x0e200000, 0x00000000, 0x00000000, 0x00000000, // gsub_0
  0x0a000000, 0x00000000, 0x00000000, 0x00000000, // gsub_1
};

static const uint32_t tcGPRSubClassMask[] = {
  0x00001c00, 0x00000000, 0x00000000, 0x00000000, 
  0x05400000, 0x00000000, 0x00000000, 0x00000000, // gsub_0
  0x09800000, 0x00000000, 0x00000000, 0x00000000, // gsub_1
};

static const uint32_t tGPR_and_tcGPRSubClassMask[] = {
  0x00000800, 0x00000000, 0x00000000, 0x00000000, 
  0x01000000, 0x00000000, 0x00000000, 0x00000000, // gsub_0
  0x01000000, 0x00000000, 0x00000000, 0x00000000, // gsub_1
};

static const uint32_t hGPR_and_tcGPRSubClassMask[] = {
  0x00001000, 0x00000000, 0x00000000, 0x00000000, 
  0x04000000, 0x00000000, 0x00000000, 0x00000000, // gsub_0
  0x08000000, 0x00000000, 0x00000000, 0x00000000, // gsub_1
};

static const uint32_t CCRSubClassMask[] = {
  0x00002000, 0x00000000, 0x00000000, 0x00000000, 
};

static const uint32_t GPRspSubClassMask[] = {
  0x00004000, 0x00000000, 0x00000000, 0x00000000, 
  0x04000000, 0x00000000, 0x00000000, 0x00000000, // gsub_1
};

static const uint32_t DPRSubClassMask[] = {
  0x00038000, 0x00000000, 0x00000000, 0x00000000, 
  0xf0000000, 0xffffffff, 0xffffffff, 0x0000003f, // dsub_0
  0x00000000, 0xebf2f3fe, 0xffffff01, 0x0000003f, // dsub_1
  0xf0000000, 0xfffffe01, 0xffffffff, 0x0000003f, // dsub_2
  0x00000000, 0x00000000, 0xffffff00, 0x0000003f, // dsub_3
  0x00000000, 0x140d0c00, 0xe00000fe, 0x0000003f, // dsub_4
  0x00000000, 0x00000000, 0xe0000000, 0x0000003f, // dsub_5
  0x00000000, 0x00000000, 0xe0000000, 0x0000003f, // dsub_6
  0x00000000, 0x00000000, 0xe0000000, 0x0000003f, // dsub_7
};

static const uint32_t DPR_VFP2SubClassMask[] = {
  0x00030000, 0x00000000, 0x00000000, 0x00000000, 
  0xe0000000, 0xffff99f5, 0xdfffe6fd, 0x0000003f, // dsub_0
  0x00000000, 0xebb281f0, 0xdffde401, 0x0000003f, // dsub_1
  0xc0000000, 0xff9f0001, 0x9ffce0f9, 0x0000003f, // dsub_2
  0x00000000, 0x00000000, 0x9ff8c000, 0x0000003f, // dsub_3
  0x00000000, 0x140c0000, 0x000000f0, 0x0000003f, // dsub_4
  0x00000000, 0x00000000, 0x00000000, 0x0000003f, // dsub_5
  0x00000000, 0x00000000, 0x00000000, 0x0000003e, // dsub_6
  0x00000000, 0x00000000, 0x00000000, 0x0000003e, // dsub_7
};

static const uint32_t DPR_8SubClassMask[] = {
  0x00020000, 0x00000000, 0x00000000, 0x00000000, 
  0x80000000, 0xfd1801a1, 0x1fa880e1, 0x0000003c, // dsub_0
  0x00000000, 0xc9000180, 0x1ea80001, 0x0000003c, // dsub_1
  0x00000000, 0x9c000001, 0x1ca000c1, 0x00000038, // dsub_2
  0x00000000, 0x00000000, 0x18800000, 0x00000038, // dsub_3
  0x00000000, 0x10000000, 0x00000080, 0x00000030, // dsub_4
  0x00000000, 0x00000000, 0x00000000, 0x00000030, // dsub_5
  0x00000000, 0x00000000, 0x00000000, 0x00000020, // dsub_6
  0x00000000, 0x00000000, 0x00000000, 0x00000020, // dsub_7
};

static const uint32_t GPRPairSubClassMask[] = {
  0x0ffc0000, 0x00000000, 0x00000000, 0x00000000, 
};

static const uint32_t GPRPair_with_gsub_1_in_rGPRSubClassMask[] = {
  0x0b980000, 0x00000000, 0x00000000, 0x00000000, 
};

static const uint32_t GPRPair_with_gsub_0_in_tGPRSubClassMask[] = {
  0x01100000, 0x00000000, 0x00000000, 0x00000000, 
};

static const uint32_t GPRPair_with_gsub_0_in_hGPRSubClassMask[] = {
  0x0e200000, 0x00000000, 0x00000000, 0x00000000, 
};

static const uint32_t GPRPair_with_gsub_0_in_tcGPRSubClassMask[] = {
  0x05400000, 0x00000000, 0x00000000, 0x00000000, 
};

static const uint32_t GPRPair_with_gsub_1_in_tcGPRSubClassMask[] = {
  0x09800000, 0x00000000, 0x00000000, 0x00000000, 
};

static const uint32_t GPRPair_with_gsub_0_in_tGPR_and_tcGPRSubClassMask[] = {
  0x01000000, 0x00000000, 0x00000000, 0x00000000, 
};

static const uint32_t GPRPair_with_gsub_1_in_hGPR_and_rGPRSubClassMask[] = {
  0x0a000000, 0x00000000, 0x00000000, 0x00000000, 
};

static const uint32_t GPRPair_with_gsub_1_in_GPRspSubClassMask[] = {
  0x04000000, 0x00000000, 0x00000000, 0x00000000, 
};

static const uint32_t GPRPair_with_gsub_1_in_hGPR_and_tcGPRSubClassMask[] = {
  0x08000000, 0x00000000, 0x00000000, 0x00000000, 
};

static const uint32_t DPairSpcSubClassMask[] = {
  0xf0000000, 0x00000001, 0x00000000, 0x00000000, 
  0x00000000, 0xfffffe00, 0xffffffff, 0x0000003f, // dsub_0_dsub_2
  0x00000000, 0x00000000, 0xffffff00, 0x0000003f, // dsub_1_dsub_3
  0x00000000, 0x140d0c00, 0xe00000fe, 0x0000003f, // dsub_2_dsub_4
  0x00000000, 0x00000000, 0xe0000000, 0x0000003f, // dsub_3_dsub_5
  0x00000000, 0x00000000, 0xe0000000, 0x0000003f, // dsub_4_dsub_6
  0x00000000, 0x00000000, 0xe0000000, 0x0000003f, // dsub_5_dsub_7
};

static const uint32_t DPairSpc_with_ssub_0SubClassMask[] = {
  0xe0000000, 0x00000001, 0x00000000, 0x00000000, 
  0x00000000, 0xffff9800, 0xdfffe6fd, 0x0000003f, // dsub_0_dsub_2
  0x00000000, 0x00000000, 0xdffde400, 0x0000003f, // dsub_1_dsub_3
  0x00000000, 0x140d0000, 0x800000f8, 0x0000003f, // dsub_2_dsub_4
  0x00000000, 0x00000000, 0x80000000, 0x0000003f, // dsub_3_dsub_5
  0x00000000, 0x00000000, 0x00000000, 0x0000003f, // dsub_4_dsub_6
  0x00000000, 0x00000000, 0x00000000, 0x0000003f, // dsub_5_dsub_7
};

static const uint32_t DPairSpc_with_dsub_2_then_ssub_0SubClassMask[] = {
  0xc0000000, 0x00000001, 0x00000000, 0x00000000, 
  0x00000000, 0xff9f0000, 0x9ffce0f9, 0x0000003f, // dsub_0_dsub_2
  0x00000000, 0x00000000, 0x9ff8c000, 0x0000003f, // dsub_1_dsub_3
  0x00000000, 0x140c0000, 0x000000f0, 0x0000003f, // dsub_2_dsub_4
  0x00000000, 0x00000000, 0x00000000, 0x0000003f, // dsub_3_dsub_5
  0x00000000, 0x00000000, 0x00000000, 0x0000003e, // dsub_4_dsub_6
  0x00000000, 0x00000000, 0x00000000, 0x0000003e, // dsub_5_dsub_7
};

static const uint32_t DPairSpc_with_dsub_0_in_DPR_8SubClassMask[] = {
  0x80000000, 0x00000001, 0x00000000, 0x00000000, 
  0x00000000, 0xfd180000, 0x1fa880e1, 0x0000003c, // dsub_0_dsub_2
  0x00000000, 0x00000000, 0x1ea80000, 0x0000003c, // dsub_1_dsub_3
  0x00000000, 0x14000000, 0x000000c0, 0x00000038, // dsub_2_dsub_4
  0x00000000, 0x00000000, 0x00000000, 0x00000038, // dsub_3_dsub_5
  0x00000000, 0x00000000, 0x00000000, 0x00000030, // dsub_4_dsub_6
  0x00000000, 0x00000000, 0x00000000, 0x00000030, // dsub_5_dsub_7
};

static const uint32_t DPairSpc_with_dsub_2_in_DPR_8SubClassMask[] = {
  0x00000000, 0x00000001, 0x00000000, 0x00000000, 
  0x00000000, 0x9c000000, 0x1ca000c1, 0x00000038, // dsub_0_dsub_2
  0x00000000, 0x00000000, 0x18800000, 0x00000038, // dsub_1_dsub_3
  0x00000000, 0x10000000, 0x00000080, 0x00000030, // dsub_2_dsub_4
  0x00000000, 0x00000000, 0x00000000, 0x00000030, // dsub_3_dsub_5
  0x00000000, 0x00000000, 0x00000000, 0x00000020, // dsub_4_dsub_6
  0x00000000, 0x00000000, 0x00000000, 0x00000020, // dsub_5_dsub_7
};

static const uint32_t DPairSubClassMask[] = {
  0x00000000, 0x000001fe, 0x00000000, 0x00000000, 
  0x00000000, 0xebf2f200, 0xffffff01, 0x0000003f, // qsub_0
  0x00000000, 0x00000000, 0xffffff00, 0x0000003f, // qsub_1
  0x00000000, 0x00000000, 0xe0000000, 0x0000003f, // qsub_2
  0x00000000, 0x00000000, 0xe0000000, 0x0000003f, // qsub_3
  0x00000000, 0xebf2f200, 0xffffff01, 0x0000003f, // dsub_1_dsub_2
  0x00000000, 0x00000000, 0xe0000000, 0x0000003f, // dsub_3_dsub_4
  0x00000000, 0x00000000, 0xe0000000, 0x0000003f, // dsub_5_dsub_6
};

static const uint32_t DPair_with_ssub_0SubClassMask[] = {
  0x00000000, 0x000001f4, 0x00000000, 0x00000000, 
  0x00000000, 0xebf29000, 0xdfffe601, 0x0000003f, // qsub_0
  0x00000000, 0x00000000, 0x9ffce000, 0x0000003f, // qsub_1
  0x00000000, 0x00000000, 0x00000000, 0x0000003f, // qsub_2
  0x00000000, 0x00000000, 0x00000000, 0x0000003e, // qsub_3
  0x00000000, 0xebb28000, 0xdffde401, 0x0000003f, // dsub_1_dsub_2
  0x00000000, 0x00000000, 0x80000000, 0x0000003f, // dsub_3_dsub_4
  0x00000000, 0x00000000, 0x00000000, 0x0000003f, // dsub_5_dsub_6
};

static const uint32_t QPRSubClassMask[] = {
  0x00000000, 0x00000148, 0x00000000, 0x00000000, 
  0x00000000, 0x42204000, 0xea110801, 0x0000003f, // qsub_0
  0x00000000, 0x00000000, 0xea110800, 0x0000003f, // qsub_1
  0x00000000, 0x00000000, 0xe0000000, 0x0000003f, // qsub_2
  0x00000000, 0x00000000, 0xe0000000, 0x0000003f, // qsub_3
  0x00000000, 0xa0c02000, 0x15461000, 0x00000000, // dsub_1_dsub_2
};

static const uint32_t DPair_with_ssub_2SubClassMask[] = {
  0x00000000, 0x000001f0, 0x00000000, 0x00000000, 
  0x00000000, 0xebb28000, 0xdffde401, 0x0000003f, // qsub_0
  0x00000000, 0x00000000, 0x9ff8c000, 0x0000003f, // qsub_1
  0x00000000, 0x00000000, 0x00000000, 0x0000003f, // qsub_2
  0x00000000, 0x00000000, 0x00000000, 0x0000003e, // qsub_3
  0x00000000, 0xeb920000, 0x9ffce001, 0x0000003f, // dsub_1_dsub_2
  0x00000000, 0x00000000, 0x00000000, 0x0000003f, // dsub_3_dsub_4
  0x00000000, 0x00000000, 0x00000000, 0x0000003e, // dsub_5_dsub_6
};

static const uint32_t DPair_with_dsub_0_in_DPR_8SubClassMask[] = {
  0x00000000, 0x000001a0, 0x00000000, 0x00000000, 
  0x00000000, 0xe9100000, 0x1fa88001, 0x0000003c, // qsub_0
  0x00000000, 0x00000000, 0x1ca00000, 0x00000038, // qsub_1
  0x00000000, 0x00000000, 0x00000000, 0x00000030, // qsub_2
  0x00000000, 0x00000000, 0x00000000, 0x00000020, // qsub_3
  0x00000000, 0xc9000000, 0x1ea80001, 0x0000003c, // dsub_1_dsub_2
  0x00000000, 0x00000000, 0x00000000, 0x00000038, // dsub_3_dsub_4
  0x00000000, 0x00000000, 0x00000000, 0x00000030, // dsub_5_dsub_6
};

static const uint32_t QPR_VFP2SubClassMask[] = {
  0x00000000, 0x00000140, 0x00000000, 0x00000000, 
  0x00000000, 0x42200000, 0xca110001, 0x0000003f, // qsub_0
  0x00000000, 0x00000000, 0x8a100000, 0x0000003f, // qsub_1
  0x00000000, 0x00000000, 0x00000000, 0x0000003f, // qsub_2
  0x00000000, 0x00000000, 0x00000000, 0x0000003e, // qsub_3
  0x00000000, 0xa0800000, 0x15440000, 0x00000000, // dsub_1_dsub_2
};

static const uint32_t DPair_with_dsub_1_in_DPR_8SubClassMask[] = {
  0x00000000, 0x00000180, 0x00000000, 0x00000000, 
  0x00000000, 0xc9000000, 0x1ea80001, 0x0000003c, // qsub_0
  0x00000000, 0x00000000, 0x18800000, 0x00000038, // qsub_1
  0x00000000, 0x00000000, 0x00000000, 0x00000030, // qsub_2
  0x00000000, 0x00000000, 0x00000000, 0x00000020, // qsub_3
  0x00000000, 0x88000000, 0x1ca00001, 0x00000038, // dsub_1_dsub_2
  0x00000000, 0x00000000, 0x00000000, 0x00000030, // dsub_3_dsub_4
  0x00000000, 0x00000000, 0x00000000, 0x00000020, // dsub_5_dsub_6
};

static const uint32_t QPR_8SubClassMask[] = {
  0x00000000, 0x00000100, 0x00000000, 0x00000000, 
  0x00000000, 0x40000000, 0x0a000001, 0x0000003c, // qsub_0
  0x00000000, 0x00000000, 0x08000000, 0x00000038, // qsub_1
  0x00000000, 0x00000000, 0x00000000, 0x00000030, // qsub_2
  0x00000000, 0x00000000, 0x00000000, 0x00000020, // qsub_3
  0x00000000, 0x80000000, 0x14000000, 0x00000000, // dsub_1_dsub_2
};

static const uint32_t DTripleSubClassMask[] = {
  0x00000000, 0xebf2f200, 0x00000001, 0x00000000, 
  0x00000000, 0x00000000, 0xffffff00, 0x0000003f, // dsub_0_dsub_1_dsub_2
  0x00000000, 0x00000000, 0xffffff00, 0x0000003f, // dsub_1_dsub_2_dsub_3
  0x00000000, 0x00000000, 0xe0000000, 0x0000003f, // dsub_2_dsub_3_dsub_4
  0x00000000, 0x00000000, 0xe0000000, 0x0000003f, // dsub_3_dsub_4_dsub_5
  0x00000000, 0x00000000, 0xe0000000, 0x0000003f, // dsub_4_dsub_5_dsub_6
  0x00000000, 0x00000000, 0xe0000000, 0x0000003f, // dsub_5_dsub_6_dsub_7
};

static const uint32_t DTripleSpcSubClassMask[] = {
  0x00000000, 0x140d0c00, 0x000000fe, 0x00000000, 
  0x00000000, 0x00000000, 0xe0000000, 0x0000003f, // dsub_0_dsub_2_dsub_4
  0x00000000, 0x00000000, 0xe0000000, 0x0000003f, // dsub_1_dsub_3_dsub_5
  0x00000000, 0x00000000, 0xe0000000, 0x0000003f, // dsub_2_dsub_4_dsub_6
  0x00000000, 0x00000000, 0xe0000000, 0x0000003f, // dsub_3_dsub_5_dsub_7
};

static const uint32_t DTripleSpc_with_ssub_0SubClassMask[] = {
  0x00000000, 0x140d0800, 0x000000fc, 0x00000000, 
  0x00000000, 0x00000000, 0xc0000000, 0x0000003f, // dsub_0_dsub_2_dsub_4
  0x00000000, 0x00000000, 0xc0000000, 0x0000003f, // dsub_1_dsub_3_dsub_5
  0x00000000, 0x00000000, 0x80000000, 0x0000003f, // dsub_2_dsub_4_dsub_6
  0x00000000, 0x00000000, 0x80000000, 0x0000003f, // dsub_3_dsub_5_dsub_7
};

static const uint32_t DTriple_with_ssub_0SubClassMask[] = {
  0x00000000, 0xebf29000, 0x00000001, 0x00000000, 
  0x00000000, 0x00000000, 0xdfffe600, 0x0000003f, // dsub_0_dsub_1_dsub_2
  0x00000000, 0x00000000, 0xdffde400, 0x0000003f, // dsub_1_dsub_2_dsub_3
  0x00000000, 0x00000000, 0x80000000, 0x0000003f, // dsub_2_dsub_3_dsub_4
  0x00000000, 0x00000000, 0x80000000, 0x0000003f, // dsub_3_dsub_4_dsub_5
  0x00000000, 0x00000000, 0x00000000, 0x0000003f, // dsub_4_dsub_5_dsub_6
  0x00000000, 0x00000000, 0x00000000, 0x0000003f, // dsub_5_dsub_6_dsub_7
};

static const uint32_t DTriple_with_dsub_1_dsub_2_in_QPRSubClassMask[] = {
  0x00000000, 0xa0c02000, 0x00000000, 0x00000000, 
  0x00000000, 0x00000000, 0x15461000, 0x00000000, // dsub_0_dsub_1_dsub_2
  0x00000000, 0x00000000, 0xea110800, 0x0000003f, // dsub_1_dsub_2_dsub_3
  0x00000000, 0x00000000, 0xe0000000, 0x0000003f, // dsub_3_dsub_4_dsub_5
  0x00000000, 0x00000000, 0xe0000000, 0x0000003f, // dsub_5_dsub_6_dsub_7
};

static const uint32_t DTriple_with_qsub_0_in_QPRSubClassMask[] = {
  0x00000000, 0x42204000, 0x00000001, 0x00000000, 
  0x00000000, 0x00000000, 0xea110800, 0x0000003f, // dsub_0_dsub_1_dsub_2
  0x00000000, 0x00000000, 0x15461000, 0x00000000, // dsub_1_dsub_2_dsub_3
  0x00000000, 0x00000000, 0xe0000000, 0x0000003f, // dsub_2_dsub_3_dsub_4
  0x00000000, 0x00000000, 0xe0000000, 0x0000003f, // dsub_4_dsub_5_dsub_6
};

static const uint32_t DTriple_with_ssub_2SubClassMask[] = {
  0x00000000, 0xebb28000, 0x00000001, 0x00000000, 
  0x00000000, 0x00000000, 0xdffde400, 0x0000003f, // dsub_0_dsub_1_dsub_2
  0x00000000, 0x00000000, 0x9ffce000, 0x0000003f, // dsub_1_dsub_2_dsub_3
  0x00000000, 0x00000000, 0x80000000, 0x0000003f, // dsub_2_dsub_3_dsub_4
  0x00000000, 0x00000000, 0x00000000, 0x0000003f, // dsub_3_dsub_4_dsub_5
  0x00000000, 0x00000000, 0x00000000, 0x0000003f, // dsub_4_dsub_5_dsub_6
  0x00000000, 0x00000000, 0x00000000, 0x0000003e, // dsub_5_dsub_6_dsub_7
};

static const uint32_t DTripleSpc_with_dsub_2_then_ssub_0SubClassMask[] = {
  0x00000000, 0x140d0000, 0x000000f8, 0x00000000, 
  0x00000000, 0x00000000, 0x80000000, 0x0000003f, // dsub_0_dsub_2_dsub_4
  0x00000000, 0x00000000, 0x80000000, 0x0000003f, // dsub_1_dsub_3_dsub_5
  0x00000000, 0x00000000, 0x00000000, 0x0000003f, // dsub_2_dsub_4_dsub_6
  0x00000000, 0x00000000, 0x00000000, 0x0000003f, // dsub_3_dsub_5_dsub_7
};

static const uint32_t DTriple_with_dsub_2_then_ssub_0SubClassMask[] = {
  0x00000000, 0xeb920000, 0x00000001, 0x00000000, 
  0x00000000, 0x00000000, 0x9ffce000, 0x0000003f, // dsub_0_dsub_1_dsub_2
  0x00000000, 0x00000000, 0x9ff8c000, 0x0000003f, // dsub_1_dsub_2_dsub_3
  0x00000000, 0x00000000, 0x00000000, 0x0000003f, // dsub_2_dsub_3_dsub_4
  0x00000000, 0x00000000, 0x00000000, 0x0000003f, // dsub_3_dsub_4_dsub_5
  0x00000000, 0x00000000, 0x00000000, 0x0000003e, // dsub_4_dsub_5_dsub_6
  0x00000000, 0x00000000, 0x00000000, 0x0000003e, // dsub_5_dsub_6_dsub_7
};

static const uint32_t DTripleSpc_with_dsub_4_then_ssub_0SubClassMask[] = {
  0x00000000, 0x140c0000, 0x000000f0, 0x00000000, 
  0x00000000, 0x00000000, 0x00000000, 0x0000003f, // dsub_0_dsub_2_dsub_4
  0x00000000, 0x00000000, 0x00000000, 0x0000003f, // dsub_1_dsub_3_dsub_5
  0x00000000, 0x00000000, 0x00000000, 0x0000003e, // dsub_2_dsub_4_dsub_6
  0x00000000, 0x00000000, 0x00000000, 0x0000003e, // dsub_3_dsub_5_dsub_7
};

static const uint32_t DTripleSpc_with_dsub_0_in_DPR_8SubClassMask[] = {
  0x00000000, 0x14080000, 0x000000e0, 0x00000000, 
  0x00000000, 0x00000000, 0x00000000, 0x0000003c, // dsub_0_dsub_2_dsub_4
  0x00000000, 0x00000000, 0x00000000, 0x0000003c, // dsub_1_dsub_3_dsub_5
  0x00000000, 0x00000000, 0x00000000, 0x00000038, // dsub_2_dsub_4_dsub_6
  0x00000000, 0x00000000, 0x00000000, 0x00000038, // dsub_3_dsub_5_dsub_7
};

static const uint32_t DTriple_with_dsub_0_in_DPR_8SubClassMask[] = {
  0x00000000, 0xe9100000, 0x00000001, 0x00000000, 
  0x00000000, 0x00000000, 0x1fa88000, 0x0000003c, // dsub_0_dsub_1_dsub_2
  0x00000000, 0x00000000, 0x1ea80000, 0x0000003c, // dsub_1_dsub_2_dsub_3
  0x00000000, 0x00000000, 0x00000000, 0x00000038, // dsub_2_dsub_3_dsub_4
  0x00000000, 0x00000000, 0x00000000, 0x00000038, // dsub_3_dsub_4_dsub_5
  0x00000000, 0x00000000, 0x00000000, 0x00000030, // dsub_4_dsub_5_dsub_6
  0x00000000, 0x00000000, 0x00000000, 0x00000030, // dsub_5_dsub_6_dsub_7
};

static const uint32_t DTriple_with_qsub_0_in_QPR_VFP2SubClassMask[] = {
  0x00000000, 0x42200000, 0x00000001, 0x00000000, 
  0x00000000, 0x00000000, 0xca110000, 0x0000003f, // dsub_0_dsub_1_dsub_2
  0x00000000, 0x00000000, 0x15440000, 0x00000000, // dsub_1_dsub_2_dsub_3
  0x00000000, 0x00000000, 0x80000000, 0x0000003f, // dsub_2_dsub_3_dsub_4
  0x00000000, 0x00000000, 0x00000000, 0x0000003f, // dsub_4_dsub_5_dsub_6
};

static const uint32_t DTriple_with_ssub_0_and_DTriple_with_dsub_1_dsub_2_in_QPRSubClassMask[] = {
  0x00000000, 0xa0c00000, 0x00000000, 0x00000000, 
  0x00000000, 0x00000000, 0x15460000, 0x00000000, // dsub_0_dsub_1_dsub_2
  0x00000000, 0x00000000, 0xca110000, 0x0000003f, // dsub_1_dsub_2_dsub_3
  0x00000000, 0x00000000, 0x80000000, 0x0000003f, // dsub_3_dsub_4_dsub_5
  0x00000000, 0x00000000, 0x00000000, 0x0000003f, // dsub_5_dsub_6_dsub_7
};

static const uint32_t DTriple_with_dsub_1_dsub_2_in_QPR_VFP2SubClassMask[] = {
  0x00000000, 0xa0800000, 0x00000000, 0x00000000, 
  0x00000000, 0x00000000, 0x15440000, 0x00000000, // dsub_0_dsub_1_dsub_2
  0x00000000, 0x00000000, 0x8a100000, 0x0000003f, // dsub_1_dsub_2_dsub_3
  0x00000000, 0x00000000, 0x00000000, 0x0000003f, // dsub_3_dsub_4_dsub_5
  0x00000000, 0x00000000, 0x00000000, 0x0000003e, // dsub_5_dsub_6_dsub_7
};

static const uint32_t DTriple_with_dsub_1_in_DPR_8SubClassMask[] = {
  0x00000000, 0xc9000000, 0x00000001, 0x00000000, 
  0x00000000, 0x00000000, 0x1ea80000, 0x0000003c, // dsub_0_dsub_1_dsub_2
  0x00000000, 0x00000000, 0x1ca00000, 0x00000038, // dsub_1_dsub_2_dsub_3
  0x00000000, 0x00000000, 0x00000000, 0x00000038, // dsub_2_dsub_3_dsub_4
  0x00000000, 0x00000000, 0x00000000, 0x00000030, // dsub_3_dsub_4_dsub_5
  0x00000000, 0x00000000, 0x00000000, 0x00000030, // dsub_4_dsub_5_dsub_6
  0x00000000, 0x00000000, 0x00000000, 0x00000020, // dsub_5_dsub_6_dsub_7
};

static const uint32_t DTriple_with_dsub_2_then_ssub_0_and_DTriple_with_qsub_0_in_QPRSubClassMask[] = {
  0x00000000, 0x42000000, 0x00000001, 0x00000000, 
  0x00000000, 0x00000000, 0x8a100000, 0x0000003f, // dsub_0_dsub_1_dsub_2
  0x00000000, 0x00000000, 0x15400000, 0x00000000, // dsub_1_dsub_2_dsub_3
  0x00000000, 0x00000000, 0x00000000, 0x0000003f, // dsub_2_dsub_3_dsub_4
  0x00000000, 0x00000000, 0x00000000, 0x0000003e, // dsub_4_dsub_5_dsub_6
};

static const uint32_t DTripleSpc_with_dsub_2_in_DPR_8SubClassMask[] = {
  0x00000000, 0x14000000, 0x000000c0, 0x00000000, 
  0x00000000, 0x00000000, 0x00000000, 0x00000038, // dsub_0_dsub_2_dsub_4
  0x00000000, 0x00000000, 0x00000000, 0x00000038, // dsub_1_dsub_3_dsub_5
  0x00000000, 0x00000000, 0x00000000, 0x00000030, // dsub_2_dsub_4_dsub_6
  0x00000000, 0x00000000, 0x00000000, 0x00000030, // dsub_3_dsub_5_dsub_7
};

static const uint32_t DTriple_with_dsub_2_in_DPR_8SubClassMask[] = {
  0x00000000, 0x88000000, 0x00000001, 0x00000000, 
  0x00000000, 0x00000000, 0x1ca00000, 0x00000038, // dsub_0_dsub_1_dsub_2
  0x00000000, 0x00000000, 0x18800000, 0x00000038, // dsub_1_dsub_2_dsub_3
  0x00000000, 0x00000000, 0x00000000, 0x00000030, // dsub_2_dsub_3_dsub_4
  0x00000000, 0x00000000, 0x00000000, 0x00000030, // dsub_3_dsub_4_dsub_5
  0x00000000, 0x00000000, 0x00000000, 0x00000020, // dsub_4_dsub_5_dsub_6
  0x00000000, 0x00000000, 0x00000000, 0x00000020, // dsub_5_dsub_6_dsub_7
};

static const uint32_t DTripleSpc_with_dsub_4_in_DPR_8SubClassMask[] = {
  0x00000000, 0x10000000, 0x00000080, 0x00000000, 
  0x00000000, 0x00000000, 0x00000000, 0x00000030, // dsub_0_dsub_2_dsub_4
  0x00000000, 0x00000000, 0x00000000, 0x00000030, // dsub_1_dsub_3_dsub_5
  0x00000000, 0x00000000, 0x00000000, 0x00000020, // dsub_2_dsub_4_dsub_6
  0x00000000, 0x00000000, 0x00000000, 0x00000020, // dsub_3_dsub_5_dsub_7
};

static const uint32_t DTriple_with_dsub_0_in_DPR_8_and_DTriple_with_dsub_1_dsub_2_in_QPRSubClassMask[] = {
  0x00000000, 0xa0000000, 0x00000000, 0x00000000, 
  0x00000000, 0x00000000, 0x15000000, 0x00000000, // dsub_0_dsub_1_dsub_2
  0x00000000, 0x00000000, 0x0a000000, 0x0000003c, // dsub_1_dsub_2_dsub_3
  0x00000000, 0x00000000, 0x00000000, 0x00000038, // dsub_3_dsub_4_dsub_5
  0x00000000, 0x00000000, 0x00000000, 0x00000030, // dsub_5_dsub_6_dsub_7
};

static const uint32_t DTriple_with_qsub_0_in_QPR_8SubClassMask[] = {
  0x00000000, 0x40000000, 0x00000001, 0x00000000, 
  0x00000000, 0x00000000, 0x0a000000, 0x0000003c, // dsub_0_dsub_1_dsub_2
  0x00000000, 0x00000000, 0x14000000, 0x00000000, // dsub_1_dsub_2_dsub_3
  0x00000000, 0x00000000, 0x00000000, 0x00000038, // dsub_2_dsub_3_dsub_4
  0x00000000, 0x00000000, 0x00000000, 0x00000030, // dsub_4_dsub_5_dsub_6
};

static const uint32_t DTriple_with_dsub_1_dsub_2_in_QPR_8SubClassMask[] = {
  0x00000000, 0x80000000, 0x00000000, 0x00000000, 
  0x00000000, 0x00000000, 0x14000000, 0x00000000, // dsub_0_dsub_1_dsub_2
  0x00000000, 0x00000000, 0x08000000, 0x00000038, // dsub_1_dsub_2_dsub_3
  0x00000000, 0x00000000, 0x00000000, 0x00000030, // dsub_3_dsub_4_dsub_5
  0x00000000, 0x00000000, 0x00000000, 0x00000020, // dsub_5_dsub_6_dsub_7
};

static const uint32_t DTriple_with_dsub_2_in_DPR_8_and_DTriple_with_qsub_0_in_QPRSubClassMask[] = {
  0x00000000, 0x00000000, 0x00000001, 0x00000000, 
  0x00000000, 0x00000000, 0x08000000, 0x00000038, // dsub_0_dsub_1_dsub_2
  0x00000000, 0x00000000, 0x10000000, 0x00000000, // dsub_1_dsub_2_dsub_3
  0x00000000, 0x00000000, 0x00000000, 0x00000030, // dsub_2_dsub_3_dsub_4
  0x00000000, 0x00000000, 0x00000000, 0x00000020, // dsub_4_dsub_5_dsub_6
};

static const uint32_t DQuadSpcSubClassMask[] = {
  0x00000000, 0x00000000, 0x000000fe, 0x00000000, 
  0x00000000, 0x00000000, 0xe0000000, 0x0000003f, // dsub_0_dsub_2_dsub_4
  0x00000000, 0x00000000, 0xe0000000, 0x0000003f, // dsub_1_dsub_3_dsub_5
  0x00000000, 0x00000000, 0xe0000000, 0x0000003f, // dsub_2_dsub_4_dsub_6
  0x00000000, 0x00000000, 0xe0000000, 0x0000003f, // dsub_3_dsub_5_dsub_7
};

static const uint32_t DQuadSpc_with_ssub_0SubClassMask[] = {
  0x00000000, 0x00000000, 0x000000fc, 0x00000000, 
  0x00000000, 0x00000000, 0xc0000000, 0x0000003f, // dsub_0_dsub_2_dsub_4
  0x00000000, 0x00000000, 0xc0000000, 0x0000003f, // dsub_1_dsub_3_dsub_5
  0x00000000, 0x00000000, 0x80000000, 0x0000003f, // dsub_2_dsub_4_dsub_6
  0x00000000, 0x00000000, 0x80000000, 0x0000003f, // dsub_3_dsub_5_dsub_7
};

static const uint32_t DQuadSpc_with_dsub_2_then_ssub_0SubClassMask[] = {
  0x00000000, 0x00000000, 0x000000f8, 0x00000000, 
  0x00000000, 0x00000000, 0x80000000, 0x0000003f, // dsub_0_dsub_2_dsub_4
  0x00000000, 0x00000000, 0x80000000, 0x0000003f, // dsub_1_dsub_3_dsub_5
  0x00000000, 0x00000000, 0x00000000, 0x0000003f, // dsub_2_dsub_4_dsub_6
  0x00000000, 0x00000000, 0x00000000, 0x0000003f, // dsub_3_dsub_5_dsub_7
};

static const uint32_t DQuadSpc_with_dsub_4_then_ssub_0SubClassMask[] = {
  0x00000000, 0x00000000, 0x000000f0, 0x00000000, 
  0x00000000, 0x00000000, 0x00000000, 0x0000003f, // dsub_0_dsub_2_dsub_4
  0x00000000, 0x00000000, 0x00000000, 0x0000003f, // dsub_1_dsub_3_dsub_5
  0x00000000, 0x00000000, 0x00000000, 0x0000003e, // dsub_2_dsub_4_dsub_6
  0x00000000, 0x00000000, 0x00000000, 0x0000003e, // dsub_3_dsub_5_dsub_7
};

static const uint32_t DQuadSpc_with_dsub_0_in_DPR_8SubClassMask[] = {
  0x00000000, 0x00000000, 0x000000e0, 0x00000000, 
  0x00000000, 0x00000000, 0x00000000, 0x0000003c, // dsub_0_dsub_2_dsub_4
  0x00000000, 0x00000000, 0x00000000, 0x0000003c, // dsub_1_dsub_3_dsub_5
  0x00000000, 0x00000000, 0x00000000, 0x00000038, // dsub_2_dsub_4_dsub_6
  0x00000000, 0x00000000, 0x00000000, 0x00000038, // dsub_3_dsub_5_dsub_7
};

static const uint32_t DQuadSpc_with_dsub_2_in_DPR_8SubClassMask[] = {
  0x00000000, 0x00000000, 0x000000c0, 0x00000000, 
  0x00000000, 0x00000000, 0x00000000, 0x00000038, // dsub_0_dsub_2_dsub_4
  0x00000000, 0x00000000, 0x00000000, 0x00000038, // dsub_1_dsub_3_dsub_5
  0x00000000, 0x00000000, 0x00000000, 0x00000030, // dsub_2_dsub_4_dsub_6
  0x00000000, 0x00000000, 0x00000000, 0x00000030, // dsub_3_dsub_5_dsub_7
};

static const uint32_t DQuadSpc_with_dsub_4_in_DPR_8SubClassMask[] = {
  0x00000000, 0x00000000, 0x00000080, 0x00000000, 
  0x00000000, 0x00000000, 0x00000000, 0x00000030, // dsub_0_dsub_2_dsub_4
  0x00000000, 0x00000000, 0x00000000, 0x00000030, // dsub_1_dsub_3_dsub_5
  0x00000000, 0x00000000, 0x00000000, 0x00000020, // dsub_2_dsub_4_dsub_6
  0x00000000, 0x00000000, 0x00000000, 0x00000020, // dsub_3_dsub_5_dsub_7
};

static const uint32_t DQuadSubClassMask[] = {
  0x00000000, 0x00000000, 0x1fffff00, 0x00000000, 
  0x00000000, 0x00000000, 0xe0000000, 0x0000003f, // qqsub_0
  0x00000000, 0x00000000, 0xe0000000, 0x0000003f, // qqsub_1
  0x00000000, 0x00000000, 0xe0000000, 0x0000003f, // dsub_1_dsub_2_dsub_3_dsub_4
  0x00000000, 0x00000000, 0xe0000000, 0x0000003f, // dsub_3_dsub_4_dsub_5_dsub_6
  0x00000000, 0x00000000, 0xe0000000, 0x0000003f, // qsub_1_qsub_2
};

static const uint32_t DQuad_with_ssub_0SubClassMask[] = {
  0x00000000, 0x00000000, 0x1fffe600, 0x00000000, 
  0x00000000, 0x00000000, 0xc0000000, 0x0000003f, // qqsub_0
  0x00000000, 0x00000000, 0x00000000, 0x0000003f, // qqsub_1
  0x00000000, 0x00000000, 0xc0000000, 0x0000003f, // dsub_1_dsub_2_dsub_3_dsub_4
  0x00000000, 0x00000000, 0x80000000, 0x0000003f, // dsub_3_dsub_4_dsub_5_dsub_6
  0x00000000, 0x00000000, 0x80000000, 0x0000003f, // qsub_1_qsub_2
};

static const uint32_t DQuad_with_ssub_2SubClassMask[] = {
  0x00000000, 0x00000000, 0x1ffde400, 0x00000000, 
  0x00000000, 0x00000000, 0xc0000000, 0x0000003f, // qqsub_0
  0x00000000, 0x00000000, 0x00000000, 0x0000003f, // qqsub_1
  0x00000000, 0x00000000, 0x80000000, 0x0000003f, // dsub_1_dsub_2_dsub_3_dsub_4
  0x00000000, 0x00000000, 0x00000000, 0x0000003f, // dsub_3_dsub_4_dsub_5_dsub_6
  0x00000000, 0x00000000, 0x80000000, 0x0000003f, // qsub_1_qsub_2
};

static const uint32_t QQPRSubClassMask[] = {
  0x00000000, 0x00000000, 0x0a110800, 0x00000000, 
  0x00000000, 0x00000000, 0xe0000000, 0x0000003f, // qqsub_0
  0x00000000, 0x00000000, 0xe0000000, 0x0000003f, // qqsub_1
  0x00000000, 0x00000000, 0xe0000000, 0x0000003f, // qsub_1_qsub_2
};

static const uint32_t DQuad_with_dsub_1_dsub_2_in_QPRSubClassMask[] = {
  0x00000000, 0x00000000, 0x15461000, 0x00000000, 
  0x00000000, 0x00000000, 0xe0000000, 0x0000003f, // dsub_1_dsub_2_dsub_3_dsub_4
  0x00000000, 0x00000000, 0xe0000000, 0x0000003f, // dsub_3_dsub_4_dsub_5_dsub_6
};

static const uint32_t DQuad_with_dsub_2_then_ssub_0SubClassMask[] = {
  0x00000000, 0x00000000, 0x1ffce000, 0x00000000, 
  0x00000000, 0x00000000, 0x80000000, 0x0000003f, // qqsub_0
  0x00000000, 0x00000000, 0x00000000, 0x0000003e, // qqsub_1
  0x00000000, 0x00000000, 0x80000000, 0x0000003f, // dsub_1_dsub_2_dsub_3_dsub_4
  0x00000000, 0x00000000, 0x00000000, 0x0000003f, // dsub_3_dsub_4_dsub_5_dsub_6
  0x00000000, 0x00000000, 0x00000000, 0x0000003f, // qsub_1_qsub_2
};

static const uint32_t DQuad_with_dsub_3_then_ssub_0SubClassMask[] = {
  0x00000000, 0x00000000, 0x1ff8c000, 0x00000000, 
  0x00000000, 0x00000000, 0x80000000, 0x0000003f, // qqsub_0
  0x00000000, 0x00000000, 0x00000000, 0x0000003e, // qqsub_1
  0x00000000, 0x00000000, 0x00000000, 0x0000003f, // dsub_1_dsub_2_dsub_3_dsub_4
  0x00000000, 0x00000000, 0x00000000, 0x0000003e, // dsub_3_dsub_4_dsub_5_dsub_6
  0x00000000, 0x00000000, 0x00000000, 0x0000003f, // qsub_1_qsub_2
};

static const uint32_t DQuad_with_dsub_0_in_DPR_8SubClassMask[] = {
  0x00000000, 0x00000000, 0x1fa88000, 0x00000000, 
  0x00000000, 0x00000000, 0x00000000, 0x0000003c, // qqsub_0
  0x00000000, 0x00000000, 0x00000000, 0x00000030, // qqsub_1
  0x00000000, 0x00000000, 0x00000000, 0x0000003c, // dsub_1_dsub_2_dsub_3_dsub_4
  0x00000000, 0x00000000, 0x00000000, 0x00000038, // dsub_3_dsub_4_dsub_5_dsub_6
  0x00000000, 0x00000000, 0x00000000, 0x00000038, // qsub_1_qsub_2
};

static const uint32_t DQuad_with_qsub_0_in_QPR_VFP2SubClassMask[] = {
  0x00000000, 0x00000000, 0x0a110000, 0x00000000, 
  0x00000000, 0x00000000, 0xc0000000, 0x0000003f, // qqsub_0
  0x00000000, 0x00000000, 0x00000000, 0x0000003f, // qqsub_1
  0x00000000, 0x00000000, 0x80000000, 0x0000003f, // qsub_1_qsub_2
};

static const uint32_t DQuad_with_ssub_0_and_DQuad_with_dsub_1_dsub_2_in_QPRSubClassMask[] = {
  0x00000000, 0x00000000, 0x15460000, 0x00000000, 
  0x00000000, 0x00000000, 0xc0000000, 0x0000003f, // dsub_1_dsub_2_dsub_3_dsub_4
  0x00000000, 0x00000000, 0x80000000, 0x0000003f, // dsub_3_dsub_4_dsub_5_dsub_6
};

static const uint32_t DQuad_with_dsub_1_dsub_2_in_QPR_VFP2SubClassMask[] = {
  0x00000000, 0x00000000, 0x15440000, 0x00000000, 
  0x00000000, 0x00000000, 0x80000000, 0x0000003f, // dsub_1_dsub_2_dsub_3_dsub_4
  0x00000000, 0x00000000, 0x00000000, 0x0000003f, // dsub_3_dsub_4_dsub_5_dsub_6
};

static const uint32_t DQuad_with_dsub_1_in_DPR_8SubClassMask[] = {
  0x00000000, 0x00000000, 0x1ea80000, 0x00000000, 
  0x00000000, 0x00000000, 0x00000000, 0x0000003c, // qqsub_0
  0x00000000, 0x00000000, 0x00000000, 0x00000030, // qqsub_1
  0x00000000, 0x00000000, 0x00000000, 0x00000038, // dsub_1_dsub_2_dsub_3_dsub_4
  0x00000000, 0x00000000, 0x00000000, 0x00000030, // dsub_3_dsub_4_dsub_5_dsub_6
  0x00000000, 0x00000000, 0x00000000, 0x00000038, // qsub_1_qsub_2
};

static const uint32_t DQuad_with_qsub_1_in_QPR_VFP2SubClassMask[] = {
  0x00000000, 0x00000000, 0x0a100000, 0x00000000, 
  0x00000000, 0x00000000, 0x80000000, 0x0000003f, // qqsub_0
  0x00000000, 0x00000000, 0x00000000, 0x0000003e, // qqsub_1
  0x00000000, 0x00000000, 0x00000000, 0x0000003f, // qsub_1_qsub_2
};

static const uint32_t DQuad_with_dsub_2_in_DPR_8SubClassMask[] = {
  0x00000000, 0x00000000, 0x1ca00000, 0x00000000, 
  0x00000000, 0x00000000, 0x00000000, 0x00000038, // qqsub_0
  0x00000000, 0x00000000, 0x00000000, 0x00000020, // qqsub_1
  0x00000000, 0x00000000, 0x00000000, 0x00000038, // dsub_1_dsub_2_dsub_3_dsub_4
  0x00000000, 0x00000000, 0x00000000, 0x00000030, // dsub_3_dsub_4_dsub_5_dsub_6
  0x00000000, 0x00000000, 0x00000000, 0x00000030, // qsub_1_qsub_2
};

static const uint32_t DQuad_with_dsub_3_then_ssub_0_and_DQuad_with_dsub_1_dsub_2_in_QPRSubClassMask[] = {
  0x00000000, 0x00000000, 0x15400000, 0x00000000, 
  0x00000000, 0x00000000, 0x00000000, 0x0000003f, // dsub_1_dsub_2_dsub_3_dsub_4
  0x00000000, 0x00000000, 0x00000000, 0x0000003e, // dsub_3_dsub_4_dsub_5_dsub_6
};

static const uint32_t DQuad_with_dsub_3_in_DPR_8SubClassMask[] = {
  0x00000000, 0x00000000, 0x18800000, 0x00000000, 
  0x00000000, 0x00000000, 0x00000000, 0x00000038, // qqsub_0
  0x00000000, 0x00000000, 0x00000000, 0x00000020, // qqsub_1
  0x00000000, 0x00000000, 0x00000000, 0x00000030, // dsub_1_dsub_2_dsub_3_dsub_4
  0x00000000, 0x00000000, 0x00000000, 0x00000020, // dsub_3_dsub_4_dsub_5_dsub_6
  0x00000000, 0x00000000, 0x00000000, 0x00000030, // qsub_1_qsub_2
};

static const uint32_t DQuad_with_dsub_0_in_DPR_8_and_DQuad_with_dsub_1_dsub_2_in_QPRSubClassMask[] = {
  0x00000000, 0x00000000, 0x15000000, 0x00000000, 
  0x00000000, 0x00000000, 0x00000000, 0x0000003c, // dsub_1_dsub_2_dsub_3_dsub_4
  0x00000000, 0x00000000, 0x00000000, 0x00000038, // dsub_3_dsub_4_dsub_5_dsub_6
};

static const uint32_t DQuad_with_qsub_0_in_QPR_8SubClassMask[] = {
  0x00000000, 0x00000000, 0x0a000000, 0x00000000, 
  0x00000000, 0x00000000, 0x00000000, 0x0000003c, // qqsub_0
  0x00000000, 0x00000000, 0x00000000, 0x00000030, // qqsub_1
  0x00000000, 0x00000000, 0x00000000, 0x00000038, // qsub_1_qsub_2
};

static const uint32_t DQuad_with_dsub_1_dsub_2_in_QPR_8SubClassMask[] = {
  0x00000000, 0x00000000, 0x14000000, 0x00000000, 
  0x00000000, 0x00000000, 0x00000000, 0x00000038, // dsub_1_dsub_2_dsub_3_dsub_4
  0x00000000, 0x00000000, 0x00000000, 0x00000030, // dsub_3_dsub_4_dsub_5_dsub_6
};

static const uint32_t DQuad_with_qsub_1_in_QPR_8SubClassMask[] = {
  0x00000000, 0x00000000, 0x08000000, 0x00000000, 
  0x00000000, 0x00000000, 0x00000000, 0x00000038, // qqsub_0
  0x00000000, 0x00000000, 0x00000000, 0x00000020, // qqsub_1
  0x00000000, 0x00000000, 0x00000000, 0x00000030, // qsub_1_qsub_2
};

static const uint32_t DQuad_with_dsub_3_in_DPR_8_and_DQuad_with_dsub_1_dsub_2_in_QPRSubClassMask[] = {
  0x00000000, 0x00000000, 0x10000000, 0x00000000, 
  0x00000000, 0x00000000, 0x00000000, 0x00000030, // dsub_1_dsub_2_dsub_3_dsub_4
  0x00000000, 0x00000000, 0x00000000, 0x00000020, // dsub_3_dsub_4_dsub_5_dsub_6
};

static const uint32_t QQQQPRSubClassMask[] = {
  0x00000000, 0x00000000, 0xe0000000, 0x0000003f, 
};

static const uint32_t QQQQPR_with_ssub_0SubClassMask[] = {
  0x00000000, 0x00000000, 0xc0000000, 0x0000003f, 
};

static const uint32_t QQQQPR_with_dsub_2_then_ssub_0SubClassMask[] = {
  0x00000000, 0x00000000, 0x80000000, 0x0000003f, 
};

static const uint32_t QQQQPR_with_dsub_5_then_ssub_0SubClassMask[] = {
  0x00000000, 0x00000000, 0x00000000, 0x0000003f, 
};

static const uint32_t QQQQPR_with_dsub_7_then_ssub_0SubClassMask[] = {
  0x00000000, 0x00000000, 0x00000000, 0x0000003e, 
};

static const uint32_t QQQQPR_with_dsub_0_in_DPR_8SubClassMask[] = {
  0x00000000, 0x00000000, 0x00000000, 0x0000003c, 
};

static const uint32_t QQQQPR_with_dsub_2_in_DPR_8SubClassMask[] = {
  0x00000000, 0x00000000, 0x00000000, 0x00000038, 
};

static const uint32_t QQQQPR_with_dsub_4_in_DPR_8SubClassMask[] = {
  0x00000000, 0x00000000, 0x00000000, 0x00000030, 
};

static const uint32_t QQQQPR_with_dsub_6_in_DPR_8SubClassMask[] = {
  0x00000000, 0x00000000, 0x00000000, 0x00000020, 
};

static const uint16_t SuperRegIdxSeqs[] = {
  /* 0 */ 1, 2, 3, 4, 5, 6, 7, 8, 0,
  /* 9 */ 9, 10, 0,
  /* 12 */ 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 0,
  /* 29 */ 13, 14, 15, 16, 37, 0,
  /* 35 */ 38, 40, 45, 48, 0,
  /* 40 */ 42, 50, 0,
  /* 43 */ 34, 36, 44, 52, 0,
  /* 48 */ 33, 35, 43, 46, 51, 53, 0,
  /* 55 */ 34, 36, 47, 54, 0,
  /* 60 */ 34, 36, 44, 47, 52, 54, 0,
  /* 67 */ 13, 14, 15, 16, 37, 49, 55, 0,
  /* 75 */ 11, 12, 56, 0,
  /* 79 */ 11, 12, 42, 50, 56, 0,
};

static const TargetRegisterClass *const SPR_8Superclasses[] = {
  &ARM::SPRRegClass,
  NULL
};

static const TargetRegisterClass *const GPRnopcSuperclasses[] = {
  &ARM::GPRRegClass,
  &ARM::GPRwithAPSRRegClass,
  NULL
};

static const TargetRegisterClass *const rGPRSuperclasses[] = {
  &ARM::GPRRegClass,
  &ARM::GPRwithAPSRRegClass,
  &ARM::GPRnopcRegClass,
  NULL
};

static const TargetRegisterClass *const hGPRSuperclasses[] = {
  &ARM::GPRRegClass,
  NULL
};

static const TargetRegisterClass *const tGPRSuperclasses[] = {
  &ARM::GPRRegClass,
  &ARM::GPRwithAPSRRegClass,
  &ARM::GPRnopcRegClass,
  &ARM::rGPRRegClass,
  NULL
};

static const TargetRegisterClass *const GPRnopc_and_hGPRSuperclasses[] = {
  &ARM::GPRRegClass,
  &ARM::GPRwithAPSRRegClass,
  &ARM::GPRnopcRegClass,
  &ARM::hGPRRegClass,
  NULL
};

static const TargetRegisterClass *const hGPR_and_rGPRSuperclasses[] = {
  &ARM::GPRRegClass,
  &ARM::GPRwithAPSRRegClass,
  &ARM::GPRnopcRegClass,
  &ARM::rGPRRegClass,
  &ARM::hGPRRegClass,
  &ARM::GPRnopc_and_hGPRRegClass,
  NULL
};

static const TargetRegisterClass *const tcGPRSuperclasses[] = {
  &ARM::GPRRegClass,
  &ARM::GPRwithAPSRRegClass,
  &ARM::GPRnopcRegClass,
  &ARM::rGPRRegClass,
  NULL
};

static const TargetRegisterClass *const tGPR_and_tcGPRSuperclasses[] = {
  &ARM::GPRRegClass,
  &ARM::GPRwithAPSRRegClass,
  &ARM::GPRnopcRegClass,
  &ARM::rGPRRegClass,
  &ARM::tGPRRegClass,
  &ARM::tcGPRRegClass,
  NULL
};

static const TargetRegisterClass *const hGPR_and_tcGPRSuperclasses[] = {
  &ARM::GPRRegClass,
  &ARM::GPRwithAPSRRegClass,
  &ARM::GPRnopcRegClass,
  &ARM::rGPRRegClass,
  &ARM::hGPRRegClass,
  &ARM::GPRnopc_and_hGPRRegClass,
  &ARM::hGPR_and_rGPRRegClass,
  &ARM::tcGPRRegClass,
  NULL
};

static const TargetRegisterClass *const GPRspSuperclasses[] = {
  &ARM::GPRRegClass,
  &ARM::GPRwithAPSRRegClass,
  &ARM::GPRnopcRegClass,
  &ARM::hGPRRegClass,
  &ARM::GPRnopc_and_hGPRRegClass,
  NULL
};

static const TargetRegisterClass *const DPR_VFP2Superclasses[] = {
  &ARM::DPRRegClass,
  NULL
};

static const TargetRegisterClass *const DPR_8Superclasses[] = {
  &ARM::DPRRegClass,
  &ARM::DPR_VFP2RegClass,
  NULL
};

static const TargetRegisterClass *const GPRPair_with_gsub_1_in_rGPRSuperclasses[] = {
  &ARM::GPRPairRegClass,
  NULL
};

static const TargetRegisterClass *const GPRPair_with_gsub_0_in_tGPRSuperclasses[] = {
  &ARM::GPRPairRegClass,
  &ARM::GPRPair_with_gsub_1_in_rGPRRegClass,
  NULL
};

static const TargetRegisterClass *const GPRPair_with_gsub_0_in_hGPRSuperclasses[] = {
  &ARM::GPRPairRegClass,
  NULL
};

static const TargetRegisterClass *const GPRPair_with_gsub_0_in_tcGPRSuperclasses[] = {
  &ARM::GPRPairRegClass,
  NULL
};

static const TargetRegisterClass *const GPRPair_with_gsub_1_in_tcGPRSuperclasses[] = {
  &ARM::GPRPairRegClass,
  &ARM::GPRPair_with_gsub_1_in_rGPRRegClass,
  NULL
};

static const TargetRegisterClass *const GPRPair_with_gsub_0_in_tGPR_and_tcGPRSuperclasses[] = {
  &ARM::GPRPairRegClass,
  &ARM::GPRPair_with_gsub_1_in_rGPRRegClass,
  &ARM::GPRPair_with_gsub_0_in_tGPRRegClass,
  &ARM::GPRPair_with_gsub_0_in_tcGPRRegClass,
  &ARM::GPRPair_with_gsub_1_in_tcGPRRegClass,
  NULL
};

static const TargetRegisterClass *const GPRPair_with_gsub_1_in_hGPR_and_rGPRSuperclasses[] = {
  &ARM::GPRPairRegClass,
  &ARM::GPRPair_with_gsub_1_in_rGPRRegClass,
  &ARM::GPRPair_with_gsub_0_in_hGPRRegClass,
  NULL
};

static const TargetRegisterClass *const GPRPair_with_gsub_1_in_GPRspSuperclasses[] = {
  &ARM::GPRPairRegClass,
  &ARM::GPRPair_with_gsub_0_in_hGPRRegClass,
  &ARM::GPRPair_with_gsub_0_in_tcGPRRegClass,
  NULL
};

static const TargetRegisterClass *const GPRPair_with_gsub_1_in_hGPR_and_tcGPRSuperclasses[] = {
  &ARM::GPRPairRegClass,
  &ARM::GPRPair_with_gsub_1_in_rGPRRegClass,
  &ARM::GPRPair_with_gsub_0_in_hGPRRegClass,
  &ARM::GPRPair_with_gsub_1_in_tcGPRRegClass,
  &ARM::GPRPair_with_gsub_1_in_hGPR_and_rGPRRegClass,
  NULL
};

static const TargetRegisterClass *const DPairSpc_with_ssub_0Superclasses[] = {
  &ARM::DPairSpcRegClass,
  NULL
};

static const TargetRegisterClass *const DPairSpc_with_dsub_2_then_ssub_0Superclasses[] = {
  &ARM::DPairSpcRegClass,
  &ARM::DPairSpc_with_ssub_0RegClass,
  NULL
};

static const TargetRegisterClass *const DPairSpc_with_dsub_0_in_DPR_8Superclasses[] = {
  &ARM::DPairSpcRegClass,
  &ARM::DPairSpc_with_ssub_0RegClass,
  &ARM::DPairSpc_with_dsub_2_then_ssub_0RegClass,
  NULL
};

static const TargetRegisterClass *const DPairSpc_with_dsub_2_in_DPR_8Superclasses[] = {
  &ARM::DPairSpcRegClass,
  &ARM::DPairSpc_with_ssub_0RegClass,
  &ARM::DPairSpc_with_dsub_2_then_ssub_0RegClass,
  &ARM::DPairSpc_with_dsub_0_in_DPR_8RegClass,
  NULL
};

static const TargetRegisterClass *const DPair_with_ssub_0Superclasses[] = {
  &ARM::DPairRegClass,
  NULL
};

static const TargetRegisterClass *const QPRSuperclasses[] = {
  &ARM::DPairRegClass,
  NULL
};

static const TargetRegisterClass *const DPair_with_ssub_2Superclasses[] = {
  &ARM::DPairRegClass,
  &ARM::DPair_with_ssub_0RegClass,
  NULL
};

static const TargetRegisterClass *const DPair_with_dsub_0_in_DPR_8Superclasses[] = {
  &ARM::DPairRegClass,
  &ARM::DPair_with_ssub_0RegClass,
  &ARM::DPair_with_ssub_2RegClass,
  NULL
};

static const TargetRegisterClass *const QPR_VFP2Superclasses[] = {
  &ARM::DPairRegClass,
  &ARM::DPair_with_ssub_0RegClass,
  &ARM::QPRRegClass,
  &ARM::DPair_with_ssub_2RegClass,
  NULL
};

static const TargetRegisterClass *const DPair_with_dsub_1_in_DPR_8Superclasses[] = {
  &ARM::DPairRegClass,
  &ARM::DPair_with_ssub_0RegClass,
  &ARM::DPair_with_ssub_2RegClass,
  &ARM::DPair_with_dsub_0_in_DPR_8RegClass,
  NULL
};

static const TargetRegisterClass *const QPR_8Superclasses[] = {
  &ARM::DPairRegClass,
  &ARM::DPair_with_ssub_0RegClass,
  &ARM::QPRRegClass,
  &ARM::DPair_with_ssub_2RegClass,
  &ARM::DPair_with_dsub_0_in_DPR_8RegClass,
  &ARM::QPR_VFP2RegClass,
  &ARM::DPair_with_dsub_1_in_DPR_8RegClass,
  NULL
};

static const TargetRegisterClass *const DTripleSpc_with_ssub_0Superclasses[] = {
  &ARM::DTripleSpcRegClass,
  NULL
};

static const TargetRegisterClass *const DTriple_with_ssub_0Superclasses[] = {
  &ARM::DTripleRegClass,
  NULL
};

static const TargetRegisterClass *const DTriple_with_dsub_1_dsub_2_in_QPRSuperclasses[] = {
  &ARM::DTripleRegClass,
  NULL
};

static const TargetRegisterClass *const DTriple_with_qsub_0_in_QPRSuperclasses[] = {
  &ARM::DTripleRegClass,
  NULL
};

static const TargetRegisterClass *const DTriple_with_ssub_2Superclasses[] = {
  &ARM::DTripleRegClass,
  &ARM::DTriple_with_ssub_0RegClass,
  NULL
};

static const TargetRegisterClass *const DTripleSpc_with_dsub_2_then_ssub_0Superclasses[] = {
  &ARM::DTripleSpcRegClass,
  &ARM::DTripleSpc_with_ssub_0RegClass,
  NULL
};

static const TargetRegisterClass *const DTriple_with_dsub_2_then_ssub_0Superclasses[] = {
  &ARM::DTripleRegClass,
  &ARM::DTriple_with_ssub_0RegClass,
  &ARM::DTriple_with_ssub_2RegClass,
  NULL
};

static const TargetRegisterClass *const DTripleSpc_with_dsub_4_then_ssub_0Superclasses[] = {
  &ARM::DTripleSpcRegClass,
  &ARM::DTripleSpc_with_ssub_0RegClass,
  &ARM::DTripleSpc_with_dsub_2_then_ssub_0RegClass,
  NULL
};

static const TargetRegisterClass *const DTripleSpc_with_dsub_0_in_DPR_8Superclasses[] = {
  &ARM::DTripleSpcRegClass,
  &ARM::DTripleSpc_with_ssub_0RegClass,
  &ARM::DTripleSpc_with_dsub_2_then_ssub_0RegClass,
  &ARM::DTripleSpc_with_dsub_4_then_ssub_0RegClass,
  NULL
};

static const TargetRegisterClass *const DTriple_with_dsub_0_in_DPR_8Superclasses[] = {
  &ARM::DTripleRegClass,
  &ARM::DTriple_with_ssub_0RegClass,
  &ARM::DTriple_with_ssub_2RegClass,
  &ARM::DTriple_with_dsub_2_then_ssub_0RegClass,
  NULL
};

static const TargetRegisterClass *const DTriple_with_qsub_0_in_QPR_VFP2Superclasses[] = {
  &ARM::DTripleRegClass,
  &ARM::DTriple_with_ssub_0RegClass,
  &ARM::DTriple_with_qsub_0_in_QPRRegClass,
  &ARM::DTriple_with_ssub_2RegClass,
  NULL
};

static const TargetRegisterClass *const DTriple_with_ssub_0_and_DTriple_with_dsub_1_dsub_2_in_QPRSuperclasses[] = {
  &ARM::DTripleRegClass,
  &ARM::DTriple_with_ssub_0RegClass,
  &ARM::DTriple_with_dsub_1_dsub_2_in_QPRRegClass,
  NULL
};

static const TargetRegisterClass *const DTriple_with_dsub_1_dsub_2_in_QPR_VFP2Superclasses[] = {
  &ARM::DTripleRegClass,
  &ARM::DTriple_with_ssub_0RegClass,
  &ARM::DTriple_with_dsub_1_dsub_2_in_QPRRegClass,
  &ARM::DTriple_with_ssub_2RegClass,
  &ARM::DTriple_with_dsub_2_then_ssub_0RegClass,
  &ARM::DTriple_with_ssub_0_and_DTriple_with_dsub_1_dsub_2_in_QPRRegClass,
  NULL
};

static const TargetRegisterClass *const DTriple_with_dsub_1_in_DPR_8Superclasses[] = {
  &ARM::DTripleRegClass,
  &ARM::DTriple_with_ssub_0RegClass,
  &ARM::DTriple_with_ssub_2RegClass,
  &ARM::DTriple_with_dsub_2_then_ssub_0RegClass,
  &ARM::DTriple_with_dsub_0_in_DPR_8RegClass,
  NULL
};

static const TargetRegisterClass *const DTriple_with_dsub_2_then_ssub_0_and_DTriple_with_qsub_0_in_QPRSuperclasses[] = {
  &ARM::DTripleRegClass,
  &ARM::DTriple_with_ssub_0RegClass,
  &ARM::DTriple_with_qsub_0_in_QPRRegClass,
  &ARM::DTriple_with_ssub_2RegClass,
  &ARM::DTriple_with_dsub_2_then_ssub_0RegClass,
  &ARM::DTriple_with_qsub_0_in_QPR_VFP2RegClass,
  NULL
};

static const TargetRegisterClass *const DTripleSpc_with_dsub_2_in_DPR_8Superclasses[] = {
  &ARM::DTripleSpcRegClass,
  &ARM::DTripleSpc_with_ssub_0RegClass,
  &ARM::DTripleSpc_with_dsub_2_then_ssub_0RegClass,
  &ARM::DTripleSpc_with_dsub_4_then_ssub_0RegClass,
  &ARM::DTripleSpc_with_dsub_0_in_DPR_8RegClass,
  NULL
};

static const TargetRegisterClass *const DTriple_with_dsub_2_in_DPR_8Superclasses[] = {
  &ARM::DTripleRegClass,
  &ARM::DTriple_with_ssub_0RegClass,
  &ARM::DTriple_with_ssub_2RegClass,
  &ARM::DTriple_with_dsub_2_then_ssub_0RegClass,
  &ARM::DTriple_with_dsub_0_in_DPR_8RegClass,
  &ARM::DTriple_with_dsub_1_in_DPR_8RegClass,
  NULL
};

static const TargetRegisterClass *const DTripleSpc_with_dsub_4_in_DPR_8Superclasses[] = {
  &ARM::DTripleSpcRegClass,
  &ARM::DTripleSpc_with_ssub_0RegClass,
  &ARM::DTripleSpc_with_dsub_2_then_ssub_0RegClass,
  &ARM::DTripleSpc_with_dsub_4_then_ssub_0RegClass,
  &ARM::DTripleSpc_with_dsub_0_in_DPR_8RegClass,
  &ARM::DTripleSpc_with_dsub_2_in_DPR_8RegClass,
  NULL
};

static const TargetRegisterClass *const DTriple_with_dsub_0_in_DPR_8_and_DTriple_with_dsub_1_dsub_2_in_QPRSuperclasses[] = {
  &ARM::DTripleRegClass,
  &ARM::DTriple_with_ssub_0RegClass,
  &ARM::DTriple_with_dsub_1_dsub_2_in_QPRRegClass,
  &ARM::DTriple_with_ssub_2RegClass,
  &ARM::DTriple_with_dsub_2_then_ssub_0RegClass,
  &ARM::DTriple_with_dsub_0_in_DPR_8RegClass,
  &ARM::DTriple_with_ssub_0_and_DTriple_with_dsub_1_dsub_2_in_QPRRegClass,
  &ARM::DTriple_with_dsub_1_dsub_2_in_QPR_VFP2RegClass,
  NULL
};

static const TargetRegisterClass *const DTriple_with_qsub_0_in_QPR_8Superclasses[] = {
  &ARM::DTripleRegClass,
  &ARM::DTriple_with_ssub_0RegClass,
  &ARM::DTriple_with_qsub_0_in_QPRRegClass,
  &ARM::DTriple_with_ssub_2RegClass,
  &ARM::DTriple_with_dsub_2_then_ssub_0RegClass,
  &ARM::DTriple_with_dsub_0_in_DPR_8RegClass,
  &ARM::DTriple_with_qsub_0_in_QPR_VFP2RegClass,
  &ARM::DTriple_with_dsub_1_in_DPR_8RegClass,
  &ARM::DTriple_with_dsub_2_then_ssub_0_and_DTriple_with_qsub_0_in_QPRRegClass,
  NULL
};

static const TargetRegisterClass *const DTriple_with_dsub_1_dsub_2_in_QPR_8Superclasses[] = {
  &ARM::DTripleRegClass,
  &ARM::DTriple_with_ssub_0RegClass,
  &ARM::DTriple_with_dsub_1_dsub_2_in_QPRRegClass,
  &ARM::DTriple_with_ssub_2RegClass,
  &ARM::DTriple_with_dsub_2_then_ssub_0RegClass,
  &ARM::DTriple_with_dsub_0_in_DPR_8RegClass,
  &ARM::DTriple_with_ssub_0_and_DTriple_with_dsub_1_dsub_2_in_QPRRegClass,
  &ARM::DTriple_with_dsub_1_dsub_2_in_QPR_VFP2RegClass,
  &ARM::DTriple_with_dsub_1_in_DPR_8RegClass,
  &ARM::DTriple_with_dsub_2_in_DPR_8RegClass,
  &ARM::DTriple_with_dsub_0_in_DPR_8_and_DTriple_with_dsub_1_dsub_2_in_QPRRegClass,
  NULL
};

static const TargetRegisterClass *const DTriple_with_dsub_2_in_DPR_8_and_DTriple_with_qsub_0_in_QPRSuperclasses[] = {
  &ARM::DTripleRegClass,
  &ARM::DTriple_with_ssub_0RegClass,
  &ARM::DTriple_with_qsub_0_in_QPRRegClass,
  &ARM::DTriple_with_ssub_2RegClass,
  &ARM::DTriple_with_dsub_2_then_ssub_0RegClass,
  &ARM::DTriple_with_dsub_0_in_DPR_8RegClass,
  &ARM::DTriple_with_qsub_0_in_QPR_VFP2RegClass,
  &ARM::DTriple_with_dsub_1_in_DPR_8RegClass,
  &ARM::DTriple_with_dsub_2_then_ssub_0_and_DTriple_with_qsub_0_in_QPRRegClass,
  &ARM::DTriple_with_dsub_2_in_DPR_8RegClass,
  &ARM::DTriple_with_qsub_0_in_QPR_8RegClass,
  NULL
};

static const TargetRegisterClass *const DQuadSpcSuperclasses[] = {
  &ARM::DTripleSpcRegClass,
  NULL
};

static const TargetRegisterClass *const DQuadSpc_with_ssub_0Superclasses[] = {
  &ARM::DTripleSpcRegClass,
  &ARM::DTripleSpc_with_ssub_0RegClass,
  &ARM::DQuadSpcRegClass,
  NULL
};

static const TargetRegisterClass *const DQuadSpc_with_dsub_2_then_ssub_0Superclasses[] = {
  &ARM::DTripleSpcRegClass,
  &ARM::DTripleSpc_with_ssub_0RegClass,
  &ARM::DTripleSpc_with_dsub_2_then_ssub_0RegClass,
  &ARM::DQuadSpcRegClass,
  &ARM::DQuadSpc_with_ssub_0RegClass,
  NULL
};

static const TargetRegisterClass *const DQuadSpc_with_dsub_4_then_ssub_0Superclasses[] = {
  &ARM::DTripleSpcRegClass,
  &ARM::DTripleSpc_with_ssub_0RegClass,
  &ARM::DTripleSpc_with_dsub_2_then_ssub_0RegClass,
  &ARM::DTripleSpc_with_dsub_4_then_ssub_0RegClass,
  &ARM::DQuadSpcRegClass,
  &ARM::DQuadSpc_with_ssub_0RegClass,
  &ARM::DQuadSpc_with_dsub_2_then_ssub_0RegClass,
  NULL
};

static const TargetRegisterClass *const DQuadSpc_with_dsub_0_in_DPR_8Superclasses[] = {
  &ARM::DTripleSpcRegClass,
  &ARM::DTripleSpc_with_ssub_0RegClass,
  &ARM::DTripleSpc_with_dsub_2_then_ssub_0RegClass,
  &ARM::DTripleSpc_with_dsub_4_then_ssub_0RegClass,
  &ARM::DTripleSpc_with_dsub_0_in_DPR_8RegClass,
  &ARM::DQuadSpcRegClass,
  &ARM::DQuadSpc_with_ssub_0RegClass,
  &ARM::DQuadSpc_with_dsub_2_then_ssub_0RegClass,
  &ARM::DQuadSpc_with_dsub_4_then_ssub_0RegClass,
  NULL
};

static const TargetRegisterClass *const DQuadSpc_with_dsub_2_in_DPR_8Superclasses[] = {
  &ARM::DTripleSpcRegClass,
  &ARM::DTripleSpc_with_ssub_0RegClass,
  &ARM::DTripleSpc_with_dsub_2_then_ssub_0RegClass,
  &ARM::DTripleSpc_with_dsub_4_then_ssub_0RegClass,
  &ARM::DTripleSpc_with_dsub_0_in_DPR_8RegClass,
  &ARM::DTripleSpc_with_dsub_2_in_DPR_8RegClass,
  &ARM::DQuadSpcRegClass,
  &ARM::DQuadSpc_with_ssub_0RegClass,
  &ARM::DQuadSpc_with_dsub_2_then_ssub_0RegClass,
  &ARM::DQuadSpc_with_dsub_4_then_ssub_0RegClass,
  &ARM::DQuadSpc_with_dsub_0_in_DPR_8RegClass,
  NULL
};

static const TargetRegisterClass *const DQuadSpc_with_dsub_4_in_DPR_8Superclasses[] = {
  &ARM::DTripleSpcRegClass,
  &ARM::DTripleSpc_with_ssub_0RegClass,
  &ARM::DTripleSpc_with_dsub_2_then_ssub_0RegClass,
  &ARM::DTripleSpc_with_dsub_4_then_ssub_0RegClass,
  &ARM::DTripleSpc_with_dsub_0_in_DPR_8RegClass,
  &ARM::DTripleSpc_with_dsub_2_in_DPR_8RegClass,
  &ARM::DTripleSpc_with_dsub_4_in_DPR_8RegClass,
  &ARM::DQuadSpcRegClass,
  &ARM::DQuadSpc_with_ssub_0RegClass,
  &ARM::DQuadSpc_with_dsub_2_then_ssub_0RegClass,
  &ARM::DQuadSpc_with_dsub_4_then_ssub_0RegClass,
  &ARM::DQuadSpc_with_dsub_0_in_DPR_8RegClass,
  &ARM::DQuadSpc_with_dsub_2_in_DPR_8RegClass,
  NULL
};

static const TargetRegisterClass *const DQuad_with_ssub_0Superclasses[] = {
  &ARM::DQuadRegClass,
  NULL
};

static const TargetRegisterClass *const DQuad_with_ssub_2Superclasses[] = {
  &ARM::DQuadRegClass,
  &ARM::DQuad_with_ssub_0RegClass,
  NULL
};

static const TargetRegisterClass *const QQPRSuperclasses[] = {
  &ARM::DQuadRegClass,
  NULL
};

static const TargetRegisterClass *const DQuad_with_dsub_1_dsub_2_in_QPRSuperclasses[] = {
  &ARM::DQuadRegClass,
  NULL
};

static const TargetRegisterClass *const DQuad_with_dsub_2_then_ssub_0Superclasses[] = {
  &ARM::DQuadRegClass,
  &ARM::DQuad_with_ssub_0RegClass,
  &ARM::DQuad_with_ssub_2RegClass,
  NULL
};

static const TargetRegisterClass *const DQuad_with_dsub_3_then_ssub_0Superclasses[] = {
  &ARM::DQuadRegClass,
  &ARM::DQuad_with_ssub_0RegClass,
  &ARM::DQuad_with_ssub_2RegClass,
  &ARM::DQuad_with_dsub_2_then_ssub_0RegClass,
  NULL
};

static const TargetRegisterClass *const DQuad_with_dsub_0_in_DPR_8Superclasses[] = {
  &ARM::DQuadRegClass,
  &ARM::DQuad_with_ssub_0RegClass,
  &ARM::DQuad_with_ssub_2RegClass,
  &ARM::DQuad_with_dsub_2_then_ssub_0RegClass,
  &ARM::DQuad_with_dsub_3_then_ssub_0RegClass,
  NULL
};

static const TargetRegisterClass *const DQuad_with_qsub_0_in_QPR_VFP2Superclasses[] = {
  &ARM::DQuadRegClass,
  &ARM::DQuad_with_ssub_0RegClass,
  &ARM::DQuad_with_ssub_2RegClass,
  &ARM::QQPRRegClass,
  NULL
};

static const TargetRegisterClass *const DQuad_with_ssub_0_and_DQuad_with_dsub_1_dsub_2_in_QPRSuperclasses[] = {
  &ARM::DQuadRegClass,
  &ARM::DQuad_with_ssub_0RegClass,
  &ARM::DQuad_with_dsub_1_dsub_2_in_QPRRegClass,
  NULL
};

static const TargetRegisterClass *const DQuad_with_dsub_1_dsub_2_in_QPR_VFP2Superclasses[] = {
  &ARM::DQuadRegClass,
  &ARM::DQuad_with_ssub_0RegClass,
  &ARM::DQuad_with_ssub_2RegClass,
  &ARM::DQuad_with_dsub_1_dsub_2_in_QPRRegClass,
  &ARM::DQuad_with_dsub_2_then_ssub_0RegClass,
  &ARM::DQuad_with_ssub_0_and_DQuad_with_dsub_1_dsub_2_in_QPRRegClass,
  NULL
};

static const TargetRegisterClass *const DQuad_with_dsub_1_in_DPR_8Superclasses[] = {
  &ARM::DQuadRegClass,
  &ARM::DQuad_with_ssub_0RegClass,
  &ARM::DQuad_with_ssub_2RegClass,
  &ARM::DQuad_with_dsub_2_then_ssub_0RegClass,
  &ARM::DQuad_with_dsub_3_then_ssub_0RegClass,
  &ARM::DQuad_with_dsub_0_in_DPR_8RegClass,
  NULL
};

static const TargetRegisterClass *const DQuad_with_qsub_1_in_QPR_VFP2Superclasses[] = {
  &ARM::DQuadRegClass,
  &ARM::DQuad_with_ssub_0RegClass,
  &ARM::DQuad_with_ssub_2RegClass,
  &ARM::QQPRRegClass,
  &ARM::DQuad_with_dsub_2_then_ssub_0RegClass,
  &ARM::DQuad_with_dsub_3_then_ssub_0RegClass,
  &ARM::DQuad_with_qsub_0_in_QPR_VFP2RegClass,
  NULL
};

static const TargetRegisterClass *const DQuad_with_dsub_2_in_DPR_8Superclasses[] = {
  &ARM::DQuadRegClass,
  &ARM::DQuad_with_ssub_0RegClass,
  &ARM::DQuad_with_ssub_2RegClass,
  &ARM::DQuad_with_dsub_2_then_ssub_0RegClass,
  &ARM::DQuad_with_dsub_3_then_ssub_0RegClass,
  &ARM::DQuad_with_dsub_0_in_DPR_8RegClass,
  &ARM::DQuad_with_dsub_1_in_DPR_8RegClass,
  NULL
};

static const TargetRegisterClass *const DQuad_with_dsub_3_then_ssub_0_and_DQuad_with_dsub_1_dsub_2_in_QPRSuperclasses[] = {
  &ARM::DQuadRegClass,
  &ARM::DQuad_with_ssub_0RegClass,
  &ARM::DQuad_with_ssub_2RegClass,
  &ARM::DQuad_with_dsub_1_dsub_2_in_QPRRegClass,
  &ARM::DQuad_with_dsub_2_then_ssub_0RegClass,
  &ARM::DQuad_with_dsub_3_then_ssub_0RegClass,
  &ARM::DQuad_with_ssub_0_and_DQuad_with_dsub_1_dsub_2_in_QPRRegClass,
  &ARM::DQuad_with_dsub_1_dsub_2_in_QPR_VFP2RegClass,
  NULL
};

static const TargetRegisterClass *const DQuad_with_dsub_3_in_DPR_8Superclasses[] = {
  &ARM::DQuadRegClass,
  &ARM::DQuad_with_ssub_0RegClass,
  &ARM::DQuad_with_ssub_2RegClass,
  &ARM::DQuad_with_dsub_2_then_ssub_0RegClass,
  &ARM::DQuad_with_dsub_3_then_ssub_0RegClass,
  &ARM::DQuad_with_dsub_0_in_DPR_8RegClass,
  &ARM::DQuad_with_dsub_1_in_DPR_8RegClass,
  &ARM::DQuad_with_dsub_2_in_DPR_8RegClass,
  NULL
};

static const TargetRegisterClass *const DQuad_with_dsub_0_in_DPR_8_and_DQuad_with_dsub_1_dsub_2_in_QPRSuperclasses[] = {
  &ARM::DQuadRegClass,
  &ARM::DQuad_with_ssub_0RegClass,
  &ARM::DQuad_with_ssub_2RegClass,
  &ARM::DQuad_with_dsub_1_dsub_2_in_QPRRegClass,
  &ARM::DQuad_with_dsub_2_then_ssub_0RegClass,
  &ARM::DQuad_with_dsub_3_then_ssub_0RegClass,
  &ARM::DQuad_with_dsub_0_in_DPR_8RegClass,
  &ARM::DQuad_with_ssub_0_and_DQuad_with_dsub_1_dsub_2_in_QPRRegClass,
  &ARM::DQuad_with_dsub_1_dsub_2_in_QPR_VFP2RegClass,
  &ARM::DQuad_with_dsub_3_then_ssub_0_and_DQuad_with_dsub_1_dsub_2_in_QPRRegClass,
  NULL
};

static const TargetRegisterClass *const DQuad_with_qsub_0_in_QPR_8Superclasses[] = {
  &ARM::DQuadRegClass,
  &ARM::DQuad_with_ssub_0RegClass,
  &ARM::DQuad_with_ssub_2RegClass,
  &ARM::QQPRRegClass,
  &ARM::DQuad_with_dsub_2_then_ssub_0RegClass,
  &ARM::DQuad_with_dsub_3_then_ssub_0RegClass,
  &ARM::DQuad_with_dsub_0_in_DPR_8RegClass,
  &ARM::DQuad_with_qsub_0_in_QPR_VFP2RegClass,
  &ARM::DQuad_with_dsub_1_in_DPR_8RegClass,
  &ARM::DQuad_with_qsub_1_in_QPR_VFP2RegClass,
  NULL
};

static const TargetRegisterClass *const DQuad_with_dsub_1_dsub_2_in_QPR_8Superclasses[] = {
  &ARM::DQuadRegClass,
  &ARM::DQuad_with_ssub_0RegClass,
  &ARM::DQuad_with_ssub_2RegClass,
  &ARM::DQuad_with_dsub_1_dsub_2_in_QPRRegClass,
  &ARM::DQuad_with_dsub_2_then_ssub_0RegClass,
  &ARM::DQuad_with_dsub_3_then_ssub_0RegClass,
  &ARM::DQuad_with_dsub_0_in_DPR_8RegClass,
  &ARM::DQuad_with_ssub_0_and_DQuad_with_dsub_1_dsub_2_in_QPRRegClass,
  &ARM::DQuad_with_dsub_1_dsub_2_in_QPR_VFP2RegClass,
  &ARM::DQuad_with_dsub_1_in_DPR_8RegClass,
  &ARM::DQuad_with_dsub_2_in_DPR_8RegClass,
  &ARM::DQuad_with_dsub_3_then_ssub_0_and_DQuad_with_dsub_1_dsub_2_in_QPRRegClass,
  &ARM::DQuad_with_dsub_0_in_DPR_8_and_DQuad_with_dsub_1_dsub_2_in_QPRRegClass,
  NULL
};

static const TargetRegisterClass *const DQuad_with_qsub_1_in_QPR_8Superclasses[] = {
  &ARM::DQuadRegClass,
  &ARM::DQuad_with_ssub_0RegClass,
  &ARM::DQuad_with_ssub_2RegClass,
  &ARM::QQPRRegClass,
  &ARM::DQuad_with_dsub_2_then_ssub_0RegClass,
  &ARM::DQuad_with_dsub_3_then_ssub_0RegClass,
  &ARM::DQuad_with_dsub_0_in_DPR_8RegClass,
  &ARM::DQuad_with_qsub_0_in_QPR_VFP2RegClass,
  &ARM::DQuad_with_dsub_1_in_DPR_8RegClass,
  &ARM::DQuad_with_qsub_1_in_QPR_VFP2RegClass,
  &ARM::DQuad_with_dsub_2_in_DPR_8RegClass,
  &ARM::DQuad_with_dsub_3_in_DPR_8RegClass,
  &ARM::DQuad_with_qsub_0_in_QPR_8RegClass,
  NULL
};

static const TargetRegisterClass *const DQuad_with_dsub_3_in_DPR_8_and_DQuad_with_dsub_1_dsub_2_in_QPRSuperclasses[] = {
  &ARM::DQuadRegClass,
  &ARM::DQuad_with_ssub_0RegClass,
  &ARM::DQuad_with_ssub_2RegClass,
  &ARM::DQuad_with_dsub_1_dsub_2_in_QPRRegClass,
  &ARM::DQuad_with_dsub_2_then_ssub_0RegClass,
  &ARM::DQuad_with_dsub_3_then_ssub_0RegClass,
  &ARM::DQuad_with_dsub_0_in_DPR_8RegClass,
  &ARM::DQuad_with_ssub_0_and_DQuad_with_dsub_1_dsub_2_in_QPRRegClass,
  &ARM::DQuad_with_dsub_1_dsub_2_in_QPR_VFP2RegClass,
  &ARM::DQuad_with_dsub_1_in_DPR_8RegClass,
  &ARM::DQuad_with_dsub_2_in_DPR_8RegClass,
  &ARM::DQuad_with_dsub_3_then_ssub_0_and_DQuad_with_dsub_1_dsub_2_in_QPRRegClass,
  &ARM::DQuad_with_dsub_3_in_DPR_8RegClass,
  &ARM::DQuad_with_dsub_0_in_DPR_8_and_DQuad_with_dsub_1_dsub_2_in_QPRRegClass,
  &ARM::DQuad_with_dsub_1_dsub_2_in_QPR_8RegClass,
  NULL
};

static const TargetRegisterClass *const QQQQPR_with_ssub_0Superclasses[] = {
  &ARM::QQQQPRRegClass,
  NULL
};

static const TargetRegisterClass *const QQQQPR_with_dsub_2_then_ssub_0Superclasses[] = {
  &ARM::QQQQPRRegClass,
  &ARM::QQQQPR_with_ssub_0RegClass,
  NULL
};

static const TargetRegisterClass *const QQQQPR_with_dsub_5_then_ssub_0Superclasses[] = {
  &ARM::QQQQPRRegClass,
  &ARM::QQQQPR_with_ssub_0RegClass,
  &ARM::QQQQPR_with_dsub_2_then_ssub_0RegClass,
  NULL
};

static const TargetRegisterClass *const QQQQPR_with_dsub_7_then_ssub_0Superclasses[] = {
  &ARM::QQQQPRRegClass,
  &ARM::QQQQPR_with_ssub_0RegClass,
  &ARM::QQQQPR_with_dsub_2_then_ssub_0RegClass,
  &ARM::QQQQPR_with_dsub_5_then_ssub_0RegClass,
  NULL
};

static const TargetRegisterClass *const QQQQPR_with_dsub_0_in_DPR_8Superclasses[] = {
  &ARM::QQQQPRRegClass,
  &ARM::QQQQPR_with_ssub_0RegClass,
  &ARM::QQQQPR_with_dsub_2_then_ssub_0RegClass,
  &ARM::QQQQPR_with_dsub_5_then_ssub_0RegClass,
  &ARM::QQQQPR_with_dsub_7_then_ssub_0RegClass,
  NULL
};

static const TargetRegisterClass *const QQQQPR_with_dsub_2_in_DPR_8Superclasses[] = {
  &ARM::QQQQPRRegClass,
  &ARM::QQQQPR_with_ssub_0RegClass,
  &ARM::QQQQPR_with_dsub_2_then_ssub_0RegClass,
  &ARM::QQQQPR_with_dsub_5_then_ssub_0RegClass,
  &ARM::QQQQPR_with_dsub_7_then_ssub_0RegClass,
  &ARM::QQQQPR_with_dsub_0_in_DPR_8RegClass,
  NULL
};

static const TargetRegisterClass *const QQQQPR_with_dsub_4_in_DPR_8Superclasses[] = {
  &ARM::QQQQPRRegClass,
  &ARM::QQQQPR_with_ssub_0RegClass,
  &ARM::QQQQPR_with_dsub_2_then_ssub_0RegClass,
  &ARM::QQQQPR_with_dsub_5_then_ssub_0RegClass,
  &ARM::QQQQPR_with_dsub_7_then_ssub_0RegClass,
  &ARM::QQQQPR_with_dsub_0_in_DPR_8RegClass,
  &ARM::QQQQPR_with_dsub_2_in_DPR_8RegClass,
  NULL
};

static const TargetRegisterClass *const QQQQPR_with_dsub_6_in_DPR_8Superclasses[] = {
  &ARM::QQQQPRRegClass,
  &ARM::QQQQPR_with_ssub_0RegClass,
  &ARM::QQQQPR_with_dsub_2_then_ssub_0RegClass,
  &ARM::QQQQPR_with_dsub_5_then_ssub_0RegClass,
  &ARM::QQQQPR_with_dsub_7_then_ssub_0RegClass,
  &ARM::QQQQPR_with_dsub_0_in_DPR_8RegClass,
  &ARM::QQQQPR_with_dsub_2_in_DPR_8RegClass,
  &ARM::QQQQPR_with_dsub_4_in_DPR_8RegClass,
  NULL
};


static inline unsigned GPRAltOrderSelect(const MachineFunction &MF) {
      return 1 + MF.getTarget().getSubtarget<ARMSubtarget>().isThumb1Only();
  }

static ArrayRef<MCPhysReg> GPRGetRawAllocationOrder(const MachineFunction &MF) {
  static const MCPhysReg AltOrder1[] = { ARM::LR, ARM::R0, ARM::R1, ARM::R2, ARM::R3, ARM::R4, ARM::R5, ARM::R6, ARM::R7, ARM::R8, ARM::R9, ARM::R10, ARM::R11, ARM::R12, ARM::SP, ARM::PC };
  static const MCPhysReg AltOrder2[] = { ARM::R0, ARM::R1, ARM::R2, ARM::R3, ARM::R4, ARM::R5, ARM::R6, ARM::R7 };
  const MCRegisterClass &MCR = ARMMCRegisterClasses[ARM::GPRRegClassID];
  const ArrayRef<MCPhysReg> Order[] = {
    makeArrayRef(MCR.begin(), MCR.getNumRegs()),
    makeArrayRef(AltOrder1),
    makeArrayRef(AltOrder2)
  };
  const unsigned Select = GPRAltOrderSelect(MF);
  assert(Select < 3);
  return Order[Select];
}

static inline unsigned GPRwithAPSRAltOrderSelect(const MachineFunction &MF) {
      return 1 + MF.getTarget().getSubtarget<ARMSubtarget>().isThumb1Only();
  }

static ArrayRef<MCPhysReg> GPRwithAPSRGetRawAllocationOrder(const MachineFunction &MF) {
  static const MCPhysReg AltOrder1[] = { ARM::LR, ARM::R0, ARM::R1, ARM::R2, ARM::R3, ARM::R4, ARM::R5, ARM::R6, ARM::R7, ARM::R8, ARM::R9, ARM::R10, ARM::R11, ARM::R12, ARM::SP };
  static const MCPhysReg AltOrder2[] = { ARM::R0, ARM::R1, ARM::R2, ARM::R3, ARM::R4, ARM::R5, ARM::R6, ARM::R7 };
  const MCRegisterClass &MCR = ARMMCRegisterClasses[ARM::GPRwithAPSRRegClassID];
  const ArrayRef<MCPhysReg> Order[] = {
    makeArrayRef(MCR.begin(), MCR.getNumRegs()),
    makeArrayRef(AltOrder1),
    makeArrayRef(AltOrder2)
  };
  const unsigned Select = GPRwithAPSRAltOrderSelect(MF);
  assert(Select < 3);
  return Order[Select];
}

static inline unsigned GPRnopcAltOrderSelect(const MachineFunction &MF) {
      return 1 + MF.getTarget().getSubtarget<ARMSubtarget>().isThumb1Only();
  }

static ArrayRef<MCPhysReg> GPRnopcGetRawAllocationOrder(const MachineFunction &MF) {
  static const MCPhysReg AltOrder1[] = { ARM::LR, ARM::R0, ARM::R1, ARM::R2, ARM::R3, ARM::R4, ARM::R5, ARM::R6, ARM::R7, ARM::R8, ARM::R9, ARM::R10, ARM::R11, ARM::R12, ARM::SP };
  static const MCPhysReg AltOrder2[] = { ARM::R0, ARM::R1, ARM::R2, ARM::R3, ARM::R4, ARM::R5, ARM::R6, ARM::R7 };
  const MCRegisterClass &MCR = ARMMCRegisterClasses[ARM::GPRnopcRegClassID];
  const ArrayRef<MCPhysReg> Order[] = {
    makeArrayRef(MCR.begin(), MCR.getNumRegs()),
    makeArrayRef(AltOrder1),
    makeArrayRef(AltOrder2)
  };
  const unsigned Select = GPRnopcAltOrderSelect(MF);
  assert(Select < 3);
  return Order[Select];
}

static inline unsigned rGPRAltOrderSelect(const MachineFunction &MF) {
      return 1 + MF.getTarget().getSubtarget<ARMSubtarget>().isThumb1Only();
  }

static ArrayRef<MCPhysReg> rGPRGetRawAllocationOrder(const MachineFunction &MF) {
  static const MCPhysReg AltOrder1[] = { ARM::LR, ARM::R0, ARM::R1, ARM::R2, ARM::R3, ARM::R4, ARM::R5, ARM::R6, ARM::R7, ARM::R8, ARM::R9, ARM::R10, ARM::R11, ARM::R12 };
  static const MCPhysReg AltOrder2[] = { ARM::R0, ARM::R1, ARM::R2, ARM::R3, ARM::R4, ARM::R5, ARM::R6, ARM::R7 };
  const MCRegisterClass &MCR = ARMMCRegisterClasses[ARM::rGPRRegClassID];
  const ArrayRef<MCPhysReg> Order[] = {
    makeArrayRef(MCR.begin(), MCR.getNumRegs()),
    makeArrayRef(AltOrder1),
    makeArrayRef(AltOrder2)
  };
  const unsigned Select = rGPRAltOrderSelect(MF);
  assert(Select < 3);
  return Order[Select];
}

static inline unsigned tcGPRAltOrderSelect(const MachineFunction &MF) {
      return MF.getTarget().getSubtarget<ARMSubtarget>().isThumb1Only();
  }

static ArrayRef<MCPhysReg> tcGPRGetRawAllocationOrder(const MachineFunction &MF) {
  static const MCPhysReg AltOrder1[] = { ARM::R0, ARM::R1, ARM::R2, ARM::R3 };
  const MCRegisterClass &MCR = ARMMCRegisterClasses[ARM::tcGPRRegClassID];
  const ArrayRef<MCPhysReg> Order[] = {
    makeArrayRef(MCR.begin(), MCR.getNumRegs()),
    makeArrayRef(AltOrder1)
  };
  const unsigned Select = tcGPRAltOrderSelect(MF);
  assert(Select < 2);
  return Order[Select];
}

static inline unsigned tGPR_and_tcGPRAltOrderSelect(const MachineFunction &MF) {
      return MF.getTarget().getSubtarget<ARMSubtarget>().isThumb1Only();
  }

static ArrayRef<MCPhysReg> tGPR_and_tcGPRGetRawAllocationOrder(const MachineFunction &MF) {
  static const MCPhysReg AltOrder1[] = { ARM::R0, ARM::R1, ARM::R2, ARM::R3 };
  const MCRegisterClass &MCR = ARMMCRegisterClasses[ARM::tGPR_and_tcGPRRegClassID];
  const ArrayRef<MCPhysReg> Order[] = {
    makeArrayRef(MCR.begin(), MCR.getNumRegs()),
    makeArrayRef(AltOrder1)
  };
  const unsigned Select = tGPR_and_tcGPRAltOrderSelect(MF);
  assert(Select < 2);
  return Order[Select];
}

static inline unsigned hGPR_and_tcGPRAltOrderSelect(const MachineFunction &MF) {
      return MF.getTarget().getSubtarget<ARMSubtarget>().isThumb1Only();
  }

static ArrayRef<MCPhysReg> hGPR_and_tcGPRGetRawAllocationOrder(const MachineFunction &MF) {
  const MCRegisterClass &MCR = ARMMCRegisterClasses[ARM::hGPR_and_tcGPRRegClassID];
  const ArrayRef<MCPhysReg> Order[] = {
    makeArrayRef(MCR.begin(), MCR.getNumRegs()),
    ArrayRef<MCPhysReg>()
  };
  const unsigned Select = hGPR_and_tcGPRAltOrderSelect(MF);
  assert(Select < 2);
  return Order[Select];
}

static inline unsigned DPRAltOrderSelect(const MachineFunction &MF) { return 1; }

static ArrayRef<MCPhysReg> DPRGetRawAllocationOrder(const MachineFunction &MF) {
  static const MCPhysReg AltOrder1[] = { ARM::D16, ARM::D17, ARM::D18, ARM::D19, ARM::D20, ARM::D21, ARM::D22, ARM::D23, ARM::D24, ARM::D25, ARM::D26, ARM::D27, ARM::D28, ARM::D29, ARM::D30, ARM::D31, ARM::D0, ARM::D1, ARM::D2, ARM::D3, ARM::D4, ARM::D5, ARM::D6, ARM::D7, ARM::D8, ARM::D9, ARM::D10, ARM::D11, ARM::D12, ARM::D13, ARM::D14, ARM::D15 };
  const MCRegisterClass &MCR = ARMMCRegisterClasses[ARM::DPRRegClassID];
  const ArrayRef<MCPhysReg> Order[] = {
    makeArrayRef(MCR.begin(), MCR.getNumRegs()),
    makeArrayRef(AltOrder1)
  };
  const unsigned Select = DPRAltOrderSelect(MF);
  assert(Select < 2);
  return Order[Select];
}

static inline unsigned DPairAltOrderSelect(const MachineFunction &MF) { return 1; }

static ArrayRef<MCPhysReg> DPairGetRawAllocationOrder(const MachineFunction &MF) {
  static const MCPhysReg AltOrder1[] = { ARM::Q8, ARM::Q9, ARM::Q10, ARM::Q11, ARM::Q12, ARM::Q13, ARM::Q14, ARM::Q15, ARM::Q0, ARM::Q1, ARM::Q2, ARM::Q3, ARM::Q4, ARM::Q5, ARM::Q6, ARM::Q7, ARM::D17_D18, ARM::D19_D20, ARM::D21_D22, ARM::D23_D24, ARM::D25_D26, ARM::D27_D28, ARM::D29_D30, ARM::D1_D2, ARM::D3_D4, ARM::D5_D6, ARM::D7_D8, ARM::D9_D10, ARM::D11_D12, ARM::D13_D14, ARM::D15_D16 };
  const MCRegisterClass &MCR = ARMMCRegisterClasses[ARM::DPairRegClassID];
  const ArrayRef<MCPhysReg> Order[] = {
    makeArrayRef(MCR.begin(), MCR.getNumRegs()),
    makeArrayRef(AltOrder1)
  };
  const unsigned Select = DPairAltOrderSelect(MF);
  assert(Select < 2);
  return Order[Select];
}

static inline unsigned DPair_with_ssub_0AltOrderSelect(const MachineFunction &MF) { return 1; }

static ArrayRef<MCPhysReg> DPair_with_ssub_0GetRawAllocationOrder(const MachineFunction &MF) {
  static const MCPhysReg AltOrder1[] = { ARM::Q0, ARM::Q1, ARM::Q2, ARM::Q3, ARM::Q4, ARM::Q5, ARM::Q6, ARM::Q7, ARM::D1_D2, ARM::D3_D4, ARM::D5_D6, ARM::D7_D8, ARM::D9_D10, ARM::D11_D12, ARM::D13_D14, ARM::D15_D16 };
  const MCRegisterClass &MCR = ARMMCRegisterClasses[ARM::DPair_with_ssub_0RegClassID];
  const ArrayRef<MCPhysReg> Order[] = {
    makeArrayRef(MCR.begin(), MCR.getNumRegs()),
    makeArrayRef(AltOrder1)
  };
  const unsigned Select = DPair_with_ssub_0AltOrderSelect(MF);
  assert(Select < 2);
  return Order[Select];
}

static inline unsigned QPRAltOrderSelect(const MachineFunction &MF) { return 1; }

static ArrayRef<MCPhysReg> QPRGetRawAllocationOrder(const MachineFunction &MF) {
  static const MCPhysReg AltOrder1[] = { ARM::Q8, ARM::Q9, ARM::Q10, ARM::Q11, ARM::Q12, ARM::Q13, ARM::Q14, ARM::Q15, ARM::Q0, ARM::Q1, ARM::Q2, ARM::Q3, ARM::Q4, ARM::Q5, ARM::Q6, ARM::Q7 };
  const MCRegisterClass &MCR = ARMMCRegisterClasses[ARM::QPRRegClassID];
  const ArrayRef<MCPhysReg> Order[] = {
    makeArrayRef(MCR.begin(), MCR.getNumRegs()),
    makeArrayRef(AltOrder1)
  };
  const unsigned Select = QPRAltOrderSelect(MF);
  assert(Select < 2);
  return Order[Select];
}

static inline unsigned DPair_with_ssub_2AltOrderSelect(const MachineFunction &MF) { return 1; }

static ArrayRef<MCPhysReg> DPair_with_ssub_2GetRawAllocationOrder(const MachineFunction &MF) {
  static const MCPhysReg AltOrder1[] = { ARM::Q0, ARM::Q1, ARM::Q2, ARM::Q3, ARM::Q4, ARM::Q5, ARM::Q6, ARM::Q7, ARM::D1_D2, ARM::D3_D4, ARM::D5_D6, ARM::D7_D8, ARM::D9_D10, ARM::D11_D12, ARM::D13_D14 };
  const MCRegisterClass &MCR = ARMMCRegisterClasses[ARM::DPair_with_ssub_2RegClassID];
  const ArrayRef<MCPhysReg> Order[] = {
    makeArrayRef(MCR.begin(), MCR.getNumRegs()),
    makeArrayRef(AltOrder1)
  };
  const unsigned Select = DPair_with_ssub_2AltOrderSelect(MF);
  assert(Select < 2);
  return Order[Select];
}

static inline unsigned DPair_with_dsub_0_in_DPR_8AltOrderSelect(const MachineFunction &MF) { return 1; }

static ArrayRef<MCPhysReg> DPair_with_dsub_0_in_DPR_8GetRawAllocationOrder(const MachineFunction &MF) {
  static const MCPhysReg AltOrder1[] = { ARM::Q0, ARM::Q1, ARM::Q2, ARM::Q3, ARM::D1_D2, ARM::D3_D4, ARM::D5_D6, ARM::D7_D8 };
  const MCRegisterClass &MCR = ARMMCRegisterClasses[ARM::DPair_with_dsub_0_in_DPR_8RegClassID];
  const ArrayRef<MCPhysReg> Order[] = {
    makeArrayRef(MCR.begin(), MCR.getNumRegs()),
    makeArrayRef(AltOrder1)
  };
  const unsigned Select = DPair_with_dsub_0_in_DPR_8AltOrderSelect(MF);
  assert(Select < 2);
  return Order[Select];
}

static inline unsigned DPair_with_dsub_1_in_DPR_8AltOrderSelect(const MachineFunction &MF) { return 1; }

static ArrayRef<MCPhysReg> DPair_with_dsub_1_in_DPR_8GetRawAllocationOrder(const MachineFunction &MF) {
  static const MCPhysReg AltOrder1[] = { ARM::Q0, ARM::Q1, ARM::Q2, ARM::Q3, ARM::D1_D2, ARM::D3_D4, ARM::D5_D6 };
  const MCRegisterClass &MCR = ARMMCRegisterClasses[ARM::DPair_with_dsub_1_in_DPR_8RegClassID];
  const ArrayRef<MCPhysReg> Order[] = {
    makeArrayRef(MCR.begin(), MCR.getNumRegs()),
    makeArrayRef(AltOrder1)
  };
  const unsigned Select = DPair_with_dsub_1_in_DPR_8AltOrderSelect(MF);
  assert(Select < 2);
  return Order[Select];
}

static inline unsigned QQPRAltOrderSelect(const MachineFunction &MF) { return 1; }

static ArrayRef<MCPhysReg> QQPRGetRawAllocationOrder(const MachineFunction &MF) {
  static const MCPhysReg AltOrder1[] = { ARM::Q8_Q9, ARM::Q9_Q10, ARM::Q10_Q11, ARM::Q11_Q12, ARM::Q12_Q13, ARM::Q13_Q14, ARM::Q14_Q15, ARM::Q0_Q1, ARM::Q1_Q2, ARM::Q2_Q3, ARM::Q3_Q4, ARM::Q4_Q5, ARM::Q5_Q6, ARM::Q6_Q7, ARM::Q7_Q8 };
  const MCRegisterClass &MCR = ARMMCRegisterClasses[ARM::QQPRRegClassID];
  const ArrayRef<MCPhysReg> Order[] = {
    makeArrayRef(MCR.begin(), MCR.getNumRegs()),
    makeArrayRef(AltOrder1)
  };
  const unsigned Select = QQPRAltOrderSelect(MF);
  assert(Select < 2);
  return Order[Select];
}

static inline unsigned DQuad_with_qsub_0_in_QPR_VFP2AltOrderSelect(const MachineFunction &MF) { return 1; }

static ArrayRef<MCPhysReg> DQuad_with_qsub_0_in_QPR_VFP2GetRawAllocationOrder(const MachineFunction &MF) {
  static const MCPhysReg AltOrder1[] = { ARM::Q0_Q1, ARM::Q1_Q2, ARM::Q2_Q3, ARM::Q3_Q4, ARM::Q4_Q5, ARM::Q5_Q6, ARM::Q6_Q7, ARM::Q7_Q8 };
  const MCRegisterClass &MCR = ARMMCRegisterClasses[ARM::DQuad_with_qsub_0_in_QPR_VFP2RegClassID];
  const ArrayRef<MCPhysReg> Order[] = {
    makeArrayRef(MCR.begin(), MCR.getNumRegs()),
    makeArrayRef(AltOrder1)
  };
  const unsigned Select = DQuad_with_qsub_0_in_QPR_VFP2AltOrderSelect(MF);
  assert(Select < 2);
  return Order[Select];
}

static inline unsigned DQuad_with_qsub_1_in_QPR_VFP2AltOrderSelect(const MachineFunction &MF) { return 1; }

static ArrayRef<MCPhysReg> DQuad_with_qsub_1_in_QPR_VFP2GetRawAllocationOrder(const MachineFunction &MF) {
  static const MCPhysReg AltOrder1[] = { ARM::Q0_Q1, ARM::Q1_Q2, ARM::Q2_Q3, ARM::Q3_Q4, ARM::Q4_Q5, ARM::Q5_Q6, ARM::Q6_Q7 };
  const MCRegisterClass &MCR = ARMMCRegisterClasses[ARM::DQuad_with_qsub_1_in_QPR_VFP2RegClassID];
  const ArrayRef<MCPhysReg> Order[] = {
    makeArrayRef(MCR.begin(), MCR.getNumRegs()),
    makeArrayRef(AltOrder1)
  };
  const unsigned Select = DQuad_with_qsub_1_in_QPR_VFP2AltOrderSelect(MF);
  assert(Select < 2);
  return Order[Select];
}

static inline unsigned DQuad_with_qsub_0_in_QPR_8AltOrderSelect(const MachineFunction &MF) { return 1; }

static ArrayRef<MCPhysReg> DQuad_with_qsub_0_in_QPR_8GetRawAllocationOrder(const MachineFunction &MF) {
  static const MCPhysReg AltOrder1[] = { ARM::Q0_Q1, ARM::Q1_Q2, ARM::Q2_Q3, ARM::Q3_Q4 };
  const MCRegisterClass &MCR = ARMMCRegisterClasses[ARM::DQuad_with_qsub_0_in_QPR_8RegClassID];
  const ArrayRef<MCPhysReg> Order[] = {
    makeArrayRef(MCR.begin(), MCR.getNumRegs()),
    makeArrayRef(AltOrder1)
  };
  const unsigned Select = DQuad_with_qsub_0_in_QPR_8AltOrderSelect(MF);
  assert(Select < 2);
  return Order[Select];
}

static inline unsigned DQuad_with_qsub_1_in_QPR_8AltOrderSelect(const MachineFunction &MF) { return 1; }

static ArrayRef<MCPhysReg> DQuad_with_qsub_1_in_QPR_8GetRawAllocationOrder(const MachineFunction &MF) {
  static const MCPhysReg AltOrder1[] = { ARM::Q0_Q1, ARM::Q1_Q2, ARM::Q2_Q3 };
  const MCRegisterClass &MCR = ARMMCRegisterClasses[ARM::DQuad_with_qsub_1_in_QPR_8RegClassID];
  const ArrayRef<MCPhysReg> Order[] = {
    makeArrayRef(MCR.begin(), MCR.getNumRegs()),
    makeArrayRef(AltOrder1)
  };
  const unsigned Select = DQuad_with_qsub_1_in_QPR_8AltOrderSelect(MF);
  assert(Select < 2);
  return Order[Select];
}

static inline unsigned QQQQPRAltOrderSelect(const MachineFunction &MF) { return 1; }

static ArrayRef<MCPhysReg> QQQQPRGetRawAllocationOrder(const MachineFunction &MF) {
  static const MCPhysReg AltOrder1[] = { ARM::Q8_Q9_Q10_Q11, ARM::Q9_Q10_Q11_Q12, ARM::Q10_Q11_Q12_Q13, ARM::Q11_Q12_Q13_Q14, ARM::Q12_Q13_Q14_Q15, ARM::Q0_Q1_Q2_Q3, ARM::Q1_Q2_Q3_Q4, ARM::Q2_Q3_Q4_Q5, ARM::Q3_Q4_Q5_Q6, ARM::Q4_Q5_Q6_Q7, ARM::Q5_Q6_Q7_Q8, ARM::Q6_Q7_Q8_Q9, ARM::Q7_Q8_Q9_Q10 };
  const MCRegisterClass &MCR = ARMMCRegisterClasses[ARM::QQQQPRRegClassID];
  const ArrayRef<MCPhysReg> Order[] = {
    makeArrayRef(MCR.begin(), MCR.getNumRegs()),
    makeArrayRef(AltOrder1)
  };
  const unsigned Select = QQQQPRAltOrderSelect(MF);
  assert(Select < 2);
  return Order[Select];
}

static inline unsigned QQQQPR_with_ssub_0AltOrderSelect(const MachineFunction &MF) { return 1; }

static ArrayRef<MCPhysReg> QQQQPR_with_ssub_0GetRawAllocationOrder(const MachineFunction &MF) {
  static const MCPhysReg AltOrder1[] = { ARM::Q0_Q1_Q2_Q3, ARM::Q1_Q2_Q3_Q4, ARM::Q2_Q3_Q4_Q5, ARM::Q3_Q4_Q5_Q6, ARM::Q4_Q5_Q6_Q7, ARM::Q5_Q6_Q7_Q8, ARM::Q6_Q7_Q8_Q9, ARM::Q7_Q8_Q9_Q10 };
  const MCRegisterClass &MCR = ARMMCRegisterClasses[ARM::QQQQPR_with_ssub_0RegClassID];
  const ArrayRef<MCPhysReg> Order[] = {
    makeArrayRef(MCR.begin(), MCR.getNumRegs()),
    makeArrayRef(AltOrder1)
  };
  const unsigned Select = QQQQPR_with_ssub_0AltOrderSelect(MF);
  assert(Select < 2);
  return Order[Select];
}

static inline unsigned QQQQPR_with_dsub_2_then_ssub_0AltOrderSelect(const MachineFunction &MF) { return 1; }

static ArrayRef<MCPhysReg> QQQQPR_with_dsub_2_then_ssub_0GetRawAllocationOrder(const MachineFunction &MF) {
  static const MCPhysReg AltOrder1[] = { ARM::Q0_Q1_Q2_Q3, ARM::Q1_Q2_Q3_Q4, ARM::Q2_Q3_Q4_Q5, ARM::Q3_Q4_Q5_Q6, ARM::Q4_Q5_Q6_Q7, ARM::Q5_Q6_Q7_Q8, ARM::Q6_Q7_Q8_Q9 };
  const MCRegisterClass &MCR = ARMMCRegisterClasses[ARM::QQQQPR_with_dsub_2_then_ssub_0RegClassID];
  const ArrayRef<MCPhysReg> Order[] = {
    makeArrayRef(MCR.begin(), MCR.getNumRegs()),
    makeArrayRef(AltOrder1)
  };
  const unsigned Select = QQQQPR_with_dsub_2_then_ssub_0AltOrderSelect(MF);
  assert(Select < 2);
  return Order[Select];
}

static inline unsigned QQQQPR_with_dsub_5_then_ssub_0AltOrderSelect(const MachineFunction &MF) { return 1; }

static ArrayRef<MCPhysReg> QQQQPR_with_dsub_5_then_ssub_0GetRawAllocationOrder(const MachineFunction &MF) {
  static const MCPhysReg AltOrder1[] = { ARM::Q0_Q1_Q2_Q3, ARM::Q1_Q2_Q3_Q4, ARM::Q2_Q3_Q4_Q5, ARM::Q3_Q4_Q5_Q6, ARM::Q4_Q5_Q6_Q7, ARM::Q5_Q6_Q7_Q8 };
  const MCRegisterClass &MCR = ARMMCRegisterClasses[ARM::QQQQPR_with_dsub_5_then_ssub_0RegClassID];
  const ArrayRef<MCPhysReg> Order[] = {
    makeArrayRef(MCR.begin(), MCR.getNumRegs()),
    makeArrayRef(AltOrder1)
  };
  const unsigned Select = QQQQPR_with_dsub_5_then_ssub_0AltOrderSelect(MF);
  assert(Select < 2);
  return Order[Select];
}

static inline unsigned QQQQPR_with_dsub_7_then_ssub_0AltOrderSelect(const MachineFunction &MF) { return 1; }

static ArrayRef<MCPhysReg> QQQQPR_with_dsub_7_then_ssub_0GetRawAllocationOrder(const MachineFunction &MF) {
  static const MCPhysReg AltOrder1[] = { ARM::Q0_Q1_Q2_Q3, ARM::Q1_Q2_Q3_Q4, ARM::Q2_Q3_Q4_Q5, ARM::Q3_Q4_Q5_Q6, ARM::Q4_Q5_Q6_Q7 };
  const MCRegisterClass &MCR = ARMMCRegisterClasses[ARM::QQQQPR_with_dsub_7_then_ssub_0RegClassID];
  const ArrayRef<MCPhysReg> Order[] = {
    makeArrayRef(MCR.begin(), MCR.getNumRegs()),
    makeArrayRef(AltOrder1)
  };
  const unsigned Select = QQQQPR_with_dsub_7_then_ssub_0AltOrderSelect(MF);
  assert(Select < 2);
  return Order[Select];
}

static inline unsigned QQQQPR_with_dsub_0_in_DPR_8AltOrderSelect(const MachineFunction &MF) { return 1; }

static ArrayRef<MCPhysReg> QQQQPR_with_dsub_0_in_DPR_8GetRawAllocationOrder(const MachineFunction &MF) {
  static const MCPhysReg AltOrder1[] = { ARM::Q0_Q1_Q2_Q3, ARM::Q1_Q2_Q3_Q4, ARM::Q2_Q3_Q4_Q5, ARM::Q3_Q4_Q5_Q6 };
  const MCRegisterClass &MCR = ARMMCRegisterClasses[ARM::QQQQPR_with_dsub_0_in_DPR_8RegClassID];
  const ArrayRef<MCPhysReg> Order[] = {
    makeArrayRef(MCR.begin(), MCR.getNumRegs()),
    makeArrayRef(AltOrder1)
  };
  const unsigned Select = QQQQPR_with_dsub_0_in_DPR_8AltOrderSelect(MF);
  assert(Select < 2);
  return Order[Select];
}

static inline unsigned QQQQPR_with_dsub_2_in_DPR_8AltOrderSelect(const MachineFunction &MF) { return 1; }

static ArrayRef<MCPhysReg> QQQQPR_with_dsub_2_in_DPR_8GetRawAllocationOrder(const MachineFunction &MF) {
  static const MCPhysReg AltOrder1[] = { ARM::Q0_Q1_Q2_Q3, ARM::Q1_Q2_Q3_Q4, ARM::Q2_Q3_Q4_Q5 };
  const MCRegisterClass &MCR = ARMMCRegisterClasses[ARM::QQQQPR_with_dsub_2_in_DPR_8RegClassID];
  const ArrayRef<MCPhysReg> Order[] = {
    makeArrayRef(MCR.begin(), MCR.getNumRegs()),
    makeArrayRef(AltOrder1)
  };
  const unsigned Select = QQQQPR_with_dsub_2_in_DPR_8AltOrderSelect(MF);
  assert(Select < 2);
  return Order[Select];
}

static inline unsigned QQQQPR_with_dsub_4_in_DPR_8AltOrderSelect(const MachineFunction &MF) { return 1; }

static ArrayRef<MCPhysReg> QQQQPR_with_dsub_4_in_DPR_8GetRawAllocationOrder(const MachineFunction &MF) {
  static const MCPhysReg AltOrder1[] = { ARM::Q0_Q1_Q2_Q3, ARM::Q1_Q2_Q3_Q4 };
  const MCRegisterClass &MCR = ARMMCRegisterClasses[ARM::QQQQPR_with_dsub_4_in_DPR_8RegClassID];
  const ArrayRef<MCPhysReg> Order[] = {
    makeArrayRef(MCR.begin(), MCR.getNumRegs()),
    makeArrayRef(AltOrder1)
  };
  const unsigned Select = QQQQPR_with_dsub_4_in_DPR_8AltOrderSelect(MF);
  assert(Select < 2);
  return Order[Select];
}

static inline unsigned QQQQPR_with_dsub_6_in_DPR_8AltOrderSelect(const MachineFunction &MF) { return 1; }

static ArrayRef<MCPhysReg> QQQQPR_with_dsub_6_in_DPR_8GetRawAllocationOrder(const MachineFunction &MF) {
  static const MCPhysReg AltOrder1[] = { ARM::Q0_Q1_Q2_Q3 };
  const MCRegisterClass &MCR = ARMMCRegisterClasses[ARM::QQQQPR_with_dsub_6_in_DPR_8RegClassID];
  const ArrayRef<MCPhysReg> Order[] = {
    makeArrayRef(MCR.begin(), MCR.getNumRegs()),
    makeArrayRef(AltOrder1)
  };
  const unsigned Select = QQQQPR_with_dsub_6_in_DPR_8AltOrderSelect(MF);
  assert(Select < 2);
  return Order[Select];
}
namespace ARM {   // Register class instances
  extern const TargetRegisterClass SPRRegClass = {
    &ARMMCRegisterClasses[SPRRegClassID],
    VTLists + 2,
    SPRSubClassMask,
    SuperRegIdxSeqs + 12,
    NullRegClasses,
    0
  };

  extern const TargetRegisterClass GPRRegClass = {
    &ARMMCRegisterClasses[GPRRegClassID],
    VTLists + 0,
    GPRSubClassMask,
    SuperRegIdxSeqs + 9,
    NullRegClasses,
    GPRGetRawAllocationOrder
  };

  extern const TargetRegisterClass GPRwithAPSRRegClass = {
    &ARMMCRegisterClasses[GPRwithAPSRRegClassID],
    VTLists + 0,
    GPRwithAPSRSubClassMask,
    SuperRegIdxSeqs + 9,
    NullRegClasses,
    GPRwithAPSRGetRawAllocationOrder
  };

  extern const TargetRegisterClass SPR_8RegClass = {
    &ARMMCRegisterClasses[SPR_8RegClassID],
    VTLists + 2,
    SPR_8SubClassMask,
    SuperRegIdxSeqs + 12,
    SPR_8Superclasses,
    0
  };

  extern const TargetRegisterClass GPRnopcRegClass = {
    &ARMMCRegisterClasses[GPRnopcRegClassID],
    VTLists + 0,
    GPRnopcSubClassMask,
    SuperRegIdxSeqs + 9,
    GPRnopcSuperclasses,
    GPRnopcGetRawAllocationOrder
  };

  extern const TargetRegisterClass rGPRRegClass = {
    &ARMMCRegisterClasses[rGPRRegClassID],
    VTLists + 0,
    rGPRSubClassMask,
    SuperRegIdxSeqs + 9,
    rGPRSuperclasses,
    rGPRGetRawAllocationOrder
  };

  extern const TargetRegisterClass hGPRRegClass = {
    &ARMMCRegisterClasses[hGPRRegClassID],
    VTLists + 0,
    hGPRSubClassMask,
    SuperRegIdxSeqs + 9,
    hGPRSuperclasses,
    0
  };

  extern const TargetRegisterClass tGPRRegClass = {
    &ARMMCRegisterClasses[tGPRRegClassID],
    VTLists + 0,
    tGPRSubClassMask,
    SuperRegIdxSeqs + 9,
    tGPRSuperclasses,
    0
  };

  extern const TargetRegisterClass GPRnopc_and_hGPRRegClass = {
    &ARMMCRegisterClasses[GPRnopc_and_hGPRRegClassID],
    VTLists + 0,
    GPRnopc_and_hGPRSubClassMask,
    SuperRegIdxSeqs + 9,
    GPRnopc_and_hGPRSuperclasses,
    0
  };

  extern const TargetRegisterClass hGPR_and_rGPRRegClass = {
    &ARMMCRegisterClasses[hGPR_and_rGPRRegClassID],
    VTLists + 0,
    hGPR_and_rGPRSubClassMask,
    SuperRegIdxSeqs + 9,
    hGPR_and_rGPRSuperclasses,
    0
  };

  extern const TargetRegisterClass tcGPRRegClass = {
    &ARMMCRegisterClasses[tcGPRRegClassID],
    VTLists + 0,
    tcGPRSubClassMask,
    SuperRegIdxSeqs + 9,
    tcGPRSuperclasses,
    tcGPRGetRawAllocationOrder
  };

  extern const TargetRegisterClass tGPR_and_tcGPRRegClass = {
    &ARMMCRegisterClasses[tGPR_and_tcGPRRegClassID],
    VTLists + 0,
    tGPR_and_tcGPRSubClassMask,
    SuperRegIdxSeqs + 9,
    tGPR_and_tcGPRSuperclasses,
    tGPR_and_tcGPRGetRawAllocationOrder
  };

  extern const TargetRegisterClass hGPR_and_tcGPRRegClass = {
    &ARMMCRegisterClasses[hGPR_and_tcGPRRegClassID],
    VTLists + 0,
    hGPR_and_tcGPRSubClassMask,
    SuperRegIdxSeqs + 9,
    hGPR_and_tcGPRSuperclasses,
    hGPR_and_tcGPRGetRawAllocationOrder
  };

  extern const TargetRegisterClass CCRRegClass = {
    &ARMMCRegisterClasses[CCRRegClassID],
    VTLists + 0,
    CCRSubClassMask,
    SuperRegIdxSeqs + 8,
    NullRegClasses,
    0
  };

  extern const TargetRegisterClass GPRspRegClass = {
    &ARMMCRegisterClasses[GPRspRegClassID],
    VTLists + 0,
    GPRspSubClassMask,
    SuperRegIdxSeqs + 10,
    GPRspSuperclasses,
    0
  };

  extern const TargetRegisterClass DPRRegClass = {
    &ARMMCRegisterClasses[DPRRegClassID],
    VTLists + 10,
    DPRSubClassMask,
    SuperRegIdxSeqs + 0,
    NullRegClasses,
    DPRGetRawAllocationOrder
  };

  extern const TargetRegisterClass DPR_VFP2RegClass = {
    &ARMMCRegisterClasses[DPR_VFP2RegClassID],
    VTLists + 10,
    DPR_VFP2SubClassMask,
    SuperRegIdxSeqs + 0,
    DPR_VFP2Superclasses,
    0
  };

  extern const TargetRegisterClass DPR_8RegClass = {
    &ARMMCRegisterClasses[DPR_8RegClassID],
    VTLists + 10,
    DPR_8SubClassMask,
    SuperRegIdxSeqs + 0,
    DPR_8Superclasses,
    0
  };

  extern const TargetRegisterClass GPRPairRegClass = {
    &ARMMCRegisterClasses[GPRPairRegClassID],
    VTLists + 24,
    GPRPairSubClassMask,
    SuperRegIdxSeqs + 8,
    NullRegClasses,
    0
  };

  extern const TargetRegisterClass GPRPair_with_gsub_1_in_rGPRRegClass = {
    &ARMMCRegisterClasses[GPRPair_with_gsub_1_in_rGPRRegClassID],
    VTLists + 24,
    GPRPair_with_gsub_1_in_rGPRSubClassMask,
    SuperRegIdxSeqs + 8,
    GPRPair_with_gsub_1_in_rGPRSuperclasses,
    0
  };

  extern const TargetRegisterClass GPRPair_with_gsub_0_in_tGPRRegClass = {
    &ARMMCRegisterClasses[GPRPair_with_gsub_0_in_tGPRRegClassID],
    VTLists + 24,
    GPRPair_with_gsub_0_in_tGPRSubClassMask,
    SuperRegIdxSeqs + 8,
    GPRPair_with_gsub_0_in_tGPRSuperclasses,
    0
  };

  extern const TargetRegisterClass GPRPair_with_gsub_0_in_hGPRRegClass = {
    &ARMMCRegisterClasses[GPRPair_with_gsub_0_in_hGPRRegClassID],
    VTLists + 24,
    GPRPair_with_gsub_0_in_hGPRSubClassMask,
    SuperRegIdxSeqs + 8,
    GPRPair_with_gsub_0_in_hGPRSuperclasses,
    0
  };

  extern const TargetRegisterClass GPRPair_with_gsub_0_in_tcGPRRegClass = {
    &ARMMCRegisterClasses[GPRPair_with_gsub_0_in_tcGPRRegClassID],
    VTLists + 24,
    GPRPair_with_gsub_0_in_tcGPRSubClassMask,
    SuperRegIdxSeqs + 8,
    GPRPair_with_gsub_0_in_tcGPRSuperclasses,
    0
  };

  extern const TargetRegisterClass GPRPair_with_gsub_1_in_tcGPRRegClass = {
    &ARMMCRegisterClasses[GPRPair_with_gsub_1_in_tcGPRRegClassID],
    VTLists + 24,
    GPRPair_with_gsub_1_in_tcGPRSubClassMask,
    SuperRegIdxSeqs + 8,
    GPRPair_with_gsub_1_in_tcGPRSuperclasses,
    0
  };

  extern const TargetRegisterClass GPRPair_with_gsub_0_in_tGPR_and_tcGPRRegClass = {
    &ARMMCRegisterClasses[GPRPair_with_gsub_0_in_tGPR_and_tcGPRRegClassID],
    VTLists + 24,
    GPRPair_with_gsub_0_in_tGPR_and_tcGPRSubClassMask,
    SuperRegIdxSeqs + 8,
    GPRPair_with_gsub_0_in_tGPR_and_tcGPRSuperclasses,
    0
  };

  extern const TargetRegisterClass GPRPair_with_gsub_1_in_hGPR_and_rGPRRegClass = {
    &ARMMCRegisterClasses[GPRPair_with_gsub_1_in_hGPR_and_rGPRRegClassID],
    VTLists + 24,
    GPRPair_with_gsub_1_in_hGPR_and_rGPRSubClassMask,
    SuperRegIdxSeqs + 8,
    GPRPair_with_gsub_1_in_hGPR_and_rGPRSuperclasses,
    0
  };

  extern const TargetRegisterClass GPRPair_with_gsub_1_in_GPRspRegClass = {
    &ARMMCRegisterClasses[GPRPair_with_gsub_1_in_GPRspRegClassID],
    VTLists + 24,
    GPRPair_with_gsub_1_in_GPRspSubClassMask,
    SuperRegIdxSeqs + 8,
    GPRPair_with_gsub_1_in_GPRspSuperclasses,
    0
  };

  extern const TargetRegisterClass GPRPair_with_gsub_1_in_hGPR_and_tcGPRRegClass = {
    &ARMMCRegisterClasses[GPRPair_with_gsub_1_in_hGPR_and_tcGPRRegClassID],
    VTLists + 24,
    GPRPair_with_gsub_1_in_hGPR_and_tcGPRSubClassMask,
    SuperRegIdxSeqs + 8,
    GPRPair_with_gsub_1_in_hGPR_and_tcGPRSuperclasses,
    0
  };

  extern const TargetRegisterClass DPairSpcRegClass = {
    &ARMMCRegisterClasses[DPairSpcRegClassID],
    VTLists + 4,
    DPairSpcSubClassMask,
    SuperRegIdxSeqs + 48,
    NullRegClasses,
    0
  };

  extern const TargetRegisterClass DPairSpc_with_ssub_0RegClass = {
    &ARMMCRegisterClasses[DPairSpc_with_ssub_0RegClassID],
    VTLists + 4,
    DPairSpc_with_ssub_0SubClassMask,
    SuperRegIdxSeqs + 48,
    DPairSpc_with_ssub_0Superclasses,
    0
  };

  extern const TargetRegisterClass DPairSpc_with_dsub_2_then_ssub_0RegClass = {
    &ARMMCRegisterClasses[DPairSpc_with_dsub_2_then_ssub_0RegClassID],
    VTLists + 4,
    DPairSpc_with_dsub_2_then_ssub_0SubClassMask,
    SuperRegIdxSeqs + 48,
    DPairSpc_with_dsub_2_then_ssub_0Superclasses,
    0
  };

  extern const TargetRegisterClass DPairSpc_with_dsub_0_in_DPR_8RegClass = {
    &ARMMCRegisterClasses[DPairSpc_with_dsub_0_in_DPR_8RegClassID],
    VTLists + 4,
    DPairSpc_with_dsub_0_in_DPR_8SubClassMask,
    SuperRegIdxSeqs + 48,
    DPairSpc_with_dsub_0_in_DPR_8Superclasses,
    0
  };

  extern const TargetRegisterClass DPairSpc_with_dsub_2_in_DPR_8RegClass = {
    &ARMMCRegisterClasses[DPairSpc_with_dsub_2_in_DPR_8RegClassID],
    VTLists + 4,
    DPairSpc_with_dsub_2_in_DPR_8SubClassMask,
    SuperRegIdxSeqs + 48,
    DPairSpc_with_dsub_2_in_DPR_8Superclasses,
    0
  };

  extern const TargetRegisterClass DPairRegClass = {
    &ARMMCRegisterClasses[DPairRegClassID],
    VTLists + 17,
    DPairSubClassMask,
    SuperRegIdxSeqs + 67,
    NullRegClasses,
    DPairGetRawAllocationOrder
  };

  extern const TargetRegisterClass DPair_with_ssub_0RegClass = {
    &ARMMCRegisterClasses[DPair_with_ssub_0RegClassID],
    VTLists + 17,
    DPair_with_ssub_0SubClassMask,
    SuperRegIdxSeqs + 67,
    DPair_with_ssub_0Superclasses,
    DPair_with_ssub_0GetRawAllocationOrder
  };

  extern const TargetRegisterClass QPRRegClass = {
    &ARMMCRegisterClasses[QPRRegClassID],
    VTLists + 17,
    QPRSubClassMask,
    SuperRegIdxSeqs + 29,
    QPRSuperclasses,
    QPRGetRawAllocationOrder
  };

  extern const TargetRegisterClass DPair_with_ssub_2RegClass = {
    &ARMMCRegisterClasses[DPair_with_ssub_2RegClassID],
    VTLists + 17,
    DPair_with_ssub_2SubClassMask,
    SuperRegIdxSeqs + 67,
    DPair_with_ssub_2Superclasses,
    DPair_with_ssub_2GetRawAllocationOrder
  };

  extern const TargetRegisterClass DPair_with_dsub_0_in_DPR_8RegClass = {
    &ARMMCRegisterClasses[DPair_with_dsub_0_in_DPR_8RegClassID],
    VTLists + 17,
    DPair_with_dsub_0_in_DPR_8SubClassMask,
    SuperRegIdxSeqs + 67,
    DPair_with_dsub_0_in_DPR_8Superclasses,
    DPair_with_dsub_0_in_DPR_8GetRawAllocationOrder
  };

  extern const TargetRegisterClass QPR_VFP2RegClass = {
    &ARMMCRegisterClasses[QPR_VFP2RegClassID],
    VTLists + 17,
    QPR_VFP2SubClassMask,
    SuperRegIdxSeqs + 29,
    QPR_VFP2Superclasses,
    0
  };

  extern const TargetRegisterClass DPair_with_dsub_1_in_DPR_8RegClass = {
    &ARMMCRegisterClasses[DPair_with_dsub_1_in_DPR_8RegClassID],
    VTLists + 17,
    DPair_with_dsub_1_in_DPR_8SubClassMask,
    SuperRegIdxSeqs + 67,
    DPair_with_dsub_1_in_DPR_8Superclasses,
    DPair_with_dsub_1_in_DPR_8GetRawAllocationOrder
  };

  extern const TargetRegisterClass QPR_8RegClass = {
    &ARMMCRegisterClasses[QPR_8RegClassID],
    VTLists + 17,
    QPR_8SubClassMask,
    SuperRegIdxSeqs + 29,
    QPR_8Superclasses,
    0
  };

  extern const TargetRegisterClass DTripleRegClass = {
    &ARMMCRegisterClasses[DTripleRegClassID],
    VTLists + 24,
    DTripleSubClassMask,
    SuperRegIdxSeqs + 60,
    NullRegClasses,
    0
  };

  extern const TargetRegisterClass DTripleSpcRegClass = {
    &ARMMCRegisterClasses[DTripleSpcRegClassID],
    VTLists + 24,
    DTripleSpcSubClassMask,
    SuperRegIdxSeqs + 35,
    NullRegClasses,
    0
  };

  extern const TargetRegisterClass DTripleSpc_with_ssub_0RegClass = {
    &ARMMCRegisterClasses[DTripleSpc_with_ssub_0RegClassID],
    VTLists + 24,
    DTripleSpc_with_ssub_0SubClassMask,
    SuperRegIdxSeqs + 35,
    DTripleSpc_with_ssub_0Superclasses,
    0
  };

  extern const TargetRegisterClass DTriple_with_ssub_0RegClass = {
    &ARMMCRegisterClasses[DTriple_with_ssub_0RegClassID],
    VTLists + 24,
    DTriple_with_ssub_0SubClassMask,
    SuperRegIdxSeqs + 60,
    DTriple_with_ssub_0Superclasses,
    0
  };

  extern const TargetRegisterClass DTriple_with_dsub_1_dsub_2_in_QPRRegClass = {
    &ARMMCRegisterClasses[DTriple_with_dsub_1_dsub_2_in_QPRRegClassID],
    VTLists + 24,
    DTriple_with_dsub_1_dsub_2_in_QPRSubClassMask,
    SuperRegIdxSeqs + 55,
    DTriple_with_dsub_1_dsub_2_in_QPRSuperclasses,
    0
  };

  extern const TargetRegisterClass DTriple_with_qsub_0_in_QPRRegClass = {
    &ARMMCRegisterClasses[DTriple_with_qsub_0_in_QPRRegClassID],
    VTLists + 24,
    DTriple_with_qsub_0_in_QPRSubClassMask,
    SuperRegIdxSeqs + 43,
    DTriple_with_qsub_0_in_QPRSuperclasses,
    0
  };

  extern const TargetRegisterClass DTriple_with_ssub_2RegClass = {
    &ARMMCRegisterClasses[DTriple_with_ssub_2RegClassID],
    VTLists + 24,
    DTriple_with_ssub_2SubClassMask,
    SuperRegIdxSeqs + 60,
    DTriple_with_ssub_2Superclasses,
    0
  };

  extern const TargetRegisterClass DTripleSpc_with_dsub_2_then_ssub_0RegClass = {
    &ARMMCRegisterClasses[DTripleSpc_with_dsub_2_then_ssub_0RegClassID],
    VTLists + 24,
    DTripleSpc_with_dsub_2_then_ssub_0SubClassMask,
    SuperRegIdxSeqs + 35,
    DTripleSpc_with_dsub_2_then_ssub_0Superclasses,
    0
  };

  extern const TargetRegisterClass DTriple_with_dsub_2_then_ssub_0RegClass = {
    &ARMMCRegisterClasses[DTriple_with_dsub_2_then_ssub_0RegClassID],
    VTLists + 24,
    DTriple_with_dsub_2_then_ssub_0SubClassMask,
    SuperRegIdxSeqs + 60,
    DTriple_with_dsub_2_then_ssub_0Superclasses,
    0
  };

  extern const TargetRegisterClass DTripleSpc_with_dsub_4_then_ssub_0RegClass = {
    &ARMMCRegisterClasses[DTripleSpc_with_dsub_4_then_ssub_0RegClassID],
    VTLists + 24,
    DTripleSpc_with_dsub_4_then_ssub_0SubClassMask,
    SuperRegIdxSeqs + 35,
    DTripleSpc_with_dsub_4_then_ssub_0Superclasses,
    0
  };

  extern const TargetRegisterClass DTripleSpc_with_dsub_0_in_DPR_8RegClass = {
    &ARMMCRegisterClasses[DTripleSpc_with_dsub_0_in_DPR_8RegClassID],
    VTLists + 24,
    DTripleSpc_with_dsub_0_in_DPR_8SubClassMask,
    SuperRegIdxSeqs + 35,
    DTripleSpc_with_dsub_0_in_DPR_8Superclasses,
    0
  };

  extern const TargetRegisterClass DTriple_with_dsub_0_in_DPR_8RegClass = {
    &ARMMCRegisterClasses[DTriple_with_dsub_0_in_DPR_8RegClassID],
    VTLists + 24,
    DTriple_with_dsub_0_in_DPR_8SubClassMask,
    SuperRegIdxSeqs + 60,
    DTriple_with_dsub_0_in_DPR_8Superclasses,
    0
  };

  extern const TargetRegisterClass DTriple_with_qsub_0_in_QPR_VFP2RegClass = {
    &ARMMCRegisterClasses[DTriple_with_qsub_0_in_QPR_VFP2RegClassID],
    VTLists + 24,
    DTriple_with_qsub_0_in_QPR_VFP2SubClassMask,
    SuperRegIdxSeqs + 43,
    DTriple_with_qsub_0_in_QPR_VFP2Superclasses,
    0
  };

  extern const TargetRegisterClass DTriple_with_ssub_0_and_DTriple_with_dsub_1_dsub_2_in_QPRRegClass = {
    &ARMMCRegisterClasses[DTriple_with_ssub_0_and_DTriple_with_dsub_1_dsub_2_in_QPRRegClassID],
    VTLists + 24,
    DTriple_with_ssub_0_and_DTriple_with_dsub_1_dsub_2_in_QPRSubClassMask,
    SuperRegIdxSeqs + 55,
    DTriple_with_ssub_0_and_DTriple_with_dsub_1_dsub_2_in_QPRSuperclasses,
    0
  };

  extern const TargetRegisterClass DTriple_with_dsub_1_dsub_2_in_QPR_VFP2RegClass = {
    &ARMMCRegisterClasses[DTriple_with_dsub_1_dsub_2_in_QPR_VFP2RegClassID],
    VTLists + 24,
    DTriple_with_dsub_1_dsub_2_in_QPR_VFP2SubClassMask,
    SuperRegIdxSeqs + 55,
    DTriple_with_dsub_1_dsub_2_in_QPR_VFP2Superclasses,
    0
  };

  extern const TargetRegisterClass DTriple_with_dsub_1_in_DPR_8RegClass = {
    &ARMMCRegisterClasses[DTriple_with_dsub_1_in_DPR_8RegClassID],
    VTLists + 24,
    DTriple_with_dsub_1_in_DPR_8SubClassMask,
    SuperRegIdxSeqs + 60,
    DTriple_with_dsub_1_in_DPR_8Superclasses,
    0
  };

  extern const TargetRegisterClass DTriple_with_dsub_2_then_ssub_0_and_DTriple_with_qsub_0_in_QPRRegClass = {
    &ARMMCRegisterClasses[DTriple_with_dsub_2_then_ssub_0_and_DTriple_with_qsub_0_in_QPRRegClassID],
    VTLists + 24,
    DTriple_with_dsub_2_then_ssub_0_and_DTriple_with_qsub_0_in_QPRSubClassMask,
    SuperRegIdxSeqs + 43,
    DTriple_with_dsub_2_then_ssub_0_and_DTriple_with_qsub_0_in_QPRSuperclasses,
    0
  };

  extern const TargetRegisterClass DTripleSpc_with_dsub_2_in_DPR_8RegClass = {
    &ARMMCRegisterClasses[DTripleSpc_with_dsub_2_in_DPR_8RegClassID],
    VTLists + 24,
    DTripleSpc_with_dsub_2_in_DPR_8SubClassMask,
    SuperRegIdxSeqs + 35,
    DTripleSpc_with_dsub_2_in_DPR_8Superclasses,
    0
  };

  extern const TargetRegisterClass DTriple_with_dsub_2_in_DPR_8RegClass = {
    &ARMMCRegisterClasses[DTriple_with_dsub_2_in_DPR_8RegClassID],
    VTLists + 24,
    DTriple_with_dsub_2_in_DPR_8SubClassMask,
    SuperRegIdxSeqs + 60,
    DTriple_with_dsub_2_in_DPR_8Superclasses,
    0
  };

  extern const TargetRegisterClass DTripleSpc_with_dsub_4_in_DPR_8RegClass = {
    &ARMMCRegisterClasses[DTripleSpc_with_dsub_4_in_DPR_8RegClassID],
    VTLists + 24,
    DTripleSpc_with_dsub_4_in_DPR_8SubClassMask,
    SuperRegIdxSeqs + 35,
    DTripleSpc_with_dsub_4_in_DPR_8Superclasses,
    0
  };

  extern const TargetRegisterClass DTriple_with_dsub_0_in_DPR_8_and_DTriple_with_dsub_1_dsub_2_in_QPRRegClass = {
    &ARMMCRegisterClasses[DTriple_with_dsub_0_in_DPR_8_and_DTriple_with_dsub_1_dsub_2_in_QPRRegClassID],
    VTLists + 24,
    DTriple_with_dsub_0_in_DPR_8_and_DTriple_with_dsub_1_dsub_2_in_QPRSubClassMask,
    SuperRegIdxSeqs + 55,
    DTriple_with_dsub_0_in_DPR_8_and_DTriple_with_dsub_1_dsub_2_in_QPRSuperclasses,
    0
  };

  extern const TargetRegisterClass DTriple_with_qsub_0_in_QPR_8RegClass = {
    &ARMMCRegisterClasses[DTriple_with_qsub_0_in_QPR_8RegClassID],
    VTLists + 24,
    DTriple_with_qsub_0_in_QPR_8SubClassMask,
    SuperRegIdxSeqs + 43,
    DTriple_with_qsub_0_in_QPR_8Superclasses,
    0
  };

  extern const TargetRegisterClass DTriple_with_dsub_1_dsub_2_in_QPR_8RegClass = {
    &ARMMCRegisterClasses[DTriple_with_dsub_1_dsub_2_in_QPR_8RegClassID],
    VTLists + 24,
    DTriple_with_dsub_1_dsub_2_in_QPR_8SubClassMask,
    SuperRegIdxSeqs + 55,
    DTriple_with_dsub_1_dsub_2_in_QPR_8Superclasses,
    0
  };

  extern const TargetRegisterClass DTriple_with_dsub_2_in_DPR_8_and_DTriple_with_qsub_0_in_QPRRegClass = {
    &ARMMCRegisterClasses[DTriple_with_dsub_2_in_DPR_8_and_DTriple_with_qsub_0_in_QPRRegClassID],
    VTLists + 24,
    DTriple_with_dsub_2_in_DPR_8_and_DTriple_with_qsub_0_in_QPRSubClassMask,
    SuperRegIdxSeqs + 43,
    DTriple_with_dsub_2_in_DPR_8_and_DTriple_with_qsub_0_in_QPRSuperclasses,
    0
  };

  extern const TargetRegisterClass DQuadSpcRegClass = {
    &ARMMCRegisterClasses[DQuadSpcRegClassID],
    VTLists + 6,
    DQuadSpcSubClassMask,
    SuperRegIdxSeqs + 35,
    DQuadSpcSuperclasses,
    0
  };

  extern const TargetRegisterClass DQuadSpc_with_ssub_0RegClass = {
    &ARMMCRegisterClasses[DQuadSpc_with_ssub_0RegClassID],
    VTLists + 6,
    DQuadSpc_with_ssub_0SubClassMask,
    SuperRegIdxSeqs + 35,
    DQuadSpc_with_ssub_0Superclasses,
    0
  };

  extern const TargetRegisterClass DQuadSpc_with_dsub_2_then_ssub_0RegClass = {
    &ARMMCRegisterClasses[DQuadSpc_with_dsub_2_then_ssub_0RegClassID],
    VTLists + 6,
    DQuadSpc_with_dsub_2_then_ssub_0SubClassMask,
    SuperRegIdxSeqs + 35,
    DQuadSpc_with_dsub_2_then_ssub_0Superclasses,
    0
  };

  extern const TargetRegisterClass DQuadSpc_with_dsub_4_then_ssub_0RegClass = {
    &ARMMCRegisterClasses[DQuadSpc_with_dsub_4_then_ssub_0RegClassID],
    VTLists + 6,
    DQuadSpc_with_dsub_4_then_ssub_0SubClassMask,
    SuperRegIdxSeqs + 35,
    DQuadSpc_with_dsub_4_then_ssub_0Superclasses,
    0
  };

  extern const TargetRegisterClass DQuadSpc_with_dsub_0_in_DPR_8RegClass = {
    &ARMMCRegisterClasses[DQuadSpc_with_dsub_0_in_DPR_8RegClassID],
    VTLists + 6,
    DQuadSpc_with_dsub_0_in_DPR_8SubClassMask,
    SuperRegIdxSeqs + 35,
    DQuadSpc_with_dsub_0_in_DPR_8Superclasses,
    0
  };

  extern const TargetRegisterClass DQuadSpc_with_dsub_2_in_DPR_8RegClass = {
    &ARMMCRegisterClasses[DQuadSpc_with_dsub_2_in_DPR_8RegClassID],
    VTLists + 6,
    DQuadSpc_with_dsub_2_in_DPR_8SubClassMask,
    SuperRegIdxSeqs + 35,
    DQuadSpc_with_dsub_2_in_DPR_8Superclasses,
    0
  };

  extern const TargetRegisterClass DQuadSpc_with_dsub_4_in_DPR_8RegClass = {
    &ARMMCRegisterClasses[DQuadSpc_with_dsub_4_in_DPR_8RegClassID],
    VTLists + 6,
    DQuadSpc_with_dsub_4_in_DPR_8SubClassMask,
    SuperRegIdxSeqs + 35,
    DQuadSpc_with_dsub_4_in_DPR_8Superclasses,
    0
  };

  extern const TargetRegisterClass DQuadRegClass = {
    &ARMMCRegisterClasses[DQuadRegClassID],
    VTLists + 6,
    DQuadSubClassMask,
    SuperRegIdxSeqs + 79,
    NullRegClasses,
    0
  };

  extern const TargetRegisterClass DQuad_with_ssub_0RegClass = {
    &ARMMCRegisterClasses[DQuad_with_ssub_0RegClassID],
    VTLists + 6,
    DQuad_with_ssub_0SubClassMask,
    SuperRegIdxSeqs + 79,
    DQuad_with_ssub_0Superclasses,
    0
  };

  extern const TargetRegisterClass DQuad_with_ssub_2RegClass = {
    &ARMMCRegisterClasses[DQuad_with_ssub_2RegClassID],
    VTLists + 6,
    DQuad_with_ssub_2SubClassMask,
    SuperRegIdxSeqs + 79,
    DQuad_with_ssub_2Superclasses,
    0
  };

  extern const TargetRegisterClass QQPRRegClass = {
    &ARMMCRegisterClasses[QQPRRegClassID],
    VTLists + 6,
    QQPRSubClassMask,
    SuperRegIdxSeqs + 75,
    QQPRSuperclasses,
    QQPRGetRawAllocationOrder
  };

  extern const TargetRegisterClass DQuad_with_dsub_1_dsub_2_in_QPRRegClass = {
    &ARMMCRegisterClasses[DQuad_with_dsub_1_dsub_2_in_QPRRegClassID],
    VTLists + 6,
    DQuad_with_dsub_1_dsub_2_in_QPRSubClassMask,
    SuperRegIdxSeqs + 40,
    DQuad_with_dsub_1_dsub_2_in_QPRSuperclasses,
    0
  };

  extern const TargetRegisterClass DQuad_with_dsub_2_then_ssub_0RegClass = {
    &ARMMCRegisterClasses[DQuad_with_dsub_2_then_ssub_0RegClassID],
    VTLists + 6,
    DQuad_with_dsub_2_then_ssub_0SubClassMask,
    SuperRegIdxSeqs + 79,
    DQuad_with_dsub_2_then_ssub_0Superclasses,
    0
  };

  extern const TargetRegisterClass DQuad_with_dsub_3_then_ssub_0RegClass = {
    &ARMMCRegisterClasses[DQuad_with_dsub_3_then_ssub_0RegClassID],
    VTLists + 6,
    DQuad_with_dsub_3_then_ssub_0SubClassMask,
    SuperRegIdxSeqs + 79,
    DQuad_with_dsub_3_then_ssub_0Superclasses,
    0
  };

  extern const TargetRegisterClass DQuad_with_dsub_0_in_DPR_8RegClass = {
    &ARMMCRegisterClasses[DQuad_with_dsub_0_in_DPR_8RegClassID],
    VTLists + 6,
    DQuad_with_dsub_0_in_DPR_8SubClassMask,
    SuperRegIdxSeqs + 79,
    DQuad_with_dsub_0_in_DPR_8Superclasses,
    0
  };

  extern const TargetRegisterClass DQuad_with_qsub_0_in_QPR_VFP2RegClass = {
    &ARMMCRegisterClasses[DQuad_with_qsub_0_in_QPR_VFP2RegClassID],
    VTLists + 6,
    DQuad_with_qsub_0_in_QPR_VFP2SubClassMask,
    SuperRegIdxSeqs + 75,
    DQuad_with_qsub_0_in_QPR_VFP2Superclasses,
    DQuad_with_qsub_0_in_QPR_VFP2GetRawAllocationOrder
  };

  extern const TargetRegisterClass DQuad_with_ssub_0_and_DQuad_with_dsub_1_dsub_2_in_QPRRegClass = {
    &ARMMCRegisterClasses[DQuad_with_ssub_0_and_DQuad_with_dsub_1_dsub_2_in_QPRRegClassID],
    VTLists + 6,
    DQuad_with_ssub_0_and_DQuad_with_dsub_1_dsub_2_in_QPRSubClassMask,
    SuperRegIdxSeqs + 40,
    DQuad_with_ssub_0_and_DQuad_with_dsub_1_dsub_2_in_QPRSuperclasses,
    0
  };

  extern const TargetRegisterClass DQuad_with_dsub_1_dsub_2_in_QPR_VFP2RegClass = {
    &ARMMCRegisterClasses[DQuad_with_dsub_1_dsub_2_in_QPR_VFP2RegClassID],
    VTLists + 6,
    DQuad_with_dsub_1_dsub_2_in_QPR_VFP2SubClassMask,
    SuperRegIdxSeqs + 40,
    DQuad_with_dsub_1_dsub_2_in_QPR_VFP2Superclasses,
    0
  };

  extern const TargetRegisterClass DQuad_with_dsub_1_in_DPR_8RegClass = {
    &ARMMCRegisterClasses[DQuad_with_dsub_1_in_DPR_8RegClassID],
    VTLists + 6,
    DQuad_with_dsub_1_in_DPR_8SubClassMask,
    SuperRegIdxSeqs + 79,
    DQuad_with_dsub_1_in_DPR_8Superclasses,
    0
  };

  extern const TargetRegisterClass DQuad_with_qsub_1_in_QPR_VFP2RegClass = {
    &ARMMCRegisterClasses[DQuad_with_qsub_1_in_QPR_VFP2RegClassID],
    VTLists + 6,
    DQuad_with_qsub_1_in_QPR_VFP2SubClassMask,
    SuperRegIdxSeqs + 75,
    DQuad_with_qsub_1_in_QPR_VFP2Superclasses,
    DQuad_with_qsub_1_in_QPR_VFP2GetRawAllocationOrder
  };

  extern const TargetRegisterClass DQuad_with_dsub_2_in_DPR_8RegClass = {
    &ARMMCRegisterClasses[DQuad_with_dsub_2_in_DPR_8RegClassID],
    VTLists + 6,
    DQuad_with_dsub_2_in_DPR_8SubClassMask,
    SuperRegIdxSeqs + 79,
    DQuad_with_dsub_2_in_DPR_8Superclasses,
    0
  };

  extern const TargetRegisterClass DQuad_with_dsub_3_then_ssub_0_and_DQuad_with_dsub_1_dsub_2_in_QPRRegClass = {
    &ARMMCRegisterClasses[DQuad_with_dsub_3_then_ssub_0_and_DQuad_with_dsub_1_dsub_2_in_QPRRegClassID],
    VTLists + 6,
    DQuad_with_dsub_3_then_ssub_0_and_DQuad_with_dsub_1_dsub_2_in_QPRSubClassMask,
    SuperRegIdxSeqs + 40,
    DQuad_with_dsub_3_then_ssub_0_and_DQuad_with_dsub_1_dsub_2_in_QPRSuperclasses,
    0
  };

  extern const TargetRegisterClass DQuad_with_dsub_3_in_DPR_8RegClass = {
    &ARMMCRegisterClasses[DQuad_with_dsub_3_in_DPR_8RegClassID],
    VTLists + 6,
    DQuad_with_dsub_3_in_DPR_8SubClassMask,
    SuperRegIdxSeqs + 79,
    DQuad_with_dsub_3_in_DPR_8Superclasses,
    0
  };

  extern const TargetRegisterClass DQuad_with_dsub_0_in_DPR_8_and_DQuad_with_dsub_1_dsub_2_in_QPRRegClass = {
    &ARMMCRegisterClasses[DQuad_with_dsub_0_in_DPR_8_and_DQuad_with_dsub_1_dsub_2_in_QPRRegClassID],
    VTLists + 6,
    DQuad_with_dsub_0_in_DPR_8_and_DQuad_with_dsub_1_dsub_2_in_QPRSubClassMask,
    SuperRegIdxSeqs + 40,
    DQuad_with_dsub_0_in_DPR_8_and_DQuad_with_dsub_1_dsub_2_in_QPRSuperclasses,
    0
  };

  extern const TargetRegisterClass DQuad_with_qsub_0_in_QPR_8RegClass = {
    &ARMMCRegisterClasses[DQuad_with_qsub_0_in_QPR_8RegClassID],
    VTLists + 6,
    DQuad_with_qsub_0_in_QPR_8SubClassMask,
    SuperRegIdxSeqs + 75,
    DQuad_with_qsub_0_in_QPR_8Superclasses,
    DQuad_with_qsub_0_in_QPR_8GetRawAllocationOrder
  };

  extern const TargetRegisterClass DQuad_with_dsub_1_dsub_2_in_QPR_8RegClass = {
    &ARMMCRegisterClasses[DQuad_with_dsub_1_dsub_2_in_QPR_8RegClassID],
    VTLists + 6,
    DQuad_with_dsub_1_dsub_2_in_QPR_8SubClassMask,
    SuperRegIdxSeqs + 40,
    DQuad_with_dsub_1_dsub_2_in_QPR_8Superclasses,
    0
  };

  extern const TargetRegisterClass DQuad_with_qsub_1_in_QPR_8RegClass = {
    &ARMMCRegisterClasses[DQuad_with_qsub_1_in_QPR_8RegClassID],
    VTLists + 6,
    DQuad_with_qsub_1_in_QPR_8SubClassMask,
    SuperRegIdxSeqs + 75,
    DQuad_with_qsub_1_in_QPR_8Superclasses,
    DQuad_with_qsub_1_in_QPR_8GetRawAllocationOrder
  };

  extern const TargetRegisterClass DQuad_with_dsub_3_in_DPR_8_and_DQuad_with_dsub_1_dsub_2_in_QPRRegClass = {
    &ARMMCRegisterClasses[DQuad_with_dsub_3_in_DPR_8_and_DQuad_with_dsub_1_dsub_2_in_QPRRegClassID],
    VTLists + 6,
    DQuad_with_dsub_3_in_DPR_8_and_DQuad_with_dsub_1_dsub_2_in_QPRSubClassMask,
    SuperRegIdxSeqs + 40,
    DQuad_with_dsub_3_in_DPR_8_and_DQuad_with_dsub_1_dsub_2_in_QPRSuperclasses,
    0
  };

  extern const TargetRegisterClass QQQQPRRegClass = {
    &ARMMCRegisterClasses[QQQQPRRegClassID],
    VTLists + 8,
    QQQQPRSubClassMask,
    SuperRegIdxSeqs + 8,
    NullRegClasses,
    QQQQPRGetRawAllocationOrder
  };

  extern const TargetRegisterClass QQQQPR_with_ssub_0RegClass = {
    &ARMMCRegisterClasses[QQQQPR_with_ssub_0RegClassID],
    VTLists + 8,
    QQQQPR_with_ssub_0SubClassMask,
    SuperRegIdxSeqs + 8,
    QQQQPR_with_ssub_0Superclasses,
    QQQQPR_with_ssub_0GetRawAllocationOrder
  };

  extern const TargetRegisterClass QQQQPR_with_dsub_2_then_ssub_0RegClass = {
    &ARMMCRegisterClasses[QQQQPR_with_dsub_2_then_ssub_0RegClassID],
    VTLists + 8,
    QQQQPR_with_dsub_2_then_ssub_0SubClassMask,
    SuperRegIdxSeqs + 8,
    QQQQPR_with_dsub_2_then_ssub_0Superclasses,
    QQQQPR_with_dsub_2_then_ssub_0GetRawAllocationOrder
  };

  extern const TargetRegisterClass QQQQPR_with_dsub_5_then_ssub_0RegClass = {
    &ARMMCRegisterClasses[QQQQPR_with_dsub_5_then_ssub_0RegClassID],
    VTLists + 8,
    QQQQPR_with_dsub_5_then_ssub_0SubClassMask,
    SuperRegIdxSeqs + 8,
    QQQQPR_with_dsub_5_then_ssub_0Superclasses,
    QQQQPR_with_dsub_5_then_ssub_0GetRawAllocationOrder
  };

  extern const TargetRegisterClass QQQQPR_with_dsub_7_then_ssub_0RegClass = {
    &ARMMCRegisterClasses[QQQQPR_with_dsub_7_then_ssub_0RegClassID],
    VTLists + 8,
    QQQQPR_with_dsub_7_then_ssub_0SubClassMask,
    SuperRegIdxSeqs + 8,
    QQQQPR_with_dsub_7_then_ssub_0Superclasses,
    QQQQPR_with_dsub_7_then_ssub_0GetRawAllocationOrder
  };

  extern const TargetRegisterClass QQQQPR_with_dsub_0_in_DPR_8RegClass = {
    &ARMMCRegisterClasses[QQQQPR_with_dsub_0_in_DPR_8RegClassID],
    VTLists + 8,
    QQQQPR_with_dsub_0_in_DPR_8SubClassMask,
    SuperRegIdxSeqs + 8,
    QQQQPR_with_dsub_0_in_DPR_8Superclasses,
    QQQQPR_with_dsub_0_in_DPR_8GetRawAllocationOrder
  };

  extern const TargetRegisterClass QQQQPR_with_dsub_2_in_DPR_8RegClass = {
    &ARMMCRegisterClasses[QQQQPR_with_dsub_2_in_DPR_8RegClassID],
    VTLists + 8,
    QQQQPR_with_dsub_2_in_DPR_8SubClassMask,
    SuperRegIdxSeqs + 8,
    QQQQPR_with_dsub_2_in_DPR_8Superclasses,
    QQQQPR_with_dsub_2_in_DPR_8GetRawAllocationOrder
  };

  extern const TargetRegisterClass QQQQPR_with_dsub_4_in_DPR_8RegClass = {
    &ARMMCRegisterClasses[QQQQPR_with_dsub_4_in_DPR_8RegClassID],
    VTLists + 8,
    QQQQPR_with_dsub_4_in_DPR_8SubClassMask,
    SuperRegIdxSeqs + 8,
    QQQQPR_with_dsub_4_in_DPR_8Superclasses,
    QQQQPR_with_dsub_4_in_DPR_8GetRawAllocationOrder
  };

  extern const TargetRegisterClass QQQQPR_with_dsub_6_in_DPR_8RegClass = {
    &ARMMCRegisterClasses[QQQQPR_with_dsub_6_in_DPR_8RegClassID],
    VTLists + 8,
    QQQQPR_with_dsub_6_in_DPR_8SubClassMask,
    SuperRegIdxSeqs + 8,
    QQQQPR_with_dsub_6_in_DPR_8Superclasses,
    QQQQPR_with_dsub_6_in_DPR_8GetRawAllocationOrder
  };

}

namespace {
  const TargetRegisterClass* const RegisterClasses[] = {
    &ARM::SPRRegClass,
    &ARM::GPRRegClass,
    &ARM::GPRwithAPSRRegClass,
    &ARM::SPR_8RegClass,
    &ARM::GPRnopcRegClass,
    &ARM::rGPRRegClass,
    &ARM::hGPRRegClass,
    &ARM::tGPRRegClass,
    &ARM::GPRnopc_and_hGPRRegClass,
    &ARM::hGPR_and_rGPRRegClass,
    &ARM::tcGPRRegClass,
    &ARM::tGPR_and_tcGPRRegClass,
    &ARM::hGPR_and_tcGPRRegClass,
    &ARM::CCRRegClass,
    &ARM::GPRspRegClass,
    &ARM::DPRRegClass,
    &ARM::DPR_VFP2RegClass,
    &ARM::DPR_8RegClass,
    &ARM::GPRPairRegClass,
    &ARM::GPRPair_with_gsub_1_in_rGPRRegClass,
    &ARM::GPRPair_with_gsub_0_in_tGPRRegClass,
    &ARM::GPRPair_with_gsub_0_in_hGPRRegClass,
    &ARM::GPRPair_with_gsub_0_in_tcGPRRegClass,
    &ARM::GPRPair_with_gsub_1_in_tcGPRRegClass,
    &ARM::GPRPair_with_gsub_0_in_tGPR_and_tcGPRRegClass,
    &ARM::GPRPair_with_gsub_1_in_hGPR_and_rGPRRegClass,
    &ARM::GPRPair_with_gsub_1_in_GPRspRegClass,
    &ARM::GPRPair_with_gsub_1_in_hGPR_and_tcGPRRegClass,
    &ARM::DPairSpcRegClass,
    &ARM::DPairSpc_with_ssub_0RegClass,
    &ARM::DPairSpc_with_dsub_2_then_ssub_0RegClass,
    &ARM::DPairSpc_with_dsub_0_in_DPR_8RegClass,
    &ARM::DPairSpc_with_dsub_2_in_DPR_8RegClass,
    &ARM::DPairRegClass,
    &ARM::DPair_with_ssub_0RegClass,
    &ARM::QPRRegClass,
    &ARM::DPair_with_ssub_2RegClass,
    &ARM::DPair_with_dsub_0_in_DPR_8RegClass,
    &ARM::QPR_VFP2RegClass,
    &ARM::DPair_with_dsub_1_in_DPR_8RegClass,
    &ARM::QPR_8RegClass,
    &ARM::DTripleRegClass,
    &ARM::DTripleSpcRegClass,
    &ARM::DTripleSpc_with_ssub_0RegClass,
    &ARM::DTriple_with_ssub_0RegClass,
    &ARM::DTriple_with_dsub_1_dsub_2_in_QPRRegClass,
    &ARM::DTriple_with_qsub_0_in_QPRRegClass,
    &ARM::DTriple_with_ssub_2RegClass,
    &ARM::DTripleSpc_with_dsub_2_then_ssub_0RegClass,
    &ARM::DTriple_with_dsub_2_then_ssub_0RegClass,
    &ARM::DTripleSpc_with_dsub_4_then_ssub_0RegClass,
    &ARM::DTripleSpc_with_dsub_0_in_DPR_8RegClass,
    &ARM::DTriple_with_dsub_0_in_DPR_8RegClass,
    &ARM::DTriple_with_qsub_0_in_QPR_VFP2RegClass,
    &ARM::DTriple_with_ssub_0_and_DTriple_with_dsub_1_dsub_2_in_QPRRegClass,
    &ARM::DTriple_with_dsub_1_dsub_2_in_QPR_VFP2RegClass,
    &ARM::DTriple_with_dsub_1_in_DPR_8RegClass,
    &ARM::DTriple_with_dsub_2_then_ssub_0_and_DTriple_with_qsub_0_in_QPRRegClass,
    &ARM::DTripleSpc_with_dsub_2_in_DPR_8RegClass,
    &ARM::DTriple_with_dsub_2_in_DPR_8RegClass,
    &ARM::DTripleSpc_with_dsub_4_in_DPR_8RegClass,
    &ARM::DTriple_with_dsub_0_in_DPR_8_and_DTriple_with_dsub_1_dsub_2_in_QPRRegClass,
    &ARM::DTriple_with_qsub_0_in_QPR_8RegClass,
    &ARM::DTriple_with_dsub_1_dsub_2_in_QPR_8RegClass,
    &ARM::DTriple_with_dsub_2_in_DPR_8_and_DTriple_with_qsub_0_in_QPRRegClass,
    &ARM::DQuadSpcRegClass,
    &ARM::DQuadSpc_with_ssub_0RegClass,
    &ARM::DQuadSpc_with_dsub_2_then_ssub_0RegClass,
    &ARM::DQuadSpc_with_dsub_4_then_ssub_0RegClass,
    &ARM::DQuadSpc_with_dsub_0_in_DPR_8RegClass,
    &ARM::DQuadSpc_with_dsub_2_in_DPR_8RegClass,
    &ARM::DQuadSpc_with_dsub_4_in_DPR_8RegClass,
    &ARM::DQuadRegClass,
    &ARM::DQuad_with_ssub_0RegClass,
    &ARM::DQuad_with_ssub_2RegClass,
    &ARM::QQPRRegClass,
    &ARM::DQuad_with_dsub_1_dsub_2_in_QPRRegClass,
    &ARM::DQuad_with_dsub_2_then_ssub_0RegClass,
    &ARM::DQuad_with_dsub_3_then_ssub_0RegClass,
    &ARM::DQuad_with_dsub_0_in_DPR_8RegClass,
    &ARM::DQuad_with_qsub_0_in_QPR_VFP2RegClass,
    &ARM::DQuad_with_ssub_0_and_DQuad_with_dsub_1_dsub_2_in_QPRRegClass,
    &ARM::DQuad_with_dsub_1_dsub_2_in_QPR_VFP2RegClass,
    &ARM::DQuad_with_dsub_1_in_DPR_8RegClass,
    &ARM::DQuad_with_qsub_1_in_QPR_VFP2RegClass,
    &ARM::DQuad_with_dsub_2_in_DPR_8RegClass,
    &ARM::DQuad_with_dsub_3_then_ssub_0_and_DQuad_with_dsub_1_dsub_2_in_QPRRegClass,
    &ARM::DQuad_with_dsub_3_in_DPR_8RegClass,
    &ARM::DQuad_with_dsub_0_in_DPR_8_and_DQuad_with_dsub_1_dsub_2_in_QPRRegClass,
    &ARM::DQuad_with_qsub_0_in_QPR_8RegClass,
    &ARM::DQuad_with_dsub_1_dsub_2_in_QPR_8RegClass,
    &ARM::DQuad_with_qsub_1_in_QPR_8RegClass,
    &ARM::DQuad_with_dsub_3_in_DPR_8_and_DQuad_with_dsub_1_dsub_2_in_QPRRegClass,
    &ARM::QQQQPRRegClass,
    &ARM::QQQQPR_with_ssub_0RegClass,
    &ARM::QQQQPR_with_dsub_2_then_ssub_0RegClass,
    &ARM::QQQQPR_with_dsub_5_then_ssub_0RegClass,
    &ARM::QQQQPR_with_dsub_7_then_ssub_0RegClass,
    &ARM::QQQQPR_with_dsub_0_in_DPR_8RegClass,
    &ARM::QQQQPR_with_dsub_2_in_DPR_8RegClass,
    &ARM::QQQQPR_with_dsub_4_in_DPR_8RegClass,
    &ARM::QQQQPR_with_dsub_6_in_DPR_8RegClass,
  };
}

static const TargetRegisterInfoDesc ARMRegInfoDesc[] = { // Extra Descriptors
  { 0, 0 },
  { 0, 0 },
  { 0, 1 },
  { 0, 0 },
  { 0, 0 },
  { 0, 0 },
  { 0, 0 },
  { 0, 0 },
  { 0, 0 },
  { 0, 0 },
  { 1, 1 },
  { 1, 1 },
  { 1, 1 },
  { 0, 0 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 0 },
  { 0, 0 },
  { 0, 0 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 1, 1 },
  { 1, 1 },
  { 1, 1 },
  { 1, 1 },
  { 1, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 1, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 1, 1 },
  { 1, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 0 },
  { 0, 0 },
  { 0, 0 },
  { 0, 0 },
  { 0, 0 },
  { 0, 0 },
  { 0, 0 },
  { 0, 0 },
  { 0, 0 },
  { 0, 0 },
  { 0, 0 },
  { 0, 0 },
  { 0, 0 },
  { 0, 0 },
  { 0, 0 },
  { 0, 0 },
  { 0, 0 },
  { 0, 0 },
  { 0, 0 },
  { 0, 0 },
  { 0, 0 },
  { 0, 0 },
  { 0, 0 },
  { 0, 0 },
  { 0, 0 },
  { 0, 0 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
};
unsigned ARMGenRegisterInfo::composeSubRegIndicesImpl(unsigned IdxA, unsigned IdxB) const {
  static const uint8_t RowMap[56] = {
    0, 1, 2, 3, 4, 5, 6, 7, 0, 0, 0, 4, 0, 2, 4, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 2, 2, 2, 3, 3, 3, 3, 3, 4, 4, 5, 5, 5, 2, 
  };
  static const uint8_t Rows[8][56] = {
    { 1, 2, 3, 4, 5, 0, 7, 0, 0, 0, 0, 0, 13, 14, 0, 0, 17, 18, 19, 20, 21, 22, 23, 24, 0, 0, 27, 28, 0, 0, 31, 32, 33, 34, 35, 36, 37, 38, 0, 0, 0, 0, 43, 0, 45, 0, 0, 0, 0, 0, 51, 0, 0, 0, 0, 0, },
    { 2, 3, 4, 5, 6, 0, 8, 0, 0, 0, 0, 0, 37, 49, 0, 0, 19, 20, 21, 22, 23, 24, 31, 32, 0, 0, 25, 26, 0, 0, 29, 30, 35, 36, 43, 44, 14, 40, 0, 0, 0, 0, 46, 0, 48, 0, 0, 0, 0, 0, 53, 0, 0, 0, 0, 0, },
    { 3, 4, 5, 6, 7, 0, 0, 0, 0, 0, 0, 0, 14, 15, 0, 0, 21, 22, 23, 24, 31, 32, 29, 30, 0, 0, 0, 0, 0, 0, 27, 28, 43, 44, 46, 47, 49, 0, 0, 0, 0, 0, 51, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
    { 4, 5, 6, 7, 8, 0, 0, 0, 0, 0, 0, 0, 49, 55, 0, 0, 23, 24, 31, 32, 29, 30, 27, 28, 0, 0, 0, 0, 0, 0, 25, 26, 46, 47, 51, 52, 15, 0, 0, 0, 0, 0, 53, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
    { 5, 6, 7, 8, 0, 0, 0, 0, 0, 0, 0, 0, 15, 16, 0, 0, 31, 32, 29, 30, 27, 28, 25, 26, 0, 0, 0, 0, 0, 0, 0, 0, 51, 52, 53, 54, 55, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
    { 6, 7, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 55, 0, 0, 0, 29, 30, 27, 28, 25, 26, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 53, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
    { 7, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 27, 28, 25, 26, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 25, 26, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
  };

  --IdxA; assert(IdxA < 56);
  --IdxB; assert(IdxB < 56);
  return Rows[RowMap[IdxA]][IdxB];
}

const TargetRegisterClass *ARMGenRegisterInfo::getSubClassWithSubReg(const TargetRegisterClass *RC, unsigned Idx) const {
  static const uint8_t Table[102][56] = {
    {	// SPR
      0,	// dsub_0
      0,	// dsub_1
      0,	// dsub_2
      0,	// dsub_3
      0,	// dsub_4
      0,	// dsub_5
      0,	// dsub_6
      0,	// dsub_7
      0,	// gsub_0
      0,	// gsub_1
      0,	// qqsub_0
      0,	// qqsub_1
      0,	// qsub_0
      0,	// qsub_1
      0,	// qsub_2
      0,	// qsub_3
      0,	// ssub_0
      0,	// ssub_1
      0,	// ssub_2
      0,	// ssub_3
      0,	// dsub_2_then_ssub_0
      0,	// dsub_2_then_ssub_1
      0,	// dsub_3_then_ssub_0
      0,	// dsub_3_then_ssub_1
      0,	// dsub_7_then_ssub_0
      0,	// dsub_7_then_ssub_1
      0,	// dsub_6_then_ssub_0
      0,	// dsub_6_then_ssub_1
      0,	// dsub_5_then_ssub_0
      0,	// dsub_5_then_ssub_1
      0,	// dsub_4_then_ssub_0
      0,	// dsub_4_then_ssub_1
      0,	// dsub_0_dsub_2
      0,	// dsub_0_dsub_1_dsub_2
      0,	// dsub_1_dsub_3
      0,	// dsub_1_dsub_2_dsub_3
      0,	// dsub_1_dsub_2
      0,	// dsub_0_dsub_2_dsub_4
      0,	// dsub_0_dsub_2_dsub_4_dsub_6
      0,	// dsub_1_dsub_3_dsub_5
      0,	// dsub_1_dsub_3_dsub_5_dsub_7
      0,	// dsub_1_dsub_2_dsub_3_dsub_4
      0,	// dsub_2_dsub_4
      0,	// dsub_2_dsub_3_dsub_4
      0,	// dsub_2_dsub_4_dsub_6
      0,	// dsub_3_dsub_5
      0,	// dsub_3_dsub_4_dsub_5
      0,	// dsub_3_dsub_5_dsub_7
      0,	// dsub_3_dsub_4
      0,	// dsub_3_dsub_4_dsub_5_dsub_6
      0,	// dsub_4_dsub_6
      0,	// dsub_4_dsub_5_dsub_6
      0,	// dsub_5_dsub_7
      0,	// dsub_5_dsub_6_dsub_7
      0,	// dsub_5_dsub_6
      0,	// qsub_1_qsub_2
    },
    {	// GPR
      0,	// dsub_0
      0,	// dsub_1
      0,	// dsub_2
      0,	// dsub_3
      0,	// dsub_4
      0,	// dsub_5
      0,	// dsub_6
      0,	// dsub_7
      0,	// gsub_0
      0,	// gsub_1
      0,	// qqsub_0
      0,	// qqsub_1
      0,	// qsub_0
      0,	// qsub_1
      0,	// qsub_2
      0,	// qsub_3
      0,	// ssub_0
      0,	// ssub_1
      0,	// ssub_2
      0,	// ssub_3
      0,	// dsub_2_then_ssub_0
      0,	// dsub_2_then_ssub_1
      0,	// dsub_3_then_ssub_0
      0,	// dsub_3_then_ssub_1
      0,	// dsub_7_then_ssub_0
      0,	// dsub_7_then_ssub_1
      0,	// dsub_6_then_ssub_0
      0,	// dsub_6_then_ssub_1
      0,	// dsub_5_then_ssub_0
      0,	// dsub_5_then_ssub_1
      0,	// dsub_4_then_ssub_0
      0,	// dsub_4_then_ssub_1
      0,	// dsub_0_dsub_2
      0,	// dsub_0_dsub_1_dsub_2
      0,	// dsub_1_dsub_3
      0,	// dsub_1_dsub_2_dsub_3
      0,	// dsub_1_dsub_2
      0,	// dsub_0_dsub_2_dsub_4
      0,	// dsub_0_dsub_2_dsub_4_dsub_6
      0,	// dsub_1_dsub_3_dsub_5
      0,	// dsub_1_dsub_3_dsub_5_dsub_7
      0,	// dsub_1_dsub_2_dsub_3_dsub_4
      0,	// dsub_2_dsub_4
      0,	// dsub_2_dsub_3_dsub_4
      0,	// dsub_2_dsub_4_dsub_6
      0,	// dsub_3_dsub_5
      0,	// dsub_3_dsub_4_dsub_5
      0,	// dsub_3_dsub_5_dsub_7
      0,	// dsub_3_dsub_4
      0,	// dsub_3_dsub_4_dsub_5_dsub_6
      0,	// dsub_4_dsub_6
      0,	// dsub_4_dsub_5_dsub_6
      0,	// dsub_5_dsub_7
      0,	// dsub_5_dsub_6_dsub_7
      0,	// dsub_5_dsub_6
      0,	// qsub_1_qsub_2
    },
    {	// GPRwithAPSR
      0,	// dsub_0
      0,	// dsub_1
      0,	// dsub_2
      0,	// dsub_3
      0,	// dsub_4
      0,	// dsub_5
      0,	// dsub_6
      0,	// dsub_7
      0,	// gsub_0
      0,	// gsub_1
      0,	// qqsub_0
      0,	// qqsub_1
      0,	// qsub_0
      0,	// qsub_1
      0,	// qsub_2
      0,	// qsub_3
      0,	// ssub_0
      0,	// ssub_1
      0,	// ssub_2
      0,	// ssub_3
      0,	// dsub_2_then_ssub_0
      0,	// dsub_2_then_ssub_1
      0,	// dsub_3_then_ssub_0
      0,	// dsub_3_then_ssub_1
      0,	// dsub_7_then_ssub_0
      0,	// dsub_7_then_ssub_1
      0,	// dsub_6_then_ssub_0
      0,	// dsub_6_then_ssub_1
      0,	// dsub_5_then_ssub_0
      0,	// dsub_5_then_ssub_1
      0,	// dsub_4_then_ssub_0
      0,	// dsub_4_then_ssub_1
      0,	// dsub_0_dsub_2
      0,	// dsub_0_dsub_1_dsub_2
      0,	// dsub_1_dsub_3
      0,	// dsub_1_dsub_2_dsub_3
      0,	// dsub_1_dsub_2
      0,	// dsub_0_dsub_2_dsub_4
      0,	// dsub_0_dsub_2_dsub_4_dsub_6
      0,	// dsub_1_dsub_3_dsub_5
      0,	// dsub_1_dsub_3_dsub_5_dsub_7
      0,	// dsub_1_dsub_2_dsub_3_dsub_4
      0,	// dsub_2_dsub_4
      0,	// dsub_2_dsub_3_dsub_4
      0,	// dsub_2_dsub_4_dsub_6
      0,	// dsub_3_dsub_5
      0,	// dsub_3_dsub_4_dsub_5
      0,	// dsub_3_dsub_5_dsub_7
      0,	// dsub_3_dsub_4
      0,	// dsub_3_dsub_4_dsub_5_dsub_6
      0,	// dsub_4_dsub_6
      0,	// dsub_4_dsub_5_dsub_6
      0,	// dsub_5_dsub_7
      0,	// dsub_5_dsub_6_dsub_7
      0,	// dsub_5_dsub_6
      0,	// qsub_1_qsub_2
    },
    {	// SPR_8
      0,	// dsub_0
      0,	// dsub_1
      0,	// dsub_2
      0,	// dsub_3
      0,	// dsub_4
      0,	// dsub_5
      0,	// dsub_6
      0,	// dsub_7
      0,	// gsub_0
      0,	// gsub_1
      0,	// qqsub_0
      0,	// qqsub_1
      0,	// qsub_0
      0,	// qsub_1
      0,	// qsub_2
      0,	// qsub_3
      0,	// ssub_0
      0,	// ssub_1
      0,	// ssub_2
      0,	// ssub_3
      0,	// dsub_2_then_ssub_0
      0,	// dsub_2_then_ssub_1
      0,	// dsub_3_then_ssub_0
      0,	// dsub_3_then_ssub_1
      0,	// dsub_7_then_ssub_0
      0,	// dsub_7_then_ssub_1
      0,	// dsub_6_then_ssub_0
      0,	// dsub_6_then_ssub_1
      0,	// dsub_5_then_ssub_0
      0,	// dsub_5_then_ssub_1
      0,	// dsub_4_then_ssub_0
      0,	// dsub_4_then_ssub_1
      0,	// dsub_0_dsub_2
      0,	// dsub_0_dsub_1_dsub_2
      0,	// dsub_1_dsub_3
      0,	// dsub_1_dsub_2_dsub_3
      0,	// dsub_1_dsub_2
      0,	// dsub_0_dsub_2_dsub_4
      0,	// dsub_0_dsub_2_dsub_4_dsub_6
      0,	// dsub_1_dsub_3_dsub_5
      0,	// dsub_1_dsub_3_dsub_5_dsub_7
      0,	// dsub_1_dsub_2_dsub_3_dsub_4
      0,	// dsub_2_dsub_4
      0,	// dsub_2_dsub_3_dsub_4
      0,	// dsub_2_dsub_4_dsub_6
      0,	// dsub_3_dsub_5
      0,	// dsub_3_dsub_4_dsub_5
      0,	// dsub_3_dsub_5_dsub_7
      0,	// dsub_3_dsub_4
      0,	// dsub_3_dsub_4_dsub_5_dsub_6
      0,	// dsub_4_dsub_6
      0,	// dsub_4_dsub_5_dsub_6
      0,	// dsub_5_dsub_7
      0,	// dsub_5_dsub_6_dsub_7
      0,	// dsub_5_dsub_6
      0,	// qsub_1_qsub_2
    },
    {	// GPRnopc
      0,	// dsub_0
      0,	// dsub_1
      0,	// dsub_2
      0,	// dsub_3
      0,	// dsub_4
      0,	// dsub_5
      0,	// dsub_6
      0,	// dsub_7
      0,	// gsub_0
      0,	// gsub_1
      0,	// qqsub_0
      0,	// qqsub_1
      0,	// qsub_0
      0,	// qsub_1
      0,	// qsub_2
      0,	// qsub_3
      0,	// ssub_0
      0,	// ssub_1
      0,	// ssub_2
      0,	// ssub_3
      0,	// dsub_2_then_ssub_0
      0,	// dsub_2_then_ssub_1
      0,	// dsub_3_then_ssub_0
      0,	// dsub_3_then_ssub_1
      0,	// dsub_7_then_ssub_0
      0,	// dsub_7_then_ssub_1
      0,	// dsub_6_then_ssub_0
      0,	// dsub_6_then_ssub_1
      0,	// dsub_5_then_ssub_0
      0,	// dsub_5_then_ssub_1
      0,	// dsub_4_then_ssub_0
      0,	// dsub_4_then_ssub_1
      0,	// dsub_0_dsub_2
      0,	// dsub_0_dsub_1_dsub_2
      0,	// dsub_1_dsub_3
      0,	// dsub_1_dsub_2_dsub_3
      0,	// dsub_1_dsub_2
      0,	// dsub_0_dsub_2_dsub_4
      0,	// dsub_0_dsub_2_dsub_4_dsub_6
      0,	// dsub_1_dsub_3_dsub_5
      0,	// dsub_1_dsub_3_dsub_5_dsub_7
      0,	// dsub_1_dsub_2_dsub_3_dsub_4
      0,	// dsub_2_dsub_4
      0,	// dsub_2_dsub_3_dsub_4
      0,	// dsub_2_dsub_4_dsub_6
      0,	// dsub_3_dsub_5
      0,	// dsub_3_dsub_4_dsub_5
      0,	// dsub_3_dsub_5_dsub_7
      0,	// dsub_3_dsub_4
      0,	// dsub_3_dsub_4_dsub_5_dsub_6
      0,	// dsub_4_dsub_6
      0,	// dsub_4_dsub_5_dsub_6
      0,	// dsub_5_dsub_7
      0,	// dsub_5_dsub_6_dsub_7
      0,	// dsub_5_dsub_6
      0,	// qsub_1_qsub_2
    },
    {	// rGPR
      0,	// dsub_0
      0,	// dsub_1
      0,	// dsub_2
      0,	// dsub_3
      0,	// dsub_4
      0,	// dsub_5
      0,	// dsub_6
      0,	// dsub_7
      0,	// gsub_0
      0,	// gsub_1
      0,	// qqsub_0
      0,	// qqsub_1
      0,	// qsub_0
      0,	// qsub_1
      0,	// qsub_2
      0,	// qsub_3
      0,	// ssub_0
      0,	// ssub_1
      0,	// ssub_2
      0,	// ssub_3
      0,	// dsub_2_then_ssub_0
      0,	// dsub_2_then_ssub_1
      0,	// dsub_3_then_ssub_0
      0,	// dsub_3_then_ssub_1
      0,	// dsub_7_then_ssub_0
      0,	// dsub_7_then_ssub_1
      0,	// dsub_6_then_ssub_0
      0,	// dsub_6_then_ssub_1
      0,	// dsub_5_then_ssub_0
      0,	// dsub_5_then_ssub_1
      0,	// dsub_4_then_ssub_0
      0,	// dsub_4_then_ssub_1
      0,	// dsub_0_dsub_2
      0,	// dsub_0_dsub_1_dsub_2
      0,	// dsub_1_dsub_3
      0,	// dsub_1_dsub_2_dsub_3
      0,	// dsub_1_dsub_2
      0,	// dsub_0_dsub_2_dsub_4
      0,	// dsub_0_dsub_2_dsub_4_dsub_6
      0,	// dsub_1_dsub_3_dsub_5
      0,	// dsub_1_dsub_3_dsub_5_dsub_7
      0,	// dsub_1_dsub_2_dsub_3_dsub_4
      0,	// dsub_2_dsub_4
      0,	// dsub_2_dsub_3_dsub_4
      0,	// dsub_2_dsub_4_dsub_6
      0,	// dsub_3_dsub_5
      0,	// dsub_3_dsub_4_dsub_5
      0,	// dsub_3_dsub_5_dsub_7
      0,	// dsub_3_dsub_4
      0,	// dsub_3_dsub_4_dsub_5_dsub_6
      0,	// dsub_4_dsub_6
      0,	// dsub_4_dsub_5_dsub_6
      0,	// dsub_5_dsub_7
      0,	// dsub_5_dsub_6_dsub_7
      0,	// dsub_5_dsub_6
      0,	// qsub_1_qsub_2
    },
    {	// hGPR
      0,	// dsub_0
      0,	// dsub_1
      0,	// dsub_2
      0,	// dsub_3
      0,	// dsub_4
      0,	// dsub_5
      0,	// dsub_6
      0,	// dsub_7
      0,	// gsub_0
      0,	// gsub_1
      0,	// qqsub_0
      0,	// qqsub_1
      0,	// qsub_0
      0,	// qsub_1
      0,	// qsub_2
      0,	// qsub_3
      0,	// ssub_0
      0,	// ssub_1
      0,	// ssub_2
      0,	// ssub_3
      0,	// dsub_2_then_ssub_0
      0,	// dsub_2_then_ssub_1
      0,	// dsub_3_then_ssub_0
      0,	// dsub_3_then_ssub_1
      0,	// dsub_7_then_ssub_0
      0,	// dsub_7_then_ssub_1
      0,	// dsub_6_then_ssub_0
      0,	// dsub_6_then_ssub_1
      0,	// dsub_5_then_ssub_0
      0,	// dsub_5_then_ssub_1
      0,	// dsub_4_then_ssub_0
      0,	// dsub_4_then_ssub_1
      0,	// dsub_0_dsub_2
      0,	// dsub_0_dsub_1_dsub_2
      0,	// dsub_1_dsub_3
      0,	// dsub_1_dsub_2_dsub_3
      0,	// dsub_1_dsub_2
      0,	// dsub_0_dsub_2_dsub_4
      0,	// dsub_0_dsub_2_dsub_4_dsub_6
      0,	// dsub_1_dsub_3_dsub_5
      0,	// dsub_1_dsub_3_dsub_5_dsub_7
      0,	// dsub_1_dsub_2_dsub_3_dsub_4
      0,	// dsub_2_dsub_4
      0,	// dsub_2_dsub_3_dsub_4
      0,	// dsub_2_dsub_4_dsub_6
      0,	// dsub_3_dsub_5
      0,	// dsub_3_dsub_4_dsub_5
      0,	// dsub_3_dsub_5_dsub_7
      0,	// dsub_3_dsub_4
      0,	// dsub_3_dsub_4_dsub_5_dsub_6
      0,	// dsub_4_dsub_6
      0,	// dsub_4_dsub_5_dsub_6
      0,	// dsub_5_dsub_7
      0,	// dsub_5_dsub_6_dsub_7
      0,	// dsub_5_dsub_6
      0,	// qsub_1_qsub_2
    },
    {	// tGPR
      0,	// dsub_0
      0,	// dsub_1
      0,	// dsub_2
      0,	// dsub_3
      0,	// dsub_4
      0,	// dsub_5
      0,	// dsub_6
      0,	// dsub_7
      0,	// gsub_0
      0,	// gsub_1
      0,	// qqsub_0
      0,	// qqsub_1
      0,	// qsub_0
      0,	// qsub_1
      0,	// qsub_2
      0,	// qsub_3
      0,	// ssub_0
      0,	// ssub_1
      0,	// ssub_2
      0,	// ssub_3
      0,	// dsub_2_then_ssub_0
      0,	// dsub_2_then_ssub_1
      0,	// dsub_3_then_ssub_0
      0,	// dsub_3_then_ssub_1
      0,	// dsub_7_then_ssub_0
      0,	// dsub_7_then_ssub_1
      0,	// dsub_6_then_ssub_0
      0,	// dsub_6_then_ssub_1
      0,	// dsub_5_then_ssub_0
      0,	// dsub_5_then_ssub_1
      0,	// dsub_4_then_ssub_0
      0,	// dsub_4_then_ssub_1
      0,	// dsub_0_dsub_2
      0,	// dsub_0_dsub_1_dsub_2
      0,	// dsub_1_dsub_3
      0,	// dsub_1_dsub_2_dsub_3
      0,	// dsub_1_dsub_2
      0,	// dsub_0_dsub_2_dsub_4
      0,	// dsub_0_dsub_2_dsub_4_dsub_6
      0,	// dsub_1_dsub_3_dsub_5
      0,	// dsub_1_dsub_3_dsub_5_dsub_7
      0,	// dsub_1_dsub_2_dsub_3_dsub_4
      0,	// dsub_2_dsub_4
      0,	// dsub_2_dsub_3_dsub_4
      0,	// dsub_2_dsub_4_dsub_6
      0,	// dsub_3_dsub_5
      0,	// dsub_3_dsub_4_dsub_5
      0,	// dsub_3_dsub_5_dsub_7
      0,	// dsub_3_dsub_4
      0,	// dsub_3_dsub_4_dsub_5_dsub_6
      0,	// dsub_4_dsub_6
      0,	// dsub_4_dsub_5_dsub_6
      0,	// dsub_5_dsub_7
      0,	// dsub_5_dsub_6_dsub_7
      0,	// dsub_5_dsub_6
      0,	// qsub_1_qsub_2
    },
    {	// GPRnopc_and_hGPR
      0,	// dsub_0
      0,	// dsub_1
      0,	// dsub_2
      0,	// dsub_3
      0,	// dsub_4
      0,	// dsub_5
      0,	// dsub_6
      0,	// dsub_7
      0,	// gsub_0
      0,	// gsub_1
      0,	// qqsub_0
      0,	// qqsub_1
      0,	// qsub_0
      0,	// qsub_1
      0,	// qsub_2
      0,	// qsub_3
      0,	// ssub_0
      0,	// ssub_1
      0,	// ssub_2
      0,	// ssub_3
      0,	// dsub_2_then_ssub_0
      0,	// dsub_2_then_ssub_1
      0,	// dsub_3_then_ssub_0
      0,	// dsub_3_then_ssub_1
      0,	// dsub_7_then_ssub_0
      0,	// dsub_7_then_ssub_1
      0,	// dsub_6_then_ssub_0
      0,	// dsub_6_then_ssub_1
      0,	// dsub_5_then_ssub_0
      0,	// dsub_5_then_ssub_1
      0,	// dsub_4_then_ssub_0
      0,	// dsub_4_then_ssub_1
      0,	// dsub_0_dsub_2
      0,	// dsub_0_dsub_1_dsub_2
      0,	// dsub_1_dsub_3
      0,	// dsub_1_dsub_2_dsub_3
      0,	// dsub_1_dsub_2
      0,	// dsub_0_dsub_2_dsub_4
      0,	// dsub_0_dsub_2_dsub_4_dsub_6
      0,	// dsub_1_dsub_3_dsub_5
      0,	// dsub_1_dsub_3_dsub_5_dsub_7
      0,	// dsub_1_dsub_2_dsub_3_dsub_4
      0,	// dsub_2_dsub_4
      0,	// dsub_2_dsub_3_dsub_4
      0,	// dsub_2_dsub_4_dsub_6
      0,	// dsub_3_dsub_5
      0,	// dsub_3_dsub_4_dsub_5
      0,	// dsub_3_dsub_5_dsub_7
      0,	// dsub_3_dsub_4
      0,	// dsub_3_dsub_4_dsub_5_dsub_6
      0,	// dsub_4_dsub_6
      0,	// dsub_4_dsub_5_dsub_6
      0,	// dsub_5_dsub_7
      0,	// dsub_5_dsub_6_dsub_7
      0,	// dsub_5_dsub_6
      0,	// qsub_1_qsub_2
    },
    {	// hGPR_and_rGPR
      0,	// dsub_0
      0,	// dsub_1
      0,	// dsub_2
      0,	// dsub_3
      0,	// dsub_4
      0,	// dsub_5
      0,	// dsub_6
      0,	// dsub_7
      0,	// gsub_0
      0,	// gsub_1
      0,	// qqsub_0
      0,	// qqsub_1
      0,	// qsub_0
      0,	// qsub_1
      0,	// qsub_2
      0,	// qsub_3
      0,	// ssub_0
      0,	// ssub_1
      0,	// ssub_2
      0,	// ssub_3
      0,	// dsub_2_then_ssub_0
      0,	// dsub_2_then_ssub_1
      0,	// dsub_3_then_ssub_0
      0,	// dsub_3_then_ssub_1
      0,	// dsub_7_then_ssub_0
      0,	// dsub_7_then_ssub_1
      0,	// dsub_6_then_ssub_0
      0,	// dsub_6_then_ssub_1
      0,	// dsub_5_then_ssub_0
      0,	// dsub_5_then_ssub_1
      0,	// dsub_4_then_ssub_0
      0,	// dsub_4_then_ssub_1
      0,	// dsub_0_dsub_2
      0,	// dsub_0_dsub_1_dsub_2
      0,	// dsub_1_dsub_3
      0,	// dsub_1_dsub_2_dsub_3
      0,	// dsub_1_dsub_2
      0,	// dsub_0_dsub_2_dsub_4
      0,	// dsub_0_dsub_2_dsub_4_dsub_6
      0,	// dsub_1_dsub_3_dsub_5
      0,	// dsub_1_dsub_3_dsub_5_dsub_7
      0,	// dsub_1_dsub_2_dsub_3_dsub_4
      0,	// dsub_2_dsub_4
      0,	// dsub_2_dsub_3_dsub_4
      0,	// dsub_2_dsub_4_dsub_6
      0,	// dsub_3_dsub_5
      0,	// dsub_3_dsub_4_dsub_5
      0,	// dsub_3_dsub_5_dsub_7
      0,	// dsub_3_dsub_4
      0,	// dsub_3_dsub_4_dsub_5_dsub_6
      0,	// dsub_4_dsub_6
      0,	// dsub_4_dsub_5_dsub_6
      0,	// dsub_5_dsub_7
      0,	// dsub_5_dsub_6_dsub_7
      0,	// dsub_5_dsub_6
      0,	// qsub_1_qsub_2
    },
    {	// tcGPR
      0,	// dsub_0
      0,	// dsub_1
      0,	// dsub_2
      0,	// dsub_3
      0,	// dsub_4
      0,	// dsub_5
      0,	// dsub_6
      0,	// dsub_7
      0,	// gsub_0
      0,	// gsub_1
      0,	// qqsub_0
      0,	// qqsub_1
      0,	// qsub_0
      0,	// qsub_1
      0,	// qsub_2
      0,	// qsub_3
      0,	// ssub_0
      0,	// ssub_1
      0,	// ssub_2
      0,	// ssub_3
      0,	// dsub_2_then_ssub_0
      0,	// dsub_2_then_ssub_1
      0,	// dsub_3_then_ssub_0
      0,	// dsub_3_then_ssub_1
      0,	// dsub_7_then_ssub_0
      0,	// dsub_7_then_ssub_1
      0,	// dsub_6_then_ssub_0
      0,	// dsub_6_then_ssub_1
      0,	// dsub_5_then_ssub_0
      0,	// dsub_5_then_ssub_1
      0,	// dsub_4_then_ssub_0
      0,	// dsub_4_then_ssub_1
      0,	// dsub_0_dsub_2
      0,	// dsub_0_dsub_1_dsub_2
      0,	// dsub_1_dsub_3
      0,	// dsub_1_dsub_2_dsub_3
      0,	// dsub_1_dsub_2
      0,	// dsub_0_dsub_2_dsub_4
      0,	// dsub_0_dsub_2_dsub_4_dsub_6
      0,	// dsub_1_dsub_3_dsub_5
      0,	// dsub_1_dsub_3_dsub_5_dsub_7
      0,	// dsub_1_dsub_2_dsub_3_dsub_4
      0,	// dsub_2_dsub_4
      0,	// dsub_2_dsub_3_dsub_4
      0,	// dsub_2_dsub_4_dsub_6
      0,	// dsub_3_dsub_5
      0,	// dsub_3_dsub_4_dsub_5
      0,	// dsub_3_dsub_5_dsub_7
      0,	// dsub_3_dsub_4
      0,	// dsub_3_dsub_4_dsub_5_dsub_6
      0,	// dsub_4_dsub_6
      0,	// dsub_4_dsub_5_dsub_6
      0,	// dsub_5_dsub_7
      0,	// dsub_5_dsub_6_dsub_7
      0,	// dsub_5_dsub_6
      0,	// qsub_1_qsub_2
    },
    {	// tGPR_and_tcGPR
      0,	// dsub_0
      0,	// dsub_1
      0,	// dsub_2
      0,	// dsub_3
      0,	// dsub_4
      0,	// dsub_5
      0,	// dsub_6
      0,	// dsub_7
      0,	// gsub_0
      0,	// gsub_1
      0,	// qqsub_0
      0,	// qqsub_1
      0,	// qsub_0
      0,	// qsub_1
      0,	// qsub_2
      0,	// qsub_3
      0,	// ssub_0
      0,	// ssub_1
      0,	// ssub_2
      0,	// ssub_3
      0,	// dsub_2_then_ssub_0
      0,	// dsub_2_then_ssub_1
      0,	// dsub_3_then_ssub_0
      0,	// dsub_3_then_ssub_1
      0,	// dsub_7_then_ssub_0
      0,	// dsub_7_then_ssub_1
      0,	// dsub_6_then_ssub_0
      0,	// dsub_6_then_ssub_1
      0,	// dsub_5_then_ssub_0
      0,	// dsub_5_then_ssub_1
      0,	// dsub_4_then_ssub_0
      0,	// dsub_4_then_ssub_1
      0,	// dsub_0_dsub_2
      0,	// dsub_0_dsub_1_dsub_2
      0,	// dsub_1_dsub_3
      0,	// dsub_1_dsub_2_dsub_3
      0,	// dsub_1_dsub_2
      0,	// dsub_0_dsub_2_dsub_4
      0,	// dsub_0_dsub_2_dsub_4_dsub_6
      0,	// dsub_1_dsub_3_dsub_5
      0,	// dsub_1_dsub_3_dsub_5_dsub_7
      0,	// dsub_1_dsub_2_dsub_3_dsub_4
      0,	// dsub_2_dsub_4
      0,	// dsub_2_dsub_3_dsub_4
      0,	// dsub_2_dsub_4_dsub_6
      0,	// dsub_3_dsub_5
      0,	// dsub_3_dsub_4_dsub_5
      0,	// dsub_3_dsub_5_dsub_7
      0,	// dsub_3_dsub_4
      0,	// dsub_3_dsub_4_dsub_5_dsub_6
      0,	// dsub_4_dsub_6
      0,	// dsub_4_dsub_5_dsub_6
      0,	// dsub_5_dsub_7
      0,	// dsub_5_dsub_6_dsub_7
      0,	// dsub_5_dsub_6
      0,	// qsub_1_qsub_2
    },
    {	// hGPR_and_tcGPR
      0,	// dsub_0
      0,	// dsub_1
      0,	// dsub_2
      0,	// dsub_3
      0,	// dsub_4
      0,	// dsub_5
      0,	// dsub_6
      0,	// dsub_7
      0,	// gsub_0
      0,	// gsub_1
      0,	// qqsub_0
      0,	// qqsub_1
      0,	// qsub_0
      0,	// qsub_1
      0,	// qsub_2
      0,	// qsub_3
      0,	// ssub_0
      0,	// ssub_1
      0,	// ssub_2
      0,	// ssub_3
      0,	// dsub_2_then_ssub_0
      0,	// dsub_2_then_ssub_1
      0,	// dsub_3_then_ssub_0
      0,	// dsub_3_then_ssub_1
      0,	// dsub_7_then_ssub_0
      0,	// dsub_7_then_ssub_1
      0,	// dsub_6_then_ssub_0
      0,	// dsub_6_then_ssub_1
      0,	// dsub_5_then_ssub_0
      0,	// dsub_5_then_ssub_1
      0,	// dsub_4_then_ssub_0
      0,	// dsub_4_then_ssub_1
      0,	// dsub_0_dsub_2
      0,	// dsub_0_dsub_1_dsub_2
      0,	// dsub_1_dsub_3
      0,	// dsub_1_dsub_2_dsub_3
      0,	// dsub_1_dsub_2
      0,	// dsub_0_dsub_2_dsub_4
      0,	// dsub_0_dsub_2_dsub_4_dsub_6
      0,	// dsub_1_dsub_3_dsub_5
      0,	// dsub_1_dsub_3_dsub_5_dsub_7
      0,	// dsub_1_dsub_2_dsub_3_dsub_4
      0,	// dsub_2_dsub_4
      0,	// dsub_2_dsub_3_dsub_4
      0,	// dsub_2_dsub_4_dsub_6
      0,	// dsub_3_dsub_5
      0,	// dsub_3_dsub_4_dsub_5
      0,	// dsub_3_dsub_5_dsub_7
      0,	// dsub_3_dsub_4
      0,	// dsub_3_dsub_4_dsub_5_dsub_6
      0,	// dsub_4_dsub_6
      0,	// dsub_4_dsub_5_dsub_6
      0,	// dsub_5_dsub_7
      0,	// dsub_5_dsub_6_dsub_7
      0,	// dsub_5_dsub_6
      0,	// qsub_1_qsub_2
    },
    {	// CCR
      0,	// dsub_0
      0,	// dsub_1
      0,	// dsub_2
      0,	// dsub_3
      0,	// dsub_4
      0,	// dsub_5
      0,	// dsub_6
      0,	// dsub_7
      0,	// gsub_0
      0,	// gsub_1
      0,	// qqsub_0
      0,	// qqsub_1
      0,	// qsub_0
      0,	// qsub_1
      0,	// qsub_2
      0,	// qsub_3
      0,	// ssub_0
      0,	// ssub_1
      0,	// ssub_2
      0,	// ssub_3
      0,	// dsub_2_then_ssub_0
      0,	// dsub_2_then_ssub_1
      0,	// dsub_3_then_ssub_0
      0,	// dsub_3_then_ssub_1
      0,	// dsub_7_then_ssub_0
      0,	// dsub_7_then_ssub_1
      0,	// dsub_6_then_ssub_0
      0,	// dsub_6_then_ssub_1
      0,	// dsub_5_then_ssub_0
      0,	// dsub_5_then_ssub_1
      0,	// dsub_4_then_ssub_0
      0,	// dsub_4_then_ssub_1
      0,	// dsub_0_dsub_2
      0,	// dsub_0_dsub_1_dsub_2
      0,	// dsub_1_dsub_3
      0,	// dsub_1_dsub_2_dsub_3
      0,	// dsub_1_dsub_2
      0,	// dsub_0_dsub_2_dsub_4
      0,	// dsub_0_dsub_2_dsub_4_dsub_6
      0,	// dsub_1_dsub_3_dsub_5
      0,	// dsub_1_dsub_3_dsub_5_dsub_7
      0,	// dsub_1_dsub_2_dsub_3_dsub_4
      0,	// dsub_2_dsub_4
      0,	// dsub_2_dsub_3_dsub_4
      0,	// dsub_2_dsub_4_dsub_6
      0,	// dsub_3_dsub_5
      0,	// dsub_3_dsub_4_dsub_5
      0,	// dsub_3_dsub_5_dsub_7
      0,	// dsub_3_dsub_4
      0,	// dsub_3_dsub_4_dsub_5_dsub_6
      0,	// dsub_4_dsub_6
      0,	// dsub_4_dsub_5_dsub_6
      0,	// dsub_5_dsub_7
      0,	// dsub_5_dsub_6_dsub_7
      0,	// dsub_5_dsub_6
      0,	// qsub_1_qsub_2
    },
    {	// GPRsp
      0,	// dsub_0
      0,	// dsub_1
      0,	// dsub_2
      0,	// dsub_3
      0,	// dsub_4
      0,	// dsub_5
      0,	// dsub_6
      0,	// dsub_7
      0,	// gsub_0
      0,	// gsub_1
      0,	// qqsub_0
      0,	// qqsub_1
      0,	// qsub_0
      0,	// qsub_1
      0,	// qsub_2
      0,	// qsub_3
      0,	// ssub_0
      0,	// ssub_1
      0,	// ssub_2
      0,	// ssub_3
      0,	// dsub_2_then_ssub_0
      0,	// dsub_2_then_ssub_1
      0,	// dsub_3_then_ssub_0
      0,	// dsub_3_then_ssub_1
      0,	// dsub_7_then_ssub_0
      0,	// dsub_7_then_ssub_1
      0,	// dsub_6_then_ssub_0
      0,	// dsub_6_then_ssub_1
      0,	// dsub_5_then_ssub_0
      0,	// dsub_5_then_ssub_1
      0,	// dsub_4_then_ssub_0
      0,	// dsub_4_then_ssub_1
      0,	// dsub_0_dsub_2
      0,	// dsub_0_dsub_1_dsub_2
      0,	// dsub_1_dsub_3
      0,	// dsub_1_dsub_2_dsub_3
      0,	// dsub_1_dsub_2
      0,	// dsub_0_dsub_2_dsub_4
      0,	// dsub_0_dsub_2_dsub_4_dsub_6
      0,	// dsub_1_dsub_3_dsub_5
      0,	// dsub_1_dsub_3_dsub_5_dsub_7
      0,	// dsub_1_dsub_2_dsub_3_dsub_4
      0,	// dsub_2_dsub_4
      0,	// dsub_2_dsub_3_dsub_4
      0,	// dsub_2_dsub_4_dsub_6
      0,	// dsub_3_dsub_5
      0,	// dsub_3_dsub_4_dsub_5
      0,	// dsub_3_dsub_5_dsub_7
      0,	// dsub_3_dsub_4
      0,	// dsub_3_dsub_4_dsub_5_dsub_6
      0,	// dsub_4_dsub_6
      0,	// dsub_4_dsub_5_dsub_6
      0,	// dsub_5_dsub_7
      0,	// dsub_5_dsub_6_dsub_7
      0,	// dsub_5_dsub_6
      0,	// qsub_1_qsub_2
    },
    {	// DPR
      0,	// dsub_0
      0,	// dsub_1
      0,	// dsub_2
      0,	// dsub_3
      0,	// dsub_4
      0,	// dsub_5
      0,	// dsub_6
      0,	// dsub_7
      0,	// gsub_0
      0,	// gsub_1
      0,	// qqsub_0
      0,	// qqsub_1
      0,	// qsub_0
      0,	// qsub_1
      0,	// qsub_2
      0,	// qsub_3
      17,	// ssub_0 -> DPR_VFP2
      17,	// ssub_1 -> DPR_VFP2
      0,	// ssub_2
      0,	// ssub_3
      0,	// dsub_2_then_ssub_0
      0,	// dsub_2_then_ssub_1
      0,	// dsub_3_then_ssub_0
      0,	// dsub_3_then_ssub_1
      0,	// dsub_7_then_ssub_0
      0,	// dsub_7_then_ssub_1
      0,	// dsub_6_then_ssub_0
      0,	// dsub_6_then_ssub_1
      0,	// dsub_5_then_ssub_0
      0,	// dsub_5_then_ssub_1
      0,	// dsub_4_then_ssub_0
      0,	// dsub_4_then_ssub_1
      0,	// dsub_0_dsub_2
      0,	// dsub_0_dsub_1_dsub_2
      0,	// dsub_1_dsub_3
      0,	// dsub_1_dsub_2_dsub_3
      0,	// dsub_1_dsub_2
      0,	// dsub_0_dsub_2_dsub_4
      0,	// dsub_0_dsub_2_dsub_4_dsub_6
      0,	// dsub_1_dsub_3_dsub_5
      0,	// dsub_1_dsub_3_dsub_5_dsub_7
      0,	// dsub_1_dsub_2_dsub_3_dsub_4
      0,	// dsub_2_dsub_4
      0,	// dsub_2_dsub_3_dsub_4
      0,	// dsub_2_dsub_4_dsub_6
      0,	// dsub_3_dsub_5
      0,	// dsub_3_dsub_4_dsub_5
      0,	// dsub_3_dsub_5_dsub_7
      0,	// dsub_3_dsub_4
      0,	// dsub_3_dsub_4_dsub_5_dsub_6
      0,	// dsub_4_dsub_6
      0,	// dsub_4_dsub_5_dsub_6
      0,	// dsub_5_dsub_7
      0,	// dsub_5_dsub_6_dsub_7
      0,	// dsub_5_dsub_6
      0,	// qsub_1_qsub_2
    },
    {	// DPR_VFP2
      0,	// dsub_0
      0,	// dsub_1
      0,	// dsub_2
      0,	// dsub_3
      0,	// dsub_4
      0,	// dsub_5
      0,	// dsub_6
      0,	// dsub_7
      0,	// gsub_0
      0,	// gsub_1
      0,	// qqsub_0
      0,	// qqsub_1
      0,	// qsub_0
      0,	// qsub_1
      0,	// qsub_2
      0,	// qsub_3
      17,	// ssub_0 -> DPR_VFP2
      17,	// ssub_1 -> DPR_VFP2
      0,	// ssub_2
      0,	// ssub_3
      0,	// dsub_2_then_ssub_0
      0,	// dsub_2_then_ssub_1
      0,	// dsub_3_then_ssub_0
      0,	// dsub_3_then_ssub_1
      0,	// dsub_7_then_ssub_0
      0,	// dsub_7_then_ssub_1
      0,	// dsub_6_then_ssub_0
      0,	// dsub_6_then_ssub_1
      0,	// dsub_5_then_ssub_0
      0,	// dsub_5_then_ssub_1
      0,	// dsub_4_then_ssub_0
      0,	// dsub_4_then_ssub_1
      0,	// dsub_0_dsub_2
      0,	// dsub_0_dsub_1_dsub_2
      0,	// dsub_1_dsub_3
      0,	// dsub_1_dsub_2_dsub_3
      0,	// dsub_1_dsub_2
      0,	// dsub_0_dsub_2_dsub_4
      0,	// dsub_0_dsub_2_dsub_4_dsub_6
      0,	// dsub_1_dsub_3_dsub_5
      0,	// dsub_1_dsub_3_dsub_5_dsub_7
      0,	// dsub_1_dsub_2_dsub_3_dsub_4
      0,	// dsub_2_dsub_4
      0,	// dsub_2_dsub_3_dsub_4
      0,	// dsub_2_dsub_4_dsub_6
      0,	// dsub_3_dsub_5
      0,	// dsub_3_dsub_4_dsub_5
      0,	// dsub_3_dsub_5_dsub_7
      0,	// dsub_3_dsub_4
      0,	// dsub_3_dsub_4_dsub_5_dsub_6
      0,	// dsub_4_dsub_6
      0,	// dsub_4_dsub_5_dsub_6
      0,	// dsub_5_dsub_7
      0,	// dsub_5_dsub_6_dsub_7
      0,	// dsub_5_dsub_6
      0,	// qsub_1_qsub_2
    },
    {	// DPR_8
      0,	// dsub_0
      0,	// dsub_1
      0,	// dsub_2
      0,	// dsub_3
      0,	// dsub_4
      0,	// dsub_5
      0,	// dsub_6
      0,	// dsub_7
      0,	// gsub_0
      0,	// gsub_1
      0,	// qqsub_0
      0,	// qqsub_1
      0,	// qsub_0
      0,	// qsub_1
      0,	// qsub_2
      0,	// qsub_3
      18,	// ssub_0 -> DPR_8
      18,	// ssub_1 -> DPR_8
      0,	// ssub_2
      0,	// ssub_3
      0,	// dsub_2_then_ssub_0
      0,	// dsub_2_then_ssub_1
      0,	// dsub_3_then_ssub_0
      0,	// dsub_3_then_ssub_1
      0,	// dsub_7_then_ssub_0
      0,	// dsub_7_then_ssub_1
      0,	// dsub_6_then_ssub_0
      0,	// dsub_6_then_ssub_1
      0,	// dsub_5_then_ssub_0
      0,	// dsub_5_then_ssub_1
      0,	// dsub_4_then_ssub_0
      0,	// dsub_4_then_ssub_1
      0,	// dsub_0_dsub_2
      0,	// dsub_0_dsub_1_dsub_2
      0,	// dsub_1_dsub_3
      0,	// dsub_1_dsub_2_dsub_3
      0,	// dsub_1_dsub_2
      0,	// dsub_0_dsub_2_dsub_4
      0,	// dsub_0_dsub_2_dsub_4_dsub_6
      0,	// dsub_1_dsub_3_dsub_5
      0,	// dsub_1_dsub_3_dsub_5_dsub_7
      0,	// dsub_1_dsub_2_dsub_3_dsub_4
      0,	// dsub_2_dsub_4
      0,	// dsub_2_dsub_3_dsub_4
      0,	// dsub_2_dsub_4_dsub_6
      0,	// dsub_3_dsub_5
      0,	// dsub_3_dsub_4_dsub_5
      0,	// dsub_3_dsub_5_dsub_7
      0,	// dsub_3_dsub_4
      0,	// dsub_3_dsub_4_dsub_5_dsub_6
      0,	// dsub_4_dsub_6
      0,	// dsub_4_dsub_5_dsub_6
      0,	// dsub_5_dsub_7
      0,	// dsub_5_dsub_6_dsub_7
      0,	// dsub_5_dsub_6
      0,	// qsub_1_qsub_2
    },
    {	// GPRPair
      0,	// dsub_0
      0,	// dsub_1
      0,	// dsub_2
      0,	// dsub_3
      0,	// dsub_4
      0,	// dsub_5
      0,	// dsub_6
      0,	// dsub_7
      19,	// gsub_0 -> GPRPair
      19,	// gsub_1 -> GPRPair
      0,	// qqsub_0
      0,	// qqsub_1
      0,	// qsub_0
      0,	// qsub_1
      0,	// qsub_2
      0,	// qsub_3
      0,	// ssub_0
      0,	// ssub_1
      0,	// ssub_2
      0,	// ssub_3
      0,	// dsub_2_then_ssub_0
      0,	// dsub_2_then_ssub_1
      0,	// dsub_3_then_ssub_0
      0,	// dsub_3_then_ssub_1
      0,	// dsub_7_then_ssub_0
      0,	// dsub_7_then_ssub_1
      0,	// dsub_6_then_ssub_0
      0,	// dsub_6_then_ssub_1
      0,	// dsub_5_then_ssub_0
      0,	// dsub_5_then_ssub_1
      0,	// dsub_4_then_ssub_0
      0,	// dsub_4_then_ssub_1
      0,	// dsub_0_dsub_2
      0,	// dsub_0_dsub_1_dsub_2
      0,	// dsub_1_dsub_3
      0,	// dsub_1_dsub_2_dsub_3
      0,	// dsub_1_dsub_2
      0,	// dsub_0_dsub_2_dsub_4
      0,	// dsub_0_dsub_2_dsub_4_dsub_6
      0,	// dsub_1_dsub_3_dsub_5
      0,	// dsub_1_dsub_3_dsub_5_dsub_7
      0,	// dsub_1_dsub_2_dsub_3_dsub_4
      0,	// dsub_2_dsub_4
      0,	// dsub_2_dsub_3_dsub_4
      0,	// dsub_2_dsub_4_dsub_6
      0,	// dsub_3_dsub_5
      0,	// dsub_3_dsub_4_dsub_5
      0,	// dsub_3_dsub_5_dsub_7
      0,	// dsub_3_dsub_4
      0,	// dsub_3_dsub_4_dsub_5_dsub_6
      0,	// dsub_4_dsub_6
      0,	// dsub_4_dsub_5_dsub_6
      0,	// dsub_5_dsub_7
      0,	// dsub_5_dsub_6_dsub_7
      0,	// dsub_5_dsub_6
      0,	// qsub_1_qsub_2
    },
    {	// GPRPair_with_gsub_1_in_rGPR
      0,	// dsub_0
      0,	// dsub_1
      0,	// dsub_2
      0,	// dsub_3
      0,	// dsub_4
      0,	// dsub_5
      0,	// dsub_6
      0,	// dsub_7
      20,	// gsub_0 -> GPRPair_with_gsub_1_in_rGPR
      20,	// gsub_1 -> GPRPair_with_gsub_1_in_rGPR
      0,	// qqsub_0
      0,	// qqsub_1
      0,	// qsub_0
      0,	// qsub_1
      0,	// qsub_2
      0,	// qsub_3
      0,	// ssub_0
      0,	// ssub_1
      0,	// ssub_2
      0,	// ssub_3
      0,	// dsub_2_then_ssub_0
      0,	// dsub_2_then_ssub_1
      0,	// dsub_3_then_ssub_0
      0,	// dsub_3_then_ssub_1
      0,	// dsub_7_then_ssub_0
      0,	// dsub_7_then_ssub_1
      0,	// dsub_6_then_ssub_0
      0,	// dsub_6_then_ssub_1
      0,	// dsub_5_then_ssub_0
      0,	// dsub_5_then_ssub_1
      0,	// dsub_4_then_ssub_0
      0,	// dsub_4_then_ssub_1
      0,	// dsub_0_dsub_2
      0,	// dsub_0_dsub_1_dsub_2
      0,	// dsub_1_dsub_3
      0,	// dsub_1_dsub_2_dsub_3
      0,	// dsub_1_dsub_2
      0,	// dsub_0_dsub_2_dsub_4
      0,	// dsub_0_dsub_2_dsub_4_dsub_6
      0,	// dsub_1_dsub_3_dsub_5
      0,	// dsub_1_dsub_3_dsub_5_dsub_7
      0,	// dsub_1_dsub_2_dsub_3_dsub_4
      0,	// dsub_2_dsub_4
      0,	// dsub_2_dsub_3_dsub_4
      0,	// dsub_2_dsub_4_dsub_6
      0,	// dsub_3_dsub_5
      0,	// dsub_3_dsub_4_dsub_5
      0,	// dsub_3_dsub_5_dsub_7
      0,	// dsub_3_dsub_4
      0,	// dsub_3_dsub_4_dsub_5_dsub_6
      0,	// dsub_4_dsub_6
      0,	// dsub_4_dsub_5_dsub_6
      0,	// dsub_5_dsub_7
      0,	// dsub_5_dsub_6_dsub_7
      0,	// dsub_5_dsub_6
      0,	// qsub_1_qsub_2
    },
    {	// GPRPair_with_gsub_0_in_tGPR
      0,	// dsub_0
      0,	// dsub_1
      0,	// dsub_2
      0,	// dsub_3
      0,	// dsub_4
      0,	// dsub_5
      0,	// dsub_6
      0,	// dsub_7
      21,	// gsub_0 -> GPRPair_with_gsub_0_in_tGPR
      21,	// gsub_1 -> GPRPair_with_gsub_0_in_tGPR
      0,	// qqsub_0
      0,	// qqsub_1
      0,	// qsub_0
      0,	// qsub_1
      0,	// qsub_2
      0,	// qsub_3
      0,	// ssub_0
      0,	// ssub_1
      0,	// ssub_2
      0,	// ssub_3
      0,	// dsub_2_then_ssub_0
      0,	// dsub_2_then_ssub_1
      0,	// dsub_3_then_ssub_0
      0,	// dsub_3_then_ssub_1
      0,	// dsub_7_then_ssub_0
      0,	// dsub_7_then_ssub_1
      0,	// dsub_6_then_ssub_0
      0,	// dsub_6_then_ssub_1
      0,	// dsub_5_then_ssub_0
      0,	// dsub_5_then_ssub_1
      0,	// dsub_4_then_ssub_0
      0,	// dsub_4_then_ssub_1
      0,	// dsub_0_dsub_2
      0,	// dsub_0_dsub_1_dsub_2
      0,	// dsub_1_dsub_3
      0,	// dsub_1_dsub_2_dsub_3
      0,	// dsub_1_dsub_2
      0,	// dsub_0_dsub_2_dsub_4
      0,	// dsub_0_dsub_2_dsub_4_dsub_6
      0,	// dsub_1_dsub_3_dsub_5
      0,	// dsub_1_dsub_3_dsub_5_dsub_7
      0,	// dsub_1_dsub_2_dsub_3_dsub_4
      0,	// dsub_2_dsub_4
      0,	// dsub_2_dsub_3_dsub_4
      0,	// dsub_2_dsub_4_dsub_6
      0,	// dsub_3_dsub_5
      0,	// dsub_3_dsub_4_dsub_5
      0,	// dsub_3_dsub_5_dsub_7
      0,	// dsub_3_dsub_4
      0,	// dsub_3_dsub_4_dsub_5_dsub_6
      0,	// dsub_4_dsub_6
      0,	// dsub_4_dsub_5_dsub_6
      0,	// dsub_5_dsub_7
      0,	// dsub_5_dsub_6_dsub_7
      0,	// dsub_5_dsub_6
      0,	// qsub_1_qsub_2
    },
    {	// GPRPair_with_gsub_0_in_hGPR
      0,	// dsub_0
      0,	// dsub_1
      0,	// dsub_2
      0,	// dsub_3
      0,	// dsub_4
      0,	// dsub_5
      0,	// dsub_6
      0,	// dsub_7
      22,	// gsub_0 -> GPRPair_with_gsub_0_in_hGPR
      22,	// gsub_1 -> GPRPair_with_gsub_0_in_hGPR
      0,	// qqsub_0
      0,	// qqsub_1
      0,	// qsub_0
      0,	// qsub_1
      0,	// qsub_2
      0,	// qsub_3
      0,	// ssub_0
      0,	// ssub_1
      0,	// ssub_2
      0,	// ssub_3
      0,	// dsub_2_then_ssub_0
      0,	// dsub_2_then_ssub_1
      0,	// dsub_3_then_ssub_0
      0,	// dsub_3_then_ssub_1
      0,	// dsub_7_then_ssub_0
      0,	// dsub_7_then_ssub_1
      0,	// dsub_6_then_ssub_0
      0,	// dsub_6_then_ssub_1
      0,	// dsub_5_then_ssub_0
      0,	// dsub_5_then_ssub_1
      0,	// dsub_4_then_ssub_0
      0,	// dsub_4_then_ssub_1
      0,	// dsub_0_dsub_2
      0,	// dsub_0_dsub_1_dsub_2
      0,	// dsub_1_dsub_3
      0,	// dsub_1_dsub_2_dsub_3
      0,	// dsub_1_dsub_2
      0,	// dsub_0_dsub_2_dsub_4
      0,	// dsub_0_dsub_2_dsub_4_dsub_6
      0,	// dsub_1_dsub_3_dsub_5
      0,	// dsub_1_dsub_3_dsub_5_dsub_7
      0,	// dsub_1_dsub_2_dsub_3_dsub_4
      0,	// dsub_2_dsub_4
      0,	// dsub_2_dsub_3_dsub_4
      0,	// dsub_2_dsub_4_dsub_6
      0,	// dsub_3_dsub_5
      0,	// dsub_3_dsub_4_dsub_5
      0,	// dsub_3_dsub_5_dsub_7
      0,	// dsub_3_dsub_4
      0,	// dsub_3_dsub_4_dsub_5_dsub_6
      0,	// dsub_4_dsub_6
      0,	// dsub_4_dsub_5_dsub_6
      0,	// dsub_5_dsub_7
      0,	// dsub_5_dsub_6_dsub_7
      0,	// dsub_5_dsub_6
      0,	// qsub_1_qsub_2
    },
    {	// GPRPair_with_gsub_0_in_tcGPR
      0,	// dsub_0
      0,	// dsub_1
      0,	// dsub_2
      0,	// dsub_3
      0,	// dsub_4
      0,	// dsub_5
      0,	// dsub_6
      0,	// dsub_7
      23,	// gsub_0 -> GPRPair_with_gsub_0_in_tcGPR
      23,	// gsub_1 -> GPRPair_with_gsub_0_in_tcGPR
      0,	// qqsub_0
      0,	// qqsub_1
      0,	// qsub_0
      0,	// qsub_1
      0,	// qsub_2
      0,	// qsub_3
      0,	// ssub_0
      0,	// ssub_1
      0,	// ssub_2
      0,	// ssub_3
      0,	// dsub_2_then_ssub_0
      0,	// dsub_2_then_ssub_1
      0,	// dsub_3_then_ssub_0
      0,	// dsub_3_then_ssub_1
      0,	// dsub_7_then_ssub_0
      0,	// dsub_7_then_ssub_1
      0,	// dsub_6_then_ssub_0
      0,	// dsub_6_then_ssub_1
      0,	// dsub_5_then_ssub_0
      0,	// dsub_5_then_ssub_1
      0,	// dsub_4_then_ssub_0
      0,	// dsub_4_then_ssub_1
      0,	// dsub_0_dsub_2
      0,	// dsub_0_dsub_1_dsub_2
      0,	// dsub_1_dsub_3
      0,	// dsub_1_dsub_2_dsub_3
      0,	// dsub_1_dsub_2
      0,	// dsub_0_dsub_2_dsub_4
      0,	// dsub_0_dsub_2_dsub_4_dsub_6
      0,	// dsub_1_dsub_3_dsub_5
      0,	// dsub_1_dsub_3_dsub_5_dsub_7
      0,	// dsub_1_dsub_2_dsub_3_dsub_4
      0,	// dsub_2_dsub_4
      0,	// dsub_2_dsub_3_dsub_4
      0,	// dsub_2_dsub_4_dsub_6
      0,	// dsub_3_dsub_5
      0,	// dsub_3_dsub_4_dsub_5
      0,	// dsub_3_dsub_5_dsub_7
      0,	// dsub_3_dsub_4
      0,	// dsub_3_dsub_4_dsub_5_dsub_6
      0,	// dsub_4_dsub_6
      0,	// dsub_4_dsub_5_dsub_6
      0,	// dsub_5_dsub_7
      0,	// dsub_5_dsub_6_dsub_7
      0,	// dsub_5_dsub_6
      0,	// qsub_1_qsub_2
    },
    {	// GPRPair_with_gsub_1_in_tcGPR
      0,	// dsub_0
      0,	// dsub_1
      0,	// dsub_2
      0,	// dsub_3
      0,	// dsub_4
      0,	// dsub_5
      0,	// dsub_6
      0,	// dsub_7
      24,	// gsub_0 -> GPRPair_with_gsub_1_in_tcGPR
      24,	// gsub_1 -> GPRPair_with_gsub_1_in_tcGPR
      0,	// qqsub_0
      0,	// qqsub_1
      0,	// qsub_0
      0,	// qsub_1
      0,	// qsub_2
      0,	// qsub_3
      0,	// ssub_0
      0,	// ssub_1
      0,	// ssub_2
      0,	// ssub_3
      0,	// dsub_2_then_ssub_0
      0,	// dsub_2_then_ssub_1
      0,	// dsub_3_then_ssub_0
      0,	// dsub_3_then_ssub_1
      0,	// dsub_7_then_ssub_0
      0,	// dsub_7_then_ssub_1
      0,	// dsub_6_then_ssub_0
      0,	// dsub_6_then_ssub_1
      0,	// dsub_5_then_ssub_0
      0,	// dsub_5_then_ssub_1
      0,	// dsub_4_then_ssub_0
      0,	// dsub_4_then_ssub_1
      0,	// dsub_0_dsub_2
      0,	// dsub_0_dsub_1_dsub_2
      0,	// dsub_1_dsub_3
      0,	// dsub_1_dsub_2_dsub_3
      0,	// dsub_1_dsub_2
      0,	// dsub_0_dsub_2_dsub_4
      0,	// dsub_0_dsub_2_dsub_4_dsub_6
      0,	// dsub_1_dsub_3_dsub_5
      0,	// dsub_1_dsub_3_dsub_5_dsub_7
      0,	// dsub_1_dsub_2_dsub_3_dsub_4
      0,	// dsub_2_dsub_4
      0,	// dsub_2_dsub_3_dsub_4
      0,	// dsub_2_dsub_4_dsub_6
      0,	// dsub_3_dsub_5
      0,	// dsub_3_dsub_4_dsub_5
      0,	// dsub_3_dsub_5_dsub_7
      0,	// dsub_3_dsub_4
      0,	// dsub_3_dsub_4_dsub_5_dsub_6
      0,	// dsub_4_dsub_6
      0,	// dsub_4_dsub_5_dsub_6
      0,	// dsub_5_dsub_7
      0,	// dsub_5_dsub_6_dsub_7
      0,	// dsub_5_dsub_6
      0,	// qsub_1_qsub_2
    },
    {	// GPRPair_with_gsub_0_in_tGPR_and_tcGPR
      0,	// dsub_0
      0,	// dsub_1
      0,	// dsub_2
      0,	// dsub_3
      0,	// dsub_4
      0,	// dsub_5
      0,	// dsub_6
      0,	// dsub_7
      25,	// gsub_0 -> GPRPair_with_gsub_0_in_tGPR_and_tcGPR
      25,	// gsub_1 -> GPRPair_with_gsub_0_in_tGPR_and_tcGPR
      0,	// qqsub_0
      0,	// qqsub_1
      0,	// qsub_0
      0,	// qsub_1
      0,	// qsub_2
      0,	// qsub_3
      0,	// ssub_0
      0,	// ssub_1
      0,	// ssub_2
      0,	// ssub_3
      0,	// dsub_2_then_ssub_0
      0,	// dsub_2_then_ssub_1
      0,	// dsub_3_then_ssub_0
      0,	// dsub_3_then_ssub_1
      0,	// dsub_7_then_ssub_0
      0,	// dsub_7_then_ssub_1
      0,	// dsub_6_then_ssub_0
      0,	// dsub_6_then_ssub_1
      0,	// dsub_5_then_ssub_0
      0,	// dsub_5_then_ssub_1
      0,	// dsub_4_then_ssub_0
      0,	// dsub_4_then_ssub_1
      0,	// dsub_0_dsub_2
      0,	// dsub_0_dsub_1_dsub_2
      0,	// dsub_1_dsub_3
      0,	// dsub_1_dsub_2_dsub_3
      0,	// dsub_1_dsub_2
      0,	// dsub_0_dsub_2_dsub_4
      0,	// dsub_0_dsub_2_dsub_4_dsub_6
      0,	// dsub_1_dsub_3_dsub_5
      0,	// dsub_1_dsub_3_dsub_5_dsub_7
      0,	// dsub_1_dsub_2_dsub_3_dsub_4
      0,	// dsub_2_dsub_4
      0,	// dsub_2_dsub_3_dsub_4
      0,	// dsub_2_dsub_4_dsub_6
      0,	// dsub_3_dsub_5
      0,	// dsub_3_dsub_4_dsub_5
      0,	// dsub_3_dsub_5_dsub_7
      0,	// dsub_3_dsub_4
      0,	// dsub_3_dsub_4_dsub_5_dsub_6
      0,	// dsub_4_dsub_6
      0,	// dsub_4_dsub_5_dsub_6
      0,	// dsub_5_dsub_7
      0,	// dsub_5_dsub_6_dsub_7
      0,	// dsub_5_dsub_6
      0,	// qsub_1_qsub_2
    },
    {	// GPRPair_with_gsub_1_in_hGPR_and_rGPR
      0,	// dsub_0
      0,	// dsub_1
      0,	// dsub_2
      0,	// dsub_3
      0,	// dsub_4
      0,	// dsub_5
      0,	// dsub_6
      0,	// dsub_7
      26,	// gsub_0 -> GPRPair_with_gsub_1_in_hGPR_and_rGPR
      26,	// gsub_1 -> GPRPair_with_gsub_1_in_hGPR_and_rGPR
      0,	// qqsub_0
      0,	// qqsub_1
      0,	// qsub_0
      0,	// qsub_1
      0,	// qsub_2
      0,	// qsub_3
      0,	// ssub_0
      0,	// ssub_1
      0,	// ssub_2
      0,	// ssub_3
      0,	// dsub_2_then_ssub_0
      0,	// dsub_2_then_ssub_1
      0,	// dsub_3_then_ssub_0
      0,	// dsub_3_then_ssub_1
      0,	// dsub_7_then_ssub_0
      0,	// dsub_7_then_ssub_1
      0,	// dsub_6_then_ssub_0
      0,	// dsub_6_then_ssub_1
      0,	// dsub_5_then_ssub_0
      0,	// dsub_5_then_ssub_1
      0,	// dsub_4_then_ssub_0
      0,	// dsub_4_then_ssub_1
      0,	// dsub_0_dsub_2
      0,	// dsub_0_dsub_1_dsub_2
      0,	// dsub_1_dsub_3
      0,	// dsub_1_dsub_2_dsub_3
      0,	// dsub_1_dsub_2
      0,	// dsub_0_dsub_2_dsub_4
      0,	// dsub_0_dsub_2_dsub_4_dsub_6
      0,	// dsub_1_dsub_3_dsub_5
      0,	// dsub_1_dsub_3_dsub_5_dsub_7
      0,	// dsub_1_dsub_2_dsub_3_dsub_4
      0,	// dsub_2_dsub_4
      0,	// dsub_2_dsub_3_dsub_4
      0,	// dsub_2_dsub_4_dsub_6
      0,	// dsub_3_dsub_5
      0,	// dsub_3_dsub_4_dsub_5
      0,	// dsub_3_dsub_5_dsub_7
      0,	// dsub_3_dsub_4
      0,	// dsub_3_dsub_4_dsub_5_dsub_6
      0,	// dsub_4_dsub_6
      0,	// dsub_4_dsub_5_dsub_6
      0,	// dsub_5_dsub_7
      0,	// dsub_5_dsub_6_dsub_7
      0,	// dsub_5_dsub_6
      0,	// qsub_1_qsub_2
    },
    {	// GPRPair_with_gsub_1_in_GPRsp
      0,	// dsub_0
      0,	// dsub_1
      0,	// dsub_2
      0,	// dsub_3
      0,	// dsub_4
      0,	// dsub_5
      0,	// dsub_6
      0,	// dsub_7
      27,	// gsub_0 -> GPRPair_with_gsub_1_in_GPRsp
      27,	// gsub_1 -> GPRPair_with_gsub_1_in_GPRsp
      0,	// qqsub_0
      0,	// qqsub_1
      0,	// qsub_0
      0,	// qsub_1
      0,	// qsub_2
      0,	// qsub_3
      0,	// ssub_0
      0,	// ssub_1
      0,	// ssub_2
      0,	// ssub_3
      0,	// dsub_2_then_ssub_0
      0,	// dsub_2_then_ssub_1
      0,	// dsub_3_then_ssub_0
      0,	// dsub_3_then_ssub_1
      0,	// dsub_7_then_ssub_0
      0,	// dsub_7_then_ssub_1
      0,	// dsub_6_then_ssub_0
      0,	// dsub_6_then_ssub_1
      0,	// dsub_5_then_ssub_0
      0,	// dsub_5_then_ssub_1
      0,	// dsub_4_then_ssub_0
      0,	// dsub_4_then_ssub_1
      0,	// dsub_0_dsub_2
      0,	// dsub_0_dsub_1_dsub_2
      0,	// dsub_1_dsub_3
      0,	// dsub_1_dsub_2_dsub_3
      0,	// dsub_1_dsub_2
      0,	// dsub_0_dsub_2_dsub_4
      0,	// dsub_0_dsub_2_dsub_4_dsub_6
      0,	// dsub_1_dsub_3_dsub_5
      0,	// dsub_1_dsub_3_dsub_5_dsub_7
      0,	// dsub_1_dsub_2_dsub_3_dsub_4
      0,	// dsub_2_dsub_4
      0,	// dsub_2_dsub_3_dsub_4
      0,	// dsub_2_dsub_4_dsub_6
      0,	// dsub_3_dsub_5
      0,	// dsub_3_dsub_4_dsub_5
      0,	// dsub_3_dsub_5_dsub_7
      0,	// dsub_3_dsub_4
      0,	// dsub_3_dsub_4_dsub_5_dsub_6
      0,	// dsub_4_dsub_6
      0,	// dsub_4_dsub_5_dsub_6
      0,	// dsub_5_dsub_7
      0,	// dsub_5_dsub_6_dsub_7
      0,	// dsub_5_dsub_6
      0,	// qsub_1_qsub_2
    },
    {	// GPRPair_with_gsub_1_in_hGPR_and_tcGPR
      0,	// dsub_0
      0,	// dsub_1
      0,	// dsub_2
      0,	// dsub_3
      0,	// dsub_4
      0,	// dsub_5
      0,	// dsub_6
      0,	// dsub_7
      28,	// gsub_0 -> GPRPair_with_gsub_1_in_hGPR_and_tcGPR
      28,	// gsub_1 -> GPRPair_with_gsub_1_in_hGPR_and_tcGPR
      0,	// qqsub_0
      0,	// qqsub_1
      0,	// qsub_0
      0,	// qsub_1
      0,	// qsub_2
      0,	// qsub_3
      0,	// ssub_0
      0,	// ssub_1
      0,	// ssub_2
      0,	// ssub_3
      0,	// dsub_2_then_ssub_0
      0,	// dsub_2_then_ssub_1
      0,	// dsub_3_then_ssub_0
      0,	// dsub_3_then_ssub_1
      0,	// dsub_7_then_ssub_0
      0,	// dsub_7_then_ssub_1
      0,	// dsub_6_then_ssub_0
      0,	// dsub_6_then_ssub_1
      0,	// dsub_5_then_ssub_0
      0,	// dsub_5_then_ssub_1
      0,	// dsub_4_then_ssub_0
      0,	// dsub_4_then_ssub_1
      0,	// dsub_0_dsub_2
      0,	// dsub_0_dsub_1_dsub_2
      0,	// dsub_1_dsub_3
      0,	// dsub_1_dsub_2_dsub_3
      0,	// dsub_1_dsub_2
      0,	// dsub_0_dsub_2_dsub_4
      0,	// dsub_0_dsub_2_dsub_4_dsub_6
      0,	// dsub_1_dsub_3_dsub_5
      0,	// dsub_1_dsub_3_dsub_5_dsub_7
      0,	// dsub_1_dsub_2_dsub_3_dsub_4
      0,	// dsub_2_dsub_4
      0,	// dsub_2_dsub_3_dsub_4
      0,	// dsub_2_dsub_4_dsub_6
      0,	// dsub_3_dsub_5
      0,	// dsub_3_dsub_4_dsub_5
      0,	// dsub_3_dsub_5_dsub_7
      0,	// dsub_3_dsub_4
      0,	// dsub_3_dsub_4_dsub_5_dsub_6
      0,	// dsub_4_dsub_6
      0,	// dsub_4_dsub_5_dsub_6
      0,	// dsub_5_dsub_7
      0,	// dsub_5_dsub_6_dsub_7
      0,	// dsub_5_dsub_6
      0,	// qsub_1_qsub_2
    },
    {	// DPairSpc
      29,	// dsub_0 -> DPairSpc
      0,	// dsub_1
      29,	// dsub_2 -> DPairSpc
      0,	// dsub_3
      0,	// dsub_4
      0,	// dsub_5
      0,	// dsub_6
      0,	// dsub_7
      0,	// gsub_0
      0,	// gsub_1
      0,	// qqsub_0
      0,	// qqsub_1
      0,	// qsub_0
      0,	// qsub_1
      0,	// qsub_2
      0,	// qsub_3
      30,	// ssub_0 -> DPairSpc_with_ssub_0
      30,	// ssub_1 -> DPairSpc_with_ssub_0
      0,	// ssub_2
      0,	// ssub_3
      31,	// dsub_2_then_ssub_0 -> DPairSpc_with_dsub_2_then_ssub_0
      31,	// dsub_2_then_ssub_1 -> DPairSpc_with_dsub_2_then_ssub_0
      0,	// dsub_3_then_ssub_0
      0,	// dsub_3_then_ssub_1
      0,	// dsub_7_then_ssub_0
      0,	// dsub_7_then_ssub_1
      0,	// dsub_6_then_ssub_0
      0,	// dsub_6_then_ssub_1
      0,	// dsub_5_then_ssub_0
      0,	// dsub_5_then_ssub_1
      0,	// dsub_4_then_ssub_0
      0,	// dsub_4_then_ssub_1
      0,	// dsub_0_dsub_2
      0,	// dsub_0_dsub_1_dsub_2
      0,	// dsub_1_dsub_3
      0,	// dsub_1_dsub_2_dsub_3
      0,	// dsub_1_dsub_2
      0,	// dsub_0_dsub_2_dsub_4
      0,	// dsub_0_dsub_2_dsub_4_dsub_6
      0,	// dsub_1_dsub_3_dsub_5
      0,	// dsub_1_dsub_3_dsub_5_dsub_7
      0,	// dsub_1_dsub_2_dsub_3_dsub_4
      0,	// dsub_2_dsub_4
      0,	// dsub_2_dsub_3_dsub_4
      0,	// dsub_2_dsub_4_dsub_6
      0,	// dsub_3_dsub_5
      0,	// dsub_3_dsub_4_dsub_5
      0,	// dsub_3_dsub_5_dsub_7
      0,	// dsub_3_dsub_4
      0,	// dsub_3_dsub_4_dsub_5_dsub_6
      0,	// dsub_4_dsub_6
      0,	// dsub_4_dsub_5_dsub_6
      0,	// dsub_5_dsub_7
      0,	// dsub_5_dsub_6_dsub_7
      0,	// dsub_5_dsub_6
      0,	// qsub_1_qsub_2
    },
    {	// DPairSpc_with_ssub_0
      30,	// dsub_0 -> DPairSpc_with_ssub_0
      0,	// dsub_1
      30,	// dsub_2 -> DPairSpc_with_ssub_0
      0,	// dsub_3
      0,	// dsub_4
      0,	// dsub_5
      0,	// dsub_6
      0,	// dsub_7
      0,	// gsub_0
      0,	// gsub_1
      0,	// qqsub_0
      0,	// qqsub_1
      0,	// qsub_0
      0,	// qsub_1
      0,	// qsub_2
      0,	// qsub_3
      30,	// ssub_0 -> DPairSpc_with_ssub_0
      30,	// ssub_1 -> DPairSpc_with_ssub_0
      0,	// ssub_2
      0,	// ssub_3
      31,	// dsub_2_then_ssub_0 -> DPairSpc_with_dsub_2_then_ssub_0
      31,	// dsub_2_then_ssub_1 -> DPairSpc_with_dsub_2_then_ssub_0
      0,	// dsub_3_then_ssub_0
      0,	// dsub_3_then_ssub_1
      0,	// dsub_7_then_ssub_0
      0,	// dsub_7_then_ssub_1
      0,	// dsub_6_then_ssub_0
      0,	// dsub_6_then_ssub_1
      0,	// dsub_5_then_ssub_0
      0,	// dsub_5_then_ssub_1
      0,	// dsub_4_then_ssub_0
      0,	// dsub_4_then_ssub_1
      0,	// dsub_0_dsub_2
      0,	// dsub_0_dsub_1_dsub_2
      0,	// dsub_1_dsub_3
      0,	// dsub_1_dsub_2_dsub_3
      0,	// dsub_1_dsub_2
      0,	// dsub_0_dsub_2_dsub_4
      0,	// dsub_0_dsub_2_dsub_4_dsub_6
      0,	// dsub_1_dsub_3_dsub_5
      0,	// dsub_1_dsub_3_dsub_5_dsub_7
      0,	// dsub_1_dsub_2_dsub_3_dsub_4
      0,	// dsub_2_dsub_4
      0,	// dsub_2_dsub_3_dsub_4
      0,	// dsub_2_dsub_4_dsub_6
      0,	// dsub_3_dsub_5
      0,	// dsub_3_dsub_4_dsub_5
      0,	// dsub_3_dsub_5_dsub_7
      0,	// dsub_3_dsub_4
      0,	// dsub_3_dsub_4_dsub_5_dsub_6
      0,	// dsub_4_dsub_6
      0,	// dsub_4_dsub_5_dsub_6
      0,	// dsub_5_dsub_7
      0,	// dsub_5_dsub_6_dsub_7
      0,	// dsub_5_dsub_6
      0,	// qsub_1_qsub_2
    },
    {	// DPairSpc_with_dsub_2_then_ssub_0
      31,	// dsub_0 -> DPairSpc_with_dsub_2_then_ssub_0
      0,	// dsub_1
      31,	// dsub_2 -> DPairSpc_with_dsub_2_then_ssub_0
      0,	// dsub_3
      0,	// dsub_4
      0,	// dsub_5
      0,	// dsub_6
      0,	// dsub_7
      0,	// gsub_0
      0,	// gsub_1
      0,	// qqsub_0
      0,	// qqsub_1
      0,	// qsub_0
      0,	// qsub_1
      0,	// qsub_2
      0,	// qsub_3
      31,	// ssub_0 -> DPairSpc_with_dsub_2_then_ssub_0
      31,	// ssub_1 -> DPairSpc_with_dsub_2_then_ssub_0
      0,	// ssub_2
      0,	// ssub_3
      31,	// dsub_2_then_ssub_0 -> DPairSpc_with_dsub_2_then_ssub_0
      31,	// dsub_2_then_ssub_1 -> DPairSpc_with_dsub_2_then_ssub_0
      0,	// dsub_3_then_ssub_0
      0,	// dsub_3_then_ssub_1
      0,	// dsub_7_then_ssub_0
      0,	// dsub_7_then_ssub_1
      0,	// dsub_6_then_ssub_0
      0,	// dsub_6_then_ssub_1
      0,	// dsub_5_then_ssub_0
      0,	// dsub_5_then_ssub_1
      0,	// dsub_4_then_ssub_0
      0,	// dsub_4_then_ssub_1
      0,	// dsub_0_dsub_2
      0,	// dsub_0_dsub_1_dsub_2
      0,	// dsub_1_dsub_3
      0,	// dsub_1_dsub_2_dsub_3
      0,	// dsub_1_dsub_2
      0,	// dsub_0_dsub_2_dsub_4
      0,	// dsub_0_dsub_2_dsub_4_dsub_6
      0,	// dsub_1_dsub_3_dsub_5
      0,	// dsub_1_dsub_3_dsub_5_dsub_7
      0,	// dsub_1_dsub_2_dsub_3_dsub_4
      0,	// dsub_2_dsub_4
      0,	// dsub_2_dsub_3_dsub_4
      0,	// dsub_2_dsub_4_dsub_6
      0,	// dsub_3_dsub_5
      0,	// dsub_3_dsub_4_dsub_5
      0,	// dsub_3_dsub_5_dsub_7
      0,	// dsub_3_dsub_4
      0,	// dsub_3_dsub_4_dsub_5_dsub_6
      0,	// dsub_4_dsub_6
      0,	// dsub_4_dsub_5_dsub_6
      0,	// dsub_5_dsub_7
      0,	// dsub_5_dsub_6_dsub_7
      0,	// dsub_5_dsub_6
      0,	// qsub_1_qsub_2
    },
    {	// DPairSpc_with_dsub_0_in_DPR_8
      32,	// dsub_0 -> DPairSpc_with_dsub_0_in_DPR_8
      0,	// dsub_1
      32,	// dsub_2 -> DPairSpc_with_dsub_0_in_DPR_8
      0,	// dsub_3
      0,	// dsub_4
      0,	// dsub_5
      0,	// dsub_6
      0,	// dsub_7
      0,	// gsub_0
      0,	// gsub_1
      0,	// qqsub_0
      0,	// qqsub_1
      0,	// qsub_0
      0,	// qsub_1
      0,	// qsub_2
      0,	// qsub_3
      32,	// ssub_0 -> DPairSpc_with_dsub_0_in_DPR_8
      32,	// ssub_1 -> DPairSpc_with_dsub_0_in_DPR_8
      0,	// ssub_2
      0,	// ssub_3
      32,	// dsub_2_then_ssub_0 -> DPairSpc_with_dsub_0_in_DPR_8
      32,	// dsub_2_then_ssub_1 -> DPairSpc_with_dsub_0_in_DPR_8
      0,	// dsub_3_then_ssub_0
      0,	// dsub_3_then_ssub_1
      0,	// dsub_7_then_ssub_0
      0,	// dsub_7_then_ssub_1
      0,	// dsub_6_then_ssub_0
      0,	// dsub_6_then_ssub_1
      0,	// dsub_5_then_ssub_0
      0,	// dsub_5_then_ssub_1
      0,	// dsub_4_then_ssub_0
      0,	// dsub_4_then_ssub_1
      0,	// dsub_0_dsub_2
      0,	// dsub_0_dsub_1_dsub_2
      0,	// dsub_1_dsub_3
      0,	// dsub_1_dsub_2_dsub_3
      0,	// dsub_1_dsub_2
      0,	// dsub_0_dsub_2_dsub_4
      0,	// dsub_0_dsub_2_dsub_4_dsub_6
      0,	// dsub_1_dsub_3_dsub_5
      0,	// dsub_1_dsub_3_dsub_5_dsub_7
      0,	// dsub_1_dsub_2_dsub_3_dsub_4
      0,	// dsub_2_dsub_4
      0,	// dsub_2_dsub_3_dsub_4
      0,	// dsub_2_dsub_4_dsub_6
      0,	// dsub_3_dsub_5
      0,	// dsub_3_dsub_4_dsub_5
      0,	// dsub_3_dsub_5_dsub_7
      0,	// dsub_3_dsub_4
      0,	// dsub_3_dsub_4_dsub_5_dsub_6
      0,	// dsub_4_dsub_6
      0,	// dsub_4_dsub_5_dsub_6
      0,	// dsub_5_dsub_7
      0,	// dsub_5_dsub_6_dsub_7
      0,	// dsub_5_dsub_6
      0,	// qsub_1_qsub_2
    },
    {	// DPairSpc_with_dsub_2_in_DPR_8
      33,	// dsub_0 -> DPairSpc_with_dsub_2_in_DPR_8
      0,	// dsub_1
      33,	// dsub_2 -> DPairSpc_with_dsub_2_in_DPR_8
      0,	// dsub_3
      0,	// dsub_4
      0,	// dsub_5
      0,	// dsub_6
      0,	// dsub_7
      0,	// gsub_0
      0,	// gsub_1
      0,	// qqsub_0
      0,	// qqsub_1
      0,	// qsub_0
      0,	// qsub_1
      0,	// qsub_2
      0,	// qsub_3
      33,	// ssub_0 -> DPairSpc_with_dsub_2_in_DPR_8
      33,	// ssub_1 -> DPairSpc_with_dsub_2_in_DPR_8
      0,	// ssub_2
      0,	// ssub_3
      33,	// dsub_2_then_ssub_0 -> DPairSpc_with_dsub_2_in_DPR_8
      33,	// dsub_2_then_ssub_1 -> DPairSpc_with_dsub_2_in_DPR_8
      0,	// dsub_3_then_ssub_0
      0,	// dsub_3_then_ssub_1
      0,	// dsub_7_then_ssub_0
      0,	// dsub_7_then_ssub_1
      0,	// dsub_6_then_ssub_0
      0,	// dsub_6_then_ssub_1
      0,	// dsub_5_then_ssub_0
      0,	// dsub_5_then_ssub_1
      0,	// dsub_4_then_ssub_0
      0,	// dsub_4_then_ssub_1
      0,	// dsub_0_dsub_2
      0,	// dsub_0_dsub_1_dsub_2
      0,	// dsub_1_dsub_3
      0,	// dsub_1_dsub_2_dsub_3
      0,	// dsub_1_dsub_2
      0,	// dsub_0_dsub_2_dsub_4
      0,	// dsub_0_dsub_2_dsub_4_dsub_6
      0,	// dsub_1_dsub_3_dsub_5
      0,	// dsub_1_dsub_3_dsub_5_dsub_7
      0,	// dsub_1_dsub_2_dsub_3_dsub_4
      0,	// dsub_2_dsub_4
      0,	// dsub_2_dsub_3_dsub_4
      0,	// dsub_2_dsub_4_dsub_6
      0,	// dsub_3_dsub_5
      0,	// dsub_3_dsub_4_dsub_5
      0,	// dsub_3_dsub_5_dsub_7
      0,	// dsub_3_dsub_4
      0,	// dsub_3_dsub_4_dsub_5_dsub_6
      0,	// dsub_4_dsub_6
      0,	// dsub_4_dsub_5_dsub_6
      0,	// dsub_5_dsub_7
      0,	// dsub_5_dsub_6_dsub_7
      0,	// dsub_5_dsub_6
      0,	// qsub_1_qsub_2
    },
    {	// DPair
      34,	// dsub_0 -> DPair
      34,	// dsub_1 -> DPair
      0,	// dsub_2
      0,	// dsub_3
      0,	// dsub_4
      0,	// dsub_5
      0,	// dsub_6
      0,	// dsub_7
      0,	// gsub_0
      0,	// gsub_1
      0,	// qqsub_0
      0,	// qqsub_1
      0,	// qsub_0
      0,	// qsub_1
      0,	// qsub_2
      0,	// qsub_3
      35,	// ssub_0 -> DPair_with_ssub_0
      35,	// ssub_1 -> DPair_with_ssub_0
      37,	// ssub_2 -> DPair_with_ssub_2
      37,	// ssub_3 -> DPair_with_ssub_2
      0,	// dsub_2_then_ssub_0
      0,	// dsub_2_then_ssub_1
      0,	// dsub_3_then_ssub_0
      0,	// dsub_3_then_ssub_1
      0,	// dsub_7_then_ssub_0
      0,	// dsub_7_then_ssub_1
      0,	// dsub_6_then_ssub_0
      0,	// dsub_6_then_ssub_1
      0,	// dsub_5_then_ssub_0
      0,	// dsub_5_then_ssub_1
      0,	// dsub_4_then_ssub_0
      0,	// dsub_4_then_ssub_1
      0,	// dsub_0_dsub_2
      0,	// dsub_0_dsub_1_dsub_2
      0,	// dsub_1_dsub_3
      0,	// dsub_1_dsub_2_dsub_3
      0,	// dsub_1_dsub_2
      0,	// dsub_0_dsub_2_dsub_4
      0,	// dsub_0_dsub_2_dsub_4_dsub_6
      0,	// dsub_1_dsub_3_dsub_5
      0,	// dsub_1_dsub_3_dsub_5_dsub_7
      0,	// dsub_1_dsub_2_dsub_3_dsub_4
      0,	// dsub_2_dsub_4
      0,	// dsub_2_dsub_3_dsub_4
      0,	// dsub_2_dsub_4_dsub_6
      0,	// dsub_3_dsub_5
      0,	// dsub_3_dsub_4_dsub_5
      0,	// dsub_3_dsub_5_dsub_7
      0,	// dsub_3_dsub_4
      0,	// dsub_3_dsub_4_dsub_5_dsub_6
      0,	// dsub_4_dsub_6
      0,	// dsub_4_dsub_5_dsub_6
      0,	// dsub_5_dsub_7
      0,	// dsub_5_dsub_6_dsub_7
      0,	// dsub_5_dsub_6
      0,	// qsub_1_qsub_2
    },
    {	// DPair_with_ssub_0
      35,	// dsub_0 -> DPair_with_ssub_0
      35,	// dsub_1 -> DPair_with_ssub_0
      0,	// dsub_2
      0,	// dsub_3
      0,	// dsub_4
      0,	// dsub_5
      0,	// dsub_6
      0,	// dsub_7
      0,	// gsub_0
      0,	// gsub_1
      0,	// qqsub_0
      0,	// qqsub_1
      0,	// qsub_0
      0,	// qsub_1
      0,	// qsub_2
      0,	// qsub_3
      35,	// ssub_0 -> DPair_with_ssub_0
      35,	// ssub_1 -> DPair_with_ssub_0
      37,	// ssub_2 -> DPair_with_ssub_2
      37,	// ssub_3 -> DPair_with_ssub_2
      0,	// dsub_2_then_ssub_0
      0,	// dsub_2_then_ssub_1
      0,	// dsub_3_then_ssub_0
      0,	// dsub_3_then_ssub_1
      0,	// dsub_7_then_ssub_0
      0,	// dsub_7_then_ssub_1
      0,	// dsub_6_then_ssub_0
      0,	// dsub_6_then_ssub_1
      0,	// dsub_5_then_ssub_0
      0,	// dsub_5_then_ssub_1
      0,	// dsub_4_then_ssub_0
      0,	// dsub_4_then_ssub_1
      0,	// dsub_0_dsub_2
      0,	// dsub_0_dsub_1_dsub_2
      0,	// dsub_1_dsub_3
      0,	// dsub_1_dsub_2_dsub_3
      0,	// dsub_1_dsub_2
      0,	// dsub_0_dsub_2_dsub_4
      0,	// dsub_0_dsub_2_dsub_4_dsub_6
      0,	// dsub_1_dsub_3_dsub_5
      0,	// dsub_1_dsub_3_dsub_5_dsub_7
      0,	// dsub_1_dsub_2_dsub_3_dsub_4
      0,	// dsub_2_dsub_4
      0,	// dsub_2_dsub_3_dsub_4
      0,	// dsub_2_dsub_4_dsub_6
      0,	// dsub_3_dsub_5
      0,	// dsub_3_dsub_4_dsub_5
      0,	// dsub_3_dsub_5_dsub_7
      0,	// dsub_3_dsub_4
      0,	// dsub_3_dsub_4_dsub_5_dsub_6
      0,	// dsub_4_dsub_6
      0,	// dsub_4_dsub_5_dsub_6
      0,	// dsub_5_dsub_7
      0,	// dsub_5_dsub_6_dsub_7
      0,	// dsub_5_dsub_6
      0,	// qsub_1_qsub_2
    },
    {	// QPR
      36,	// dsub_0 -> QPR
      36,	// dsub_1 -> QPR
      0,	// dsub_2
      0,	// dsub_3
      0,	// dsub_4
      0,	// dsub_5
      0,	// dsub_6
      0,	// dsub_7
      0,	// gsub_0
      0,	// gsub_1
      0,	// qqsub_0
      0,	// qqsub_1
      0,	// qsub_0
      0,	// qsub_1
      0,	// qsub_2
      0,	// qsub_3
      39,	// ssub_0 -> QPR_VFP2
      39,	// ssub_1 -> QPR_VFP2
      39,	// ssub_2 -> QPR_VFP2
      39,	// ssub_3 -> QPR_VFP2
      0,	// dsub_2_then_ssub_0
      0,	// dsub_2_then_ssub_1
      0,	// dsub_3_then_ssub_0
      0,	// dsub_3_then_ssub_1
      0,	// dsub_7_then_ssub_0
      0,	// dsub_7_then_ssub_1
      0,	// dsub_6_then_ssub_0
      0,	// dsub_6_then_ssub_1
      0,	// dsub_5_then_ssub_0
      0,	// dsub_5_then_ssub_1
      0,	// dsub_4_then_ssub_0
      0,	// dsub_4_then_ssub_1
      0,	// dsub_0_dsub_2
      0,	// dsub_0_dsub_1_dsub_2
      0,	// dsub_1_dsub_3
      0,	// dsub_1_dsub_2_dsub_3
      0,	// dsub_1_dsub_2
      0,	// dsub_0_dsub_2_dsub_4
      0,	// dsub_0_dsub_2_dsub_4_dsub_6
      0,	// dsub_1_dsub_3_dsub_5
      0,	// dsub_1_dsub_3_dsub_5_dsub_7
      0,	// dsub_1_dsub_2_dsub_3_dsub_4
      0,	// dsub_2_dsub_4
      0,	// dsub_2_dsub_3_dsub_4
      0,	// dsub_2_dsub_4_dsub_6
      0,	// dsub_3_dsub_5
      0,	// dsub_3_dsub_4_dsub_5
      0,	// dsub_3_dsub_5_dsub_7
      0,	// dsub_3_dsub_4
      0,	// dsub_3_dsub_4_dsub_5_dsub_6
      0,	// dsub_4_dsub_6
      0,	// dsub_4_dsub_5_dsub_6
      0,	// dsub_5_dsub_7
      0,	// dsub_5_dsub_6_dsub_7
      0,	// dsub_5_dsub_6
      0,	// qsub_1_qsub_2
    },
    {	// DPair_with_ssub_2
      37,	// dsub_0 -> DPair_with_ssub_2
      37,	// dsub_1 -> DPair_with_ssub_2
      0,	// dsub_2
      0,	// dsub_3
      0,	// dsub_4
      0,	// dsub_5
      0,	// dsub_6
      0,	// dsub_7
      0,	// gsub_0
      0,	// gsub_1
      0,	// qqsub_0
      0,	// qqsub_1
      0,	// qsub_0
      0,	// qsub_1
      0,	// qsub_2
      0,	// qsub_3
      37,	// ssub_0 -> DPair_with_ssub_2
      37,	// ssub_1 -> DPair_with_ssub_2
      37,	// ssub_2 -> DPair_with_ssub_2
      37,	// ssub_3 -> DPair_with_ssub_2
      0,	// dsub_2_then_ssub_0
      0,	// dsub_2_then_ssub_1
      0,	// dsub_3_then_ssub_0
      0,	// dsub_3_then_ssub_1
      0,	// dsub_7_then_ssub_0
      0,	// dsub_7_then_ssub_1
      0,	// dsub_6_then_ssub_0
      0,	// dsub_6_then_ssub_1
      0,	// dsub_5_then_ssub_0
      0,	// dsub_5_then_ssub_1
      0,	// dsub_4_then_ssub_0
      0,	// dsub_4_then_ssub_1
      0,	// dsub_0_dsub_2
      0,	// dsub_0_dsub_1_dsub_2
      0,	// dsub_1_dsub_3
      0,	// dsub_1_dsub_2_dsub_3
      0,	// dsub_1_dsub_2
      0,	// dsub_0_dsub_2_dsub_4
      0,	// dsub_0_dsub_2_dsub_4_dsub_6
      0,	// dsub_1_dsub_3_dsub_5
      0,	// dsub_1_dsub_3_dsub_5_dsub_7
      0,	// dsub_1_dsub_2_dsub_3_dsub_4
      0,	// dsub_2_dsub_4
      0,	// dsub_2_dsub_3_dsub_4
      0,	// dsub_2_dsub_4_dsub_6
      0,	// dsub_3_dsub_5
      0,	// dsub_3_dsub_4_dsub_5
      0,	// dsub_3_dsub_5_dsub_7
      0,	// dsub_3_dsub_4
      0,	// dsub_3_dsub_4_dsub_5_dsub_6
      0,	// dsub_4_dsub_6
      0,	// dsub_4_dsub_5_dsub_6
      0,	// dsub_5_dsub_7
      0,	// dsub_5_dsub_6_dsub_7
      0,	// dsub_5_dsub_6
      0,	// qsub_1_qsub_2
    },
    {	// DPair_with_dsub_0_in_DPR_8
      38,	// dsub_0 -> DPair_with_dsub_0_in_DPR_8
      38,	// dsub_1 -> DPair_with_dsub_0_in_DPR_8
      0,	// dsub_2
      0,	// dsub_3
      0,	// dsub_4
      0,	// dsub_5
      0,	// dsub_6
      0,	// dsub_7
      0,	// gsub_0
      0,	// gsub_1
      0,	// qqsub_0
      0,	// qqsub_1
      0,	// qsub_0
      0,	// qsub_1
      0,	// qsub_2
      0,	// qsub_3
      38,	// ssub_0 -> DPair_with_dsub_0_in_DPR_8
      38,	// ssub_1 -> DPair_with_dsub_0_in_DPR_8
      38,	// ssub_2 -> DPair_with_dsub_0_in_DPR_8
      38,	// ssub_3 -> DPair_with_dsub_0_in_DPR_8
      0,	// dsub_2_then_ssub_0
      0,	// dsub_2_then_ssub_1
      0,	// dsub_3_then_ssub_0
      0,	// dsub_3_then_ssub_1
      0,	// dsub_7_then_ssub_0
      0,	// dsub_7_then_ssub_1
      0,	// dsub_6_then_ssub_0
      0,	// dsub_6_then_ssub_1
      0,	// dsub_5_then_ssub_0
      0,	// dsub_5_then_ssub_1
      0,	// dsub_4_then_ssub_0
      0,	// dsub_4_then_ssub_1
      0,	// dsub_0_dsub_2
      0,	// dsub_0_dsub_1_dsub_2
      0,	// dsub_1_dsub_3
      0,	// dsub_1_dsub_2_dsub_3
      0,	// dsub_1_dsub_2
      0,	// dsub_0_dsub_2_dsub_4
      0,	// dsub_0_dsub_2_dsub_4_dsub_6
      0,	// dsub_1_dsub_3_dsub_5
      0,	// dsub_1_dsub_3_dsub_5_dsub_7
      0,	// dsub_1_dsub_2_dsub_3_dsub_4
      0,	// dsub_2_dsub_4
      0,	// dsub_2_dsub_3_dsub_4
      0,	// dsub_2_dsub_4_dsub_6
      0,	// dsub_3_dsub_5
      0,	// dsub_3_dsub_4_dsub_5
      0,	// dsub_3_dsub_5_dsub_7
      0,	// dsub_3_dsub_4
      0,	// dsub_3_dsub_4_dsub_5_dsub_6
      0,	// dsub_4_dsub_6
      0,	// dsub_4_dsub_5_dsub_6
      0,	// dsub_5_dsub_7
      0,	// dsub_5_dsub_6_dsub_7
      0,	// dsub_5_dsub_6
      0,	// qsub_1_qsub_2
    },
    {	// QPR_VFP2
      39,	// dsub_0 -> QPR_VFP2
      39,	// dsub_1 -> QPR_VFP2
      0,	// dsub_2
      0,	// dsub_3
      0,	// dsub_4
      0,	// dsub_5
      0,	// dsub_6
      0,	// dsub_7
      0,	// gsub_0
      0,	// gsub_1
      0,	// qqsub_0
      0,	// qqsub_1
      0,	// qsub_0
      0,	// qsub_1
      0,	// qsub_2
      0,	// qsub_3
      39,	// ssub_0 -> QPR_VFP2
      39,	// ssub_1 -> QPR_VFP2
      39,	// ssub_2 -> QPR_VFP2
      39,	// ssub_3 -> QPR_VFP2
      0,	// dsub_2_then_ssub_0
      0,	// dsub_2_then_ssub_1
      0,	// dsub_3_then_ssub_0
      0,	// dsub_3_then_ssub_1
      0,	// dsub_7_then_ssub_0
      0,	// dsub_7_then_ssub_1
      0,	// dsub_6_then_ssub_0
      0,	// dsub_6_then_ssub_1
      0,	// dsub_5_then_ssub_0
      0,	// dsub_5_then_ssub_1
      0,	// dsub_4_then_ssub_0
      0,	// dsub_4_then_ssub_1
      0,	// dsub_0_dsub_2
      0,	// dsub_0_dsub_1_dsub_2
      0,	// dsub_1_dsub_3
      0,	// dsub_1_dsub_2_dsub_3
      0,	// dsub_1_dsub_2
      0,	// dsub_0_dsub_2_dsub_4
      0,	// dsub_0_dsub_2_dsub_4_dsub_6
      0,	// dsub_1_dsub_3_dsub_5
      0,	// dsub_1_dsub_3_dsub_5_dsub_7
      0,	// dsub_1_dsub_2_dsub_3_dsub_4
      0,	// dsub_2_dsub_4
      0,	// dsub_2_dsub_3_dsub_4
      0,	// dsub_2_dsub_4_dsub_6
      0,	// dsub_3_dsub_5
      0,	// dsub_3_dsub_4_dsub_5
      0,	// dsub_3_dsub_5_dsub_7
      0,	// dsub_3_dsub_4
      0,	// dsub_3_dsub_4_dsub_5_dsub_6
      0,	// dsub_4_dsub_6
      0,	// dsub_4_dsub_5_dsub_6
      0,	// dsub_5_dsub_7
      0,	// dsub_5_dsub_6_dsub_7
      0,	// dsub_5_dsub_6
      0,	// qsub_1_qsub_2
    },
    {	// DPair_with_dsub_1_in_DPR_8
      40,	// dsub_0 -> DPair_with_dsub_1_in_DPR_8
      40,	// dsub_1 -> DPair_with_dsub_1_in_DPR_8
      0,	// dsub_2
      0,	// dsub_3
      0,	// dsub_4
      0,	// dsub_5
      0,	// dsub_6
      0,	// dsub_7
      0,	// gsub_0
      0,	// gsub_1
      0,	// qqsub_0
      0,	// qqsub_1
      0,	// qsub_0
      0,	// qsub_1
      0,	// qsub_2
      0,	// qsub_3
      40,	// ssub_0 -> DPair_with_dsub_1_in_DPR_8
      40,	// ssub_1 -> DPair_with_dsub_1_in_DPR_8
      40,	// ssub_2 -> DPair_with_dsub_1_in_DPR_8
      40,	// ssub_3 -> DPair_with_dsub_1_in_DPR_8
      0,	// dsub_2_then_ssub_0
      0,	// dsub_2_then_ssub_1
      0,	// dsub_3_then_ssub_0
      0,	// dsub_3_then_ssub_1
      0,	// dsub_7_then_ssub_0
      0,	// dsub_7_then_ssub_1
      0,	// dsub_6_then_ssub_0
      0,	// dsub_6_then_ssub_1
      0,	// dsub_5_then_ssub_0
      0,	// dsub_5_then_ssub_1
      0,	// dsub_4_then_ssub_0
      0,	// dsub_4_then_ssub_1
      0,	// dsub_0_dsub_2
      0,	// dsub_0_dsub_1_dsub_2
      0,	// dsub_1_dsub_3
      0,	// dsub_1_dsub_2_dsub_3
      0,	// dsub_1_dsub_2
      0,	// dsub_0_dsub_2_dsub_4
      0,	// dsub_0_dsub_2_dsub_4_dsub_6
      0,	// dsub_1_dsub_3_dsub_5
      0,	// dsub_1_dsub_3_dsub_5_dsub_7
      0,	// dsub_1_dsub_2_dsub_3_dsub_4
      0,	// dsub_2_dsub_4
      0,	// dsub_2_dsub_3_dsub_4
      0,	// dsub_2_dsub_4_dsub_6
      0,	// dsub_3_dsub_5
      0,	// dsub_3_dsub_4_dsub_5
      0,	// dsub_3_dsub_5_dsub_7
      0,	// dsub_3_dsub_4
      0,	// dsub_3_dsub_4_dsub_5_dsub_6
      0,	// dsub_4_dsub_6
      0,	// dsub_4_dsub_5_dsub_6
      0,	// dsub_5_dsub_7
      0,	// dsub_5_dsub_6_dsub_7
      0,	// dsub_5_dsub_6
      0,	// qsub_1_qsub_2
    },
    {	// QPR_8
      41,	// dsub_0 -> QPR_8
      41,	// dsub_1 -> QPR_8
      0,	// dsub_2
      0,	// dsub_3
      0,	// dsub_4
      0,	// dsub_5
      0,	// dsub_6
      0,	// dsub_7
      0,	// gsub_0
      0,	// gsub_1
      0,	// qqsub_0
      0,	// qqsub_1
      0,	// qsub_0
      0,	// qsub_1
      0,	// qsub_2
      0,	// qsub_3
      41,	// ssub_0 -> QPR_8
      41,	// ssub_1 -> QPR_8
      41,	// ssub_2 -> QPR_8
      41,	// ssub_3 -> QPR_8
      0,	// dsub_2_then_ssub_0
      0,	// dsub_2_then_ssub_1
      0,	// dsub_3_then_ssub_0
      0,	// dsub_3_then_ssub_1
      0,	// dsub_7_then_ssub_0
      0,	// dsub_7_then_ssub_1
      0,	// dsub_6_then_ssub_0
      0,	// dsub_6_then_ssub_1
      0,	// dsub_5_then_ssub_0
      0,	// dsub_5_then_ssub_1
      0,	// dsub_4_then_ssub_0
      0,	// dsub_4_then_ssub_1
      0,	// dsub_0_dsub_2
      0,	// dsub_0_dsub_1_dsub_2
      0,	// dsub_1_dsub_3
      0,	// dsub_1_dsub_2_dsub_3
      0,	// dsub_1_dsub_2
      0,	// dsub_0_dsub_2_dsub_4
      0,	// dsub_0_dsub_2_dsub_4_dsub_6
      0,	// dsub_1_dsub_3_dsub_5
      0,	// dsub_1_dsub_3_dsub_5_dsub_7
      0,	// dsub_1_dsub_2_dsub_3_dsub_4
      0,	// dsub_2_dsub_4
      0,	// dsub_2_dsub_3_dsub_4
      0,	// dsub_2_dsub_4_dsub_6
      0,	// dsub_3_dsub_5
      0,	// dsub_3_dsub_4_dsub_5
      0,	// dsub_3_dsub_5_dsub_7
      0,	// dsub_3_dsub_4
      0,	// dsub_3_dsub_4_dsub_5_dsub_6
      0,	// dsub_4_dsub_6
      0,	// dsub_4_dsub_5_dsub_6
      0,	// dsub_5_dsub_7
      0,	// dsub_5_dsub_6_dsub_7
      0,	// dsub_5_dsub_6
      0,	// qsub_1_qsub_2
    },
    {	// DTriple
      42,	// dsub_0 -> DTriple
      42,	// dsub_1 -> DTriple
      42,	// dsub_2 -> DTriple
      0,	// dsub_3
      0,	// dsub_4
      0,	// dsub_5
      0,	// dsub_6
      0,	// dsub_7
      0,	// gsub_0
      0,	// gsub_1
      0,	// qqsub_0
      0,	// qqsub_1
      42,	// qsub_0 -> DTriple
      0,	// qsub_1
      0,	// qsub_2
      0,	// qsub_3
      45,	// ssub_0 -> DTriple_with_ssub_0
      45,	// ssub_1 -> DTriple_with_ssub_0
      48,	// ssub_2 -> DTriple_with_ssub_2
      48,	// ssub_3 -> DTriple_with_ssub_2
      50,	// dsub_2_then_ssub_0 -> DTriple_with_dsub_2_then_ssub_0
      50,	// dsub_2_then_ssub_1 -> DTriple_with_dsub_2_then_ssub_0
      0,	// dsub_3_then_ssub_0
      0,	// dsub_3_then_ssub_1
      0,	// dsub_7_then_ssub_0
      0,	// dsub_7_then_ssub_1
      0,	// dsub_6_then_ssub_0
      0,	// dsub_6_then_ssub_1
      0,	// dsub_5_then_ssub_0
      0,	// dsub_5_then_ssub_1
      0,	// dsub_4_then_ssub_0
      0,	// dsub_4_then_ssub_1
      42,	// dsub_0_dsub_2 -> DTriple
      0,	// dsub_0_dsub_1_dsub_2
      0,	// dsub_1_dsub_3
      0,	// dsub_1_dsub_2_dsub_3
      42,	// dsub_1_dsub_2 -> DTriple
      0,	// dsub_0_dsub_2_dsub_4
      0,	// dsub_0_dsub_2_dsub_4_dsub_6
      0,	// dsub_1_dsub_3_dsub_5
      0,	// dsub_1_dsub_3_dsub_5_dsub_7
      0,	// dsub_1_dsub_2_dsub_3_dsub_4
      0,	// dsub_2_dsub_4
      0,	// dsub_2_dsub_3_dsub_4
      0,	// dsub_2_dsub_4_dsub_6
      0,	// dsub_3_dsub_5
      0,	// dsub_3_dsub_4_dsub_5
      0,	// dsub_3_dsub_5_dsub_7
      0,	// dsub_3_dsub_4
      0,	// dsub_3_dsub_4_dsub_5_dsub_6
      0,	// dsub_4_dsub_6
      0,	// dsub_4_dsub_5_dsub_6
      0,	// dsub_5_dsub_7
      0,	// dsub_5_dsub_6_dsub_7
      0,	// dsub_5_dsub_6
      0,	// qsub_1_qsub_2
    },
    {	// DTripleSpc
      43,	// dsub_0 -> DTripleSpc
      0,	// dsub_1
      43,	// dsub_2 -> DTripleSpc
      0,	// dsub_3
      43,	// dsub_4 -> DTripleSpc
      0,	// dsub_5
      0,	// dsub_6
      0,	// dsub_7
      0,	// gsub_0
      0,	// gsub_1
      0,	// qqsub_0
      0,	// qqsub_1
      0,	// qsub_0
      0,	// qsub_1
      0,	// qsub_2
      0,	// qsub_3
      44,	// ssub_0 -> DTripleSpc_with_ssub_0
      44,	// ssub_1 -> DTripleSpc_with_ssub_0
      0,	// ssub_2
      0,	// ssub_3
      49,	// dsub_2_then_ssub_0 -> DTripleSpc_with_dsub_2_then_ssub_0
      49,	// dsub_2_then_ssub_1 -> DTripleSpc_with_dsub_2_then_ssub_0
      0,	// dsub_3_then_ssub_0
      0,	// dsub_3_then_ssub_1
      0,	// dsub_7_then_ssub_0
      0,	// dsub_7_then_ssub_1
      0,	// dsub_6_then_ssub_0
      0,	// dsub_6_then_ssub_1
      0,	// dsub_5_then_ssub_0
      0,	// dsub_5_then_ssub_1
      51,	// dsub_4_then_ssub_0 -> DTripleSpc_with_dsub_4_then_ssub_0
      51,	// dsub_4_then_ssub_1 -> DTripleSpc_with_dsub_4_then_ssub_0
      43,	// dsub_0_dsub_2 -> DTripleSpc
      0,	// dsub_0_dsub_1_dsub_2
      0,	// dsub_1_dsub_3
      0,	// dsub_1_dsub_2_dsub_3
      0,	// dsub_1_dsub_2
      0,	// dsub_0_dsub_2_dsub_4
      0,	// dsub_0_dsub_2_dsub_4_dsub_6
      0,	// dsub_1_dsub_3_dsub_5
      0,	// dsub_1_dsub_3_dsub_5_dsub_7
      0,	// dsub_1_dsub_2_dsub_3_dsub_4
      43,	// dsub_2_dsub_4 -> DTripleSpc
      0,	// dsub_2_dsub_3_dsub_4
      0,	// dsub_2_dsub_4_dsub_6
      0,	// dsub_3_dsub_5
      0,	// dsub_3_dsub_4_dsub_5
      0,	// dsub_3_dsub_5_dsub_7
      0,	// dsub_3_dsub_4
      0,	// dsub_3_dsub_4_dsub_5_dsub_6
      0,	// dsub_4_dsub_6
      0,	// dsub_4_dsub_5_dsub_6
      0,	// dsub_5_dsub_7
      0,	// dsub_5_dsub_6_dsub_7
      0,	// dsub_5_dsub_6
      0,	// qsub_1_qsub_2
    },
    {	// DTripleSpc_with_ssub_0
      44,	// dsub_0 -> DTripleSpc_with_ssub_0
      0,	// dsub_1
      44,	// dsub_2 -> DTripleSpc_with_ssub_0
      0,	// dsub_3
      44,	// dsub_4 -> DTripleSpc_with_ssub_0
      0,	// dsub_5
      0,	// dsub_6
      0,	// dsub_7
      0,	// gsub_0
      0,	// gsub_1
      0,	// qqsub_0
      0,	// qqsub_1
      0,	// qsub_0
      0,	// qsub_1
      0,	// qsub_2
      0,	// qsub_3
      44,	// ssub_0 -> DTripleSpc_with_ssub_0
      44,	// ssub_1 -> DTripleSpc_with_ssub_0
      0,	// ssub_2
      0,	// ssub_3
      49,	// dsub_2_then_ssub_0 -> DTripleSpc_with_dsub_2_then_ssub_0
      49,	// dsub_2_then_ssub_1 -> DTripleSpc_with_dsub_2_then_ssub_0
      0,	// dsub_3_then_ssub_0
      0,	// dsub_3_then_ssub_1
      0,	// dsub_7_then_ssub_0
      0,	// dsub_7_then_ssub_1
      0,	// dsub_6_then_ssub_0
      0,	// dsub_6_then_ssub_1
      0,	// dsub_5_then_ssub_0
      0,	// dsub_5_then_ssub_1
      51,	// dsub_4_then_ssub_0 -> DTripleSpc_with_dsub_4_then_ssub_0
      51,	// dsub_4_then_ssub_1 -> DTripleSpc_with_dsub_4_then_ssub_0
      44,	// dsub_0_dsub_2 -> DTripleSpc_with_ssub_0
      0,	// dsub_0_dsub_1_dsub_2
      0,	// dsub_1_dsub_3
      0,	// dsub_1_dsub_2_dsub_3
      0,	// dsub_1_dsub_2
      0,	// dsub_0_dsub_2_dsub_4
      0,	// dsub_0_dsub_2_dsub_4_dsub_6
      0,	// dsub_1_dsub_3_dsub_5
      0,	// dsub_1_dsub_3_dsub_5_dsub_7
      0,	// dsub_1_dsub_2_dsub_3_dsub_4
      44,	// dsub_2_dsub_4 -> DTripleSpc_with_ssub_0
      0,	// dsub_2_dsub_3_dsub_4
      0,	// dsub_2_dsub_4_dsub_6
      0,	// dsub_3_dsub_5
      0,	// dsub_3_dsub_4_dsub_5
      0,	// dsub_3_dsub_5_dsub_7
      0,	// dsub_3_dsub_4
      0,	// dsub_3_dsub_4_dsub_5_dsub_6
      0,	// dsub_4_dsub_6
      0,	// dsub_4_dsub_5_dsub_6
      0,	// dsub_5_dsub_7
      0,	// dsub_5_dsub_6_dsub_7
      0,	// dsub_5_dsub_6
      0,	// qsub_1_qsub_2
    },
    {	// DTriple_with_ssub_0
      45,	// dsub_0 -> DTriple_with_ssub_0
      45,	// dsub_1 -> DTriple_with_ssub_0
      45,	// dsub_2 -> DTriple_with_ssub_0
      0,	// dsub_3
      0,	// dsub_4
      0,	// dsub_5
      0,	// dsub_6
      0,	// dsub_7
      0,	// gsub_0
      0,	// gsub_1
      0,	// qqsub_0
      0,	// qqsub_1
      45,	// qsub_0 -> DTriple_with_ssub_0
      0,	// qsub_1
      0,	// qsub_2
      0,	// qsub_3
      45,	// ssub_0 -> DTriple_with_ssub_0
      45,	// ssub_1 -> DTriple_with_ssub_0
      48,	// ssub_2 -> DTriple_with_ssub_2
      48,	// ssub_3 -> DTriple_with_ssub_2
      50,	// dsub_2_then_ssub_0 -> DTriple_with_dsub_2_then_ssub_0
      50,	// dsub_2_then_ssub_1 -> DTriple_with_dsub_2_then_ssub_0
      0,	// dsub_3_then_ssub_0
      0,	// dsub_3_then_ssub_1
      0,	// dsub_7_then_ssub_0
      0,	// dsub_7_then_ssub_1
      0,	// dsub_6_then_ssub_0
      0,	// dsub_6_then_ssub_1
      0,	// dsub_5_then_ssub_0
      0,	// dsub_5_then_ssub_1
      0,	// dsub_4_then_ssub_0
      0,	// dsub_4_then_ssub_1
      45,	// dsub_0_dsub_2 -> DTriple_with_ssub_0
      0,	// dsub_0_dsub_1_dsub_2
      0,	// dsub_1_dsub_3
      0,	// dsub_1_dsub_2_dsub_3
      45,	// dsub_1_dsub_2 -> DTriple_with_ssub_0
      0,	// dsub_0_dsub_2_dsub_4
      0,	// dsub_0_dsub_2_dsub_4_dsub_6
      0,	// dsub_1_dsub_3_dsub_5
      0,	// dsub_1_dsub_3_dsub_5_dsub_7
      0,	// dsub_1_dsub_2_dsub_3_dsub_4
      0,	// dsub_2_dsub_4
      0,	// dsub_2_dsub_3_dsub_4
      0,	// dsub_2_dsub_4_dsub_6
      0,	// dsub_3_dsub_5
      0,	// dsub_3_dsub_4_dsub_5
      0,	// dsub_3_dsub_5_dsub_7
      0,	// dsub_3_dsub_4
      0,	// dsub_3_dsub_4_dsub_5_dsub_6
      0,	// dsub_4_dsub_6
      0,	// dsub_4_dsub_5_dsub_6
      0,	// dsub_5_dsub_7
      0,	// dsub_5_dsub_6_dsub_7
      0,	// dsub_5_dsub_6
      0,	// qsub_1_qsub_2
    },
    {	// DTriple_with_dsub_1_dsub_2_in_QPR
      46,	// dsub_0 -> DTriple_with_dsub_1_dsub_2_in_QPR
      46,	// dsub_1 -> DTriple_with_dsub_1_dsub_2_in_QPR
      46,	// dsub_2 -> DTriple_with_dsub_1_dsub_2_in_QPR
      0,	// dsub_3
      0,	// dsub_4
      0,	// dsub_5
      0,	// dsub_6
      0,	// dsub_7
      0,	// gsub_0
      0,	// gsub_1
      0,	// qqsub_0
      0,	// qqsub_1
      46,	// qsub_0 -> DTriple_with_dsub_1_dsub_2_in_QPR
      0,	// qsub_1
      0,	// qsub_2
      0,	// qsub_3
      55,	// ssub_0 -> DTriple_with_ssub_0_and_DTriple_with_dsub_1_dsub_2_in_QPR
      55,	// ssub_1 -> DTriple_with_ssub_0_and_DTriple_with_dsub_1_dsub_2_in_QPR
      56,	// ssub_2 -> DTriple_with_dsub_1_dsub_2_in_QPR_VFP2
      56,	// ssub_3 -> DTriple_with_dsub_1_dsub_2_in_QPR_VFP2
      56,	// dsub_2_then_ssub_0 -> DTriple_with_dsub_1_dsub_2_in_QPR_VFP2
      56,	// dsub_2_then_ssub_1 -> DTriple_with_dsub_1_dsub_2_in_QPR_VFP2
      0,	// dsub_3_then_ssub_0
      0,	// dsub_3_then_ssub_1
      0,	// dsub_7_then_ssub_0
      0,	// dsub_7_then_ssub_1
      0,	// dsub_6_then_ssub_0
      0,	// dsub_6_then_ssub_1
      0,	// dsub_5_then_ssub_0
      0,	// dsub_5_then_ssub_1
      0,	// dsub_4_then_ssub_0
      0,	// dsub_4_then_ssub_1
      46,	// dsub_0_dsub_2 -> DTriple_with_dsub_1_dsub_2_in_QPR
      0,	// dsub_0_dsub_1_dsub_2
      0,	// dsub_1_dsub_3
      0,	// dsub_1_dsub_2_dsub_3
      46,	// dsub_1_dsub_2 -> DTriple_with_dsub_1_dsub_2_in_QPR
      0,	// dsub_0_dsub_2_dsub_4
      0,	// dsub_0_dsub_2_dsub_4_dsub_6
      0,	// dsub_1_dsub_3_dsub_5
      0,	// dsub_1_dsub_3_dsub_5_dsub_7
      0,	// dsub_1_dsub_2_dsub_3_dsub_4
      0,	// dsub_2_dsub_4
      0,	// dsub_2_dsub_3_dsub_4
      0,	// dsub_2_dsub_4_dsub_6
      0,	// dsub_3_dsub_5
      0,	// dsub_3_dsub_4_dsub_5
      0,	// dsub_3_dsub_5_dsub_7
      0,	// dsub_3_dsub_4
      0,	// dsub_3_dsub_4_dsub_5_dsub_6
      0,	// dsub_4_dsub_6
      0,	// dsub_4_dsub_5_dsub_6
      0,	// dsub_5_dsub_7
      0,	// dsub_5_dsub_6_dsub_7
      0,	// dsub_5_dsub_6
      0,	// qsub_1_qsub_2
    },
    {	// DTriple_with_qsub_0_in_QPR
      47,	// dsub_0 -> DTriple_with_qsub_0_in_QPR
      47,	// dsub_1 -> DTriple_with_qsub_0_in_QPR
      47,	// dsub_2 -> DTriple_with_qsub_0_in_QPR
      0,	// dsub_3
      0,	// dsub_4
      0,	// dsub_5
      0,	// dsub_6
      0,	// dsub_7
      0,	// gsub_0
      0,	// gsub_1
      0,	// qqsub_0
      0,	// qqsub_1
      47,	// qsub_0 -> DTriple_with_qsub_0_in_QPR
      0,	// qsub_1
      0,	// qsub_2
      0,	// qsub_3
      54,	// ssub_0 -> DTriple_with_qsub_0_in_QPR_VFP2
      54,	// ssub_1 -> DTriple_with_qsub_0_in_QPR_VFP2
      54,	// ssub_2 -> DTriple_with_qsub_0_in_QPR_VFP2
      54,	// ssub_3 -> DTriple_with_qsub_0_in_QPR_VFP2
      58,	// dsub_2_then_ssub_0 -> DTriple_with_dsub_2_then_ssub_0_and_DTriple_with_qsub_0_in_QPR
      58,	// dsub_2_then_ssub_1 -> DTriple_with_dsub_2_then_ssub_0_and_DTriple_with_qsub_0_in_QPR
      0,	// dsub_3_then_ssub_0
      0,	// dsub_3_then_ssub_1
      0,	// dsub_7_then_ssub_0
      0,	// dsub_7_then_ssub_1
      0,	// dsub_6_then_ssub_0
      0,	// dsub_6_then_ssub_1
      0,	// dsub_5_then_ssub_0
      0,	// dsub_5_then_ssub_1
      0,	// dsub_4_then_ssub_0
      0,	// dsub_4_then_ssub_1
      47,	// dsub_0_dsub_2 -> DTriple_with_qsub_0_in_QPR
      0,	// dsub_0_dsub_1_dsub_2
      0,	// dsub_1_dsub_3
      0,	// dsub_1_dsub_2_dsub_3
      47,	// dsub_1_dsub_2 -> DTriple_with_qsub_0_in_QPR
      0,	// dsub_0_dsub_2_dsub_4
      0,	// dsub_0_dsub_2_dsub_4_dsub_6
      0,	// dsub_1_dsub_3_dsub_5
      0,	// dsub_1_dsub_3_dsub_5_dsub_7
      0,	// dsub_1_dsub_2_dsub_3_dsub_4
      0,	// dsub_2_dsub_4
      0,	// dsub_2_dsub_3_dsub_4
      0,	// dsub_2_dsub_4_dsub_6
      0,	// dsub_3_dsub_5
      0,	// dsub_3_dsub_4_dsub_5
      0,	// dsub_3_dsub_5_dsub_7
      0,	// dsub_3_dsub_4
      0,	// dsub_3_dsub_4_dsub_5_dsub_6
      0,	// dsub_4_dsub_6
      0,	// dsub_4_dsub_5_dsub_6
      0,	// dsub_5_dsub_7
      0,	// dsub_5_dsub_6_dsub_7
      0,	// dsub_5_dsub_6
      0,	// qsub_1_qsub_2
    },
    {	// DTriple_with_ssub_2
      48,	// dsub_0 -> DTriple_with_ssub_2
      48,	// dsub_1 -> DTriple_with_ssub_2
      48,	// dsub_2 -> DTriple_with_ssub_2
      0,	// dsub_3
      0,	// dsub_4
      0,	// dsub_5
      0,	// dsub_6
      0,	// dsub_7
      0,	// gsub_0
      0,	// gsub_1
      0,	// qqsub_0
      0,	// qqsub_1
      48,	// qsub_0 -> DTriple_with_ssub_2
      0,	// qsub_1
      0,	// qsub_2
      0,	// qsub_3
      48,	// ssub_0 -> DTriple_with_ssub_2
      48,	// ssub_1 -> DTriple_with_ssub_2
      48,	// ssub_2 -> DTriple_with_ssub_2
      48,	// ssub_3 -> DTriple_with_ssub_2
      50,	// dsub_2_then_ssub_0 -> DTriple_with_dsub_2_then_ssub_0
      50,	// dsub_2_then_ssub_1 -> DTriple_with_dsub_2_then_ssub_0
      0,	// dsub_3_then_ssub_0
      0,	// dsub_3_then_ssub_1
      0,	// dsub_7_then_ssub_0
      0,	// dsub_7_then_ssub_1
      0,	// dsub_6_then_ssub_0
      0,	// dsub_6_then_ssub_1
      0,	// dsub_5_then_ssub_0
      0,	// dsub_5_then_ssub_1
      0,	// dsub_4_then_ssub_0
      0,	// dsub_4_then_ssub_1
      48,	// dsub_0_dsub_2 -> DTriple_with_ssub_2
      0,	// dsub_0_dsub_1_dsub_2
      0,	// dsub_1_dsub_3
      0,	// dsub_1_dsub_2_dsub_3
      48,	// dsub_1_dsub_2 -> DTriple_with_ssub_2
      0,	// dsub_0_dsub_2_dsub_4
      0,	// dsub_0_dsub_2_dsub_4_dsub_6
      0,	// dsub_1_dsub_3_dsub_5
      0,	// dsub_1_dsub_3_dsub_5_dsub_7
      0,	// dsub_1_dsub_2_dsub_3_dsub_4
      0,	// dsub_2_dsub_4
      0,	// dsub_2_dsub_3_dsub_4
      0,	// dsub_2_dsub_4_dsub_6
      0,	// dsub_3_dsub_5
      0,	// dsub_3_dsub_4_dsub_5
      0,	// dsub_3_dsub_5_dsub_7
      0,	// dsub_3_dsub_4
      0,	// dsub_3_dsub_4_dsub_5_dsub_6
      0,	// dsub_4_dsub_6
      0,	// dsub_4_dsub_5_dsub_6
      0,	// dsub_5_dsub_7
      0,	// dsub_5_dsub_6_dsub_7
      0,	// dsub_5_dsub_6
      0,	// qsub_1_qsub_2
    },
    {	// DTripleSpc_with_dsub_2_then_ssub_0
      49,	// dsub_0 -> DTripleSpc_with_dsub_2_then_ssub_0
      0,	// dsub_1
      49,	// dsub_2 -> DTripleSpc_with_dsub_2_then_ssub_0
      0,	// dsub_3
      49,	// dsub_4 -> DTripleSpc_with_dsub_2_then_ssub_0
      0,	// dsub_5
      0,	// dsub_6
      0,	// dsub_7
      0,	// gsub_0
      0,	// gsub_1
      0,	// qqsub_0
      0,	// qqsub_1
      0,	// qsub_0
      0,	// qsub_1
      0,	// qsub_2
      0,	// qsub_3
      49,	// ssub_0 -> DTripleSpc_with_dsub_2_then_ssub_0
      49,	// ssub_1 -> DTripleSpc_with_dsub_2_then_ssub_0
      0,	// ssub_2
      0,	// ssub_3
      49,	// dsub_2_then_ssub_0 -> DTripleSpc_with_dsub_2_then_ssub_0
      49,	// dsub_2_then_ssub_1 -> DTripleSpc_with_dsub_2_then_ssub_0
      0,	// dsub_3_then_ssub_0
      0,	// dsub_3_then_ssub_1
      0,	// dsub_7_then_ssub_0
      0,	// dsub_7_then_ssub_1
      0,	// dsub_6_then_ssub_0
      0,	// dsub_6_then_ssub_1
      0,	// dsub_5_then_ssub_0
      0,	// dsub_5_then_ssub_1
      51,	// dsub_4_then_ssub_0 -> DTripleSpc_with_dsub_4_then_ssub_0
      51,	// dsub_4_then_ssub_1 -> DTripleSpc_with_dsub_4_then_ssub_0
      49,	// dsub_0_dsub_2 -> DTripleSpc_with_dsub_2_then_ssub_0
      0,	// dsub_0_dsub_1_dsub_2
      0,	// dsub_1_dsub_3
      0,	// dsub_1_dsub_2_dsub_3
      0,	// dsub_1_dsub_2
      0,	// dsub_0_dsub_2_dsub_4
      0,	// dsub_0_dsub_2_dsub_4_dsub_6
      0,	// dsub_1_dsub_3_dsub_5
      0,	// dsub_1_dsub_3_dsub_5_dsub_7
      0,	// dsub_1_dsub_2_dsub_3_dsub_4
      49,	// dsub_2_dsub_4 -> DTripleSpc_with_dsub_2_then_ssub_0
      0,	// dsub_2_dsub_3_dsub_4
      0,	// dsub_2_dsub_4_dsub_6
      0,	// dsub_3_dsub_5
      0,	// dsub_3_dsub_4_dsub_5
      0,	// dsub_3_dsub_5_dsub_7
      0,	// dsub_3_dsub_4
      0,	// dsub_3_dsub_4_dsub_5_dsub_6
      0,	// dsub_4_dsub_6
      0,	// dsub_4_dsub_5_dsub_6
      0,	// dsub_5_dsub_7
      0,	// dsub_5_dsub_6_dsub_7
      0,	// dsub_5_dsub_6
      0,	// qsub_1_qsub_2
    },
    {	// DTriple_with_dsub_2_then_ssub_0
      50,	// dsub_0 -> DTriple_with_dsub_2_then_ssub_0
      50,	// dsub_1 -> DTriple_with_dsub_2_then_ssub_0
      50,	// dsub_2 -> DTriple_with_dsub_2_then_ssub_0
      0,	// dsub_3
      0,	// dsub_4
      0,	// dsub_5
      0,	// dsub_6
      0,	// dsub_7
      0,	// gsub_0
      0,	// gsub_1
      0,	// qqsub_0
      0,	// qqsub_1
      50,	// qsub_0 -> DTriple_with_dsub_2_then_ssub_0
      0,	// qsub_1
      0,	// qsub_2
      0,	// qsub_3
      50,	// ssub_0 -> DTriple_with_dsub_2_then_ssub_0
      50,	// ssub_1 -> DTriple_with_dsub_2_then_ssub_0
      50,	// ssub_2 -> DTriple_with_dsub_2_then_ssub_0
      50,	// ssub_3 -> DTriple_with_dsub_2_then_ssub_0
      50,	// dsub_2_then_ssub_0 -> DTriple_with_dsub_2_then_ssub_0
      50,	// dsub_2_then_ssub_1 -> DTriple_with_dsub_2_then_ssub_0
      0,	// dsub_3_then_ssub_0
      0,	// dsub_3_then_ssub_1
      0,	// dsub_7_then_ssub_0
      0,	// dsub_7_then_ssub_1
      0,	// dsub_6_then_ssub_0
      0,	// dsub_6_then_ssub_1
      0,	// dsub_5_then_ssub_0
      0,	// dsub_5_then_ssub_1
      0,	// dsub_4_then_ssub_0
      0,	// dsub_4_then_ssub_1
      50,	// dsub_0_dsub_2 -> DTriple_with_dsub_2_then_ssub_0
      0,	// dsub_0_dsub_1_dsub_2
      0,	// dsub_1_dsub_3
      0,	// dsub_1_dsub_2_dsub_3
      50,	// dsub_1_dsub_2 -> DTriple_with_dsub_2_then_ssub_0
      0,	// dsub_0_dsub_2_dsub_4
      0,	// dsub_0_dsub_2_dsub_4_dsub_6
      0,	// dsub_1_dsub_3_dsub_5
      0,	// dsub_1_dsub_3_dsub_5_dsub_7
      0,	// dsub_1_dsub_2_dsub_3_dsub_4
      0,	// dsub_2_dsub_4
      0,	// dsub_2_dsub_3_dsub_4
      0,	// dsub_2_dsub_4_dsub_6
      0,	// dsub_3_dsub_5
      0,	// dsub_3_dsub_4_dsub_5
      0,	// dsub_3_dsub_5_dsub_7
      0,	// dsub_3_dsub_4
      0,	// dsub_3_dsub_4_dsub_5_dsub_6
      0,	// dsub_4_dsub_6
      0,	// dsub_4_dsub_5_dsub_6
      0,	// dsub_5_dsub_7
      0,	// dsub_5_dsub_6_dsub_7
      0,	// dsub_5_dsub_6
      0,	// qsub_1_qsub_2
    },
    {	// DTripleSpc_with_dsub_4_then_ssub_0
      51,	// dsub_0 -> DTripleSpc_with_dsub_4_then_ssub_0
      0,	// dsub_1
      51,	// dsub_2 -> DTripleSpc_with_dsub_4_then_ssub_0
      0,	// dsub_3
      51,	// dsub_4 -> DTripleSpc_with_dsub_4_then_ssub_0
      0,	// dsub_5
      0,	// dsub_6
      0,	// dsub_7
      0,	// gsub_0
      0,	// gsub_1
      0,	// qqsub_0
      0,	// qqsub_1
      0,	// qsub_0
      0,	// qsub_1
      0,	// qsub_2
      0,	// qsub_3
      51,	// ssub_0 -> DTripleSpc_with_dsub_4_then_ssub_0
      51,	// ssub_1 -> DTripleSpc_with_dsub_4_then_ssub_0
      0,	// ssub_2
      0,	// ssub_3
      51,	// dsub_2_then_ssub_0 -> DTripleSpc_with_dsub_4_then_ssub_0
      51,	// dsub_2_then_ssub_1 -> DTripleSpc_with_dsub_4_then_ssub_0
      0,	// dsub_3_then_ssub_0
      0,	// dsub_3_then_ssub_1
      0,	// dsub_7_then_ssub_0
      0,	// dsub_7_then_ssub_1
      0,	// dsub_6_then_ssub_0
      0,	// dsub_6_then_ssub_1
      0,	// dsub_5_then_ssub_0
      0,	// dsub_5_then_ssub_1
      51,	// dsub_4_then_ssub_0 -> DTripleSpc_with_dsub_4_then_ssub_0
      51,	// dsub_4_then_ssub_1 -> DTripleSpc_with_dsub_4_then_ssub_0
      51,	// dsub_0_dsub_2 -> DTripleSpc_with_dsub_4_then_ssub_0
      0,	// dsub_0_dsub_1_dsub_2
      0,	// dsub_1_dsub_3
      0,	// dsub_1_dsub_2_dsub_3
      0,	// dsub_1_dsub_2
      0,	// dsub_0_dsub_2_dsub_4
      0,	// dsub_0_dsub_2_dsub_4_dsub_6
      0,	// dsub_1_dsub_3_dsub_5
      0,	// dsub_1_dsub_3_dsub_5_dsub_7
      0,	// dsub_1_dsub_2_dsub_3_dsub_4
      51,	// dsub_2_dsub_4 -> DTripleSpc_with_dsub_4_then_ssub_0
      0,	// dsub_2_dsub_3_dsub_4
      0,	// dsub_2_dsub_4_dsub_6
      0,	// dsub_3_dsub_5
      0,	// dsub_3_dsub_4_dsub_5
      0,	// dsub_3_dsub_5_dsub_7
      0,	// dsub_3_dsub_4
      0,	// dsub_3_dsub_4_dsub_5_dsub_6
      0,	// dsub_4_dsub_6
      0,	// dsub_4_dsub_5_dsub_6
      0,	// dsub_5_dsub_7
      0,	// dsub_5_dsub_6_dsub_7
      0,	// dsub_5_dsub_6
      0,	// qsub_1_qsub_2
    },
    {	// DTripleSpc_with_dsub_0_in_DPR_8
      52,	// dsub_0 -> DTripleSpc_with_dsub_0_in_DPR_8
      0,	// dsub_1
      52,	// dsub_2 -> DTripleSpc_with_dsub_0_in_DPR_8
      0,	// dsub_3
      52,	// dsub_4 -> DTripleSpc_with_dsub_0_in_DPR_8
      0,	// dsub_5
      0,	// dsub_6
      0,	// dsub_7
      0,	// gsub_0
      0,	// gsub_1
      0,	// qqsub_0
      0,	// qqsub_1
      0,	// qsub_0
      0,	// qsub_1
      0,	// qsub_2
      0,	// qsub_3
      52,	// ssub_0 -> DTripleSpc_with_dsub_0_in_DPR_8
      52,	// ssub_1 -> DTripleSpc_with_dsub_0_in_DPR_8
      0,	// ssub_2
      0,	// ssub_3
      52,	// dsub_2_then_ssub_0 -> DTripleSpc_with_dsub_0_in_DPR_8
      52,	// dsub_2_then_ssub_1 -> DTripleSpc_with_dsub_0_in_DPR_8
      0,	// dsub_3_then_ssub_0
      0,	// dsub_3_then_ssub_1
      0,	// dsub_7_then_ssub_0
      0,	// dsub_7_then_ssub_1
      0,	// dsub_6_then_ssub_0
      0,	// dsub_6_then_ssub_1
      0,	// dsub_5_then_ssub_0
      0,	// dsub_5_then_ssub_1
      52,	// dsub_4_then_ssub_0 -> DTripleSpc_with_dsub_0_in_DPR_8
      52,	// dsub_4_then_ssub_1 -> DTripleSpc_with_dsub_0_in_DPR_8
      52,	// dsub_0_dsub_2 -> DTripleSpc_with_dsub_0_in_DPR_8
      0,	// dsub_0_dsub_1_dsub_2
      0,	// dsub_1_dsub_3
      0,	// dsub_1_dsub_2_dsub_3
      0,	// dsub_1_dsub_2
      0,	// dsub_0_dsub_2_dsub_4
      0,	// dsub_0_dsub_2_dsub_4_dsub_6
      0,	// dsub_1_dsub_3_dsub_5
      0,	// dsub_1_dsub_3_dsub_5_dsub_7
      0,	// dsub_1_dsub_2_dsub_3_dsub_4
      52,	// dsub_2_dsub_4 -> DTripleSpc_with_dsub_0_in_DPR_8
      0,	// dsub_2_dsub_3_dsub_4
      0,	// dsub_2_dsub_4_dsub_6
      0,	// dsub_3_dsub_5
      0,	// dsub_3_dsub_4_dsub_5
      0,	// dsub_3_dsub_5_dsub_7
      0,	// dsub_3_dsub_4
      0,	// dsub_3_dsub_4_dsub_5_dsub_6
      0,	// dsub_4_dsub_6
      0,	// dsub_4_dsub_5_dsub_6
      0,	// dsub_5_dsub_7
      0,	// dsub_5_dsub_6_dsub_7
      0,	// dsub_5_dsub_6
      0,	// qsub_1_qsub_2
    },
    {	// DTriple_with_dsub_0_in_DPR_8
      53,	// dsub_0 -> DTriple_with_dsub_0_in_DPR_8
      53,	// dsub_1 -> DTriple_with_dsub_0_in_DPR_8
      53,	// dsub_2 -> DTriple_with_dsub_0_in_DPR_8
      0,	// dsub_3
      0,	// dsub_4
      0,	// dsub_5
      0,	// dsub_6
      0,	// dsub_7
      0,	// gsub_0
      0,	// gsub_1
      0,	// qqsub_0
      0,	// qqsub_1
      53,	// qsub_0 -> DTriple_with_dsub_0_in_DPR_8
      0,	// qsub_1
      0,	// qsub_2
      0,	// qsub_3
      53,	// ssub_0 -> DTriple_with_dsub_0_in_DPR_8
      53,	// ssub_1 -> DTriple_with_dsub_0_in_DPR_8
      53,	// ssub_2 -> DTriple_with_dsub_0_in_DPR_8
      53,	// ssub_3 -> DTriple_with_dsub_0_in_DPR_8
      53,	// dsub_2_then_ssub_0 -> DTriple_with_dsub_0_in_DPR_8
      53,	// dsub_2_then_ssub_1 -> DTriple_with_dsub_0_in_DPR_8
      0,	// dsub_3_then_ssub_0
      0,	// dsub_3_then_ssub_1
      0,	// dsub_7_then_ssub_0
      0,	// dsub_7_then_ssub_1
      0,	// dsub_6_then_ssub_0
      0,	// dsub_6_then_ssub_1
      0,	// dsub_5_then_ssub_0
      0,	// dsub_5_then_ssub_1
      0,	// dsub_4_then_ssub_0
      0,	// dsub_4_then_ssub_1
      53,	// dsub_0_dsub_2 -> DTriple_with_dsub_0_in_DPR_8
      0,	// dsub_0_dsub_1_dsub_2
      0,	// dsub_1_dsub_3
      0,	// dsub_1_dsub_2_dsub_3
      53,	// dsub_1_dsub_2 -> DTriple_with_dsub_0_in_DPR_8
      0,	// dsub_0_dsub_2_dsub_4
      0,	// dsub_0_dsub_2_dsub_4_dsub_6
      0,	// dsub_1_dsub_3_dsub_5
      0,	// dsub_1_dsub_3_dsub_5_dsub_7
      0,	// dsub_1_dsub_2_dsub_3_dsub_4
      0,	// dsub_2_dsub_4
      0,	// dsub_2_dsub_3_dsub_4
      0,	// dsub_2_dsub_4_dsub_6
      0,	// dsub_3_dsub_5
      0,	// dsub_3_dsub_4_dsub_5
      0,	// dsub_3_dsub_5_dsub_7
      0,	// dsub_3_dsub_4
      0,	// dsub_3_dsub_4_dsub_5_dsub_6
      0,	// dsub_4_dsub_6
      0,	// dsub_4_dsub_5_dsub_6
      0,	// dsub_5_dsub_7
      0,	// dsub_5_dsub_6_dsub_7
      0,	// dsub_5_dsub_6
      0,	// qsub_1_qsub_2
    },
    {	// DTriple_with_qsub_0_in_QPR_VFP2
      54,	// dsub_0 -> DTriple_with_qsub_0_in_QPR_VFP2
      54,	// dsub_1 -> DTriple_with_qsub_0_in_QPR_VFP2
      54,	// dsub_2 -> DTriple_with_qsub_0_in_QPR_VFP2
      0,	// dsub_3
      0,	// dsub_4
      0,	// dsub_5
      0,	// dsub_6
      0,	// dsub_7
      0,	// gsub_0
      0,	// gsub_1
      0,	// qqsub_0
      0,	// qqsub_1
      54,	// qsub_0 -> DTriple_with_qsub_0_in_QPR_VFP2
      0,	// qsub_1
      0,	// qsub_2
      0,	// qsub_3
      54,	// ssub_0 -> DTriple_with_qsub_0_in_QPR_VFP2
      54,	// ssub_1 -> DTriple_with_qsub_0_in_QPR_VFP2
      54,	// ssub_2 -> DTriple_with_qsub_0_in_QPR_VFP2
      54,	// ssub_3 -> DTriple_with_qsub_0_in_QPR_VFP2
      58,	// dsub_2_then_ssub_0 -> DTriple_with_dsub_2_then_ssub_0_and_DTriple_with_qsub_0_in_QPR
      58,	// dsub_2_then_ssub_1 -> DTriple_with_dsub_2_then_ssub_0_and_DTriple_with_qsub_0_in_QPR
      0,	// dsub_3_then_ssub_0
      0,	// dsub_3_then_ssub_1
      0,	// dsub_7_then_ssub_0
      0,	// dsub_7_then_ssub_1
      0,	// dsub_6_then_ssub_0
      0,	// dsub_6_then_ssub_1
      0,	// dsub_5_then_ssub_0
      0,	// dsub_5_then_ssub_1
      0,	// dsub_4_then_ssub_0
      0,	// dsub_4_then_ssub_1
      54,	// dsub_0_dsub_2 -> DTriple_with_qsub_0_in_QPR_VFP2
      0,	// dsub_0_dsub_1_dsub_2
      0,	// dsub_1_dsub_3
      0,	// dsub_1_dsub_2_dsub_3
      54,	// dsub_1_dsub_2 -> DTriple_with_qsub_0_in_QPR_VFP2
      0,	// dsub_0_dsub_2_dsub_4
      0,	// dsub_0_dsub_2_dsub_4_dsub_6
      0,	// dsub_1_dsub_3_dsub_5
      0,	// dsub_1_dsub_3_dsub_5_dsub_7
      0,	// dsub_1_dsub_2_dsub_3_dsub_4
      0,	// dsub_2_dsub_4
      0,	// dsub_2_dsub_3_dsub_4
      0,	// dsub_2_dsub_4_dsub_6
      0,	// dsub_3_dsub_5
      0,	// dsub_3_dsub_4_dsub_5
      0,	// dsub_3_dsub_5_dsub_7
      0,	// dsub_3_dsub_4
      0,	// dsub_3_dsub_4_dsub_5_dsub_6
      0,	// dsub_4_dsub_6
      0,	// dsub_4_dsub_5_dsub_6
      0,	// dsub_5_dsub_7
      0,	// dsub_5_dsub_6_dsub_7
      0,	// dsub_5_dsub_6
      0,	// qsub_1_qsub_2
    },
    {	// DTriple_with_ssub_0_and_DTriple_with_dsub_1_dsub_2_in_QPR
      55,	// dsub_0 -> DTriple_with_ssub_0_and_DTriple_with_dsub_1_dsub_2_in_QPR
      55,	// dsub_1 -> DTriple_with_ssub_0_and_DTriple_with_dsub_1_dsub_2_in_QPR
      55,	// dsub_2 -> DTriple_with_ssub_0_and_DTriple_with_dsub_1_dsub_2_in_QPR
      0,	// dsub_3
      0,	// dsub_4
      0,	// dsub_5
      0,	// dsub_6
      0,	// dsub_7
      0,	// gsub_0
      0,	// gsub_1
      0,	// qqsub_0
      0,	// qqsub_1
      55,	// qsub_0 -> DTriple_with_ssub_0_and_DTriple_with_dsub_1_dsub_2_in_QPR
      0,	// qsub_1
      0,	// qsub_2
      0,	// qsub_3
      55,	// ssub_0 -> DTriple_with_ssub_0_and_DTriple_with_dsub_1_dsub_2_in_QPR
      55,	// ssub_1 -> DTriple_with_ssub_0_and_DTriple_with_dsub_1_dsub_2_in_QPR
      56,	// ssub_2 -> DTriple_with_dsub_1_dsub_2_in_QPR_VFP2
      56,	// ssub_3 -> DTriple_with_dsub_1_dsub_2_in_QPR_VFP2
      56,	// dsub_2_then_ssub_0 -> DTriple_with_dsub_1_dsub_2_in_QPR_VFP2
      56,	// dsub_2_then_ssub_1 -> DTriple_with_dsub_1_dsub_2_in_QPR_VFP2
      0,	// dsub_3_then_ssub_0
      0,	// dsub_3_then_ssub_1
      0,	// dsub_7_then_ssub_0
      0,	// dsub_7_then_ssub_1
      0,	// dsub_6_then_ssub_0
      0,	// dsub_6_then_ssub_1
      0,	// dsub_5_then_ssub_0
      0,	// dsub_5_then_ssub_1
      0,	// dsub_4_then_ssub_0
      0,	// dsub_4_then_ssub_1
      55,	// dsub_0_dsub_2 -> DTriple_with_ssub_0_and_DTriple_with_dsub_1_dsub_2_in_QPR
      0,	// dsub_0_dsub_1_dsub_2
      0,	// dsub_1_dsub_3
      0,	// dsub_1_dsub_2_dsub_3
      55,	// dsub_1_dsub_2 -> DTriple_with_ssub_0_and_DTriple_with_dsub_1_dsub_2_in_QPR
      0,	// dsub_0_dsub_2_dsub_4
      0,	// dsub_0_dsub_2_dsub_4_dsub_6
      0,	// dsub_1_dsub_3_dsub_5
      0,	// dsub_1_dsub_3_dsub_5_dsub_7
      0,	// dsub_1_dsub_2_dsub_3_dsub_4
      0,	// dsub_2_dsub_4
      0,	// dsub_2_dsub_3_dsub_4
      0,	// dsub_2_dsub_4_dsub_6
      0,	// dsub_3_dsub_5
      0,	// dsub_3_dsub_4_dsub_5
      0,	// dsub_3_dsub_5_dsub_7
      0,	// dsub_3_dsub_4
      0,	// dsub_3_dsub_4_dsub_5_dsub_6
      0,	// dsub_4_dsub_6
      0,	// dsub_4_dsub_5_dsub_6
      0,	// dsub_5_dsub_7
      0,	// dsub_5_dsub_6_dsub_7
      0,	// dsub_5_dsub_6
      0,	// qsub_1_qsub_2
    },
    {	// DTriple_with_dsub_1_dsub_2_in_QPR_VFP2
      56,	// dsub_0 -> DTriple_with_dsub_1_dsub_2_in_QPR_VFP2
      56,	// dsub_1 -> DTriple_with_dsub_1_dsub_2_in_QPR_VFP2
      56,	// dsub_2 -> DTriple_with_dsub_1_dsub_2_in_QPR_VFP2
      0,	// dsub_3
      0,	// dsub_4
      0,	// dsub_5
      0,	// dsub_6
      0,	// dsub_7
      0,	// gsub_0
      0,	// gsub_1
      0,	// qqsub_0
      0,	// qqsub_1
      56,	// qsub_0 -> DTriple_with_dsub_1_dsub_2_in_QPR_VFP2
      0,	// qsub_1
      0,	// qsub_2
      0,	// qsub_3
      56,	// ssub_0 -> DTriple_with_dsub_1_dsub_2_in_QPR_VFP2
      56,	// ssub_1 -> DTriple_with_dsub_1_dsub_2_in_QPR_VFP2
      56,	// ssub_2 -> DTriple_with_dsub_1_dsub_2_in_QPR_VFP2
      56,	// ssub_3 -> DTriple_with_dsub_1_dsub_2_in_QPR_VFP2
      56,	// dsub_2_then_ssub_0 -> DTriple_with_dsub_1_dsub_2_in_QPR_VFP2
      56,	// dsub_2_then_ssub_1 -> DTriple_with_dsub_1_dsub_2_in_QPR_VFP2
      0,	// dsub_3_then_ssub_0
      0,	// dsub_3_then_ssub_1
      0,	// dsub_7_then_ssub_0
      0,	// dsub_7_then_ssub_1
      0,	// dsub_6_then_ssub_0
      0,	// dsub_6_then_ssub_1
      0,	// dsub_5_then_ssub_0
      0,	// dsub_5_then_ssub_1
      0,	// dsub_4_then_ssub_0
      0,	// dsub_4_then_ssub_1
      56,	// dsub_0_dsub_2 -> DTriple_with_dsub_1_dsub_2_in_QPR_VFP2
      0,	// dsub_0_dsub_1_dsub_2
      0,	// dsub_1_dsub_3
      0,	// dsub_1_dsub_2_dsub_3
      56,	// dsub_1_dsub_2 -> DTriple_with_dsub_1_dsub_2_in_QPR_VFP2
      0,	// dsub_0_dsub_2_dsub_4
      0,	// dsub_0_dsub_2_dsub_4_dsub_6
      0,	// dsub_1_dsub_3_dsub_5
      0,	// dsub_1_dsub_3_dsub_5_dsub_7
      0,	// dsub_1_dsub_2_dsub_3_dsub_4
      0,	// dsub_2_dsub_4
      0,	// dsub_2_dsub_3_dsub_4
      0,	// dsub_2_dsub_4_dsub_6
      0,	// dsub_3_dsub_5
      0,	// dsub_3_dsub_4_dsub_5
      0,	// dsub_3_dsub_5_dsub_7
      0,	// dsub_3_dsub_4
      0,	// dsub_3_dsub_4_dsub_5_dsub_6
      0,	// dsub_4_dsub_6
      0,	// dsub_4_dsub_5_dsub_6
      0,	// dsub_5_dsub_7
      0,	// dsub_5_dsub_6_dsub_7
      0,	// dsub_5_dsub_6
      0,	// qsub_1_qsub_2
    },
    {	// DTriple_with_dsub_1_in_DPR_8
      57,	// dsub_0 -> DTriple_with_dsub_1_in_DPR_8
      57,	// dsub_1 -> DTriple_with_dsub_1_in_DPR_8
      57,	// dsub_2 -> DTriple_with_dsub_1_in_DPR_8
      0,	// dsub_3
      0,	// dsub_4
      0,	// dsub_5
      0,	// dsub_6
      0,	// dsub_7
      0,	// gsub_0
      0,	// gsub_1
      0,	// qqsub_0
      0,	// qqsub_1
      57,	// qsub_0 -> DTriple_with_dsub_1_in_DPR_8
      0,	// qsub_1
      0,	// qsub_2
      0,	// qsub_3
      57,	// ssub_0 -> DTriple_with_dsub_1_in_DPR_8
      57,	// ssub_1 -> DTriple_with_dsub_1_in_DPR_8
      57,	// ssub_2 -> DTriple_with_dsub_1_in_DPR_8
      57,	// ssub_3 -> DTriple_with_dsub_1_in_DPR_8
      57,	// dsub_2_then_ssub_0 -> DTriple_with_dsub_1_in_DPR_8
      57,	// dsub_2_then_ssub_1 -> DTriple_with_dsub_1_in_DPR_8
      0,	// dsub_3_then_ssub_0
      0,	// dsub_3_then_ssub_1
      0,	// dsub_7_then_ssub_0
      0,	// dsub_7_then_ssub_1
      0,	// dsub_6_then_ssub_0
      0,	// dsub_6_then_ssub_1
      0,	// dsub_5_then_ssub_0
      0,	// dsub_5_then_ssub_1
      0,	// dsub_4_then_ssub_0
      0,	// dsub_4_then_ssub_1
      57,	// dsub_0_dsub_2 -> DTriple_with_dsub_1_in_DPR_8
      0,	// dsub_0_dsub_1_dsub_2
      0,	// dsub_1_dsub_3
      0,	// dsub_1_dsub_2_dsub_3
      57,	// dsub_1_dsub_2 -> DTriple_with_dsub_1_in_DPR_8
      0,	// dsub_0_dsub_2_dsub_4
      0,	// dsub_0_dsub_2_dsub_4_dsub_6
      0,	// dsub_1_dsub_3_dsub_5
      0,	// dsub_1_dsub_3_dsub_5_dsub_7
      0,	// dsub_1_dsub_2_dsub_3_dsub_4
      0,	// dsub_2_dsub_4
      0,	// dsub_2_dsub_3_dsub_4
      0,	// dsub_2_dsub_4_dsub_6
      0,	// dsub_3_dsub_5
      0,	// dsub_3_dsub_4_dsub_5
      0,	// dsub_3_dsub_5_dsub_7
      0,	// dsub_3_dsub_4
      0,	// dsub_3_dsub_4_dsub_5_dsub_6
      0,	// dsub_4_dsub_6
      0,	// dsub_4_dsub_5_dsub_6
      0,	// dsub_5_dsub_7
      0,	// dsub_5_dsub_6_dsub_7
      0,	// dsub_5_dsub_6
      0,	// qsub_1_qsub_2
    },
    {	// DTriple_with_dsub_2_then_ssub_0_and_DTriple_with_qsub_0_in_QPR
      58,	// dsub_0 -> DTriple_with_dsub_2_then_ssub_0_and_DTriple_with_qsub_0_in_QPR
      58,	// dsub_1 -> DTriple_with_dsub_2_then_ssub_0_and_DTriple_with_qsub_0_in_QPR
      58,	// dsub_2 -> DTriple_with_dsub_2_then_ssub_0_and_DTriple_with_qsub_0_in_QPR
      0,	// dsub_3
      0,	// dsub_4
      0,	// dsub_5
      0,	// dsub_6
      0,	// dsub_7
      0,	// gsub_0
      0,	// gsub_1
      0,	// qqsub_0
      0,	// qqsub_1
      58,	// qsub_0 -> DTriple_with_dsub_2_then_ssub_0_and_DTriple_with_qsub_0_in_QPR
      0,	// qsub_1
      0,	// qsub_2
      0,	// qsub_3
      58,	// ssub_0 -> DTriple_with_dsub_2_then_ssub_0_and_DTriple_with_qsub_0_in_QPR
      58,	// ssub_1 -> DTriple_with_dsub_2_then_ssub_0_and_DTriple_with_qsub_0_in_QPR
      58,	// ssub_2 -> DTriple_with_dsub_2_then_ssub_0_and_DTriple_with_qsub_0_in_QPR
      58,	// ssub_3 -> DTriple_with_dsub_2_then_ssub_0_and_DTriple_with_qsub_0_in_QPR
      58,	// dsub_2_then_ssub_0 -> DTriple_with_dsub_2_then_ssub_0_and_DTriple_with_qsub_0_in_QPR
      58,	// dsub_2_then_ssub_1 -> DTriple_with_dsub_2_then_ssub_0_and_DTriple_with_qsub_0_in_QPR
      0,	// dsub_3_then_ssub_0
      0,	// dsub_3_then_ssub_1
      0,	// dsub_7_then_ssub_0
      0,	// dsub_7_then_ssub_1
      0,	// dsub_6_then_ssub_0
      0,	// dsub_6_then_ssub_1
      0,	// dsub_5_then_ssub_0
      0,	// dsub_5_then_ssub_1
      0,	// dsub_4_then_ssub_0
      0,	// dsub_4_then_ssub_1
      58,	// dsub_0_dsub_2 -> DTriple_with_dsub_2_then_ssub_0_and_DTriple_with_qsub_0_in_QPR
      0,	// dsub_0_dsub_1_dsub_2
      0,	// dsub_1_dsub_3
      0,	// dsub_1_dsub_2_dsub_3
      58,	// dsub_1_dsub_2 -> DTriple_with_dsub_2_then_ssub_0_and_DTriple_with_qsub_0_in_QPR
      0,	// dsub_0_dsub_2_dsub_4
      0,	// dsub_0_dsub_2_dsub_4_dsub_6
      0,	// dsub_1_dsub_3_dsub_5
      0,	// dsub_1_dsub_3_dsub_5_dsub_7
      0,	// dsub_1_dsub_2_dsub_3_dsub_4
      0,	// dsub_2_dsub_4
      0,	// dsub_2_dsub_3_dsub_4
      0,	// dsub_2_dsub_4_dsub_6
      0,	// dsub_3_dsub_5
      0,	// dsub_3_dsub_4_dsub_5
      0,	// dsub_3_dsub_5_dsub_7
      0,	// dsub_3_dsub_4
      0,	// dsub_3_dsub_4_dsub_5_dsub_6
      0,	// dsub_4_dsub_6
      0,	// dsub_4_dsub_5_dsub_6
      0,	// dsub_5_dsub_7
      0,	// dsub_5_dsub_6_dsub_7
      0,	// dsub_5_dsub_6
      0,	// qsub_1_qsub_2
    },
    {	// DTripleSpc_with_dsub_2_in_DPR_8
      59,	// dsub_0 -> DTripleSpc_with_dsub_2_in_DPR_8
      0,	// dsub_1
      59,	// dsub_2 -> DTripleSpc_with_dsub_2_in_DPR_8
      0,	// dsub_3
      59,	// dsub_4 -> DTripleSpc_with_dsub_2_in_DPR_8
      0,	// dsub_5
      0,	// dsub_6
      0,	// dsub_7
      0,	// gsub_0
      0,	// gsub_1
      0,	// qqsub_0
      0,	// qqsub_1
      0,	// qsub_0
      0,	// qsub_1
      0,	// qsub_2
      0,	// qsub_3
      59,	// ssub_0 -> DTripleSpc_with_dsub_2_in_DPR_8
      59,	// ssub_1 -> DTripleSpc_with_dsub_2_in_DPR_8
      0,	// ssub_2
      0,	// ssub_3
      59,	// dsub_2_then_ssub_0 -> DTripleSpc_with_dsub_2_in_DPR_8
      59,	// dsub_2_then_ssub_1 -> DTripleSpc_with_dsub_2_in_DPR_8
      0,	// dsub_3_then_ssub_0
      0,	// dsub_3_then_ssub_1
      0,	// dsub_7_then_ssub_0
      0,	// dsub_7_then_ssub_1
      0,	// dsub_6_then_ssub_0
      0,	// dsub_6_then_ssub_1
      0,	// dsub_5_then_ssub_0
      0,	// dsub_5_then_ssub_1
      59,	// dsub_4_then_ssub_0 -> DTripleSpc_with_dsub_2_in_DPR_8
      59,	// dsub_4_then_ssub_1 -> DTripleSpc_with_dsub_2_in_DPR_8
      59,	// dsub_0_dsub_2 -> DTripleSpc_with_dsub_2_in_DPR_8
      0,	// dsub_0_dsub_1_dsub_2
      0,	// dsub_1_dsub_3
      0,	// dsub_1_dsub_2_dsub_3
      0,	// dsub_1_dsub_2
      0,	// dsub_0_dsub_2_dsub_4
      0,	// dsub_0_dsub_2_dsub_4_dsub_6
      0,	// dsub_1_dsub_3_dsub_5
      0,	// dsub_1_dsub_3_dsub_5_dsub_7
      0,	// dsub_1_dsub_2_dsub_3_dsub_4
      59,	// dsub_2_dsub_4 -> DTripleSpc_with_dsub_2_in_DPR_8
      0,	// dsub_2_dsub_3_dsub_4
      0,	// dsub_2_dsub_4_dsub_6
      0,	// dsub_3_dsub_5
      0,	// dsub_3_dsub_4_dsub_5
      0,	// dsub_3_dsub_5_dsub_7
      0,	// dsub_3_dsub_4
      0,	// dsub_3_dsub_4_dsub_5_dsub_6
      0,	// dsub_4_dsub_6
      0,	// dsub_4_dsub_5_dsub_6
      0,	// dsub_5_dsub_7
      0,	// dsub_5_dsub_6_dsub_7
      0,	// dsub_5_dsub_6
      0,	// qsub_1_qsub_2
    },
    {	// DTriple_with_dsub_2_in_DPR_8
      60,	// dsub_0 -> DTriple_with_dsub_2_in_DPR_8
      60,	// dsub_1 -> DTriple_with_dsub_2_in_DPR_8
      60,	// dsub_2 -> DTriple_with_dsub_2_in_DPR_8
      0,	// dsub_3
      0,	// dsub_4
      0,	// dsub_5
      0,	// dsub_6
      0,	// dsub_7
      0,	// gsub_0
      0,	// gsub_1
      0,	// qqsub_0
      0,	// qqsub_1
      60,	// qsub_0 -> DTriple_with_dsub_2_in_DPR_8
      0,	// qsub_1
      0,	// qsub_2
      0,	// qsub_3
      60,	// ssub_0 -> DTriple_with_dsub_2_in_DPR_8
      60,	// ssub_1 -> DTriple_with_dsub_2_in_DPR_8
      60,	// ssub_2 -> DTriple_with_dsub_2_in_DPR_8
      60,	// ssub_3 -> DTriple_with_dsub_2_in_DPR_8
      60,	// dsub_2_then_ssub_0 -> DTriple_with_dsub_2_in_DPR_8
      60,	// dsub_2_then_ssub_1 -> DTriple_with_dsub_2_in_DPR_8
      0,	// dsub_3_then_ssub_0
      0,	// dsub_3_then_ssub_1
      0,	// dsub_7_then_ssub_0
      0,	// dsub_7_then_ssub_1
      0,	// dsub_6_then_ssub_0
      0,	// dsub_6_then_ssub_1
      0,	// dsub_5_then_ssub_0
      0,	// dsub_5_then_ssub_1
      0,	// dsub_4_then_ssub_0
      0,	// dsub_4_then_ssub_1
      60,	// dsub_0_dsub_2 -> DTriple_with_dsub_2_in_DPR_8
      0,	// dsub_0_dsub_1_dsub_2
      0,	// dsub_1_dsub_3
      0,	// dsub_1_dsub_2_dsub_3
      60,	// dsub_1_dsub_2 -> DTriple_with_dsub_2_in_DPR_8
      0,	// dsub_0_dsub_2_dsub_4
      0,	// dsub_0_dsub_2_dsub_4_dsub_6
      0,	// dsub_1_dsub_3_dsub_5
      0,	// dsub_1_dsub_3_dsub_5_dsub_7
      0,	// dsub_1_dsub_2_dsub_3_dsub_4
      0,	// dsub_2_dsub_4
      0,	// dsub_2_dsub_3_dsub_4
      0,	// dsub_2_dsub_4_dsub_6
      0,	// dsub_3_dsub_5
      0,	// dsub_3_dsub_4_dsub_5
      0,	// dsub_3_dsub_5_dsub_7
      0,	// dsub_3_dsub_4
      0,	// dsub_3_dsub_4_dsub_5_dsub_6
      0,	// dsub_4_dsub_6
      0,	// dsub_4_dsub_5_dsub_6
      0,	// dsub_5_dsub_7
      0,	// dsub_5_dsub_6_dsub_7
      0,	// dsub_5_dsub_6
      0,	// qsub_1_qsub_2
    },
    {	// DTripleSpc_with_dsub_4_in_DPR_8
      61,	// dsub_0 -> DTripleSpc_with_dsub_4_in_DPR_8
      0,	// dsub_1
      61,	// dsub_2 -> DTripleSpc_with_dsub_4_in_DPR_8
      0,	// dsub_3
      61,	// dsub_4 -> DTripleSpc_with_dsub_4_in_DPR_8
      0,	// dsub_5
      0,	// dsub_6
      0,	// dsub_7
      0,	// gsub_0
      0,	// gsub_1
      0,	// qqsub_0
      0,	// qqsub_1
      0,	// qsub_0
      0,	// qsub_1
      0,	// qsub_2
      0,	// qsub_3
      61,	// ssub_0 -> DTripleSpc_with_dsub_4_in_DPR_8
      61,	// ssub_1 -> DTripleSpc_with_dsub_4_in_DPR_8
      0,	// ssub_2
      0,	// ssub_3
      61,	// dsub_2_then_ssub_0 -> DTripleSpc_with_dsub_4_in_DPR_8
      61,	// dsub_2_then_ssub_1 -> DTripleSpc_with_dsub_4_in_DPR_8
      0,	// dsub_3_then_ssub_0
      0,	// dsub_3_then_ssub_1
      0,	// dsub_7_then_ssub_0
      0,	// dsub_7_then_ssub_1
      0,	// dsub_6_then_ssub_0
      0,	// dsub_6_then_ssub_1
      0,	// dsub_5_then_ssub_0
      0,	// dsub_5_then_ssub_1
      61,	// dsub_4_then_ssub_0 -> DTripleSpc_with_dsub_4_in_DPR_8
      61,	// dsub_4_then_ssub_1 -> DTripleSpc_with_dsub_4_in_DPR_8
      61,	// dsub_0_dsub_2 -> DTripleSpc_with_dsub_4_in_DPR_8
      0,	// dsub_0_dsub_1_dsub_2
      0,	// dsub_1_dsub_3
      0,	// dsub_1_dsub_2_dsub_3
      0,	// dsub_1_dsub_2
      0,	// dsub_0_dsub_2_dsub_4
      0,	// dsub_0_dsub_2_dsub_4_dsub_6
      0,	// dsub_1_dsub_3_dsub_5
      0,	// dsub_1_dsub_3_dsub_5_dsub_7
      0,	// dsub_1_dsub_2_dsub_3_dsub_4
      61,	// dsub_2_dsub_4 -> DTripleSpc_with_dsub_4_in_DPR_8
      0,	// dsub_2_dsub_3_dsub_4
      0,	// dsub_2_dsub_4_dsub_6
      0,	// dsub_3_dsub_5
      0,	// dsub_3_dsub_4_dsub_5
      0,	// dsub_3_dsub_5_dsub_7
      0,	// dsub_3_dsub_4
      0,	// dsub_3_dsub_4_dsub_5_dsub_6
      0,	// dsub_4_dsub_6
      0,	// dsub_4_dsub_5_dsub_6
      0,	// dsub_5_dsub_7
      0,	// dsub_5_dsub_6_dsub_7
      0,	// dsub_5_dsub_6
      0,	// qsub_1_qsub_2
    },
    {	// DTriple_with_dsub_0_in_DPR_8_and_DTriple_with_dsub_1_dsub_2_in_QPR
      62,	// dsub_0 -> DTriple_with_dsub_0_in_DPR_8_and_DTriple_with_dsub_1_dsub_2_in_QPR
      62,	// dsub_1 -> DTriple_with_dsub_0_in_DPR_8_and_DTriple_with_dsub_1_dsub_2_in_QPR
      62,	// dsub_2 -> DTriple_with_dsub_0_in_DPR_8_and_DTriple_with_dsub_1_dsub_2_in_QPR
      0,	// dsub_3
      0,	// dsub_4
      0,	// dsub_5
      0,	// dsub_6
      0,	// dsub_7
      0,	// gsub_0
      0,	// gsub_1
      0,	// qqsub_0
      0,	// qqsub_1
      62,	// qsub_0 -> DTriple_with_dsub_0_in_DPR_8_and_DTriple_with_dsub_1_dsub_2_in_QPR
      0,	// qsub_1
      0,	// qsub_2
      0,	// qsub_3
      62,	// ssub_0 -> DTriple_with_dsub_0_in_DPR_8_and_DTriple_with_dsub_1_dsub_2_in_QPR
      62,	// ssub_1 -> DTriple_with_dsub_0_in_DPR_8_and_DTriple_with_dsub_1_dsub_2_in_QPR
      62,	// ssub_2 -> DTriple_with_dsub_0_in_DPR_8_and_DTriple_with_dsub_1_dsub_2_in_QPR
      62,	// ssub_3 -> DTriple_with_dsub_0_in_DPR_8_and_DTriple_with_dsub_1_dsub_2_in_QPR
      62,	// dsub_2_then_ssub_0 -> DTriple_with_dsub_0_in_DPR_8_and_DTriple_with_dsub_1_dsub_2_in_QPR
      62,	// dsub_2_then_ssub_1 -> DTriple_with_dsub_0_in_DPR_8_and_DTriple_with_dsub_1_dsub_2_in_QPR
      0,	// dsub_3_then_ssub_0
      0,	// dsub_3_then_ssub_1
      0,	// dsub_7_then_ssub_0
      0,	// dsub_7_then_ssub_1
      0,	// dsub_6_then_ssub_0
      0,	// dsub_6_then_ssub_1
      0,	// dsub_5_then_ssub_0
      0,	// dsub_5_then_ssub_1
      0,	// dsub_4_then_ssub_0
      0,	// dsub_4_then_ssub_1
      62,	// dsub_0_dsub_2 -> DTriple_with_dsub_0_in_DPR_8_and_DTriple_with_dsub_1_dsub_2_in_QPR
      0,	// dsub_0_dsub_1_dsub_2
      0,	// dsub_1_dsub_3
      0,	// dsub_1_dsub_2_dsub_3
      62,	// dsub_1_dsub_2 -> DTriple_with_dsub_0_in_DPR_8_and_DTriple_with_dsub_1_dsub_2_in_QPR
      0,	// dsub_0_dsub_2_dsub_4
      0,	// dsub_0_dsub_2_dsub_4_dsub_6
      0,	// dsub_1_dsub_3_dsub_5
      0,	// dsub_1_dsub_3_dsub_5_dsub_7
      0,	// dsub_1_dsub_2_dsub_3_dsub_4
      0,	// dsub_2_dsub_4
      0,	// dsub_2_dsub_3_dsub_4
      0,	// dsub_2_dsub_4_dsub_6
      0,	// dsub_3_dsub_5
      0,	// dsub_3_dsub_4_dsub_5
      0,	// dsub_3_dsub_5_dsub_7
      0,	// dsub_3_dsub_4
      0,	// dsub_3_dsub_4_dsub_5_dsub_6
      0,	// dsub_4_dsub_6
      0,	// dsub_4_dsub_5_dsub_6
      0,	// dsub_5_dsub_7
      0,	// dsub_5_dsub_6_dsub_7
      0,	// dsub_5_dsub_6
      0,	// qsub_1_qsub_2
    },
    {	// DTriple_with_qsub_0_in_QPR_8
      63,	// dsub_0 -> DTriple_with_qsub_0_in_QPR_8
      63,	// dsub_1 -> DTriple_with_qsub_0_in_QPR_8
      63,	// dsub_2 -> DTriple_with_qsub_0_in_QPR_8
      0,	// dsub_3
      0,	// dsub_4
      0,	// dsub_5
      0,	// dsub_6
      0,	// dsub_7
      0,	// gsub_0
      0,	// gsub_1
      0,	// qqsub_0
      0,	// qqsub_1
      63,	// qsub_0 -> DTriple_with_qsub_0_in_QPR_8
      0,	// qsub_1
      0,	// qsub_2
      0,	// qsub_3
      63,	// ssub_0 -> DTriple_with_qsub_0_in_QPR_8
      63,	// ssub_1 -> DTriple_with_qsub_0_in_QPR_8
      63,	// ssub_2 -> DTriple_with_qsub_0_in_QPR_8
      63,	// ssub_3 -> DTriple_with_qsub_0_in_QPR_8
      63,	// dsub_2_then_ssub_0 -> DTriple_with_qsub_0_in_QPR_8
      63,	// dsub_2_then_ssub_1 -> DTriple_with_qsub_0_in_QPR_8
      0,	// dsub_3_then_ssub_0
      0,	// dsub_3_then_ssub_1
      0,	// dsub_7_then_ssub_0
      0,	// dsub_7_then_ssub_1
      0,	// dsub_6_then_ssub_0
      0,	// dsub_6_then_ssub_1
      0,	// dsub_5_then_ssub_0
      0,	// dsub_5_then_ssub_1
      0,	// dsub_4_then_ssub_0
      0,	// dsub_4_then_ssub_1
      63,	// dsub_0_dsub_2 -> DTriple_with_qsub_0_in_QPR_8
      0,	// dsub_0_dsub_1_dsub_2
      0,	// dsub_1_dsub_3
      0,	// dsub_1_dsub_2_dsub_3
      63,	// dsub_1_dsub_2 -> DTriple_with_qsub_0_in_QPR_8
      0,	// dsub_0_dsub_2_dsub_4
      0,	// dsub_0_dsub_2_dsub_4_dsub_6
      0,	// dsub_1_dsub_3_dsub_5
      0,	// dsub_1_dsub_3_dsub_5_dsub_7
      0,	// dsub_1_dsub_2_dsub_3_dsub_4
      0,	// dsub_2_dsub_4
      0,	// dsub_2_dsub_3_dsub_4
      0,	// dsub_2_dsub_4_dsub_6
      0,	// dsub_3_dsub_5
      0,	// dsub_3_dsub_4_dsub_5
      0,	// dsub_3_dsub_5_dsub_7
      0,	// dsub_3_dsub_4
      0,	// dsub_3_dsub_4_dsub_5_dsub_6
      0,	// dsub_4_dsub_6
      0,	// dsub_4_dsub_5_dsub_6
      0,	// dsub_5_dsub_7
      0,	// dsub_5_dsub_6_dsub_7
      0,	// dsub_5_dsub_6
      0,	// qsub_1_qsub_2
    },
    {	// DTriple_with_dsub_1_dsub_2_in_QPR_8
      64,	// dsub_0 -> DTriple_with_dsub_1_dsub_2_in_QPR_8
      64,	// dsub_1 -> DTriple_with_dsub_1_dsub_2_in_QPR_8
      64,	// dsub_2 -> DTriple_with_dsub_1_dsub_2_in_QPR_8
      0,	// dsub_3
      0,	// dsub_4
      0,	// dsub_5
      0,	// dsub_6
      0,	// dsub_7
      0,	// gsub_0
      0,	// gsub_1
      0,	// qqsub_0
      0,	// qqsub_1
      64,	// qsub_0 -> DTriple_with_dsub_1_dsub_2_in_QPR_8
      0,	// qsub_1
      0,	// qsub_2
      0,	// qsub_3
      64,	// ssub_0 -> DTriple_with_dsub_1_dsub_2_in_QPR_8
      64,	// ssub_1 -> DTriple_with_dsub_1_dsub_2_in_QPR_8
      64,	// ssub_2 -> DTriple_with_dsub_1_dsub_2_in_QPR_8
      64,	// ssub_3 -> DTriple_with_dsub_1_dsub_2_in_QPR_8
      64,	// dsub_2_then_ssub_0 -> DTriple_with_dsub_1_dsub_2_in_QPR_8
      64,	// dsub_2_then_ssub_1 -> DTriple_with_dsub_1_dsub_2_in_QPR_8
      0,	// dsub_3_then_ssub_0
      0,	// dsub_3_then_ssub_1
      0,	// dsub_7_then_ssub_0
      0,	// dsub_7_then_ssub_1
      0,	// dsub_6_then_ssub_0
      0,	// dsub_6_then_ssub_1
      0,	// dsub_5_then_ssub_0
      0,	// dsub_5_then_ssub_1
      0,	// dsub_4_then_ssub_0
      0,	// dsub_4_then_ssub_1
      64,	// dsub_0_dsub_2 -> DTriple_with_dsub_1_dsub_2_in_QPR_8
      0,	// dsub_0_dsub_1_dsub_2
      0,	// dsub_1_dsub_3
      0,	// dsub_1_dsub_2_dsub_3
      64,	// dsub_1_dsub_2 -> DTriple_with_dsub_1_dsub_2_in_QPR_8
      0,	// dsub_0_dsub_2_dsub_4
      0,	// dsub_0_dsub_2_dsub_4_dsub_6
      0,	// dsub_1_dsub_3_dsub_5
      0,	// dsub_1_dsub_3_dsub_5_dsub_7
      0,	// dsub_1_dsub_2_dsub_3_dsub_4
      0,	// dsub_2_dsub_4
      0,	// dsub_2_dsub_3_dsub_4
      0,	// dsub_2_dsub_4_dsub_6
      0,	// dsub_3_dsub_5
      0,	// dsub_3_dsub_4_dsub_5
      0,	// dsub_3_dsub_5_dsub_7
      0,	// dsub_3_dsub_4
      0,	// dsub_3_dsub_4_dsub_5_dsub_6
      0,	// dsub_4_dsub_6
      0,	// dsub_4_dsub_5_dsub_6
      0,	// dsub_5_dsub_7
      0,	// dsub_5_dsub_6_dsub_7
      0,	// dsub_5_dsub_6
      0,	// qsub_1_qsub_2
    },
    {	// DTriple_with_dsub_2_in_DPR_8_and_DTriple_with_qsub_0_in_QPR
      65,	// dsub_0 -> DTriple_with_dsub_2_in_DPR_8_and_DTriple_with_qsub_0_in_QPR
      65,	// dsub_1 -> DTriple_with_dsub_2_in_DPR_8_and_DTriple_with_qsub_0_in_QPR
      65,	// dsub_2 -> DTriple_with_dsub_2_in_DPR_8_and_DTriple_with_qsub_0_in_QPR
      0,	// dsub_3
      0,	// dsub_4
      0,	// dsub_5
      0,	// dsub_6
      0,	// dsub_7
      0,	// gsub_0
      0,	// gsub_1
      0,	// qqsub_0
      0,	// qqsub_1
      65,	// qsub_0 -> DTriple_with_dsub_2_in_DPR_8_and_DTriple_with_qsub_0_in_QPR
      0,	// qsub_1
      0,	// qsub_2
      0,	// qsub_3
      65,	// ssub_0 -> DTriple_with_dsub_2_in_DPR_8_and_DTriple_with_qsub_0_in_QPR
      65,	// ssub_1 -> DTriple_with_dsub_2_in_DPR_8_and_DTriple_with_qsub_0_in_QPR
      65,	// ssub_2 -> DTriple_with_dsub_2_in_DPR_8_and_DTriple_with_qsub_0_in_QPR
      65,	// ssub_3 -> DTriple_with_dsub_2_in_DPR_8_and_DTriple_with_qsub_0_in_QPR
      65,	// dsub_2_then_ssub_0 -> DTriple_with_dsub_2_in_DPR_8_and_DTriple_with_qsub_0_in_QPR
      65,	// dsub_2_then_ssub_1 -> DTriple_with_dsub_2_in_DPR_8_and_DTriple_with_qsub_0_in_QPR
      0,	// dsub_3_then_ssub_0
      0,	// dsub_3_then_ssub_1
      0,	// dsub_7_then_ssub_0
      0,	// dsub_7_then_ssub_1
      0,	// dsub_6_then_ssub_0
      0,	// dsub_6_then_ssub_1
      0,	// dsub_5_then_ssub_0
      0,	// dsub_5_then_ssub_1
      0,	// dsub_4_then_ssub_0
      0,	// dsub_4_then_ssub_1
      65,	// dsub_0_dsub_2 -> DTriple_with_dsub_2_in_DPR_8_and_DTriple_with_qsub_0_in_QPR
      0,	// dsub_0_dsub_1_dsub_2
      0,	// dsub_1_dsub_3
      0,	// dsub_1_dsub_2_dsub_3
      65,	// dsub_1_dsub_2 -> DTriple_with_dsub_2_in_DPR_8_and_DTriple_with_qsub_0_in_QPR
      0,	// dsub_0_dsub_2_dsub_4
      0,	// dsub_0_dsub_2_dsub_4_dsub_6
      0,	// dsub_1_dsub_3_dsub_5
      0,	// dsub_1_dsub_3_dsub_5_dsub_7
      0,	// dsub_1_dsub_2_dsub_3_dsub_4
      0,	// dsub_2_dsub_4
      0,	// dsub_2_dsub_3_dsub_4
      0,	// dsub_2_dsub_4_dsub_6
      0,	// dsub_3_dsub_5
      0,	// dsub_3_dsub_4_dsub_5
      0,	// dsub_3_dsub_5_dsub_7
      0,	// dsub_3_dsub_4
      0,	// dsub_3_dsub_4_dsub_5_dsub_6
      0,	// dsub_4_dsub_6
      0,	// dsub_4_dsub_5_dsub_6
      0,	// dsub_5_dsub_7
      0,	// dsub_5_dsub_6_dsub_7
      0,	// dsub_5_dsub_6
      0,	// qsub_1_qsub_2
    },
    {	// DQuadSpc
      66,	// dsub_0 -> DQuadSpc
      0,	// dsub_1
      66,	// dsub_2 -> DQuadSpc
      0,	// dsub_3
      66,	// dsub_4 -> DQuadSpc
      0,	// dsub_5
      0,	// dsub_6
      0,	// dsub_7
      0,	// gsub_0
      0,	// gsub_1
      0,	// qqsub_0
      0,	// qqsub_1
      0,	// qsub_0
      0,	// qsub_1
      0,	// qsub_2
      0,	// qsub_3
      67,	// ssub_0 -> DQuadSpc_with_ssub_0
      67,	// ssub_1 -> DQuadSpc_with_ssub_0
      0,	// ssub_2
      0,	// ssub_3
      68,	// dsub_2_then_ssub_0 -> DQuadSpc_with_dsub_2_then_ssub_0
      68,	// dsub_2_then_ssub_1 -> DQuadSpc_with_dsub_2_then_ssub_0
      0,	// dsub_3_then_ssub_0
      0,	// dsub_3_then_ssub_1
      0,	// dsub_7_then_ssub_0
      0,	// dsub_7_then_ssub_1
      0,	// dsub_6_then_ssub_0
      0,	// dsub_6_then_ssub_1
      0,	// dsub_5_then_ssub_0
      0,	// dsub_5_then_ssub_1
      69,	// dsub_4_then_ssub_0 -> DQuadSpc_with_dsub_4_then_ssub_0
      69,	// dsub_4_then_ssub_1 -> DQuadSpc_with_dsub_4_then_ssub_0
      66,	// dsub_0_dsub_2 -> DQuadSpc
      0,	// dsub_0_dsub_1_dsub_2
      0,	// dsub_1_dsub_3
      0,	// dsub_1_dsub_2_dsub_3
      0,	// dsub_1_dsub_2
      0,	// dsub_0_dsub_2_dsub_4
      0,	// dsub_0_dsub_2_dsub_4_dsub_6
      0,	// dsub_1_dsub_3_dsub_5
      0,	// dsub_1_dsub_3_dsub_5_dsub_7
      0,	// dsub_1_dsub_2_dsub_3_dsub_4
      66,	// dsub_2_dsub_4 -> DQuadSpc
      0,	// dsub_2_dsub_3_dsub_4
      0,	// dsub_2_dsub_4_dsub_6
      0,	// dsub_3_dsub_5
      0,	// dsub_3_dsub_4_dsub_5
      0,	// dsub_3_dsub_5_dsub_7
      0,	// dsub_3_dsub_4
      0,	// dsub_3_dsub_4_dsub_5_dsub_6
      0,	// dsub_4_dsub_6
      0,	// dsub_4_dsub_5_dsub_6
      0,	// dsub_5_dsub_7
      0,	// dsub_5_dsub_6_dsub_7
      0,	// dsub_5_dsub_6
      0,	// qsub_1_qsub_2
    },
    {	// DQuadSpc_with_ssub_0
      67,	// dsub_0 -> DQuadSpc_with_ssub_0
      0,	// dsub_1
      67,	// dsub_2 -> DQuadSpc_with_ssub_0
      0,	// dsub_3
      67,	// dsub_4 -> DQuadSpc_with_ssub_0
      0,	// dsub_5
      0,	// dsub_6
      0,	// dsub_7
      0,	// gsub_0
      0,	// gsub_1
      0,	// qqsub_0
      0,	// qqsub_1
      0,	// qsub_0
      0,	// qsub_1
      0,	// qsub_2
      0,	// qsub_3
      67,	// ssub_0 -> DQuadSpc_with_ssub_0
      67,	// ssub_1 -> DQuadSpc_with_ssub_0
      0,	// ssub_2
      0,	// ssub_3
      68,	// dsub_2_then_ssub_0 -> DQuadSpc_with_dsub_2_then_ssub_0
      68,	// dsub_2_then_ssub_1 -> DQuadSpc_with_dsub_2_then_ssub_0
      0,	// dsub_3_then_ssub_0
      0,	// dsub_3_then_ssub_1
      0,	// dsub_7_then_ssub_0
      0,	// dsub_7_then_ssub_1
      0,	// dsub_6_then_ssub_0
      0,	// dsub_6_then_ssub_1
      0,	// dsub_5_then_ssub_0
      0,	// dsub_5_then_ssub_1
      69,	// dsub_4_then_ssub_0 -> DQuadSpc_with_dsub_4_then_ssub_0
      69,	// dsub_4_then_ssub_1 -> DQuadSpc_with_dsub_4_then_ssub_0
      67,	// dsub_0_dsub_2 -> DQuadSpc_with_ssub_0
      0,	// dsub_0_dsub_1_dsub_2
      0,	// dsub_1_dsub_3
      0,	// dsub_1_dsub_2_dsub_3
      0,	// dsub_1_dsub_2
      0,	// dsub_0_dsub_2_dsub_4
      0,	// dsub_0_dsub_2_dsub_4_dsub_6
      0,	// dsub_1_dsub_3_dsub_5
      0,	// dsub_1_dsub_3_dsub_5_dsub_7
      0,	// dsub_1_dsub_2_dsub_3_dsub_4
      67,	// dsub_2_dsub_4 -> DQuadSpc_with_ssub_0
      0,	// dsub_2_dsub_3_dsub_4
      0,	// dsub_2_dsub_4_dsub_6
      0,	// dsub_3_dsub_5
      0,	// dsub_3_dsub_4_dsub_5
      0,	// dsub_3_dsub_5_dsub_7
      0,	// dsub_3_dsub_4
      0,	// dsub_3_dsub_4_dsub_5_dsub_6
      0,	// dsub_4_dsub_6
      0,	// dsub_4_dsub_5_dsub_6
      0,	// dsub_5_dsub_7
      0,	// dsub_5_dsub_6_dsub_7
      0,	// dsub_5_dsub_6
      0,	// qsub_1_qsub_2
    },
    {	// DQuadSpc_with_dsub_2_then_ssub_0
      68,	// dsub_0 -> DQuadSpc_with_dsub_2_then_ssub_0
      0,	// dsub_1
      68,	// dsub_2 -> DQuadSpc_with_dsub_2_then_ssub_0
      0,	// dsub_3
      68,	// dsub_4 -> DQuadSpc_with_dsub_2_then_ssub_0
      0,	// dsub_5
      0,	// dsub_6
      0,	// dsub_7
      0,	// gsub_0
      0,	// gsub_1
      0,	// qqsub_0
      0,	// qqsub_1
      0,	// qsub_0
      0,	// qsub_1
      0,	// qsub_2
      0,	// qsub_3
      68,	// ssub_0 -> DQuadSpc_with_dsub_2_then_ssub_0
      68,	// ssub_1 -> DQuadSpc_with_dsub_2_then_ssub_0
      0,	// ssub_2
      0,	// ssub_3
      68,	// dsub_2_then_ssub_0 -> DQuadSpc_with_dsub_2_then_ssub_0
      68,	// dsub_2_then_ssub_1 -> DQuadSpc_with_dsub_2_then_ssub_0
      0,	// dsub_3_then_ssub_0
      0,	// dsub_3_then_ssub_1
      0,	// dsub_7_then_ssub_0
      0,	// dsub_7_then_ssub_1
      0,	// dsub_6_then_ssub_0
      0,	// dsub_6_then_ssub_1
      0,	// dsub_5_then_ssub_0
      0,	// dsub_5_then_ssub_1
      69,	// dsub_4_then_ssub_0 -> DQuadSpc_with_dsub_4_then_ssub_0
      69,	// dsub_4_then_ssub_1 -> DQuadSpc_with_dsub_4_then_ssub_0
      68,	// dsub_0_dsub_2 -> DQuadSpc_with_dsub_2_then_ssub_0
      0,	// dsub_0_dsub_1_dsub_2
      0,	// dsub_1_dsub_3
      0,	// dsub_1_dsub_2_dsub_3
      0,	// dsub_1_dsub_2
      0,	// dsub_0_dsub_2_dsub_4
      0,	// dsub_0_dsub_2_dsub_4_dsub_6
      0,	// dsub_1_dsub_3_dsub_5
      0,	// dsub_1_dsub_3_dsub_5_dsub_7
      0,	// dsub_1_dsub_2_dsub_3_dsub_4
      68,	// dsub_2_dsub_4 -> DQuadSpc_with_dsub_2_then_ssub_0
      0,	// dsub_2_dsub_3_dsub_4
      0,	// dsub_2_dsub_4_dsub_6
      0,	// dsub_3_dsub_5
      0,	// dsub_3_dsub_4_dsub_5
      0,	// dsub_3_dsub_5_dsub_7
      0,	// dsub_3_dsub_4
      0,	// dsub_3_dsub_4_dsub_5_dsub_6
      0,	// dsub_4_dsub_6
      0,	// dsub_4_dsub_5_dsub_6
      0,	// dsub_5_dsub_7
      0,	// dsub_5_dsub_6_dsub_7
      0,	// dsub_5_dsub_6
      0,	// qsub_1_qsub_2
    },
    {	// DQuadSpc_with_dsub_4_then_ssub_0
      69,	// dsub_0 -> DQuadSpc_with_dsub_4_then_ssub_0
      0,	// dsub_1
      69,	// dsub_2 -> DQuadSpc_with_dsub_4_then_ssub_0
      0,	// dsub_3
      69,	// dsub_4 -> DQuadSpc_with_dsub_4_then_ssub_0
      0,	// dsub_5
      0,	// dsub_6
      0,	// dsub_7
      0,	// gsub_0
      0,	// gsub_1
      0,	// qqsub_0
      0,	// qqsub_1
      0,	// qsub_0
      0,	// qsub_1
      0,	// qsub_2
      0,	// qsub_3
      69,	// ssub_0 -> DQuadSpc_with_dsub_4_then_ssub_0
      69,	// ssub_1 -> DQuadSpc_with_dsub_4_then_ssub_0
      0,	// ssub_2
      0,	// ssub_3
      69,	// dsub_2_then_ssub_0 -> DQuadSpc_with_dsub_4_then_ssub_0
      69,	// dsub_2_then_ssub_1 -> DQuadSpc_with_dsub_4_then_ssub_0
      0,	// dsub_3_then_ssub_0
      0,	// dsub_3_then_ssub_1
      0,	// dsub_7_then_ssub_0
      0,	// dsub_7_then_ssub_1
      0,	// dsub_6_then_ssub_0
      0,	// dsub_6_then_ssub_1
      0,	// dsub_5_then_ssub_0
      0,	// dsub_5_then_ssub_1
      69,	// dsub_4_then_ssub_0 -> DQuadSpc_with_dsub_4_then_ssub_0
      69,	// dsub_4_then_ssub_1 -> DQuadSpc_with_dsub_4_then_ssub_0
      69,	// dsub_0_dsub_2 -> DQuadSpc_with_dsub_4_then_ssub_0
      0,	// dsub_0_dsub_1_dsub_2
      0,	// dsub_1_dsub_3
      0,	// dsub_1_dsub_2_dsub_3
      0,	// dsub_1_dsub_2
      0,	// dsub_0_dsub_2_dsub_4
      0,	// dsub_0_dsub_2_dsub_4_dsub_6
      0,	// dsub_1_dsub_3_dsub_5
      0,	// dsub_1_dsub_3_dsub_5_dsub_7
      0,	// dsub_1_dsub_2_dsub_3_dsub_4
      69,	// dsub_2_dsub_4 -> DQuadSpc_with_dsub_4_then_ssub_0
      0,	// dsub_2_dsub_3_dsub_4
      0,	// dsub_2_dsub_4_dsub_6
      0,	// dsub_3_dsub_5
      0,	// dsub_3_dsub_4_dsub_5
      0,	// dsub_3_dsub_5_dsub_7
      0,	// dsub_3_dsub_4
      0,	// dsub_3_dsub_4_dsub_5_dsub_6
      0,	// dsub_4_dsub_6
      0,	// dsub_4_dsub_5_dsub_6
      0,	// dsub_5_dsub_7
      0,	// dsub_5_dsub_6_dsub_7
      0,	// dsub_5_dsub_6
      0,	// qsub_1_qsub_2
    },
    {	// DQuadSpc_with_dsub_0_in_DPR_8
      70,	// dsub_0 -> DQuadSpc_with_dsub_0_in_DPR_8
      0,	// dsub_1
      70,	// dsub_2 -> DQuadSpc_with_dsub_0_in_DPR_8
      0,	// dsub_3
      70,	// dsub_4 -> DQuadSpc_with_dsub_0_in_DPR_8
      0,	// dsub_5
      0,	// dsub_6
      0,	// dsub_7
      0,	// gsub_0
      0,	// gsub_1
      0,	// qqsub_0
      0,	// qqsub_1
      0,	// qsub_0
      0,	// qsub_1
      0,	// qsub_2
      0,	// qsub_3
      70,	// ssub_0 -> DQuadSpc_with_dsub_0_in_DPR_8
      70,	// ssub_1 -> DQuadSpc_with_dsub_0_in_DPR_8
      0,	// ssub_2
      0,	// ssub_3
      70,	// dsub_2_then_ssub_0 -> DQuadSpc_with_dsub_0_in_DPR_8
      70,	// dsub_2_then_ssub_1 -> DQuadSpc_with_dsub_0_in_DPR_8
      0,	// dsub_3_then_ssub_0
      0,	// dsub_3_then_ssub_1
      0,	// dsub_7_then_ssub_0
      0,	// dsub_7_then_ssub_1
      0,	// dsub_6_then_ssub_0
      0,	// dsub_6_then_ssub_1
      0,	// dsub_5_then_ssub_0
      0,	// dsub_5_then_ssub_1
      70,	// dsub_4_then_ssub_0 -> DQuadSpc_with_dsub_0_in_DPR_8
      70,	// dsub_4_then_ssub_1 -> DQuadSpc_with_dsub_0_in_DPR_8
      70,	// dsub_0_dsub_2 -> DQuadSpc_with_dsub_0_in_DPR_8
      0,	// dsub_0_dsub_1_dsub_2
      0,	// dsub_1_dsub_3
      0,	// dsub_1_dsub_2_dsub_3
      0,	// dsub_1_dsub_2
      0,	// dsub_0_dsub_2_dsub_4
      0,	// dsub_0_dsub_2_dsub_4_dsub_6
      0,	// dsub_1_dsub_3_dsub_5
      0,	// dsub_1_dsub_3_dsub_5_dsub_7
      0,	// dsub_1_dsub_2_dsub_3_dsub_4
      70,	// dsub_2_dsub_4 -> DQuadSpc_with_dsub_0_in_DPR_8
      0,	// dsub_2_dsub_3_dsub_4
      0,	// dsub_2_dsub_4_dsub_6
      0,	// dsub_3_dsub_5
      0,	// dsub_3_dsub_4_dsub_5
      0,	// dsub_3_dsub_5_dsub_7
      0,	// dsub_3_dsub_4
      0,	// dsub_3_dsub_4_dsub_5_dsub_6
      0,	// dsub_4_dsub_6
      0,	// dsub_4_dsub_5_dsub_6
      0,	// dsub_5_dsub_7
      0,	// dsub_5_dsub_6_dsub_7
      0,	// dsub_5_dsub_6
      0,	// qsub_1_qsub_2
    },
    {	// DQuadSpc_with_dsub_2_in_DPR_8
      71,	// dsub_0 -> DQuadSpc_with_dsub_2_in_DPR_8
      0,	// dsub_1
      71,	// dsub_2 -> DQuadSpc_with_dsub_2_in_DPR_8
      0,	// dsub_3
      71,	// dsub_4 -> DQuadSpc_with_dsub_2_in_DPR_8
      0,	// dsub_5
      0,	// dsub_6
      0,	// dsub_7
      0,	// gsub_0
      0,	// gsub_1
      0,	// qqsub_0
      0,	// qqsub_1
      0,	// qsub_0
      0,	// qsub_1
      0,	// qsub_2
      0,	// qsub_3
      71,	// ssub_0 -> DQuadSpc_with_dsub_2_in_DPR_8
      71,	// ssub_1 -> DQuadSpc_with_dsub_2_in_DPR_8
      0,	// ssub_2
      0,	// ssub_3
      71,	// dsub_2_then_ssub_0 -> DQuadSpc_with_dsub_2_in_DPR_8
      71,	// dsub_2_then_ssub_1 -> DQuadSpc_with_dsub_2_in_DPR_8
      0,	// dsub_3_then_ssub_0
      0,	// dsub_3_then_ssub_1
      0,	// dsub_7_then_ssub_0
      0,	// dsub_7_then_ssub_1
      0,	// dsub_6_then_ssub_0
      0,	// dsub_6_then_ssub_1
      0,	// dsub_5_then_ssub_0
      0,	// dsub_5_then_ssub_1
      71,	// dsub_4_then_ssub_0 -> DQuadSpc_with_dsub_2_in_DPR_8
      71,	// dsub_4_then_ssub_1 -> DQuadSpc_with_dsub_2_in_DPR_8
      71,	// dsub_0_dsub_2 -> DQuadSpc_with_dsub_2_in_DPR_8
      0,	// dsub_0_dsub_1_dsub_2
      0,	// dsub_1_dsub_3
      0,	// dsub_1_dsub_2_dsub_3
      0,	// dsub_1_dsub_2
      0,	// dsub_0_dsub_2_dsub_4
      0,	// dsub_0_dsub_2_dsub_4_dsub_6
      0,	// dsub_1_dsub_3_dsub_5
      0,	// dsub_1_dsub_3_dsub_5_dsub_7
      0,	// dsub_1_dsub_2_dsub_3_dsub_4
      71,	// dsub_2_dsub_4 -> DQuadSpc_with_dsub_2_in_DPR_8
      0,	// dsub_2_dsub_3_dsub_4
      0,	// dsub_2_dsub_4_dsub_6
      0,	// dsub_3_dsub_5
      0,	// dsub_3_dsub_4_dsub_5
      0,	// dsub_3_dsub_5_dsub_7
      0,	// dsub_3_dsub_4
      0,	// dsub_3_dsub_4_dsub_5_dsub_6
      0,	// dsub_4_dsub_6
      0,	// dsub_4_dsub_5_dsub_6
      0,	// dsub_5_dsub_7
      0,	// dsub_5_dsub_6_dsub_7
      0,	// dsub_5_dsub_6
      0,	// qsub_1_qsub_2
    },
    {	// DQuadSpc_with_dsub_4_in_DPR_8
      72,	// dsub_0 -> DQuadSpc_with_dsub_4_in_DPR_8
      0,	// dsub_1
      72,	// dsub_2 -> DQuadSpc_with_dsub_4_in_DPR_8
      0,	// dsub_3
      72,	// dsub_4 -> DQuadSpc_with_dsub_4_in_DPR_8
      0,	// dsub_5
      0,	// dsub_6
      0,	// dsub_7
      0,	// gsub_0
      0,	// gsub_1
      0,	// qqsub_0
      0,	// qqsub_1
      0,	// qsub_0
      0,	// qsub_1
      0,	// qsub_2
      0,	// qsub_3
      72,	// ssub_0 -> DQuadSpc_with_dsub_4_in_DPR_8
      72,	// ssub_1 -> DQuadSpc_with_dsub_4_in_DPR_8
      0,	// ssub_2
      0,	// ssub_3
      72,	// dsub_2_then_ssub_0 -> DQuadSpc_with_dsub_4_in_DPR_8
      72,	// dsub_2_then_ssub_1 -> DQuadSpc_with_dsub_4_in_DPR_8
      0,	// dsub_3_then_ssub_0
      0,	// dsub_3_then_ssub_1
      0,	// dsub_7_then_ssub_0
      0,	// dsub_7_then_ssub_1
      0,	// dsub_6_then_ssub_0
      0,	// dsub_6_then_ssub_1
      0,	// dsub_5_then_ssub_0
      0,	// dsub_5_then_ssub_1
      72,	// dsub_4_then_ssub_0 -> DQuadSpc_with_dsub_4_in_DPR_8
      72,	// dsub_4_then_ssub_1 -> DQuadSpc_with_dsub_4_in_DPR_8
      72,	// dsub_0_dsub_2 -> DQuadSpc_with_dsub_4_in_DPR_8
      0,	// dsub_0_dsub_1_dsub_2
      0,	// dsub_1_dsub_3
      0,	// dsub_1_dsub_2_dsub_3
      0,	// dsub_1_dsub_2
      0,	// dsub_0_dsub_2_dsub_4
      0,	// dsub_0_dsub_2_dsub_4_dsub_6
      0,	// dsub_1_dsub_3_dsub_5
      0,	// dsub_1_dsub_3_dsub_5_dsub_7
      0,	// dsub_1_dsub_2_dsub_3_dsub_4
      72,	// dsub_2_dsub_4 -> DQuadSpc_with_dsub_4_in_DPR_8
      0,	// dsub_2_dsub_3_dsub_4
      0,	// dsub_2_dsub_4_dsub_6
      0,	// dsub_3_dsub_5
      0,	// dsub_3_dsub_4_dsub_5
      0,	// dsub_3_dsub_5_dsub_7
      0,	// dsub_3_dsub_4
      0,	// dsub_3_dsub_4_dsub_5_dsub_6
      0,	// dsub_4_dsub_6
      0,	// dsub_4_dsub_5_dsub_6
      0,	// dsub_5_dsub_7
      0,	// dsub_5_dsub_6_dsub_7
      0,	// dsub_5_dsub_6
      0,	// qsub_1_qsub_2
    },
    {	// DQuad
      73,	// dsub_0 -> DQuad
      73,	// dsub_1 -> DQuad
      73,	// dsub_2 -> DQuad
      73,	// dsub_3 -> DQuad
      0,	// dsub_4
      0,	// dsub_5
      0,	// dsub_6
      0,	// dsub_7
      0,	// gsub_0
      0,	// gsub_1
      0,	// qqsub_0
      0,	// qqsub_1
      73,	// qsub_0 -> DQuad
      73,	// qsub_1 -> DQuad
      0,	// qsub_2
      0,	// qsub_3
      74,	// ssub_0 -> DQuad_with_ssub_0
      74,	// ssub_1 -> DQuad_with_ssub_0
      75,	// ssub_2 -> DQuad_with_ssub_2
      75,	// ssub_3 -> DQuad_with_ssub_2
      78,	// dsub_2_then_ssub_0 -> DQuad_with_dsub_2_then_ssub_0
      78,	// dsub_2_then_ssub_1 -> DQuad_with_dsub_2_then_ssub_0
      79,	// dsub_3_then_ssub_0 -> DQuad_with_dsub_3_then_ssub_0
      79,	// dsub_3_then_ssub_1 -> DQuad_with_dsub_3_then_ssub_0
      0,	// dsub_7_then_ssub_0
      0,	// dsub_7_then_ssub_1
      0,	// dsub_6_then_ssub_0
      0,	// dsub_6_then_ssub_1
      0,	// dsub_5_then_ssub_0
      0,	// dsub_5_then_ssub_1
      0,	// dsub_4_then_ssub_0
      0,	// dsub_4_then_ssub_1
      73,	// dsub_0_dsub_2 -> DQuad
      73,	// dsub_0_dsub_1_dsub_2 -> DQuad
      73,	// dsub_1_dsub_3 -> DQuad
      73,	// dsub_1_dsub_2_dsub_3 -> DQuad
      73,	// dsub_1_dsub_2 -> DQuad
      0,	// dsub_0_dsub_2_dsub_4
      0,	// dsub_0_dsub_2_dsub_4_dsub_6
      0,	// dsub_1_dsub_3_dsub_5
      0,	// dsub_1_dsub_3_dsub_5_dsub_7
      0,	// dsub_1_dsub_2_dsub_3_dsub_4
      0,	// dsub_2_dsub_4
      0,	// dsub_2_dsub_3_dsub_4
      0,	// dsub_2_dsub_4_dsub_6
      0,	// dsub_3_dsub_5
      0,	// dsub_3_dsub_4_dsub_5
      0,	// dsub_3_dsub_5_dsub_7
      0,	// dsub_3_dsub_4
      0,	// dsub_3_dsub_4_dsub_5_dsub_6
      0,	// dsub_4_dsub_6
      0,	// dsub_4_dsub_5_dsub_6
      0,	// dsub_5_dsub_7
      0,	// dsub_5_dsub_6_dsub_7
      0,	// dsub_5_dsub_6
      0,	// qsub_1_qsub_2
    },
    {	// DQuad_with_ssub_0
      74,	// dsub_0 -> DQuad_with_ssub_0
      74,	// dsub_1 -> DQuad_with_ssub_0
      74,	// dsub_2 -> DQuad_with_ssub_0
      74,	// dsub_3 -> DQuad_with_ssub_0
      0,	// dsub_4
      0,	// dsub_5
      0,	// dsub_6
      0,	// dsub_7
      0,	// gsub_0
      0,	// gsub_1
      0,	// qqsub_0
      0,	// qqsub_1
      74,	// qsub_0 -> DQuad_with_ssub_0
      74,	// qsub_1 -> DQuad_with_ssub_0
      0,	// qsub_2
      0,	// qsub_3
      74,	// ssub_0 -> DQuad_with_ssub_0
      74,	// ssub_1 -> DQuad_with_ssub_0
      75,	// ssub_2 -> DQuad_with_ssub_2
      75,	// ssub_3 -> DQuad_with_ssub_2
      78,	// dsub_2_then_ssub_0 -> DQuad_with_dsub_2_then_ssub_0
      78,	// dsub_2_then_ssub_1 -> DQuad_with_dsub_2_then_ssub_0
      79,	// dsub_3_then_ssub_0 -> DQuad_with_dsub_3_then_ssub_0
      79,	// dsub_3_then_ssub_1 -> DQuad_with_dsub_3_then_ssub_0
      0,	// dsub_7_then_ssub_0
      0,	// dsub_7_then_ssub_1
      0,	// dsub_6_then_ssub_0
      0,	// dsub_6_then_ssub_1
      0,	// dsub_5_then_ssub_0
      0,	// dsub_5_then_ssub_1
      0,	// dsub_4_then_ssub_0
      0,	// dsub_4_then_ssub_1
      74,	// dsub_0_dsub_2 -> DQuad_with_ssub_0
      74,	// dsub_0_dsub_1_dsub_2 -> DQuad_with_ssub_0
      74,	// dsub_1_dsub_3 -> DQuad_with_ssub_0
      74,	// dsub_1_dsub_2_dsub_3 -> DQuad_with_ssub_0
      74,	// dsub_1_dsub_2 -> DQuad_with_ssub_0
      0,	// dsub_0_dsub_2_dsub_4
      0,	// dsub_0_dsub_2_dsub_4_dsub_6
      0,	// dsub_1_dsub_3_dsub_5
      0,	// dsub_1_dsub_3_dsub_5_dsub_7
      0,	// dsub_1_dsub_2_dsub_3_dsub_4
      0,	// dsub_2_dsub_4
      0,	// dsub_2_dsub_3_dsub_4
      0,	// dsub_2_dsub_4_dsub_6
      0,	// dsub_3_dsub_5
      0,	// dsub_3_dsub_4_dsub_5
      0,	// dsub_3_dsub_5_dsub_7
      0,	// dsub_3_dsub_4
      0,	// dsub_3_dsub_4_dsub_5_dsub_6
      0,	// dsub_4_dsub_6
      0,	// dsub_4_dsub_5_dsub_6
      0,	// dsub_5_dsub_7
      0,	// dsub_5_dsub_6_dsub_7
      0,	// dsub_5_dsub_6
      0,	// qsub_1_qsub_2
    },
    {	// DQuad_with_ssub_2
      75,	// dsub_0 -> DQuad_with_ssub_2
      75,	// dsub_1 -> DQuad_with_ssub_2
      75,	// dsub_2 -> DQuad_with_ssub_2
      75,	// dsub_3 -> DQuad_with_ssub_2
      0,	// dsub_4
      0,	// dsub_5
      0,	// dsub_6
      0,	// dsub_7
      0,	// gsub_0
      0,	// gsub_1
      0,	// qqsub_0
      0,	// qqsub_1
      75,	// qsub_0 -> DQuad_with_ssub_2
      75,	// qsub_1 -> DQuad_with_ssub_2
      0,	// qsub_2
      0,	// qsub_3
      75,	// ssub_0 -> DQuad_with_ssub_2
      75,	// ssub_1 -> DQuad_with_ssub_2
      75,	// ssub_2 -> DQuad_with_ssub_2
      75,	// ssub_3 -> DQuad_with_ssub_2
      78,	// dsub_2_then_ssub_0 -> DQuad_with_dsub_2_then_ssub_0
      78,	// dsub_2_then_ssub_1 -> DQuad_with_dsub_2_then_ssub_0
      79,	// dsub_3_then_ssub_0 -> DQuad_with_dsub_3_then_ssub_0
      79,	// dsub_3_then_ssub_1 -> DQuad_with_dsub_3_then_ssub_0
      0,	// dsub_7_then_ssub_0
      0,	// dsub_7_then_ssub_1
      0,	// dsub_6_then_ssub_0
      0,	// dsub_6_then_ssub_1
      0,	// dsub_5_then_ssub_0
      0,	// dsub_5_then_ssub_1
      0,	// dsub_4_then_ssub_0
      0,	// dsub_4_then_ssub_1
      75,	// dsub_0_dsub_2 -> DQuad_with_ssub_2
      75,	// dsub_0_dsub_1_dsub_2 -> DQuad_with_ssub_2
      75,	// dsub_1_dsub_3 -> DQuad_with_ssub_2
      75,	// dsub_1_dsub_2_dsub_3 -> DQuad_with_ssub_2
      75,	// dsub_1_dsub_2 -> DQuad_with_ssub_2
      0,	// dsub_0_dsub_2_dsub_4
      0,	// dsub_0_dsub_2_dsub_4_dsub_6
      0,	// dsub_1_dsub_3_dsub_5
      0,	// dsub_1_dsub_3_dsub_5_dsub_7
      0,	// dsub_1_dsub_2_dsub_3_dsub_4
      0,	// dsub_2_dsub_4
      0,	// dsub_2_dsub_3_dsub_4
      0,	// dsub_2_dsub_4_dsub_6
      0,	// dsub_3_dsub_5
      0,	// dsub_3_dsub_4_dsub_5
      0,	// dsub_3_dsub_5_dsub_7
      0,	// dsub_3_dsub_4
      0,	// dsub_3_dsub_4_dsub_5_dsub_6
      0,	// dsub_4_dsub_6
      0,	// dsub_4_dsub_5_dsub_6
      0,	// dsub_5_dsub_7
      0,	// dsub_5_dsub_6_dsub_7
      0,	// dsub_5_dsub_6
      0,	// qsub_1_qsub_2
    },
    {	// QQPR
      76,	// dsub_0 -> QQPR
      76,	// dsub_1 -> QQPR
      76,	// dsub_2 -> QQPR
      76,	// dsub_3 -> QQPR
      0,	// dsub_4
      0,	// dsub_5
      0,	// dsub_6
      0,	// dsub_7
      0,	// gsub_0
      0,	// gsub_1
      0,	// qqsub_0
      0,	// qqsub_1
      76,	// qsub_0 -> QQPR
      76,	// qsub_1 -> QQPR
      0,	// qsub_2
      0,	// qsub_3
      81,	// ssub_0 -> DQuad_with_qsub_0_in_QPR_VFP2
      81,	// ssub_1 -> DQuad_with_qsub_0_in_QPR_VFP2
      81,	// ssub_2 -> DQuad_with_qsub_0_in_QPR_VFP2
      81,	// ssub_3 -> DQuad_with_qsub_0_in_QPR_VFP2
      85,	// dsub_2_then_ssub_0 -> DQuad_with_qsub_1_in_QPR_VFP2
      85,	// dsub_2_then_ssub_1 -> DQuad_with_qsub_1_in_QPR_VFP2
      85,	// dsub_3_then_ssub_0 -> DQuad_with_qsub_1_in_QPR_VFP2
      85,	// dsub_3_then_ssub_1 -> DQuad_with_qsub_1_in_QPR_VFP2
      0,	// dsub_7_then_ssub_0
      0,	// dsub_7_then_ssub_1
      0,	// dsub_6_then_ssub_0
      0,	// dsub_6_then_ssub_1
      0,	// dsub_5_then_ssub_0
      0,	// dsub_5_then_ssub_1
      0,	// dsub_4_then_ssub_0
      0,	// dsub_4_then_ssub_1
      76,	// dsub_0_dsub_2 -> QQPR
      76,	// dsub_0_dsub_1_dsub_2 -> QQPR
      76,	// dsub_1_dsub_3 -> QQPR
      76,	// dsub_1_dsub_2_dsub_3 -> QQPR
      76,	// dsub_1_dsub_2 -> QQPR
      0,	// dsub_0_dsub_2_dsub_4
      0,	// dsub_0_dsub_2_dsub_4_dsub_6
      0,	// dsub_1_dsub_3_dsub_5
      0,	// dsub_1_dsub_3_dsub_5_dsub_7
      0,	// dsub_1_dsub_2_dsub_3_dsub_4
      0,	// dsub_2_dsub_4
      0,	// dsub_2_dsub_3_dsub_4
      0,	// dsub_2_dsub_4_dsub_6
      0,	// dsub_3_dsub_5
      0,	// dsub_3_dsub_4_dsub_5
      0,	// dsub_3_dsub_5_dsub_7
      0,	// dsub_3_dsub_4
      0,	// dsub_3_dsub_4_dsub_5_dsub_6
      0,	// dsub_4_dsub_6
      0,	// dsub_4_dsub_5_dsub_6
      0,	// dsub_5_dsub_7
      0,	// dsub_5_dsub_6_dsub_7
      0,	// dsub_5_dsub_6
      0,	// qsub_1_qsub_2
    },
    {	// DQuad_with_dsub_1_dsub_2_in_QPR
      77,	// dsub_0 -> DQuad_with_dsub_1_dsub_2_in_QPR
      77,	// dsub_1 -> DQuad_with_dsub_1_dsub_2_in_QPR
      77,	// dsub_2 -> DQuad_with_dsub_1_dsub_2_in_QPR
      77,	// dsub_3 -> DQuad_with_dsub_1_dsub_2_in_QPR
      0,	// dsub_4
      0,	// dsub_5
      0,	// dsub_6
      0,	// dsub_7
      0,	// gsub_0
      0,	// gsub_1
      0,	// qqsub_0
      0,	// qqsub_1
      77,	// qsub_0 -> DQuad_with_dsub_1_dsub_2_in_QPR
      77,	// qsub_1 -> DQuad_with_dsub_1_dsub_2_in_QPR
      0,	// qsub_2
      0,	// qsub_3
      82,	// ssub_0 -> DQuad_with_ssub_0_and_DQuad_with_dsub_1_dsub_2_in_QPR
      82,	// ssub_1 -> DQuad_with_ssub_0_and_DQuad_with_dsub_1_dsub_2_in_QPR
      83,	// ssub_2 -> DQuad_with_dsub_1_dsub_2_in_QPR_VFP2
      83,	// ssub_3 -> DQuad_with_dsub_1_dsub_2_in_QPR_VFP2
      83,	// dsub_2_then_ssub_0 -> DQuad_with_dsub_1_dsub_2_in_QPR_VFP2
      83,	// dsub_2_then_ssub_1 -> DQuad_with_dsub_1_dsub_2_in_QPR_VFP2
      87,	// dsub_3_then_ssub_0 -> DQuad_with_dsub_3_then_ssub_0_and_DQuad_with_dsub_1_dsub_2_in_QPR
      87,	// dsub_3_then_ssub_1 -> DQuad_with_dsub_3_then_ssub_0_and_DQuad_with_dsub_1_dsub_2_in_QPR
      0,	// dsub_7_then_ssub_0
      0,	// dsub_7_then_ssub_1
      0,	// dsub_6_then_ssub_0
      0,	// dsub_6_then_ssub_1
      0,	// dsub_5_then_ssub_0
      0,	// dsub_5_then_ssub_1
      0,	// dsub_4_then_ssub_0
      0,	// dsub_4_then_ssub_1
      77,	// dsub_0_dsub_2 -> DQuad_with_dsub_1_dsub_2_in_QPR
      77,	// dsub_0_dsub_1_dsub_2 -> DQuad_with_dsub_1_dsub_2_in_QPR
      77,	// dsub_1_dsub_3 -> DQuad_with_dsub_1_dsub_2_in_QPR
      77,	// dsub_1_dsub_2_dsub_3 -> DQuad_with_dsub_1_dsub_2_in_QPR
      77,	// dsub_1_dsub_2 -> DQuad_with_dsub_1_dsub_2_in_QPR
      0,	// dsub_0_dsub_2_dsub_4
      0,	// dsub_0_dsub_2_dsub_4_dsub_6
      0,	// dsub_1_dsub_3_dsub_5
      0,	// dsub_1_dsub_3_dsub_5_dsub_7
      0,	// dsub_1_dsub_2_dsub_3_dsub_4
      0,	// dsub_2_dsub_4
      0,	// dsub_2_dsub_3_dsub_4
      0,	// dsub_2_dsub_4_dsub_6
      0,	// dsub_3_dsub_5
      0,	// dsub_3_dsub_4_dsub_5
      0,	// dsub_3_dsub_5_dsub_7
      0,	// dsub_3_dsub_4
      0,	// dsub_3_dsub_4_dsub_5_dsub_6
      0,	// dsub_4_dsub_6
      0,	// dsub_4_dsub_5_dsub_6
      0,	// dsub_5_dsub_7
      0,	// dsub_5_dsub_6_dsub_7
      0,	// dsub_5_dsub_6
      0,	// qsub_1_qsub_2
    },
    {	// DQuad_with_dsub_2_then_ssub_0
      78,	// dsub_0 -> DQuad_with_dsub_2_then_ssub_0
      78,	// dsub_1 -> DQuad_with_dsub_2_then_ssub_0
      78,	// dsub_2 -> DQuad_with_dsub_2_then_ssub_0
      78,	// dsub_3 -> DQuad_with_dsub_2_then_ssub_0
      0,	// dsub_4
      0,	// dsub_5
      0,	// dsub_6
      0,	// dsub_7
      0,	// gsub_0
      0,	// gsub_1
      0,	// qqsub_0
      0,	// qqsub_1
      78,	// qsub_0 -> DQuad_with_dsub_2_then_ssub_0
      78,	// qsub_1 -> DQuad_with_dsub_2_then_ssub_0
      0,	// qsub_2
      0,	// qsub_3
      78,	// ssub_0 -> DQuad_with_dsub_2_then_ssub_0
      78,	// ssub_1 -> DQuad_with_dsub_2_then_ssub_0
      78,	// ssub_2 -> DQuad_with_dsub_2_then_ssub_0
      78,	// ssub_3 -> DQuad_with_dsub_2_then_ssub_0
      78,	// dsub_2_then_ssub_0 -> DQuad_with_dsub_2_then_ssub_0
      78,	// dsub_2_then_ssub_1 -> DQuad_with_dsub_2_then_ssub_0
      79,	// dsub_3_then_ssub_0 -> DQuad_with_dsub_3_then_ssub_0
      79,	// dsub_3_then_ssub_1 -> DQuad_with_dsub_3_then_ssub_0
      0,	// dsub_7_then_ssub_0
      0,	// dsub_7_then_ssub_1
      0,	// dsub_6_then_ssub_0
      0,	// dsub_6_then_ssub_1
      0,	// dsub_5_then_ssub_0
      0,	// dsub_5_then_ssub_1
      0,	// dsub_4_then_ssub_0
      0,	// dsub_4_then_ssub_1
      78,	// dsub_0_dsub_2 -> DQuad_with_dsub_2_then_ssub_0
      78,	// dsub_0_dsub_1_dsub_2 -> DQuad_with_dsub_2_then_ssub_0
      78,	// dsub_1_dsub_3 -> DQuad_with_dsub_2_then_ssub_0
      78,	// dsub_1_dsub_2_dsub_3 -> DQuad_with_dsub_2_then_ssub_0
      78,	// dsub_1_dsub_2 -> DQuad_with_dsub_2_then_ssub_0
      0,	// dsub_0_dsub_2_dsub_4
      0,	// dsub_0_dsub_2_dsub_4_dsub_6
      0,	// dsub_1_dsub_3_dsub_5
      0,	// dsub_1_dsub_3_dsub_5_dsub_7
      0,	// dsub_1_dsub_2_dsub_3_dsub_4
      0,	// dsub_2_dsub_4
      0,	// dsub_2_dsub_3_dsub_4
      0,	// dsub_2_dsub_4_dsub_6
      0,	// dsub_3_dsub_5
      0,	// dsub_3_dsub_4_dsub_5
      0,	// dsub_3_dsub_5_dsub_7
      0,	// dsub_3_dsub_4
      0,	// dsub_3_dsub_4_dsub_5_dsub_6
      0,	// dsub_4_dsub_6
      0,	// dsub_4_dsub_5_dsub_6
      0,	// dsub_5_dsub_7
      0,	// dsub_5_dsub_6_dsub_7
      0,	// dsub_5_dsub_6
      0,	// qsub_1_qsub_2
    },
    {	// DQuad_with_dsub_3_then_ssub_0
      79,	// dsub_0 -> DQuad_with_dsub_3_then_ssub_0
      79,	// dsub_1 -> DQuad_with_dsub_3_then_ssub_0
      79,	// dsub_2 -> DQuad_with_dsub_3_then_ssub_0
      79,	// dsub_3 -> DQuad_with_dsub_3_then_ssub_0
      0,	// dsub_4
      0,	// dsub_5
      0,	// dsub_6
      0,	// dsub_7
      0,	// gsub_0
      0,	// gsub_1
      0,	// qqsub_0
      0,	// qqsub_1
      79,	// qsub_0 -> DQuad_with_dsub_3_then_ssub_0
      79,	// qsub_1 -> DQuad_with_dsub_3_then_ssub_0
      0,	// qsub_2
      0,	// qsub_3
      79,	// ssub_0 -> DQuad_with_dsub_3_then_ssub_0
      79,	// ssub_1 -> DQuad_with_dsub_3_then_ssub_0
      79,	// ssub_2 -> DQuad_with_dsub_3_then_ssub_0
      79,	// ssub_3 -> DQuad_with_dsub_3_then_ssub_0
      79,	// dsub_2_then_ssub_0 -> DQuad_with_dsub_3_then_ssub_0
      79,	// dsub_2_then_ssub_1 -> DQuad_with_dsub_3_then_ssub_0
      79,	// dsub_3_then_ssub_0 -> DQuad_with_dsub_3_then_ssub_0
      79,	// dsub_3_then_ssub_1 -> DQuad_with_dsub_3_then_ssub_0
      0,	// dsub_7_then_ssub_0
      0,	// dsub_7_then_ssub_1
      0,	// dsub_6_then_ssub_0
      0,	// dsub_6_then_ssub_1
      0,	// dsub_5_then_ssub_0
      0,	// dsub_5_then_ssub_1
      0,	// dsub_4_then_ssub_0
      0,	// dsub_4_then_ssub_1
      79,	// dsub_0_dsub_2 -> DQuad_with_dsub_3_then_ssub_0
      79,	// dsub_0_dsub_1_dsub_2 -> DQuad_with_dsub_3_then_ssub_0
      79,	// dsub_1_dsub_3 -> DQuad_with_dsub_3_then_ssub_0
      79,	// dsub_1_dsub_2_dsub_3 -> DQuad_with_dsub_3_then_ssub_0
      79,	// dsub_1_dsub_2 -> DQuad_with_dsub_3_then_ssub_0
      0,	// dsub_0_dsub_2_dsub_4
      0,	// dsub_0_dsub_2_dsub_4_dsub_6
      0,	// dsub_1_dsub_3_dsub_5
      0,	// dsub_1_dsub_3_dsub_5_dsub_7
      0,	// dsub_1_dsub_2_dsub_3_dsub_4
      0,	// dsub_2_dsub_4
      0,	// dsub_2_dsub_3_dsub_4
      0,	// dsub_2_dsub_4_dsub_6
      0,	// dsub_3_dsub_5
      0,	// dsub_3_dsub_4_dsub_5
      0,	// dsub_3_dsub_5_dsub_7
      0,	// dsub_3_dsub_4
      0,	// dsub_3_dsub_4_dsub_5_dsub_6
      0,	// dsub_4_dsub_6
      0,	// dsub_4_dsub_5_dsub_6
      0,	// dsub_5_dsub_7
      0,	// dsub_5_dsub_6_dsub_7
      0,	// dsub_5_dsub_6
      0,	// qsub_1_qsub_2
    },
    {	// DQuad_with_dsub_0_in_DPR_8
      80,	// dsub_0 -> DQuad_with_dsub_0_in_DPR_8
      80,	// dsub_1 -> DQuad_with_dsub_0_in_DPR_8
      80,	// dsub_2 -> DQuad_with_dsub_0_in_DPR_8
      80,	// dsub_3 -> DQuad_with_dsub_0_in_DPR_8
      0,	// dsub_4
      0,	// dsub_5
      0,	// dsub_6
      0,	// dsub_7
      0,	// gsub_0
      0,	// gsub_1
      0,	// qqsub_0
      0,	// qqsub_1
      80,	// qsub_0 -> DQuad_with_dsub_0_in_DPR_8
      80,	// qsub_1 -> DQuad_with_dsub_0_in_DPR_8
      0,	// qsub_2
      0,	// qsub_3
      80,	// ssub_0 -> DQuad_with_dsub_0_in_DPR_8
      80,	// ssub_1 -> DQuad_with_dsub_0_in_DPR_8
      80,	// ssub_2 -> DQuad_with_dsub_0_in_DPR_8
      80,	// ssub_3 -> DQuad_with_dsub_0_in_DPR_8
      80,	// dsub_2_then_ssub_0 -> DQuad_with_dsub_0_in_DPR_8
      80,	// dsub_2_then_ssub_1 -> DQuad_with_dsub_0_in_DPR_8
      80,	// dsub_3_then_ssub_0 -> DQuad_with_dsub_0_in_DPR_8
      80,	// dsub_3_then_ssub_1 -> DQuad_with_dsub_0_in_DPR_8
      0,	// dsub_7_then_ssub_0
      0,	// dsub_7_then_ssub_1
      0,	// dsub_6_then_ssub_0
      0,	// dsub_6_then_ssub_1
      0,	// dsub_5_then_ssub_0
      0,	// dsub_5_then_ssub_1
      0,	// dsub_4_then_ssub_0
      0,	// dsub_4_then_ssub_1
      80,	// dsub_0_dsub_2 -> DQuad_with_dsub_0_in_DPR_8
      80,	// dsub_0_dsub_1_dsub_2 -> DQuad_with_dsub_0_in_DPR_8
      80,	// dsub_1_dsub_3 -> DQuad_with_dsub_0_in_DPR_8
      80,	// dsub_1_dsub_2_dsub_3 -> DQuad_with_dsub_0_in_DPR_8
      80,	// dsub_1_dsub_2 -> DQuad_with_dsub_0_in_DPR_8
      0,	// dsub_0_dsub_2_dsub_4
      0,	// dsub_0_dsub_2_dsub_4_dsub_6
      0,	// dsub_1_dsub_3_dsub_5
      0,	// dsub_1_dsub_3_dsub_5_dsub_7
      0,	// dsub_1_dsub_2_dsub_3_dsub_4
      0,	// dsub_2_dsub_4
      0,	// dsub_2_dsub_3_dsub_4
      0,	// dsub_2_dsub_4_dsub_6
      0,	// dsub_3_dsub_5
      0,	// dsub_3_dsub_4_dsub_5
      0,	// dsub_3_dsub_5_dsub_7
      0,	// dsub_3_dsub_4
      0,	// dsub_3_dsub_4_dsub_5_dsub_6
      0,	// dsub_4_dsub_6
      0,	// dsub_4_dsub_5_dsub_6
      0,	// dsub_5_dsub_7
      0,	// dsub_5_dsub_6_dsub_7
      0,	// dsub_5_dsub_6
      0,	// qsub_1_qsub_2
    },
    {	// DQuad_with_qsub_0_in_QPR_VFP2
      81,	// dsub_0 -> DQuad_with_qsub_0_in_QPR_VFP2
      81,	// dsub_1 -> DQuad_with_qsub_0_in_QPR_VFP2
      81,	// dsub_2 -> DQuad_with_qsub_0_in_QPR_VFP2
      81,	// dsub_3 -> DQuad_with_qsub_0_in_QPR_VFP2
      0,	// dsub_4
      0,	// dsub_5
      0,	// dsub_6
      0,	// dsub_7
      0,	// gsub_0
      0,	// gsub_1
      0,	// qqsub_0
      0,	// qqsub_1
      81,	// qsub_0 -> DQuad_with_qsub_0_in_QPR_VFP2
      81,	// qsub_1 -> DQuad_with_qsub_0_in_QPR_VFP2
      0,	// qsub_2
      0,	// qsub_3
      81,	// ssub_0 -> DQuad_with_qsub_0_in_QPR_VFP2
      81,	// ssub_1 -> DQuad_with_qsub_0_in_QPR_VFP2
      81,	// ssub_2 -> DQuad_with_qsub_0_in_QPR_VFP2
      81,	// ssub_3 -> DQuad_with_qsub_0_in_QPR_VFP2
      85,	// dsub_2_then_ssub_0 -> DQuad_with_qsub_1_in_QPR_VFP2
      85,	// dsub_2_then_ssub_1 -> DQuad_with_qsub_1_in_QPR_VFP2
      85,	// dsub_3_then_ssub_0 -> DQuad_with_qsub_1_in_QPR_VFP2
      85,	// dsub_3_then_ssub_1 -> DQuad_with_qsub_1_in_QPR_VFP2
      0,	// dsub_7_then_ssub_0
      0,	// dsub_7_then_ssub_1
      0,	// dsub_6_then_ssub_0
      0,	// dsub_6_then_ssub_1
      0,	// dsub_5_then_ssub_0
      0,	// dsub_5_then_ssub_1
      0,	// dsub_4_then_ssub_0
      0,	// dsub_4_then_ssub_1
      81,	// dsub_0_dsub_2 -> DQuad_with_qsub_0_in_QPR_VFP2
      81,	// dsub_0_dsub_1_dsub_2 -> DQuad_with_qsub_0_in_QPR_VFP2
      81,	// dsub_1_dsub_3 -> DQuad_with_qsub_0_in_QPR_VFP2
      81,	// dsub_1_dsub_2_dsub_3 -> DQuad_with_qsub_0_in_QPR_VFP2
      81,	// dsub_1_dsub_2 -> DQuad_with_qsub_0_in_QPR_VFP2
      0,	// dsub_0_dsub_2_dsub_4
      0,	// dsub_0_dsub_2_dsub_4_dsub_6
      0,	// dsub_1_dsub_3_dsub_5
      0,	// dsub_1_dsub_3_dsub_5_dsub_7
      0,	// dsub_1_dsub_2_dsub_3_dsub_4
      0,	// dsub_2_dsub_4
      0,	// dsub_2_dsub_3_dsub_4
      0,	// dsub_2_dsub_4_dsub_6
      0,	// dsub_3_dsub_5
      0,	// dsub_3_dsub_4_dsub_5
      0,	// dsub_3_dsub_5_dsub_7
      0,	// dsub_3_dsub_4
      0,	// dsub_3_dsub_4_dsub_5_dsub_6
      0,	// dsub_4_dsub_6
      0,	// dsub_4_dsub_5_dsub_6
      0,	// dsub_5_dsub_7
      0,	// dsub_5_dsub_6_dsub_7
      0,	// dsub_5_dsub_6
      0,	// qsub_1_qsub_2
    },
    {	// DQuad_with_ssub_0_and_DQuad_with_dsub_1_dsub_2_in_QPR
      82,	// dsub_0 -> DQuad_with_ssub_0_and_DQuad_with_dsub_1_dsub_2_in_QPR
      82,	// dsub_1 -> DQuad_with_ssub_0_and_DQuad_with_dsub_1_dsub_2_in_QPR
      82,	// dsub_2 -> DQuad_with_ssub_0_and_DQuad_with_dsub_1_dsub_2_in_QPR
      82,	// dsub_3 -> DQuad_with_ssub_0_and_DQuad_with_dsub_1_dsub_2_in_QPR
      0,	// dsub_4
      0,	// dsub_5
      0,	// dsub_6
      0,	// dsub_7
      0,	// gsub_0
      0,	// gsub_1
      0,	// qqsub_0
      0,	// qqsub_1
      82,	// qsub_0 -> DQuad_with_ssub_0_and_DQuad_with_dsub_1_dsub_2_in_QPR
      82,	// qsub_1 -> DQuad_with_ssub_0_and_DQuad_with_dsub_1_dsub_2_in_QPR
      0,	// qsub_2
      0,	// qsub_3
      82,	// ssub_0 -> DQuad_with_ssub_0_and_DQuad_with_dsub_1_dsub_2_in_QPR
      82,	// ssub_1 -> DQuad_with_ssub_0_and_DQuad_with_dsub_1_dsub_2_in_QPR
      83,	// ssub_2 -> DQuad_with_dsub_1_dsub_2_in_QPR_VFP2
      83,	// ssub_3 -> DQuad_with_dsub_1_dsub_2_in_QPR_VFP2
      83,	// dsub_2_then_ssub_0 -> DQuad_with_dsub_1_dsub_2_in_QPR_VFP2
      83,	// dsub_2_then_ssub_1 -> DQuad_with_dsub_1_dsub_2_in_QPR_VFP2
      87,	// dsub_3_then_ssub_0 -> DQuad_with_dsub_3_then_ssub_0_and_DQuad_with_dsub_1_dsub_2_in_QPR
      87,	// dsub_3_then_ssub_1 -> DQuad_with_dsub_3_then_ssub_0_and_DQuad_with_dsub_1_dsub_2_in_QPR
      0,	// dsub_7_then_ssub_0
      0,	// dsub_7_then_ssub_1
      0,	// dsub_6_then_ssub_0
      0,	// dsub_6_then_ssub_1
      0,	// dsub_5_then_ssub_0
      0,	// dsub_5_then_ssub_1
      0,	// dsub_4_then_ssub_0
      0,	// dsub_4_then_ssub_1
      82,	// dsub_0_dsub_2 -> DQuad_with_ssub_0_and_DQuad_with_dsub_1_dsub_2_in_QPR
      82,	// dsub_0_dsub_1_dsub_2 -> DQuad_with_ssub_0_and_DQuad_with_dsub_1_dsub_2_in_QPR
      82,	// dsub_1_dsub_3 -> DQuad_with_ssub_0_and_DQuad_with_dsub_1_dsub_2_in_QPR
      82,	// dsub_1_dsub_2_dsub_3 -> DQuad_with_ssub_0_and_DQuad_with_dsub_1_dsub_2_in_QPR
      82,	// dsub_1_dsub_2 -> DQuad_with_ssub_0_and_DQuad_with_dsub_1_dsub_2_in_QPR
      0,	// dsub_0_dsub_2_dsub_4
      0,	// dsub_0_dsub_2_dsub_4_dsub_6
      0,	// dsub_1_dsub_3_dsub_5
      0,	// dsub_1_dsub_3_dsub_5_dsub_7
      0,	// dsub_1_dsub_2_dsub_3_dsub_4
      0,	// dsub_2_dsub_4
      0,	// dsub_2_dsub_3_dsub_4
      0,	// dsub_2_dsub_4_dsub_6
      0,	// dsub_3_dsub_5
      0,	// dsub_3_dsub_4_dsub_5
      0,	// dsub_3_dsub_5_dsub_7
      0,	// dsub_3_dsub_4
      0,	// dsub_3_dsub_4_dsub_5_dsub_6
      0,	// dsub_4_dsub_6
      0,	// dsub_4_dsub_5_dsub_6
      0,	// dsub_5_dsub_7
      0,	// dsub_5_dsub_6_dsub_7
      0,	// dsub_5_dsub_6
      0,	// qsub_1_qsub_2
    },
    {	// DQuad_with_dsub_1_dsub_2_in_QPR_VFP2
      83,	// dsub_0 -> DQuad_with_dsub_1_dsub_2_in_QPR_VFP2
      83,	// dsub_1 -> DQuad_with_dsub_1_dsub_2_in_QPR_VFP2
      83,	// dsub_2 -> DQuad_with_dsub_1_dsub_2_in_QPR_VFP2
      83,	// dsub_3 -> DQuad_with_dsub_1_dsub_2_in_QPR_VFP2
      0,	// dsub_4
      0,	// dsub_5
      0,	// dsub_6
      0,	// dsub_7
      0,	// gsub_0
      0,	// gsub_1
      0,	// qqsub_0
      0,	// qqsub_1
      83,	// qsub_0 -> DQuad_with_dsub_1_dsub_2_in_QPR_VFP2
      83,	// qsub_1 -> DQuad_with_dsub_1_dsub_2_in_QPR_VFP2
      0,	// qsub_2
      0,	// qsub_3
      83,	// ssub_0 -> DQuad_with_dsub_1_dsub_2_in_QPR_VFP2
      83,	// ssub_1 -> DQuad_with_dsub_1_dsub_2_in_QPR_VFP2
      83,	// ssub_2 -> DQuad_with_dsub_1_dsub_2_in_QPR_VFP2
      83,	// ssub_3 -> DQuad_with_dsub_1_dsub_2_in_QPR_VFP2
      83,	// dsub_2_then_ssub_0 -> DQuad_with_dsub_1_dsub_2_in_QPR_VFP2
      83,	// dsub_2_then_ssub_1 -> DQuad_with_dsub_1_dsub_2_in_QPR_VFP2
      87,	// dsub_3_then_ssub_0 -> DQuad_with_dsub_3_then_ssub_0_and_DQuad_with_dsub_1_dsub_2_in_QPR
      87,	// dsub_3_then_ssub_1 -> DQuad_with_dsub_3_then_ssub_0_and_DQuad_with_dsub_1_dsub_2_in_QPR
      0,	// dsub_7_then_ssub_0
      0,	// dsub_7_then_ssub_1
      0,	// dsub_6_then_ssub_0
      0,	// dsub_6_then_ssub_1
      0,	// dsub_5_then_ssub_0
      0,	// dsub_5_then_ssub_1
      0,	// dsub_4_then_ssub_0
      0,	// dsub_4_then_ssub_1
      83,	// dsub_0_dsub_2 -> DQuad_with_dsub_1_dsub_2_in_QPR_VFP2
      83,	// dsub_0_dsub_1_dsub_2 -> DQuad_with_dsub_1_dsub_2_in_QPR_VFP2
      83,	// dsub_1_dsub_3 -> DQuad_with_dsub_1_dsub_2_in_QPR_VFP2
      83,	// dsub_1_dsub_2_dsub_3 -> DQuad_with_dsub_1_dsub_2_in_QPR_VFP2
      83,	// dsub_1_dsub_2 -> DQuad_with_dsub_1_dsub_2_in_QPR_VFP2
      0,	// dsub_0_dsub_2_dsub_4
      0,	// dsub_0_dsub_2_dsub_4_dsub_6
      0,	// dsub_1_dsub_3_dsub_5
      0,	// dsub_1_dsub_3_dsub_5_dsub_7
      0,	// dsub_1_dsub_2_dsub_3_dsub_4
      0,	// dsub_2_dsub_4
      0,	// dsub_2_dsub_3_dsub_4
      0,	// dsub_2_dsub_4_dsub_6
      0,	// dsub_3_dsub_5
      0,	// dsub_3_dsub_4_dsub_5
      0,	// dsub_3_dsub_5_dsub_7
      0,	// dsub_3_dsub_4
      0,	// dsub_3_dsub_4_dsub_5_dsub_6
      0,	// dsub_4_dsub_6
      0,	// dsub_4_dsub_5_dsub_6
      0,	// dsub_5_dsub_7
      0,	// dsub_5_dsub_6_dsub_7
      0,	// dsub_5_dsub_6
      0,	// qsub_1_qsub_2
    },
    {	// DQuad_with_dsub_1_in_DPR_8
      84,	// dsub_0 -> DQuad_with_dsub_1_in_DPR_8
      84,	// dsub_1 -> DQuad_with_dsub_1_in_DPR_8
      84,	// dsub_2 -> DQuad_with_dsub_1_in_DPR_8
      84,	// dsub_3 -> DQuad_with_dsub_1_in_DPR_8
      0,	// dsub_4
      0,	// dsub_5
      0,	// dsub_6
      0,	// dsub_7
      0,	// gsub_0
      0,	// gsub_1
      0,	// qqsub_0
      0,	// qqsub_1
      84,	// qsub_0 -> DQuad_with_dsub_1_in_DPR_8
      84,	// qsub_1 -> DQuad_with_dsub_1_in_DPR_8
      0,	// qsub_2
      0,	// qsub_3
      84,	// ssub_0 -> DQuad_with_dsub_1_in_DPR_8
      84,	// ssub_1 -> DQuad_with_dsub_1_in_DPR_8
      84,	// ssub_2 -> DQuad_with_dsub_1_in_DPR_8
      84,	// ssub_3 -> DQuad_with_dsub_1_in_DPR_8
      84,	// dsub_2_then_ssub_0 -> DQuad_with_dsub_1_in_DPR_8
      84,	// dsub_2_then_ssub_1 -> DQuad_with_dsub_1_in_DPR_8
      84,	// dsub_3_then_ssub_0 -> DQuad_with_dsub_1_in_DPR_8
      84,	// dsub_3_then_ssub_1 -> DQuad_with_dsub_1_in_DPR_8
      0,	// dsub_7_then_ssub_0
      0,	// dsub_7_then_ssub_1
      0,	// dsub_6_then_ssub_0
      0,	// dsub_6_then_ssub_1
      0,	// dsub_5_then_ssub_0
      0,	// dsub_5_then_ssub_1
      0,	// dsub_4_then_ssub_0
      0,	// dsub_4_then_ssub_1
      84,	// dsub_0_dsub_2 -> DQuad_with_dsub_1_in_DPR_8
      84,	// dsub_0_dsub_1_dsub_2 -> DQuad_with_dsub_1_in_DPR_8
      84,	// dsub_1_dsub_3 -> DQuad_with_dsub_1_in_DPR_8
      84,	// dsub_1_dsub_2_dsub_3 -> DQuad_with_dsub_1_in_DPR_8
      84,	// dsub_1_dsub_2 -> DQuad_with_dsub_1_in_DPR_8
      0,	// dsub_0_dsub_2_dsub_4
      0,	// dsub_0_dsub_2_dsub_4_dsub_6
      0,	// dsub_1_dsub_3_dsub_5
      0,	// dsub_1_dsub_3_dsub_5_dsub_7
      0,	// dsub_1_dsub_2_dsub_3_dsub_4
      0,	// dsub_2_dsub_4
      0,	// dsub_2_dsub_3_dsub_4
      0,	// dsub_2_dsub_4_dsub_6
      0,	// dsub_3_dsub_5
      0,	// dsub_3_dsub_4_dsub_5
      0,	// dsub_3_dsub_5_dsub_7
      0,	// dsub_3_dsub_4
      0,	// dsub_3_dsub_4_dsub_5_dsub_6
      0,	// dsub_4_dsub_6
      0,	// dsub_4_dsub_5_dsub_6
      0,	// dsub_5_dsub_7
      0,	// dsub_5_dsub_6_dsub_7
      0,	// dsub_5_dsub_6
      0,	// qsub_1_qsub_2
    },
    {	// DQuad_with_qsub_1_in_QPR_VFP2
      85,	// dsub_0 -> DQuad_with_qsub_1_in_QPR_VFP2
      85,	// dsub_1 -> DQuad_with_qsub_1_in_QPR_VFP2
      85,	// dsub_2 -> DQuad_with_qsub_1_in_QPR_VFP2
      85,	// dsub_3 -> DQuad_with_qsub_1_in_QPR_VFP2
      0,	// dsub_4
      0,	// dsub_5
      0,	// dsub_6
      0,	// dsub_7
      0,	// gsub_0
      0,	// gsub_1
      0,	// qqsub_0
      0,	// qqsub_1
      85,	// qsub_0 -> DQuad_with_qsub_1_in_QPR_VFP2
      85,	// qsub_1 -> DQuad_with_qsub_1_in_QPR_VFP2
      0,	// qsub_2
      0,	// qsub_3
      85,	// ssub_0 -> DQuad_with_qsub_1_in_QPR_VFP2
      85,	// ssub_1 -> DQuad_with_qsub_1_in_QPR_VFP2
      85,	// ssub_2 -> DQuad_with_qsub_1_in_QPR_VFP2
      85,	// ssub_3 -> DQuad_with_qsub_1_in_QPR_VFP2
      85,	// dsub_2_then_ssub_0 -> DQuad_with_qsub_1_in_QPR_VFP2
      85,	// dsub_2_then_ssub_1 -> DQuad_with_qsub_1_in_QPR_VFP2
      85,	// dsub_3_then_ssub_0 -> DQuad_with_qsub_1_in_QPR_VFP2
      85,	// dsub_3_then_ssub_1 -> DQuad_with_qsub_1_in_QPR_VFP2
      0,	// dsub_7_then_ssub_0
      0,	// dsub_7_then_ssub_1
      0,	// dsub_6_then_ssub_0
      0,	// dsub_6_then_ssub_1
      0,	// dsub_5_then_ssub_0
      0,	// dsub_5_then_ssub_1
      0,	// dsub_4_then_ssub_0
      0,	// dsub_4_then_ssub_1
      85,	// dsub_0_dsub_2 -> DQuad_with_qsub_1_in_QPR_VFP2
      85,	// dsub_0_dsub_1_dsub_2 -> DQuad_with_qsub_1_in_QPR_VFP2
      85,	// dsub_1_dsub_3 -> DQuad_with_qsub_1_in_QPR_VFP2
      85,	// dsub_1_dsub_2_dsub_3 -> DQuad_with_qsub_1_in_QPR_VFP2
      85,	// dsub_1_dsub_2 -> DQuad_with_qsub_1_in_QPR_VFP2
      0,	// dsub_0_dsub_2_dsub_4
      0,	// dsub_0_dsub_2_dsub_4_dsub_6
      0,	// dsub_1_dsub_3_dsub_5
      0,	// dsub_1_dsub_3_dsub_5_dsub_7
      0,	// dsub_1_dsub_2_dsub_3_dsub_4
      0,	// dsub_2_dsub_4
      0,	// dsub_2_dsub_3_dsub_4
      0,	// dsub_2_dsub_4_dsub_6
      0,	// dsub_3_dsub_5
      0,	// dsub_3_dsub_4_dsub_5
      0,	// dsub_3_dsub_5_dsub_7
      0,	// dsub_3_dsub_4
      0,	// dsub_3_dsub_4_dsub_5_dsub_6
      0,	// dsub_4_dsub_6
      0,	// dsub_4_dsub_5_dsub_6
      0,	// dsub_5_dsub_7
      0,	// dsub_5_dsub_6_dsub_7
      0,	// dsub_5_dsub_6
      0,	// qsub_1_qsub_2
    },
    {	// DQuad_with_dsub_2_in_DPR_8
      86,	// dsub_0 -> DQuad_with_dsub_2_in_DPR_8
      86,	// dsub_1 -> DQuad_with_dsub_2_in_DPR_8
      86,	// dsub_2 -> DQuad_with_dsub_2_in_DPR_8
      86,	// dsub_3 -> DQuad_with_dsub_2_in_DPR_8
      0,	// dsub_4
      0,	// dsub_5
      0,	// dsub_6
      0,	// dsub_7
      0,	// gsub_0
      0,	// gsub_1
      0,	// qqsub_0
      0,	// qqsub_1
      86,	// qsub_0 -> DQuad_with_dsub_2_in_DPR_8
      86,	// qsub_1 -> DQuad_with_dsub_2_in_DPR_8
      0,	// qsub_2
      0,	// qsub_3
      86,	// ssub_0 -> DQuad_with_dsub_2_in_DPR_8
      86,	// ssub_1 -> DQuad_with_dsub_2_in_DPR_8
      86,	// ssub_2 -> DQuad_with_dsub_2_in_DPR_8
      86,	// ssub_3 -> DQuad_with_dsub_2_in_DPR_8
      86,	// dsub_2_then_ssub_0 -> DQuad_with_dsub_2_in_DPR_8
      86,	// dsub_2_then_ssub_1 -> DQuad_with_dsub_2_in_DPR_8
      86,	// dsub_3_then_ssub_0 -> DQuad_with_dsub_2_in_DPR_8
      86,	// dsub_3_then_ssub_1 -> DQuad_with_dsub_2_in_DPR_8
      0,	// dsub_7_then_ssub_0
      0,	// dsub_7_then_ssub_1
      0,	// dsub_6_then_ssub_0
      0,	// dsub_6_then_ssub_1
      0,	// dsub_5_then_ssub_0
      0,	// dsub_5_then_ssub_1
      0,	// dsub_4_then_ssub_0
      0,	// dsub_4_then_ssub_1
      86,	// dsub_0_dsub_2 -> DQuad_with_dsub_2_in_DPR_8
      86,	// dsub_0_dsub_1_dsub_2 -> DQuad_with_dsub_2_in_DPR_8
      86,	// dsub_1_dsub_3 -> DQuad_with_dsub_2_in_DPR_8
      86,	// dsub_1_dsub_2_dsub_3 -> DQuad_with_dsub_2_in_DPR_8
      86,	// dsub_1_dsub_2 -> DQuad_with_dsub_2_in_DPR_8
      0,	// dsub_0_dsub_2_dsub_4
      0,	// dsub_0_dsub_2_dsub_4_dsub_6
      0,	// dsub_1_dsub_3_dsub_5
      0,	// dsub_1_dsub_3_dsub_5_dsub_7
      0,	// dsub_1_dsub_2_dsub_3_dsub_4
      0,	// dsub_2_dsub_4
      0,	// dsub_2_dsub_3_dsub_4
      0,	// dsub_2_dsub_4_dsub_6
      0,	// dsub_3_dsub_5
      0,	// dsub_3_dsub_4_dsub_5
      0,	// dsub_3_dsub_5_dsub_7
      0,	// dsub_3_dsub_4
      0,	// dsub_3_dsub_4_dsub_5_dsub_6
      0,	// dsub_4_dsub_6
      0,	// dsub_4_dsub_5_dsub_6
      0,	// dsub_5_dsub_7
      0,	// dsub_5_dsub_6_dsub_7
      0,	// dsub_5_dsub_6
      0,	// qsub_1_qsub_2
    },
    {	// DQuad_with_dsub_3_then_ssub_0_and_DQuad_with_dsub_1_dsub_2_in_QPR
      87,	// dsub_0 -> DQuad_with_dsub_3_then_ssub_0_and_DQuad_with_dsub_1_dsub_2_in_QPR
      87,	// dsub_1 -> DQuad_with_dsub_3_then_ssub_0_and_DQuad_with_dsub_1_dsub_2_in_QPR
      87,	// dsub_2 -> DQuad_with_dsub_3_then_ssub_0_and_DQuad_with_dsub_1_dsub_2_in_QPR
      87,	// dsub_3 -> DQuad_with_dsub_3_then_ssub_0_and_DQuad_with_dsub_1_dsub_2_in_QPR
      0,	// dsub_4
      0,	// dsub_5
      0,	// dsub_6
      0,	// dsub_7
      0,	// gsub_0
      0,	// gsub_1
      0,	// qqsub_0
      0,	// qqsub_1
      87,	// qsub_0 -> DQuad_with_dsub_3_then_ssub_0_and_DQuad_with_dsub_1_dsub_2_in_QPR
      87,	// qsub_1 -> DQuad_with_dsub_3_then_ssub_0_and_DQuad_with_dsub_1_dsub_2_in_QPR
      0,	// qsub_2
      0,	// qsub_3
      87,	// ssub_0 -> DQuad_with_dsub_3_then_ssub_0_and_DQuad_with_dsub_1_dsub_2_in_QPR
      87,	// ssub_1 -> DQuad_with_dsub_3_then_ssub_0_and_DQuad_with_dsub_1_dsub_2_in_QPR
      87,	// ssub_2 -> DQuad_with_dsub_3_then_ssub_0_and_DQuad_with_dsub_1_dsub_2_in_QPR
      87,	// ssub_3 -> DQuad_with_dsub_3_then_ssub_0_and_DQuad_with_dsub_1_dsub_2_in_QPR
      87,	// dsub_2_then_ssub_0 -> DQuad_with_dsub_3_then_ssub_0_and_DQuad_with_dsub_1_dsub_2_in_QPR
      87,	// dsub_2_then_ssub_1 -> DQuad_with_dsub_3_then_ssub_0_and_DQuad_with_dsub_1_dsub_2_in_QPR
      87,	// dsub_3_then_ssub_0 -> DQuad_with_dsub_3_then_ssub_0_and_DQuad_with_dsub_1_dsub_2_in_QPR
      87,	// dsub_3_then_ssub_1 -> DQuad_with_dsub_3_then_ssub_0_and_DQuad_with_dsub_1_dsub_2_in_QPR
      0,	// dsub_7_then_ssub_0
      0,	// dsub_7_then_ssub_1
      0,	// dsub_6_then_ssub_0
      0,	// dsub_6_then_ssub_1
      0,	// dsub_5_then_ssub_0
      0,	// dsub_5_then_ssub_1
      0,	// dsub_4_then_ssub_0
      0,	// dsub_4_then_ssub_1
      87,	// dsub_0_dsub_2 -> DQuad_with_dsub_3_then_ssub_0_and_DQuad_with_dsub_1_dsub_2_in_QPR
      87,	// dsub_0_dsub_1_dsub_2 -> DQuad_with_dsub_3_then_ssub_0_and_DQuad_with_dsub_1_dsub_2_in_QPR
      87,	// dsub_1_dsub_3 -> DQuad_with_dsub_3_then_ssub_0_and_DQuad_with_dsub_1_dsub_2_in_QPR
      87,	// dsub_1_dsub_2_dsub_3 -> DQuad_with_dsub_3_then_ssub_0_and_DQuad_with_dsub_1_dsub_2_in_QPR
      87,	// dsub_1_dsub_2 -> DQuad_with_dsub_3_then_ssub_0_and_DQuad_with_dsub_1_dsub_2_in_QPR
      0,	// dsub_0_dsub_2_dsub_4
      0,	// dsub_0_dsub_2_dsub_4_dsub_6
      0,	// dsub_1_dsub_3_dsub_5
      0,	// dsub_1_dsub_3_dsub_5_dsub_7
      0,	// dsub_1_dsub_2_dsub_3_dsub_4
      0,	// dsub_2_dsub_4
      0,	// dsub_2_dsub_3_dsub_4
      0,	// dsub_2_dsub_4_dsub_6
      0,	// dsub_3_dsub_5
      0,	// dsub_3_dsub_4_dsub_5
      0,	// dsub_3_dsub_5_dsub_7
      0,	// dsub_3_dsub_4
      0,	// dsub_3_dsub_4_dsub_5_dsub_6
      0,	// dsub_4_dsub_6
      0,	// dsub_4_dsub_5_dsub_6
      0,	// dsub_5_dsub_7
      0,	// dsub_5_dsub_6_dsub_7
      0,	// dsub_5_dsub_6
      0,	// qsub_1_qsub_2
    },
    {	// DQuad_with_dsub_3_in_DPR_8
      88,	// dsub_0 -> DQuad_with_dsub_3_in_DPR_8
      88,	// dsub_1 -> DQuad_with_dsub_3_in_DPR_8
      88,	// dsub_2 -> DQuad_with_dsub_3_in_DPR_8
      88,	// dsub_3 -> DQuad_with_dsub_3_in_DPR_8
      0,	// dsub_4
      0,	// dsub_5
      0,	// dsub_6
      0,	// dsub_7
      0,	// gsub_0
      0,	// gsub_1
      0,	// qqsub_0
      0,	// qqsub_1
      88,	// qsub_0 -> DQuad_with_dsub_3_in_DPR_8
      88,	// qsub_1 -> DQuad_with_dsub_3_in_DPR_8
      0,	// qsub_2
      0,	// qsub_3
      88,	// ssub_0 -> DQuad_with_dsub_3_in_DPR_8
      88,	// ssub_1 -> DQuad_with_dsub_3_in_DPR_8
      88,	// ssub_2 -> DQuad_with_dsub_3_in_DPR_8
      88,	// ssub_3 -> DQuad_with_dsub_3_in_DPR_8
      88,	// dsub_2_then_ssub_0 -> DQuad_with_dsub_3_in_DPR_8
      88,	// dsub_2_then_ssub_1 -> DQuad_with_dsub_3_in_DPR_8
      88,	// dsub_3_then_ssub_0 -> DQuad_with_dsub_3_in_DPR_8
      88,	// dsub_3_then_ssub_1 -> DQuad_with_dsub_3_in_DPR_8
      0,	// dsub_7_then_ssub_0
      0,	// dsub_7_then_ssub_1
      0,	// dsub_6_then_ssub_0
      0,	// dsub_6_then_ssub_1
      0,	// dsub_5_then_ssub_0
      0,	// dsub_5_then_ssub_1
      0,	// dsub_4_then_ssub_0
      0,	// dsub_4_then_ssub_1
      88,	// dsub_0_dsub_2 -> DQuad_with_dsub_3_in_DPR_8
      88,	// dsub_0_dsub_1_dsub_2 -> DQuad_with_dsub_3_in_DPR_8
      88,	// dsub_1_dsub_3 -> DQuad_with_dsub_3_in_DPR_8
      88,	// dsub_1_dsub_2_dsub_3 -> DQuad_with_dsub_3_in_DPR_8
      88,	// dsub_1_dsub_2 -> DQuad_with_dsub_3_in_DPR_8
      0,	// dsub_0_dsub_2_dsub_4
      0,	// dsub_0_dsub_2_dsub_4_dsub_6
      0,	// dsub_1_dsub_3_dsub_5
      0,	// dsub_1_dsub_3_dsub_5_dsub_7
      0,	// dsub_1_dsub_2_dsub_3_dsub_4
      0,	// dsub_2_dsub_4
      0,	// dsub_2_dsub_3_dsub_4
      0,	// dsub_2_dsub_4_dsub_6
      0,	// dsub_3_dsub_5
      0,	// dsub_3_dsub_4_dsub_5
      0,	// dsub_3_dsub_5_dsub_7
      0,	// dsub_3_dsub_4
      0,	// dsub_3_dsub_4_dsub_5_dsub_6
      0,	// dsub_4_dsub_6
      0,	// dsub_4_dsub_5_dsub_6
      0,	// dsub_5_dsub_7
      0,	// dsub_5_dsub_6_dsub_7
      0,	// dsub_5_dsub_6
      0,	// qsub_1_qsub_2
    },
    {	// DQuad_with_dsub_0_in_DPR_8_and_DQuad_with_dsub_1_dsub_2_in_QPR
      89,	// dsub_0 -> DQuad_with_dsub_0_in_DPR_8_and_DQuad_with_dsub_1_dsub_2_in_QPR
      89,	// dsub_1 -> DQuad_with_dsub_0_in_DPR_8_and_DQuad_with_dsub_1_dsub_2_in_QPR
      89,	// dsub_2 -> DQuad_with_dsub_0_in_DPR_8_and_DQuad_with_dsub_1_dsub_2_in_QPR
      89,	// dsub_3 -> DQuad_with_dsub_0_in_DPR_8_and_DQuad_with_dsub_1_dsub_2_in_QPR
      0,	// dsub_4
      0,	// dsub_5
      0,	// dsub_6
      0,	// dsub_7
      0,	// gsub_0
      0,	// gsub_1
      0,	// qqsub_0
      0,	// qqsub_1
      89,	// qsub_0 -> DQuad_with_dsub_0_in_DPR_8_and_DQuad_with_dsub_1_dsub_2_in_QPR
      89,	// qsub_1 -> DQuad_with_dsub_0_in_DPR_8_and_DQuad_with_dsub_1_dsub_2_in_QPR
      0,	// qsub_2
      0,	// qsub_3
      89,	// ssub_0 -> DQuad_with_dsub_0_in_DPR_8_and_DQuad_with_dsub_1_dsub_2_in_QPR
      89,	// ssub_1 -> DQuad_with_dsub_0_in_DPR_8_and_DQuad_with_dsub_1_dsub_2_in_QPR
      89,	// ssub_2 -> DQuad_with_dsub_0_in_DPR_8_and_DQuad_with_dsub_1_dsub_2_in_QPR
      89,	// ssub_3 -> DQuad_with_dsub_0_in_DPR_8_and_DQuad_with_dsub_1_dsub_2_in_QPR
      89,	// dsub_2_then_ssub_0 -> DQuad_with_dsub_0_in_DPR_8_and_DQuad_with_dsub_1_dsub_2_in_QPR
      89,	// dsub_2_then_ssub_1 -> DQuad_with_dsub_0_in_DPR_8_and_DQuad_with_dsub_1_dsub_2_in_QPR
      89,	// dsub_3_then_ssub_0 -> DQuad_with_dsub_0_in_DPR_8_and_DQuad_with_dsub_1_dsub_2_in_QPR
      89,	// dsub_3_then_ssub_1 -> DQuad_with_dsub_0_in_DPR_8_and_DQuad_with_dsub_1_dsub_2_in_QPR
      0,	// dsub_7_then_ssub_0
      0,	// dsub_7_then_ssub_1
      0,	// dsub_6_then_ssub_0
      0,	// dsub_6_then_ssub_1
      0,	// dsub_5_then_ssub_0
      0,	// dsub_5_then_ssub_1
      0,	// dsub_4_then_ssub_0
      0,	// dsub_4_then_ssub_1
      89,	// dsub_0_dsub_2 -> DQuad_with_dsub_0_in_DPR_8_and_DQuad_with_dsub_1_dsub_2_in_QPR
      89,	// dsub_0_dsub_1_dsub_2 -> DQuad_with_dsub_0_in_DPR_8_and_DQuad_with_dsub_1_dsub_2_in_QPR
      89,	// dsub_1_dsub_3 -> DQuad_with_dsub_0_in_DPR_8_and_DQuad_with_dsub_1_dsub_2_in_QPR
      89,	// dsub_1_dsub_2_dsub_3 -> DQuad_with_dsub_0_in_DPR_8_and_DQuad_with_dsub_1_dsub_2_in_QPR
      89,	// dsub_1_dsub_2 -> DQuad_with_dsub_0_in_DPR_8_and_DQuad_with_dsub_1_dsub_2_in_QPR
      0,	// dsub_0_dsub_2_dsub_4
      0,	// dsub_0_dsub_2_dsub_4_dsub_6
      0,	// dsub_1_dsub_3_dsub_5
      0,	// dsub_1_dsub_3_dsub_5_dsub_7
      0,	// dsub_1_dsub_2_dsub_3_dsub_4
      0,	// dsub_2_dsub_4
      0,	// dsub_2_dsub_3_dsub_4
      0,	// dsub_2_dsub_4_dsub_6
      0,	// dsub_3_dsub_5
      0,	// dsub_3_dsub_4_dsub_5
      0,	// dsub_3_dsub_5_dsub_7
      0,	// dsub_3_dsub_4
      0,	// dsub_3_dsub_4_dsub_5_dsub_6
      0,	// dsub_4_dsub_6
      0,	// dsub_4_dsub_5_dsub_6
      0,	// dsub_5_dsub_7
      0,	// dsub_5_dsub_6_dsub_7
      0,	// dsub_5_dsub_6
      0,	// qsub_1_qsub_2
    },
    {	// DQuad_with_qsub_0_in_QPR_8
      90,	// dsub_0 -> DQuad_with_qsub_0_in_QPR_8
      90,	// dsub_1 -> DQuad_with_qsub_0_in_QPR_8
      90,	// dsub_2 -> DQuad_with_qsub_0_in_QPR_8
      90,	// dsub_3 -> DQuad_with_qsub_0_in_QPR_8
      0,	// dsub_4
      0,	// dsub_5
      0,	// dsub_6
      0,	// dsub_7
      0,	// gsub_0
      0,	// gsub_1
      0,	// qqsub_0
      0,	// qqsub_1
      90,	// qsub_0 -> DQuad_with_qsub_0_in_QPR_8
      90,	// qsub_1 -> DQuad_with_qsub_0_in_QPR_8
      0,	// qsub_2
      0,	// qsub_3
      90,	// ssub_0 -> DQuad_with_qsub_0_in_QPR_8
      90,	// ssub_1 -> DQuad_with_qsub_0_in_QPR_8
      90,	// ssub_2 -> DQuad_with_qsub_0_in_QPR_8
      90,	// ssub_3 -> DQuad_with_qsub_0_in_QPR_8
      90,	// dsub_2_then_ssub_0 -> DQuad_with_qsub_0_in_QPR_8
      90,	// dsub_2_then_ssub_1 -> DQuad_with_qsub_0_in_QPR_8
      90,	// dsub_3_then_ssub_0 -> DQuad_with_qsub_0_in_QPR_8
      90,	// dsub_3_then_ssub_1 -> DQuad_with_qsub_0_in_QPR_8
      0,	// dsub_7_then_ssub_0
      0,	// dsub_7_then_ssub_1
      0,	// dsub_6_then_ssub_0
      0,	// dsub_6_then_ssub_1
      0,	// dsub_5_then_ssub_0
      0,	// dsub_5_then_ssub_1
      0,	// dsub_4_then_ssub_0
      0,	// dsub_4_then_ssub_1
      90,	// dsub_0_dsub_2 -> DQuad_with_qsub_0_in_QPR_8
      90,	// dsub_0_dsub_1_dsub_2 -> DQuad_with_qsub_0_in_QPR_8
      90,	// dsub_1_dsub_3 -> DQuad_with_qsub_0_in_QPR_8
      90,	// dsub_1_dsub_2_dsub_3 -> DQuad_with_qsub_0_in_QPR_8
      90,	// dsub_1_dsub_2 -> DQuad_with_qsub_0_in_QPR_8
      0,	// dsub_0_dsub_2_dsub_4
      0,	// dsub_0_dsub_2_dsub_4_dsub_6
      0,	// dsub_1_dsub_3_dsub_5
      0,	// dsub_1_dsub_3_dsub_5_dsub_7
      0,	// dsub_1_dsub_2_dsub_3_dsub_4
      0,	// dsub_2_dsub_4
      0,	// dsub_2_dsub_3_dsub_4
      0,	// dsub_2_dsub_4_dsub_6
      0,	// dsub_3_dsub_5
      0,	// dsub_3_dsub_4_dsub_5
      0,	// dsub_3_dsub_5_dsub_7
      0,	// dsub_3_dsub_4
      0,	// dsub_3_dsub_4_dsub_5_dsub_6
      0,	// dsub_4_dsub_6
      0,	// dsub_4_dsub_5_dsub_6
      0,	// dsub_5_dsub_7
      0,	// dsub_5_dsub_6_dsub_7
      0,	// dsub_5_dsub_6
      0,	// qsub_1_qsub_2
    },
    {	// DQuad_with_dsub_1_dsub_2_in_QPR_8
      91,	// dsub_0 -> DQuad_with_dsub_1_dsub_2_in_QPR_8
      91,	// dsub_1 -> DQuad_with_dsub_1_dsub_2_in_QPR_8
      91,	// dsub_2 -> DQuad_with_dsub_1_dsub_2_in_QPR_8
      91,	// dsub_3 -> DQuad_with_dsub_1_dsub_2_in_QPR_8
      0,	// dsub_4
      0,	// dsub_5
      0,	// dsub_6
      0,	// dsub_7
      0,	// gsub_0
      0,	// gsub_1
      0,	// qqsub_0
      0,	// qqsub_1
      91,	// qsub_0 -> DQuad_with_dsub_1_dsub_2_in_QPR_8
      91,	// qsub_1 -> DQuad_with_dsub_1_dsub_2_in_QPR_8
      0,	// qsub_2
      0,	// qsub_3
      91,	// ssub_0 -> DQuad_with_dsub_1_dsub_2_in_QPR_8
      91,	// ssub_1 -> DQuad_with_dsub_1_dsub_2_in_QPR_8
      91,	// ssub_2 -> DQuad_with_dsub_1_dsub_2_in_QPR_8
      91,	// ssub_3 -> DQuad_with_dsub_1_dsub_2_in_QPR_8
      91,	// dsub_2_then_ssub_0 -> DQuad_with_dsub_1_dsub_2_in_QPR_8
      91,	// dsub_2_then_ssub_1 -> DQuad_with_dsub_1_dsub_2_in_QPR_8
      91,	// dsub_3_then_ssub_0 -> DQuad_with_dsub_1_dsub_2_in_QPR_8
      91,	// dsub_3_then_ssub_1 -> DQuad_with_dsub_1_dsub_2_in_QPR_8
      0,	// dsub_7_then_ssub_0
      0,	// dsub_7_then_ssub_1
      0,	// dsub_6_then_ssub_0
      0,	// dsub_6_then_ssub_1
      0,	// dsub_5_then_ssub_0
      0,	// dsub_5_then_ssub_1
      0,	// dsub_4_then_ssub_0
      0,	// dsub_4_then_ssub_1
      91,	// dsub_0_dsub_2 -> DQuad_with_dsub_1_dsub_2_in_QPR_8
      91,	// dsub_0_dsub_1_dsub_2 -> DQuad_with_dsub_1_dsub_2_in_QPR_8
      91,	// dsub_1_dsub_3 -> DQuad_with_dsub_1_dsub_2_in_QPR_8
      91,	// dsub_1_dsub_2_dsub_3 -> DQuad_with_dsub_1_dsub_2_in_QPR_8
      91,	// dsub_1_dsub_2 -> DQuad_with_dsub_1_dsub_2_in_QPR_8
      0,	// dsub_0_dsub_2_dsub_4
      0,	// dsub_0_dsub_2_dsub_4_dsub_6
      0,	// dsub_1_dsub_3_dsub_5
      0,	// dsub_1_dsub_3_dsub_5_dsub_7
      0,	// dsub_1_dsub_2_dsub_3_dsub_4
      0,	// dsub_2_dsub_4
      0,	// dsub_2_dsub_3_dsub_4
      0,	// dsub_2_dsub_4_dsub_6
      0,	// dsub_3_dsub_5
      0,	// dsub_3_dsub_4_dsub_5
      0,	// dsub_3_dsub_5_dsub_7
      0,	// dsub_3_dsub_4
      0,	// dsub_3_dsub_4_dsub_5_dsub_6
      0,	// dsub_4_dsub_6
      0,	// dsub_4_dsub_5_dsub_6
      0,	// dsub_5_dsub_7
      0,	// dsub_5_dsub_6_dsub_7
      0,	// dsub_5_dsub_6
      0,	// qsub_1_qsub_2
    },
    {	// DQuad_with_qsub_1_in_QPR_8
      92,	// dsub_0 -> DQuad_with_qsub_1_in_QPR_8
      92,	// dsub_1 -> DQuad_with_qsub_1_in_QPR_8
      92,	// dsub_2 -> DQuad_with_qsub_1_in_QPR_8
      92,	// dsub_3 -> DQuad_with_qsub_1_in_QPR_8
      0,	// dsub_4
      0,	// dsub_5
      0,	// dsub_6
      0,	// dsub_7
      0,	// gsub_0
      0,	// gsub_1
      0,	// qqsub_0
      0,	// qqsub_1
      92,	// qsub_0 -> DQuad_with_qsub_1_in_QPR_8
      92,	// qsub_1 -> DQuad_with_qsub_1_in_QPR_8
      0,	// qsub_2
      0,	// qsub_3
      92,	// ssub_0 -> DQuad_with_qsub_1_in_QPR_8
      92,	// ssub_1 -> DQuad_with_qsub_1_in_QPR_8
      92,	// ssub_2 -> DQuad_with_qsub_1_in_QPR_8
      92,	// ssub_3 -> DQuad_with_qsub_1_in_QPR_8
      92,	// dsub_2_then_ssub_0 -> DQuad_with_qsub_1_in_QPR_8
      92,	// dsub_2_then_ssub_1 -> DQuad_with_qsub_1_in_QPR_8
      92,	// dsub_3_then_ssub_0 -> DQuad_with_qsub_1_in_QPR_8
      92,	// dsub_3_then_ssub_1 -> DQuad_with_qsub_1_in_QPR_8
      0,	// dsub_7_then_ssub_0
      0,	// dsub_7_then_ssub_1
      0,	// dsub_6_then_ssub_0
      0,	// dsub_6_then_ssub_1
      0,	// dsub_5_then_ssub_0
      0,	// dsub_5_then_ssub_1
      0,	// dsub_4_then_ssub_0
      0,	// dsub_4_then_ssub_1
      92,	// dsub_0_dsub_2 -> DQuad_with_qsub_1_in_QPR_8
      92,	// dsub_0_dsub_1_dsub_2 -> DQuad_with_qsub_1_in_QPR_8
      92,	// dsub_1_dsub_3 -> DQuad_with_qsub_1_in_QPR_8
      92,	// dsub_1_dsub_2_dsub_3 -> DQuad_with_qsub_1_in_QPR_8
      92,	// dsub_1_dsub_2 -> DQuad_with_qsub_1_in_QPR_8
      0,	// dsub_0_dsub_2_dsub_4
      0,	// dsub_0_dsub_2_dsub_4_dsub_6
      0,	// dsub_1_dsub_3_dsub_5
      0,	// dsub_1_dsub_3_dsub_5_dsub_7
      0,	// dsub_1_dsub_2_dsub_3_dsub_4
      0,	// dsub_2_dsub_4
      0,	// dsub_2_dsub_3_dsub_4
      0,	// dsub_2_dsub_4_dsub_6
      0,	// dsub_3_dsub_5
      0,	// dsub_3_dsub_4_dsub_5
      0,	// dsub_3_dsub_5_dsub_7
      0,	// dsub_3_dsub_4
      0,	// dsub_3_dsub_4_dsub_5_dsub_6
      0,	// dsub_4_dsub_6
      0,	// dsub_4_dsub_5_dsub_6
      0,	// dsub_5_dsub_7
      0,	// dsub_5_dsub_6_dsub_7
      0,	// dsub_5_dsub_6
      0,	// qsub_1_qsub_2
    },
    {	// DQuad_with_dsub_3_in_DPR_8_and_DQuad_with_dsub_1_dsub_2_in_QPR
      93,	// dsub_0 -> DQuad_with_dsub_3_in_DPR_8_and_DQuad_with_dsub_1_dsub_2_in_QPR
      93,	// dsub_1 -> DQuad_with_dsub_3_in_DPR_8_and_DQuad_with_dsub_1_dsub_2_in_QPR
      93,	// dsub_2 -> DQuad_with_dsub_3_in_DPR_8_and_DQuad_with_dsub_1_dsub_2_in_QPR
      93,	// dsub_3 -> DQuad_with_dsub_3_in_DPR_8_and_DQuad_with_dsub_1_dsub_2_in_QPR
      0,	// dsub_4
      0,	// dsub_5
      0,	// dsub_6
      0,	// dsub_7
      0,	// gsub_0
      0,	// gsub_1
      0,	// qqsub_0
      0,	// qqsub_1
      93,	// qsub_0 -> DQuad_with_dsub_3_in_DPR_8_and_DQuad_with_dsub_1_dsub_2_in_QPR
      93,	// qsub_1 -> DQuad_with_dsub_3_in_DPR_8_and_DQuad_with_dsub_1_dsub_2_in_QPR
      0,	// qsub_2
      0,	// qsub_3
      93,	// ssub_0 -> DQuad_with_dsub_3_in_DPR_8_and_DQuad_with_dsub_1_dsub_2_in_QPR
      93,	// ssub_1 -> DQuad_with_dsub_3_in_DPR_8_and_DQuad_with_dsub_1_dsub_2_in_QPR
      93,	// ssub_2 -> DQuad_with_dsub_3_in_DPR_8_and_DQuad_with_dsub_1_dsub_2_in_QPR
      93,	// ssub_3 -> DQuad_with_dsub_3_in_DPR_8_and_DQuad_with_dsub_1_dsub_2_in_QPR
      93,	// dsub_2_then_ssub_0 -> DQuad_with_dsub_3_in_DPR_8_and_DQuad_with_dsub_1_dsub_2_in_QPR
      93,	// dsub_2_then_ssub_1 -> DQuad_with_dsub_3_in_DPR_8_and_DQuad_with_dsub_1_dsub_2_in_QPR
      93,	// dsub_3_then_ssub_0 -> DQuad_with_dsub_3_in_DPR_8_and_DQuad_with_dsub_1_dsub_2_in_QPR
      93,	// dsub_3_then_ssub_1 -> DQuad_with_dsub_3_in_DPR_8_and_DQuad_with_dsub_1_dsub_2_in_QPR
      0,	// dsub_7_then_ssub_0
      0,	// dsub_7_then_ssub_1
      0,	// dsub_6_then_ssub_0
      0,	// dsub_6_then_ssub_1
      0,	// dsub_5_then_ssub_0
      0,	// dsub_5_then_ssub_1
      0,	// dsub_4_then_ssub_0
      0,	// dsub_4_then_ssub_1
      93,	// dsub_0_dsub_2 -> DQuad_with_dsub_3_in_DPR_8_and_DQuad_with_dsub_1_dsub_2_in_QPR
      93,	// dsub_0_dsub_1_dsub_2 -> DQuad_with_dsub_3_in_DPR_8_and_DQuad_with_dsub_1_dsub_2_in_QPR
      93,	// dsub_1_dsub_3 -> DQuad_with_dsub_3_in_DPR_8_and_DQuad_with_dsub_1_dsub_2_in_QPR
      93,	// dsub_1_dsub_2_dsub_3 -> DQuad_with_dsub_3_in_DPR_8_and_DQuad_with_dsub_1_dsub_2_in_QPR
      93,	// dsub_1_dsub_2 -> DQuad_with_dsub_3_in_DPR_8_and_DQuad_with_dsub_1_dsub_2_in_QPR
      0,	// dsub_0_dsub_2_dsub_4
      0,	// dsub_0_dsub_2_dsub_4_dsub_6
      0,	// dsub_1_dsub_3_dsub_5
      0,	// dsub_1_dsub_3_dsub_5_dsub_7
      0,	// dsub_1_dsub_2_dsub_3_dsub_4
      0,	// dsub_2_dsub_4
      0,	// dsub_2_dsub_3_dsub_4
      0,	// dsub_2_dsub_4_dsub_6
      0,	// dsub_3_dsub_5
      0,	// dsub_3_dsub_4_dsub_5
      0,	// dsub_3_dsub_5_dsub_7
      0,	// dsub_3_dsub_4
      0,	// dsub_3_dsub_4_dsub_5_dsub_6
      0,	// dsub_4_dsub_6
      0,	// dsub_4_dsub_5_dsub_6
      0,	// dsub_5_dsub_7
      0,	// dsub_5_dsub_6_dsub_7
      0,	// dsub_5_dsub_6
      0,	// qsub_1_qsub_2
    },
    {	// QQQQPR
      94,	// dsub_0 -> QQQQPR
      94,	// dsub_1 -> QQQQPR
      94,	// dsub_2 -> QQQQPR
      94,	// dsub_3 -> QQQQPR
      94,	// dsub_4 -> QQQQPR
      94,	// dsub_5 -> QQQQPR
      94,	// dsub_6 -> QQQQPR
      94,	// dsub_7 -> QQQQPR
      0,	// gsub_0
      0,	// gsub_1
      94,	// qqsub_0 -> QQQQPR
      94,	// qqsub_1 -> QQQQPR
      94,	// qsub_0 -> QQQQPR
      94,	// qsub_1 -> QQQQPR
      94,	// qsub_2 -> QQQQPR
      94,	// qsub_3 -> QQQQPR
      95,	// ssub_0 -> QQQQPR_with_ssub_0
      95,	// ssub_1 -> QQQQPR_with_ssub_0
      95,	// ssub_2 -> QQQQPR_with_ssub_0
      95,	// ssub_3 -> QQQQPR_with_ssub_0
      96,	// dsub_2_then_ssub_0 -> QQQQPR_with_dsub_2_then_ssub_0
      96,	// dsub_2_then_ssub_1 -> QQQQPR_with_dsub_2_then_ssub_0
      96,	// dsub_3_then_ssub_0 -> QQQQPR_with_dsub_2_then_ssub_0
      96,	// dsub_3_then_ssub_1 -> QQQQPR_with_dsub_2_then_ssub_0
      98,	// dsub_7_then_ssub_0 -> QQQQPR_with_dsub_7_then_ssub_0
      98,	// dsub_7_then_ssub_1 -> QQQQPR_with_dsub_7_then_ssub_0
      98,	// dsub_6_then_ssub_0 -> QQQQPR_with_dsub_7_then_ssub_0
      98,	// dsub_6_then_ssub_1 -> QQQQPR_with_dsub_7_then_ssub_0
      97,	// dsub_5_then_ssub_0 -> QQQQPR_with_dsub_5_then_ssub_0
      97,	// dsub_5_then_ssub_1 -> QQQQPR_with_dsub_5_then_ssub_0
      97,	// dsub_4_then_ssub_0 -> QQQQPR_with_dsub_5_then_ssub_0
      97,	// dsub_4_then_ssub_1 -> QQQQPR_with_dsub_5_then_ssub_0
      94,	// dsub_0_dsub_2 -> QQQQPR
      94,	// dsub_0_dsub_1_dsub_2 -> QQQQPR
      94,	// dsub_1_dsub_3 -> QQQQPR
      94,	// dsub_1_dsub_2_dsub_3 -> QQQQPR
      94,	// dsub_1_dsub_2 -> QQQQPR
      94,	// dsub_0_dsub_2_dsub_4 -> QQQQPR
      94,	// dsub_0_dsub_2_dsub_4_dsub_6 -> QQQQPR
      94,	// dsub_1_dsub_3_dsub_5 -> QQQQPR
      94,	// dsub_1_dsub_3_dsub_5_dsub_7 -> QQQQPR
      94,	// dsub_1_dsub_2_dsub_3_dsub_4 -> QQQQPR
      94,	// dsub_2_dsub_4 -> QQQQPR
      94,	// dsub_2_dsub_3_dsub_4 -> QQQQPR
      94,	// dsub_2_dsub_4_dsub_6 -> QQQQPR
      94,	// dsub_3_dsub_5 -> QQQQPR
      94,	// dsub_3_dsub_4_dsub_5 -> QQQQPR
      94,	// dsub_3_dsub_5_dsub_7 -> QQQQPR
      94,	// dsub_3_dsub_4 -> QQQQPR
      94,	// dsub_3_dsub_4_dsub_5_dsub_6 -> QQQQPR
      94,	// dsub_4_dsub_6 -> QQQQPR
      94,	// dsub_4_dsub_5_dsub_6 -> QQQQPR
      94,	// dsub_5_dsub_7 -> QQQQPR
      94,	// dsub_5_dsub_6_dsub_7 -> QQQQPR
      94,	// dsub_5_dsub_6 -> QQQQPR
      94,	// qsub_1_qsub_2 -> QQQQPR
    },
    {	// QQQQPR_with_ssub_0
      95,	// dsub_0 -> QQQQPR_with_ssub_0
      95,	// dsub_1 -> QQQQPR_with_ssub_0
      95,	// dsub_2 -> QQQQPR_with_ssub_0
      95,	// dsub_3 -> QQQQPR_with_ssub_0
      95,	// dsub_4 -> QQQQPR_with_ssub_0
      95,	// dsub_5 -> QQQQPR_with_ssub_0
      95,	// dsub_6 -> QQQQPR_with_ssub_0
      95,	// dsub_7 -> QQQQPR_with_ssub_0
      0,	// gsub_0
      0,	// gsub_1
      95,	// qqsub_0 -> QQQQPR_with_ssub_0
      95,	// qqsub_1 -> QQQQPR_with_ssub_0
      95,	// qsub_0 -> QQQQPR_with_ssub_0
      95,	// qsub_1 -> QQQQPR_with_ssub_0
      95,	// qsub_2 -> QQQQPR_with_ssub_0
      95,	// qsub_3 -> QQQQPR_with_ssub_0
      95,	// ssub_0 -> QQQQPR_with_ssub_0
      95,	// ssub_1 -> QQQQPR_with_ssub_0
      95,	// ssub_2 -> QQQQPR_with_ssub_0
      95,	// ssub_3 -> QQQQPR_with_ssub_0
      96,	// dsub_2_then_ssub_0 -> QQQQPR_with_dsub_2_then_ssub_0
      96,	// dsub_2_then_ssub_1 -> QQQQPR_with_dsub_2_then_ssub_0
      96,	// dsub_3_then_ssub_0 -> QQQQPR_with_dsub_2_then_ssub_0
      96,	// dsub_3_then_ssub_1 -> QQQQPR_with_dsub_2_then_ssub_0
      98,	// dsub_7_then_ssub_0 -> QQQQPR_with_dsub_7_then_ssub_0
      98,	// dsub_7_then_ssub_1 -> QQQQPR_with_dsub_7_then_ssub_0
      98,	// dsub_6_then_ssub_0 -> QQQQPR_with_dsub_7_then_ssub_0
      98,	// dsub_6_then_ssub_1 -> QQQQPR_with_dsub_7_then_ssub_0
      97,	// dsub_5_then_ssub_0 -> QQQQPR_with_dsub_5_then_ssub_0
      97,	// dsub_5_then_ssub_1 -> QQQQPR_with_dsub_5_then_ssub_0
      97,	// dsub_4_then_ssub_0 -> QQQQPR_with_dsub_5_then_ssub_0
      97,	// dsub_4_then_ssub_1 -> QQQQPR_with_dsub_5_then_ssub_0
      95,	// dsub_0_dsub_2 -> QQQQPR_with_ssub_0
      95,	// dsub_0_dsub_1_dsub_2 -> QQQQPR_with_ssub_0
      95,	// dsub_1_dsub_3 -> QQQQPR_with_ssub_0
      95,	// dsub_1_dsub_2_dsub_3 -> QQQQPR_with_ssub_0
      95,	// dsub_1_dsub_2 -> QQQQPR_with_ssub_0
      95,	// dsub_0_dsub_2_dsub_4 -> QQQQPR_with_ssub_0
      95,	// dsub_0_dsub_2_dsub_4_dsub_6 -> QQQQPR_with_ssub_0
      95,	// dsub_1_dsub_3_dsub_5 -> QQQQPR_with_ssub_0
      95,	// dsub_1_dsub_3_dsub_5_dsub_7 -> QQQQPR_with_ssub_0
      95,	// dsub_1_dsub_2_dsub_3_dsub_4 -> QQQQPR_with_ssub_0
      95,	// dsub_2_dsub_4 -> QQQQPR_with_ssub_0
      95,	// dsub_2_dsub_3_dsub_4 -> QQQQPR_with_ssub_0
      95,	// dsub_2_dsub_4_dsub_6 -> QQQQPR_with_ssub_0
      95,	// dsub_3_dsub_5 -> QQQQPR_with_ssub_0
      95,	// dsub_3_dsub_4_dsub_5 -> QQQQPR_with_ssub_0
      95,	// dsub_3_dsub_5_dsub_7 -> QQQQPR_with_ssub_0
      95,	// dsub_3_dsub_4 -> QQQQPR_with_ssub_0
      95,	// dsub_3_dsub_4_dsub_5_dsub_6 -> QQQQPR_with_ssub_0
      95,	// dsub_4_dsub_6 -> QQQQPR_with_ssub_0
      95,	// dsub_4_dsub_5_dsub_6 -> QQQQPR_with_ssub_0
      95,	// dsub_5_dsub_7 -> QQQQPR_with_ssub_0
      95,	// dsub_5_dsub_6_dsub_7 -> QQQQPR_with_ssub_0
      95,	// dsub_5_dsub_6 -> QQQQPR_with_ssub_0
      95,	// qsub_1_qsub_2 -> QQQQPR_with_ssub_0
    },
    {	// QQQQPR_with_dsub_2_then_ssub_0
      96,	// dsub_0 -> QQQQPR_with_dsub_2_then_ssub_0
      96,	// dsub_1 -> QQQQPR_with_dsub_2_then_ssub_0
      96,	// dsub_2 -> QQQQPR_with_dsub_2_then_ssub_0
      96,	// dsub_3 -> QQQQPR_with_dsub_2_then_ssub_0
      96,	// dsub_4 -> QQQQPR_with_dsub_2_then_ssub_0
      96,	// dsub_5 -> QQQQPR_with_dsub_2_then_ssub_0
      96,	// dsub_6 -> QQQQPR_with_dsub_2_then_ssub_0
      96,	// dsub_7 -> QQQQPR_with_dsub_2_then_ssub_0
      0,	// gsub_0
      0,	// gsub_1
      96,	// qqsub_0 -> QQQQPR_with_dsub_2_then_ssub_0
      96,	// qqsub_1 -> QQQQPR_with_dsub_2_then_ssub_0
      96,	// qsub_0 -> QQQQPR_with_dsub_2_then_ssub_0
      96,	// qsub_1 -> QQQQPR_with_dsub_2_then_ssub_0
      96,	// qsub_2 -> QQQQPR_with_dsub_2_then_ssub_0
      96,	// qsub_3 -> QQQQPR_with_dsub_2_then_ssub_0
      96,	// ssub_0 -> QQQQPR_with_dsub_2_then_ssub_0
      96,	// ssub_1 -> QQQQPR_with_dsub_2_then_ssub_0
      96,	// ssub_2 -> QQQQPR_with_dsub_2_then_ssub_0
      96,	// ssub_3 -> QQQQPR_with_dsub_2_then_ssub_0
      96,	// dsub_2_then_ssub_0 -> QQQQPR_with_dsub_2_then_ssub_0
      96,	// dsub_2_then_ssub_1 -> QQQQPR_with_dsub_2_then_ssub_0
      96,	// dsub_3_then_ssub_0 -> QQQQPR_with_dsub_2_then_ssub_0
      96,	// dsub_3_then_ssub_1 -> QQQQPR_with_dsub_2_then_ssub_0
      98,	// dsub_7_then_ssub_0 -> QQQQPR_with_dsub_7_then_ssub_0
      98,	// dsub_7_then_ssub_1 -> QQQQPR_with_dsub_7_then_ssub_0
      98,	// dsub_6_then_ssub_0 -> QQQQPR_with_dsub_7_then_ssub_0
      98,	// dsub_6_then_ssub_1 -> QQQQPR_with_dsub_7_then_ssub_0
      97,	// dsub_5_then_ssub_0 -> QQQQPR_with_dsub_5_then_ssub_0
      97,	// dsub_5_then_ssub_1 -> QQQQPR_with_dsub_5_then_ssub_0
      97,	// dsub_4_then_ssub_0 -> QQQQPR_with_dsub_5_then_ssub_0
      97,	// dsub_4_then_ssub_1 -> QQQQPR_with_dsub_5_then_ssub_0
      96,	// dsub_0_dsub_2 -> QQQQPR_with_dsub_2_then_ssub_0
      96,	// dsub_0_dsub_1_dsub_2 -> QQQQPR_with_dsub_2_then_ssub_0
      96,	// dsub_1_dsub_3 -> QQQQPR_with_dsub_2_then_ssub_0
      96,	// dsub_1_dsub_2_dsub_3 -> QQQQPR_with_dsub_2_then_ssub_0
      96,	// dsub_1_dsub_2 -> QQQQPR_with_dsub_2_then_ssub_0
      96,	// dsub_0_dsub_2_dsub_4 -> QQQQPR_with_dsub_2_then_ssub_0
      96,	// dsub_0_dsub_2_dsub_4_dsub_6 -> QQQQPR_with_dsub_2_then_ssub_0
      96,	// dsub_1_dsub_3_dsub_5 -> QQQQPR_with_dsub_2_then_ssub_0
      96,	// dsub_1_dsub_3_dsub_5_dsub_7 -> QQQQPR_with_dsub_2_then_ssub_0
      96,	// dsub_1_dsub_2_dsub_3_dsub_4 -> QQQQPR_with_dsub_2_then_ssub_0
      96,	// dsub_2_dsub_4 -> QQQQPR_with_dsub_2_then_ssub_0
      96,	// dsub_2_dsub_3_dsub_4 -> QQQQPR_with_dsub_2_then_ssub_0
      96,	// dsub_2_dsub_4_dsub_6 -> QQQQPR_with_dsub_2_then_ssub_0
      96,	// dsub_3_dsub_5 -> QQQQPR_with_dsub_2_then_ssub_0
      96,	// dsub_3_dsub_4_dsub_5 -> QQQQPR_with_dsub_2_then_ssub_0
      96,	// dsub_3_dsub_5_dsub_7 -> QQQQPR_with_dsub_2_then_ssub_0
      96,	// dsub_3_dsub_4 -> QQQQPR_with_dsub_2_then_ssub_0
      96,	// dsub_3_dsub_4_dsub_5_dsub_6 -> QQQQPR_with_dsub_2_then_ssub_0
      96,	// dsub_4_dsub_6 -> QQQQPR_with_dsub_2_then_ssub_0
      96,	// dsub_4_dsub_5_dsub_6 -> QQQQPR_with_dsub_2_then_ssub_0
      96,	// dsub_5_dsub_7 -> QQQQPR_with_dsub_2_then_ssub_0
      96,	// dsub_5_dsub_6_dsub_7 -> QQQQPR_with_dsub_2_then_ssub_0
      96,	// dsub_5_dsub_6 -> QQQQPR_with_dsub_2_then_ssub_0
      96,	// qsub_1_qsub_2 -> QQQQPR_with_dsub_2_then_ssub_0
    },
    {	// QQQQPR_with_dsub_5_then_ssub_0
      97,	// dsub_0 -> QQQQPR_with_dsub_5_then_ssub_0
      97,	// dsub_1 -> QQQQPR_with_dsub_5_then_ssub_0
      97,	// dsub_2 -> QQQQPR_with_dsub_5_then_ssub_0
      97,	// dsub_3 -> QQQQPR_with_dsub_5_then_ssub_0
      97,	// dsub_4 -> QQQQPR_with_dsub_5_then_ssub_0
      97,	// dsub_5 -> QQQQPR_with_dsub_5_then_ssub_0
      97,	// dsub_6 -> QQQQPR_with_dsub_5_then_ssub_0
      97,	// dsub_7 -> QQQQPR_with_dsub_5_then_ssub_0
      0,	// gsub_0
      0,	// gsub_1
      97,	// qqsub_0 -> QQQQPR_with_dsub_5_then_ssub_0
      97,	// qqsub_1 -> QQQQPR_with_dsub_5_then_ssub_0
      97,	// qsub_0 -> QQQQPR_with_dsub_5_then_ssub_0
      97,	// qsub_1 -> QQQQPR_with_dsub_5_then_ssub_0
      97,	// qsub_2 -> QQQQPR_with_dsub_5_then_ssub_0
      97,	// qsub_3 -> QQQQPR_with_dsub_5_then_ssub_0
      97,	// ssub_0 -> QQQQPR_with_dsub_5_then_ssub_0
      97,	// ssub_1 -> QQQQPR_with_dsub_5_then_ssub_0
      97,	// ssub_2 -> QQQQPR_with_dsub_5_then_ssub_0
      97,	// ssub_3 -> QQQQPR_with_dsub_5_then_ssub_0
      97,	// dsub_2_then_ssub_0 -> QQQQPR_with_dsub_5_then_ssub_0
      97,	// dsub_2_then_ssub_1 -> QQQQPR_with_dsub_5_then_ssub_0
      97,	// dsub_3_then_ssub_0 -> QQQQPR_with_dsub_5_then_ssub_0
      97,	// dsub_3_then_ssub_1 -> QQQQPR_with_dsub_5_then_ssub_0
      98,	// dsub_7_then_ssub_0 -> QQQQPR_with_dsub_7_then_ssub_0
      98,	// dsub_7_then_ssub_1 -> QQQQPR_with_dsub_7_then_ssub_0
      98,	// dsub_6_then_ssub_0 -> QQQQPR_with_dsub_7_then_ssub_0
      98,	// dsub_6_then_ssub_1 -> QQQQPR_with_dsub_7_then_ssub_0
      97,	// dsub_5_then_ssub_0 -> QQQQPR_with_dsub_5_then_ssub_0
      97,	// dsub_5_then_ssub_1 -> QQQQPR_with_dsub_5_then_ssub_0
      97,	// dsub_4_then_ssub_0 -> QQQQPR_with_dsub_5_then_ssub_0
      97,	// dsub_4_then_ssub_1 -> QQQQPR_with_dsub_5_then_ssub_0
      97,	// dsub_0_dsub_2 -> QQQQPR_with_dsub_5_then_ssub_0
      97,	// dsub_0_dsub_1_dsub_2 -> QQQQPR_with_dsub_5_then_ssub_0
      97,	// dsub_1_dsub_3 -> QQQQPR_with_dsub_5_then_ssub_0
      97,	// dsub_1_dsub_2_dsub_3 -> QQQQPR_with_dsub_5_then_ssub_0
      97,	// dsub_1_dsub_2 -> QQQQPR_with_dsub_5_then_ssub_0
      97,	// dsub_0_dsub_2_dsub_4 -> QQQQPR_with_dsub_5_then_ssub_0
      97,	// dsub_0_dsub_2_dsub_4_dsub_6 -> QQQQPR_with_dsub_5_then_ssub_0
      97,	// dsub_1_dsub_3_dsub_5 -> QQQQPR_with_dsub_5_then_ssub_0
      97,	// dsub_1_dsub_3_dsub_5_dsub_7 -> QQQQPR_with_dsub_5_then_ssub_0
      97,	// dsub_1_dsub_2_dsub_3_dsub_4 -> QQQQPR_with_dsub_5_then_ssub_0
      97,	// dsub_2_dsub_4 -> QQQQPR_with_dsub_5_then_ssub_0
      97,	// dsub_2_dsub_3_dsub_4 -> QQQQPR_with_dsub_5_then_ssub_0
      97,	// dsub_2_dsub_4_dsub_6 -> QQQQPR_with_dsub_5_then_ssub_0
      97,	// dsub_3_dsub_5 -> QQQQPR_with_dsub_5_then_ssub_0
      97,	// dsub_3_dsub_4_dsub_5 -> QQQQPR_with_dsub_5_then_ssub_0
      97,	// dsub_3_dsub_5_dsub_7 -> QQQQPR_with_dsub_5_then_ssub_0
      97,	// dsub_3_dsub_4 -> QQQQPR_with_dsub_5_then_ssub_0
      97,	// dsub_3_dsub_4_dsub_5_dsub_6 -> QQQQPR_with_dsub_5_then_ssub_0
      97,	// dsub_4_dsub_6 -> QQQQPR_with_dsub_5_then_ssub_0
      97,	// dsub_4_dsub_5_dsub_6 -> QQQQPR_with_dsub_5_then_ssub_0
      97,	// dsub_5_dsub_7 -> QQQQPR_with_dsub_5_then_ssub_0
      97,	// dsub_5_dsub_6_dsub_7 -> QQQQPR_with_dsub_5_then_ssub_0
      97,	// dsub_5_dsub_6 -> QQQQPR_with_dsub_5_then_ssub_0
      97,	// qsub_1_qsub_2 -> QQQQPR_with_dsub_5_then_ssub_0
    },
    {	// QQQQPR_with_dsub_7_then_ssub_0
      98,	// dsub_0 -> QQQQPR_with_dsub_7_then_ssub_0
      98,	// dsub_1 -> QQQQPR_with_dsub_7_then_ssub_0
      98,	// dsub_2 -> QQQQPR_with_dsub_7_then_ssub_0
      98,	// dsub_3 -> QQQQPR_with_dsub_7_then_ssub_0
      98,	// dsub_4 -> QQQQPR_with_dsub_7_then_ssub_0
      98,	// dsub_5 -> QQQQPR_with_dsub_7_then_ssub_0
      98,	// dsub_6 -> QQQQPR_with_dsub_7_then_ssub_0
      98,	// dsub_7 -> QQQQPR_with_dsub_7_then_ssub_0
      0,	// gsub_0
      0,	// gsub_1
      98,	// qqsub_0 -> QQQQPR_with_dsub_7_then_ssub_0
      98,	// qqsub_1 -> QQQQPR_with_dsub_7_then_ssub_0
      98,	// qsub_0 -> QQQQPR_with_dsub_7_then_ssub_0
      98,	// qsub_1 -> QQQQPR_with_dsub_7_then_ssub_0
      98,	// qsub_2 -> QQQQPR_with_dsub_7_then_ssub_0
      98,	// qsub_3 -> QQQQPR_with_dsub_7_then_ssub_0
      98,	// ssub_0 -> QQQQPR_with_dsub_7_then_ssub_0
      98,	// ssub_1 -> QQQQPR_with_dsub_7_then_ssub_0
      98,	// ssub_2 -> QQQQPR_with_dsub_7_then_ssub_0
      98,	// ssub_3 -> QQQQPR_with_dsub_7_then_ssub_0
      98,	// dsub_2_then_ssub_0 -> QQQQPR_with_dsub_7_then_ssub_0
      98,	// dsub_2_then_ssub_1 -> QQQQPR_with_dsub_7_then_ssub_0
      98,	// dsub_3_then_ssub_0 -> QQQQPR_with_dsub_7_then_ssub_0
      98,	// dsub_3_then_ssub_1 -> QQQQPR_with_dsub_7_then_ssub_0
      98,	// dsub_7_then_ssub_0 -> QQQQPR_with_dsub_7_then_ssub_0
      98,	// dsub_7_then_ssub_1 -> QQQQPR_with_dsub_7_then_ssub_0
      98,	// dsub_6_then_ssub_0 -> QQQQPR_with_dsub_7_then_ssub_0
      98,	// dsub_6_then_ssub_1 -> QQQQPR_with_dsub_7_then_ssub_0
      98,	// dsub_5_then_ssub_0 -> QQQQPR_with_dsub_7_then_ssub_0
      98,	// dsub_5_then_ssub_1 -> QQQQPR_with_dsub_7_then_ssub_0
      98,	// dsub_4_then_ssub_0 -> QQQQPR_with_dsub_7_then_ssub_0
      98,	// dsub_4_then_ssub_1 -> QQQQPR_with_dsub_7_then_ssub_0
      98,	// dsub_0_dsub_2 -> QQQQPR_with_dsub_7_then_ssub_0
      98,	// dsub_0_dsub_1_dsub_2 -> QQQQPR_with_dsub_7_then_ssub_0
      98,	// dsub_1_dsub_3 -> QQQQPR_with_dsub_7_then_ssub_0
      98,	// dsub_1_dsub_2_dsub_3 -> QQQQPR_with_dsub_7_then_ssub_0
      98,	// dsub_1_dsub_2 -> QQQQPR_with_dsub_7_then_ssub_0
      98,	// dsub_0_dsub_2_dsub_4 -> QQQQPR_with_dsub_7_then_ssub_0
      98,	// dsub_0_dsub_2_dsub_4_dsub_6 -> QQQQPR_with_dsub_7_then_ssub_0
      98,	// dsub_1_dsub_3_dsub_5 -> QQQQPR_with_dsub_7_then_ssub_0
      98,	// dsub_1_dsub_3_dsub_5_dsub_7 -> QQQQPR_with_dsub_7_then_ssub_0
      98,	// dsub_1_dsub_2_dsub_3_dsub_4 -> QQQQPR_with_dsub_7_then_ssub_0
      98,	// dsub_2_dsub_4 -> QQQQPR_with_dsub_7_then_ssub_0
      98,	// dsub_2_dsub_3_dsub_4 -> QQQQPR_with_dsub_7_then_ssub_0
      98,	// dsub_2_dsub_4_dsub_6 -> QQQQPR_with_dsub_7_then_ssub_0
      98,	// dsub_3_dsub_5 -> QQQQPR_with_dsub_7_then_ssub_0
      98,	// dsub_3_dsub_4_dsub_5 -> QQQQPR_with_dsub_7_then_ssub_0
      98,	// dsub_3_dsub_5_dsub_7 -> QQQQPR_with_dsub_7_then_ssub_0
      98,	// dsub_3_dsub_4 -> QQQQPR_with_dsub_7_then_ssub_0
      98,	// dsub_3_dsub_4_dsub_5_dsub_6 -> QQQQPR_with_dsub_7_then_ssub_0
      98,	// dsub_4_dsub_6 -> QQQQPR_with_dsub_7_then_ssub_0
      98,	// dsub_4_dsub_5_dsub_6 -> QQQQPR_with_dsub_7_then_ssub_0
      98,	// dsub_5_dsub_7 -> QQQQPR_with_dsub_7_then_ssub_0
      98,	// dsub_5_dsub_6_dsub_7 -> QQQQPR_with_dsub_7_then_ssub_0
      98,	// dsub_5_dsub_6 -> QQQQPR_with_dsub_7_then_ssub_0
      98,	// qsub_1_qsub_2 -> QQQQPR_with_dsub_7_then_ssub_0
    },
    {	// QQQQPR_with_dsub_0_in_DPR_8
      99,	// dsub_0 -> QQQQPR_with_dsub_0_in_DPR_8
      99,	// dsub_1 -> QQQQPR_with_dsub_0_in_DPR_8
      99,	// dsub_2 -> QQQQPR_with_dsub_0_in_DPR_8
      99,	// dsub_3 -> QQQQPR_with_dsub_0_in_DPR_8
      99,	// dsub_4 -> QQQQPR_with_dsub_0_in_DPR_8
      99,	// dsub_5 -> QQQQPR_with_dsub_0_in_DPR_8
      99,	// dsub_6 -> QQQQPR_with_dsub_0_in_DPR_8
      99,	// dsub_7 -> QQQQPR_with_dsub_0_in_DPR_8
      0,	// gsub_0
      0,	// gsub_1
      99,	// qqsub_0 -> QQQQPR_with_dsub_0_in_DPR_8
      99,	// qqsub_1 -> QQQQPR_with_dsub_0_in_DPR_8
      99,	// qsub_0 -> QQQQPR_with_dsub_0_in_DPR_8
      99,	// qsub_1 -> QQQQPR_with_dsub_0_in_DPR_8
      99,	// qsub_2 -> QQQQPR_with_dsub_0_in_DPR_8
      99,	// qsub_3 -> QQQQPR_with_dsub_0_in_DPR_8
      99,	// ssub_0 -> QQQQPR_with_dsub_0_in_DPR_8
      99,	// ssub_1 -> QQQQPR_with_dsub_0_in_DPR_8
      99,	// ssub_2 -> QQQQPR_with_dsub_0_in_DPR_8
      99,	// ssub_3 -> QQQQPR_with_dsub_0_in_DPR_8
      99,	// dsub_2_then_ssub_0 -> QQQQPR_with_dsub_0_in_DPR_8
      99,	// dsub_2_then_ssub_1 -> QQQQPR_with_dsub_0_in_DPR_8
      99,	// dsub_3_then_ssub_0 -> QQQQPR_with_dsub_0_in_DPR_8
      99,	// dsub_3_then_ssub_1 -> QQQQPR_with_dsub_0_in_DPR_8
      99,	// dsub_7_then_ssub_0 -> QQQQPR_with_dsub_0_in_DPR_8
      99,	// dsub_7_then_ssub_1 -> QQQQPR_with_dsub_0_in_DPR_8
      99,	// dsub_6_then_ssub_0 -> QQQQPR_with_dsub_0_in_DPR_8
      99,	// dsub_6_then_ssub_1 -> QQQQPR_with_dsub_0_in_DPR_8
      99,	// dsub_5_then_ssub_0 -> QQQQPR_with_dsub_0_in_DPR_8
      99,	// dsub_5_then_ssub_1 -> QQQQPR_with_dsub_0_in_DPR_8
      99,	// dsub_4_then_ssub_0 -> QQQQPR_with_dsub_0_in_DPR_8
      99,	// dsub_4_then_ssub_1 -> QQQQPR_with_dsub_0_in_DPR_8
      99,	// dsub_0_dsub_2 -> QQQQPR_with_dsub_0_in_DPR_8
      99,	// dsub_0_dsub_1_dsub_2 -> QQQQPR_with_dsub_0_in_DPR_8
      99,	// dsub_1_dsub_3 -> QQQQPR_with_dsub_0_in_DPR_8
      99,	// dsub_1_dsub_2_dsub_3 -> QQQQPR_with_dsub_0_in_DPR_8
      99,	// dsub_1_dsub_2 -> QQQQPR_with_dsub_0_in_DPR_8
      99,	// dsub_0_dsub_2_dsub_4 -> QQQQPR_with_dsub_0_in_DPR_8
      99,	// dsub_0_dsub_2_dsub_4_dsub_6 -> QQQQPR_with_dsub_0_in_DPR_8
      99,	// dsub_1_dsub_3_dsub_5 -> QQQQPR_with_dsub_0_in_DPR_8
      99,	// dsub_1_dsub_3_dsub_5_dsub_7 -> QQQQPR_with_dsub_0_in_DPR_8
      99,	// dsub_1_dsub_2_dsub_3_dsub_4 -> QQQQPR_with_dsub_0_in_DPR_8
      99,	// dsub_2_dsub_4 -> QQQQPR_with_dsub_0_in_DPR_8
      99,	// dsub_2_dsub_3_dsub_4 -> QQQQPR_with_dsub_0_in_DPR_8
      99,	// dsub_2_dsub_4_dsub_6 -> QQQQPR_with_dsub_0_in_DPR_8
      99,	// dsub_3_dsub_5 -> QQQQPR_with_dsub_0_in_DPR_8
      99,	// dsub_3_dsub_4_dsub_5 -> QQQQPR_with_dsub_0_in_DPR_8
      99,	// dsub_3_dsub_5_dsub_7 -> QQQQPR_with_dsub_0_in_DPR_8
      99,	// dsub_3_dsub_4 -> QQQQPR_with_dsub_0_in_DPR_8
      99,	// dsub_3_dsub_4_dsub_5_dsub_6 -> QQQQPR_with_dsub_0_in_DPR_8
      99,	// dsub_4_dsub_6 -> QQQQPR_with_dsub_0_in_DPR_8
      99,	// dsub_4_dsub_5_dsub_6 -> QQQQPR_with_dsub_0_in_DPR_8
      99,	// dsub_5_dsub_7 -> QQQQPR_with_dsub_0_in_DPR_8
      99,	// dsub_5_dsub_6_dsub_7 -> QQQQPR_with_dsub_0_in_DPR_8
      99,	// dsub_5_dsub_6 -> QQQQPR_with_dsub_0_in_DPR_8
      99,	// qsub_1_qsub_2 -> QQQQPR_with_dsub_0_in_DPR_8
    },
    {	// QQQQPR_with_dsub_2_in_DPR_8
      100,	// dsub_0 -> QQQQPR_with_dsub_2_in_DPR_8
      100,	// dsub_1 -> QQQQPR_with_dsub_2_in_DPR_8
      100,	// dsub_2 -> QQQQPR_with_dsub_2_in_DPR_8
      100,	// dsub_3 -> QQQQPR_with_dsub_2_in_DPR_8
      100,	// dsub_4 -> QQQQPR_with_dsub_2_in_DPR_8
      100,	// dsub_5 -> QQQQPR_with_dsub_2_in_DPR_8
      100,	// dsub_6 -> QQQQPR_with_dsub_2_in_DPR_8
      100,	// dsub_7 -> QQQQPR_with_dsub_2_in_DPR_8
      0,	// gsub_0
      0,	// gsub_1
      100,	// qqsub_0 -> QQQQPR_with_dsub_2_in_DPR_8
      100,	// qqsub_1 -> QQQQPR_with_dsub_2_in_DPR_8
      100,	// qsub_0 -> QQQQPR_with_dsub_2_in_DPR_8
      100,	// qsub_1 -> QQQQPR_with_dsub_2_in_DPR_8
      100,	// qsub_2 -> QQQQPR_with_dsub_2_in_DPR_8
      100,	// qsub_3 -> QQQQPR_with_dsub_2_in_DPR_8
      100,	// ssub_0 -> QQQQPR_with_dsub_2_in_DPR_8
      100,	// ssub_1 -> QQQQPR_with_dsub_2_in_DPR_8
      100,	// ssub_2 -> QQQQPR_with_dsub_2_in_DPR_8
      100,	// ssub_3 -> QQQQPR_with_dsub_2_in_DPR_8
      100,	// dsub_2_then_ssub_0 -> QQQQPR_with_dsub_2_in_DPR_8
      100,	// dsub_2_then_ssub_1 -> QQQQPR_with_dsub_2_in_DPR_8
      100,	// dsub_3_then_ssub_0 -> QQQQPR_with_dsub_2_in_DPR_8
      100,	// dsub_3_then_ssub_1 -> QQQQPR_with_dsub_2_in_DPR_8
      100,	// dsub_7_then_ssub_0 -> QQQQPR_with_dsub_2_in_DPR_8
      100,	// dsub_7_then_ssub_1 -> QQQQPR_with_dsub_2_in_DPR_8
      100,	// dsub_6_then_ssub_0 -> QQQQPR_with_dsub_2_in_DPR_8
      100,	// dsub_6_then_ssub_1 -> QQQQPR_with_dsub_2_in_DPR_8
      100,	// dsub_5_then_ssub_0 -> QQQQPR_with_dsub_2_in_DPR_8
      100,	// dsub_5_then_ssub_1 -> QQQQPR_with_dsub_2_in_DPR_8
      100,	// dsub_4_then_ssub_0 -> QQQQPR_with_dsub_2_in_DPR_8
      100,	// dsub_4_then_ssub_1 -> QQQQPR_with_dsub_2_in_DPR_8
      100,	// dsub_0_dsub_2 -> QQQQPR_with_dsub_2_in_DPR_8
      100,	// dsub_0_dsub_1_dsub_2 -> QQQQPR_with_dsub_2_in_DPR_8
      100,	// dsub_1_dsub_3 -> QQQQPR_with_dsub_2_in_DPR_8
      100,	// dsub_1_dsub_2_dsub_3 -> QQQQPR_with_dsub_2_in_DPR_8
      100,	// dsub_1_dsub_2 -> QQQQPR_with_dsub_2_in_DPR_8
      100,	// dsub_0_dsub_2_dsub_4 -> QQQQPR_with_dsub_2_in_DPR_8
      100,	// dsub_0_dsub_2_dsub_4_dsub_6 -> QQQQPR_with_dsub_2_in_DPR_8
      100,	// dsub_1_dsub_3_dsub_5 -> QQQQPR_with_dsub_2_in_DPR_8
      100,	// dsub_1_dsub_3_dsub_5_dsub_7 -> QQQQPR_with_dsub_2_in_DPR_8
      100,	// dsub_1_dsub_2_dsub_3_dsub_4 -> QQQQPR_with_dsub_2_in_DPR_8
      100,	// dsub_2_dsub_4 -> QQQQPR_with_dsub_2_in_DPR_8
      100,	// dsub_2_dsub_3_dsub_4 -> QQQQPR_with_dsub_2_in_DPR_8
      100,	// dsub_2_dsub_4_dsub_6 -> QQQQPR_with_dsub_2_in_DPR_8
      100,	// dsub_3_dsub_5 -> QQQQPR_with_dsub_2_in_DPR_8
      100,	// dsub_3_dsub_4_dsub_5 -> QQQQPR_with_dsub_2_in_DPR_8
      100,	// dsub_3_dsub_5_dsub_7 -> QQQQPR_with_dsub_2_in_DPR_8
      100,	// dsub_3_dsub_4 -> QQQQPR_with_dsub_2_in_DPR_8
      100,	// dsub_3_dsub_4_dsub_5_dsub_6 -> QQQQPR_with_dsub_2_in_DPR_8
      100,	// dsub_4_dsub_6 -> QQQQPR_with_dsub_2_in_DPR_8
      100,	// dsub_4_dsub_5_dsub_6 -> QQQQPR_with_dsub_2_in_DPR_8
      100,	// dsub_5_dsub_7 -> QQQQPR_with_dsub_2_in_DPR_8
      100,	// dsub_5_dsub_6_dsub_7 -> QQQQPR_with_dsub_2_in_DPR_8
      100,	// dsub_5_dsub_6 -> QQQQPR_with_dsub_2_in_DPR_8
      100,	// qsub_1_qsub_2 -> QQQQPR_with_dsub_2_in_DPR_8
    },
    {	// QQQQPR_with_dsub_4_in_DPR_8
      101,	// dsub_0 -> QQQQPR_with_dsub_4_in_DPR_8
      101,	// dsub_1 -> QQQQPR_with_dsub_4_in_DPR_8
      101,	// dsub_2 -> QQQQPR_with_dsub_4_in_DPR_8
      101,	// dsub_3 -> QQQQPR_with_dsub_4_in_DPR_8
      101,	// dsub_4 -> QQQQPR_with_dsub_4_in_DPR_8
      101,	// dsub_5 -> QQQQPR_with_dsub_4_in_DPR_8
      101,	// dsub_6 -> QQQQPR_with_dsub_4_in_DPR_8
      101,	// dsub_7 -> QQQQPR_with_dsub_4_in_DPR_8
      0,	// gsub_0
      0,	// gsub_1
      101,	// qqsub_0 -> QQQQPR_with_dsub_4_in_DPR_8
      101,	// qqsub_1 -> QQQQPR_with_dsub_4_in_DPR_8
      101,	// qsub_0 -> QQQQPR_with_dsub_4_in_DPR_8
      101,	// qsub_1 -> QQQQPR_with_dsub_4_in_DPR_8
      101,	// qsub_2 -> QQQQPR_with_dsub_4_in_DPR_8
      101,	// qsub_3 -> QQQQPR_with_dsub_4_in_DPR_8
      101,	// ssub_0 -> QQQQPR_with_dsub_4_in_DPR_8
      101,	// ssub_1 -> QQQQPR_with_dsub_4_in_DPR_8
      101,	// ssub_2 -> QQQQPR_with_dsub_4_in_DPR_8
      101,	// ssub_3 -> QQQQPR_with_dsub_4_in_DPR_8
      101,	// dsub_2_then_ssub_0 -> QQQQPR_with_dsub_4_in_DPR_8
      101,	// dsub_2_then_ssub_1 -> QQQQPR_with_dsub_4_in_DPR_8
      101,	// dsub_3_then_ssub_0 -> QQQQPR_with_dsub_4_in_DPR_8
      101,	// dsub_3_then_ssub_1 -> QQQQPR_with_dsub_4_in_DPR_8
      101,	// dsub_7_then_ssub_0 -> QQQQPR_with_dsub_4_in_DPR_8
      101,	// dsub_7_then_ssub_1 -> QQQQPR_with_dsub_4_in_DPR_8
      101,	// dsub_6_then_ssub_0 -> QQQQPR_with_dsub_4_in_DPR_8
      101,	// dsub_6_then_ssub_1 -> QQQQPR_with_dsub_4_in_DPR_8
      101,	// dsub_5_then_ssub_0 -> QQQQPR_with_dsub_4_in_DPR_8
      101,	// dsub_5_then_ssub_1 -> QQQQPR_with_dsub_4_in_DPR_8
      101,	// dsub_4_then_ssub_0 -> QQQQPR_with_dsub_4_in_DPR_8
      101,	// dsub_4_then_ssub_1 -> QQQQPR_with_dsub_4_in_DPR_8
      101,	// dsub_0_dsub_2 -> QQQQPR_with_dsub_4_in_DPR_8
      101,	// dsub_0_dsub_1_dsub_2 -> QQQQPR_with_dsub_4_in_DPR_8
      101,	// dsub_1_dsub_3 -> QQQQPR_with_dsub_4_in_DPR_8
      101,	// dsub_1_dsub_2_dsub_3 -> QQQQPR_with_dsub_4_in_DPR_8
      101,	// dsub_1_dsub_2 -> QQQQPR_with_dsub_4_in_DPR_8
      101,	// dsub_0_dsub_2_dsub_4 -> QQQQPR_with_dsub_4_in_DPR_8
      101,	// dsub_0_dsub_2_dsub_4_dsub_6 -> QQQQPR_with_dsub_4_in_DPR_8
      101,	// dsub_1_dsub_3_dsub_5 -> QQQQPR_with_dsub_4_in_DPR_8
      101,	// dsub_1_dsub_3_dsub_5_dsub_7 -> QQQQPR_with_dsub_4_in_DPR_8
      101,	// dsub_1_dsub_2_dsub_3_dsub_4 -> QQQQPR_with_dsub_4_in_DPR_8
      101,	// dsub_2_dsub_4 -> QQQQPR_with_dsub_4_in_DPR_8
      101,	// dsub_2_dsub_3_dsub_4 -> QQQQPR_with_dsub_4_in_DPR_8
      101,	// dsub_2_dsub_4_dsub_6 -> QQQQPR_with_dsub_4_in_DPR_8
      101,	// dsub_3_dsub_5 -> QQQQPR_with_dsub_4_in_DPR_8
      101,	// dsub_3_dsub_4_dsub_5 -> QQQQPR_with_dsub_4_in_DPR_8
      101,	// dsub_3_dsub_5_dsub_7 -> QQQQPR_with_dsub_4_in_DPR_8
      101,	// dsub_3_dsub_4 -> QQQQPR_with_dsub_4_in_DPR_8
      101,	// dsub_3_dsub_4_dsub_5_dsub_6 -> QQQQPR_with_dsub_4_in_DPR_8
      101,	// dsub_4_dsub_6 -> QQQQPR_with_dsub_4_in_DPR_8
      101,	// dsub_4_dsub_5_dsub_6 -> QQQQPR_with_dsub_4_in_DPR_8
      101,	// dsub_5_dsub_7 -> QQQQPR_with_dsub_4_in_DPR_8
      101,	// dsub_5_dsub_6_dsub_7 -> QQQQPR_with_dsub_4_in_DPR_8
      101,	// dsub_5_dsub_6 -> QQQQPR_with_dsub_4_in_DPR_8
      101,	// qsub_1_qsub_2 -> QQQQPR_with_dsub_4_in_DPR_8
    },
    {	// QQQQPR_with_dsub_6_in_DPR_8
      102,	// dsub_0 -> QQQQPR_with_dsub_6_in_DPR_8
      102,	// dsub_1 -> QQQQPR_with_dsub_6_in_DPR_8
      102,	// dsub_2 -> QQQQPR_with_dsub_6_in_DPR_8
      102,	// dsub_3 -> QQQQPR_with_dsub_6_in_DPR_8
      102,	// dsub_4 -> QQQQPR_with_dsub_6_in_DPR_8
      102,	// dsub_5 -> QQQQPR_with_dsub_6_in_DPR_8
      102,	// dsub_6 -> QQQQPR_with_dsub_6_in_DPR_8
      102,	// dsub_7 -> QQQQPR_with_dsub_6_in_DPR_8
      0,	// gsub_0
      0,	// gsub_1
      102,	// qqsub_0 -> QQQQPR_with_dsub_6_in_DPR_8
      102,	// qqsub_1 -> QQQQPR_with_dsub_6_in_DPR_8
      102,	// qsub_0 -> QQQQPR_with_dsub_6_in_DPR_8
      102,	// qsub_1 -> QQQQPR_with_dsub_6_in_DPR_8
      102,	// qsub_2 -> QQQQPR_with_dsub_6_in_DPR_8
      102,	// qsub_3 -> QQQQPR_with_dsub_6_in_DPR_8
      102,	// ssub_0 -> QQQQPR_with_dsub_6_in_DPR_8
      102,	// ssub_1 -> QQQQPR_with_dsub_6_in_DPR_8
      102,	// ssub_2 -> QQQQPR_with_dsub_6_in_DPR_8
      102,	// ssub_3 -> QQQQPR_with_dsub_6_in_DPR_8
      102,	// dsub_2_then_ssub_0 -> QQQQPR_with_dsub_6_in_DPR_8
      102,	// dsub_2_then_ssub_1 -> QQQQPR_with_dsub_6_in_DPR_8
      102,	// dsub_3_then_ssub_0 -> QQQQPR_with_dsub_6_in_DPR_8
      102,	// dsub_3_then_ssub_1 -> QQQQPR_with_dsub_6_in_DPR_8
      102,	// dsub_7_then_ssub_0 -> QQQQPR_with_dsub_6_in_DPR_8
      102,	// dsub_7_then_ssub_1 -> QQQQPR_with_dsub_6_in_DPR_8
      102,	// dsub_6_then_ssub_0 -> QQQQPR_with_dsub_6_in_DPR_8
      102,	// dsub_6_then_ssub_1 -> QQQQPR_with_dsub_6_in_DPR_8
      102,	// dsub_5_then_ssub_0 -> QQQQPR_with_dsub_6_in_DPR_8
      102,	// dsub_5_then_ssub_1 -> QQQQPR_with_dsub_6_in_DPR_8
      102,	// dsub_4_then_ssub_0 -> QQQQPR_with_dsub_6_in_DPR_8
      102,	// dsub_4_then_ssub_1 -> QQQQPR_with_dsub_6_in_DPR_8
      102,	// dsub_0_dsub_2 -> QQQQPR_with_dsub_6_in_DPR_8
      102,	// dsub_0_dsub_1_dsub_2 -> QQQQPR_with_dsub_6_in_DPR_8
      102,	// dsub_1_dsub_3 -> QQQQPR_with_dsub_6_in_DPR_8
      102,	// dsub_1_dsub_2_dsub_3 -> QQQQPR_with_dsub_6_in_DPR_8
      102,	// dsub_1_dsub_2 -> QQQQPR_with_dsub_6_in_DPR_8
      102,	// dsub_0_dsub_2_dsub_4 -> QQQQPR_with_dsub_6_in_DPR_8
      102,	// dsub_0_dsub_2_dsub_4_dsub_6 -> QQQQPR_with_dsub_6_in_DPR_8
      102,	// dsub_1_dsub_3_dsub_5 -> QQQQPR_with_dsub_6_in_DPR_8
      102,	// dsub_1_dsub_3_dsub_5_dsub_7 -> QQQQPR_with_dsub_6_in_DPR_8
      102,	// dsub_1_dsub_2_dsub_3_dsub_4 -> QQQQPR_with_dsub_6_in_DPR_8
      102,	// dsub_2_dsub_4 -> QQQQPR_with_dsub_6_in_DPR_8
      102,	// dsub_2_dsub_3_dsub_4 -> QQQQPR_with_dsub_6_in_DPR_8
      102,	// dsub_2_dsub_4_dsub_6 -> QQQQPR_with_dsub_6_in_DPR_8
      102,	// dsub_3_dsub_5 -> QQQQPR_with_dsub_6_in_DPR_8
      102,	// dsub_3_dsub_4_dsub_5 -> QQQQPR_with_dsub_6_in_DPR_8
      102,	// dsub_3_dsub_5_dsub_7 -> QQQQPR_with_dsub_6_in_DPR_8
      102,	// dsub_3_dsub_4 -> QQQQPR_with_dsub_6_in_DPR_8
      102,	// dsub_3_dsub_4_dsub_5_dsub_6 -> QQQQPR_with_dsub_6_in_DPR_8
      102,	// dsub_4_dsub_6 -> QQQQPR_with_dsub_6_in_DPR_8
      102,	// dsub_4_dsub_5_dsub_6 -> QQQQPR_with_dsub_6_in_DPR_8
      102,	// dsub_5_dsub_7 -> QQQQPR_with_dsub_6_in_DPR_8
      102,	// dsub_5_dsub_6_dsub_7 -> QQQQPR_with_dsub_6_in_DPR_8
      102,	// dsub_5_dsub_6 -> QQQQPR_with_dsub_6_in_DPR_8
      102,	// qsub_1_qsub_2 -> QQQQPR_with_dsub_6_in_DPR_8
    },
  };
  assert(RC && "Missing regclass");
  if (!Idx) return RC;
  --Idx;
  assert(Idx < 56 && "Bad subreg");
  unsigned TV = Table[RC->getID()][Idx];
  return TV ? getRegClass(TV - 1) : 0;
}

/// Get the weight in units of pressure for this register class.
const RegClassWeight &ARMGenRegisterInfo::
getRegClassWeight(const TargetRegisterClass *RC) const {
  static const RegClassWeight RCWeightTable[] = {
    {1, 32},  	// SPR
    {1, 16},  	// GPR
    {1, 16},  	// GPRwithAPSR
    {1, 16},  	// SPR_8
    {1, 15},  	// GPRnopc
    {1, 14},  	// rGPR
    {1, 8},  	// hGPR
    {1, 8},  	// tGPR
    {1, 7},  	// GPRnopc_and_hGPR
    {1, 6},  	// hGPR_and_rGPR
    {1, 6},  	// tcGPR
    {1, 4},  	// tGPR_and_tcGPR
    {1, 2},  	// hGPR_and_tcGPR
    {0, 0},  	// CCR
    {1, 1},  	// GPRsp
    {2, 64},  	// DPR
    {2, 32},  	// DPR_VFP2
    {2, 16},  	// DPR_8
    {2, 14},  	// GPRPair
    {2, 12},  	// GPRPair_with_gsub_1_in_rGPR
    {2, 8},  	// GPRPair_with_gsub_0_in_tGPR
    {2, 6},  	// GPRPair_with_gsub_0_in_hGPR
    {2, 6},  	// GPRPair_with_gsub_0_in_tcGPR
    {2, 6},  	// GPRPair_with_gsub_1_in_tcGPR
    {2, 4},  	// GPRPair_with_gsub_0_in_tGPR_and_tcGPR
    {2, 4},  	// GPRPair_with_gsub_1_in_hGPR_and_rGPR
    {2, 2},  	// GPRPair_with_gsub_1_in_GPRsp
    {2, 2},  	// GPRPair_with_gsub_1_in_hGPR_and_tcGPR
    {4, 64},  	// DPairSpc
    {4, 36},  	// DPairSpc_with_ssub_0
    {4, 32},  	// DPairSpc_with_dsub_2_then_ssub_0
    {4, 20},  	// DPairSpc_with_dsub_0_in_DPR_8
    {4, 16},  	// DPairSpc_with_dsub_2_in_DPR_8
    {4, 64},  	// DPair
    {4, 34},  	// DPair_with_ssub_0
    {4, 64},  	// QPR
    {4, 32},  	// DPair_with_ssub_2
    {4, 18},  	// DPair_with_dsub_0_in_DPR_8
    {4, 32},  	// QPR_VFP2
    {4, 16},  	// DPair_with_dsub_1_in_DPR_8
    {4, 16},  	// QPR_8
    {6, 64},  	// DTriple
    {6, 64},  	// DTripleSpc
    {6, 40},  	// DTripleSpc_with_ssub_0
    {6, 36},  	// DTriple_with_ssub_0
    {6, 62},  	// DTriple_with_dsub_1_dsub_2_in_QPR
    {6, 62},  	// DTriple_with_qsub_0_in_QPR
    {6, 34},  	// DTriple_with_ssub_2
    {6, 36},  	// DTripleSpc_with_dsub_2_then_ssub_0
    {6, 32},  	// DTriple_with_dsub_2_then_ssub_0
    {6, 32},  	// DTripleSpc_with_dsub_4_then_ssub_0
    {6, 24},  	// DTripleSpc_with_dsub_0_in_DPR_8
    {6, 20},  	// DTriple_with_dsub_0_in_DPR_8
    {6, 34},  	// DTriple_with_qsub_0_in_QPR_VFP2
    {6, 34},  	// DTriple_with_ssub_0_and_DTriple_with_dsub_1_dsub_2_in_QPR
    {6, 30},  	// DTriple_with_dsub_1_dsub_2_in_QPR_VFP2
    {6, 18},  	// DTriple_with_dsub_1_in_DPR_8
    {6, 30},  	// DTriple_with_dsub_2_then_ssub_0_and_DTriple_with_qsub_0_in_QPR
    {6, 20},  	// DTripleSpc_with_dsub_2_in_DPR_8
    {6, 16},  	// DTriple_with_dsub_2_in_DPR_8
    {6, 16},  	// DTripleSpc_with_dsub_4_in_DPR_8
    {6, 18},  	// DTriple_with_dsub_0_in_DPR_8_and_DTriple_with_dsub_1_dsub_2_in_QPR
    {6, 18},  	// DTriple_with_qsub_0_in_QPR_8
    {6, 14},  	// DTriple_with_dsub_1_dsub_2_in_QPR_8
    {6, 14},  	// DTriple_with_dsub_2_in_DPR_8_and_DTriple_with_qsub_0_in_QPR
    {6, 64},  	// DQuadSpc
    {6, 40},  	// DQuadSpc_with_ssub_0
    {6, 36},  	// DQuadSpc_with_dsub_2_then_ssub_0
    {6, 32},  	// DQuadSpc_with_dsub_4_then_ssub_0
    {6, 24},  	// DQuadSpc_with_dsub_0_in_DPR_8
    {6, 20},  	// DQuadSpc_with_dsub_2_in_DPR_8
    {6, 16},  	// DQuadSpc_with_dsub_4_in_DPR_8
    {8, 64},  	// DQuad
    {8, 38},  	// DQuad_with_ssub_0
    {8, 36},  	// DQuad_with_ssub_2
    {8, 64},  	// QQPR
    {8, 60},  	// DQuad_with_dsub_1_dsub_2_in_QPR
    {8, 34},  	// DQuad_with_dsub_2_then_ssub_0
    {8, 32},  	// DQuad_with_dsub_3_then_ssub_0
    {8, 22},  	// DQuad_with_dsub_0_in_DPR_8
    {8, 36},  	// DQuad_with_qsub_0_in_QPR_VFP2
    {8, 36},  	// DQuad_with_ssub_0_and_DQuad_with_dsub_1_dsub_2_in_QPR
    {8, 32},  	// DQuad_with_dsub_1_dsub_2_in_QPR_VFP2
    {8, 20},  	// DQuad_with_dsub_1_in_DPR_8
    {8, 32},  	// DQuad_with_qsub_1_in_QPR_VFP2
    {8, 18},  	// DQuad_with_dsub_2_in_DPR_8
    {8, 28},  	// DQuad_with_dsub_3_then_ssub_0_and_DQuad_with_dsub_1_dsub_2_in_QPR
    {8, 16},  	// DQuad_with_dsub_3_in_DPR_8
    {8, 20},  	// DQuad_with_dsub_0_in_DPR_8_and_DQuad_with_dsub_1_dsub_2_in_QPR
    {8, 20},  	// DQuad_with_qsub_0_in_QPR_8
    {8, 16},  	// DQuad_with_dsub_1_dsub_2_in_QPR_8
    {8, 16},  	// DQuad_with_qsub_1_in_QPR_8
    {8, 12},  	// DQuad_with_dsub_3_in_DPR_8_and_DQuad_with_dsub_1_dsub_2_in_QPR
    {16, 64},  	// QQQQPR
    {16, 44},  	// QQQQPR_with_ssub_0
    {16, 40},  	// QQQQPR_with_dsub_2_then_ssub_0
    {16, 36},  	// QQQQPR_with_dsub_5_then_ssub_0
    {16, 32},  	// QQQQPR_with_dsub_7_then_ssub_0
    {16, 28},  	// QQQQPR_with_dsub_0_in_DPR_8
    {16, 24},  	// QQQQPR_with_dsub_2_in_DPR_8
    {16, 20},  	// QQQQPR_with_dsub_4_in_DPR_8
    {16, 16},  	// QQQQPR_with_dsub_6_in_DPR_8
    {0, 0} };
  return RCWeightTable[RC->getID()];
}

/// Get the weight in units of pressure for this register unit.
unsigned ARMGenRegisterInfo::
getRegUnitWeight(unsigned RegUnit) const {
  assert(RegUnit < 76 && "invalid register unit");
  static const uint8_t RUWeightTable[] = {
    0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0 };
  return RUWeightTable[RegUnit];
}


// Get the number of dimensions of register pressure.
unsigned ARMGenRegisterInfo::getNumRegPressureSets() const {
  return 22;
}

// Get the name of this register unit pressure set.
const char *ARMGenRegisterInfo::
getRegPressureSetName(unsigned Idx) const {
  static const char *PressureNameTable[] = {
    "hGPR_and_tcGPR+GPRPair_with_gsub_1_in_GPRsp",
    "hGPR",
    "GPRPair_with_gsub_0_in_tcGPR+GPRPair_with_gsub_1_in_tcGPR",
    "tGPR+tcGPR",
    "tGPR+GPRPair_with_gsub_0_in_tcGPR",
    "tGPR+GPRPair_with_gsub_1_in_tcGPR",
    "hGPR+tcGPR",
    "GPR+GPRwithAPSR",
    "DTripleSpc_with_dsub_0_in_DPR_8",
    "DQuad_with_dsub_1_dsub_2_in_QPR_VFP2",
    "SPR",
    "DTriple_with_ssub_0_and_DTriple_with_dsub_1_dsub_2_in_QPR",
    "DPair_with_ssub_0",
    "DQuad_with_ssub_0_and_DQuad_with_dsub_1_dsub_2_in_QPR",
    "DPairSpc_with_ssub_0",
    "DQuad_with_ssub_0",
    "DTripleSpc_with_ssub_0",
    "QQQQPR_with_ssub_0",
    "DQuad_with_dsub_1_dsub_2_in_QPR",
    "DTriple_with_dsub_1_dsub_2_in_QPR",
    "DTriple_with_qsub_0_in_QPR",
    "DPR",
    0 };
  return PressureNameTable[Idx];
}

// Get the register unit pressure limit for this dimension.
// This limit must be adjusted dynamically for reserved registers.
unsigned ARMGenRegisterInfo::
getRegPressureSetLimit(unsigned Idx) const {
  static const unsigned PressureLimitTable[] = {
    3,  	// 0: hGPR_and_tcGPR+GPRPair_with_gsub_1_in_GPRsp
    8,  	// 1: hGPR
    8,  	// 2: GPRPair_with_gsub_0_in_tcGPR+GPRPair_with_gsub_1_in_tcGPR
    10,  	// 3: tGPR+tcGPR
    10,  	// 4: tGPR+GPRPair_with_gsub_0_in_tcGPR
    10,  	// 5: tGPR+GPRPair_with_gsub_1_in_tcGPR
    12,  	// 6: hGPR+tcGPR
    17,  	// 7: GPR+GPRwithAPSR
    24,  	// 8: DTripleSpc_with_dsub_0_in_DPR_8
    32,  	// 9: DQuad_with_dsub_1_dsub_2_in_QPR_VFP2
    32,  	// 10: SPR
    34,  	// 11: DTriple_with_ssub_0_and_DTriple_with_dsub_1_dsub_2_in_QPR
    34,  	// 12: DPair_with_ssub_0
    36,  	// 13: DQuad_with_ssub_0_and_DQuad_with_dsub_1_dsub_2_in_QPR
    36,  	// 14: DPairSpc_with_ssub_0
    38,  	// 15: DQuad_with_ssub_0
    40,  	// 16: DTripleSpc_with_ssub_0
    44,  	// 17: QQQQPR_with_ssub_0
    60,  	// 18: DQuad_with_dsub_1_dsub_2_in_QPR
    62,  	// 19: DTriple_with_dsub_1_dsub_2_in_QPR
    62,  	// 20: DTriple_with_qsub_0_in_QPR
    64,  	// 21: DPR
    0 };
  return PressureLimitTable[Idx];
}

/// Table of pressure sets per register class or unit.
static const int RCSetsTable[] = {
    10,  12,  14,  15,  16,  17,  20,  21,  -1,  	// #0 SPR
    7,  -1,  	// #9 GPR
    7,  -1,  	// #11 GPRwithAPSR
    8,  10,  12,  14,  15,  16,  17,  20,  21,  -1,  	// #13 SPR_8
    7,  -1,  	// #23 GPRnopc
    7,  -1,  	// #25 rGPR
    1,  6,  7,  -1,  	// #27 hGPR
    3,  4,  5,  7,  -1,  	// #31 tGPR
    1,  6,  7,  -1,  	// #36 GPRnopc_and_hGPR
    1,  6,  7,  -1,  	// #40 hGPR_and_rGPR
    2,  3,  6,  7,  -1,  	// #44 tcGPR
    2,  3,  4,  5,  6,  7,  -1,  	// #49 tGPR_and_tcGPR
    0,  1,  2,  3,  6,  7,  -1,  	// #56 hGPR_and_tcGPR
    -1,  	// #63 CCR
    0,  1,  2,  4,  6,  7,  -1,  	// #64 GPRsp
    21,  -1,  	// #71 DPR
    10,  12,  14,  15,  16,  17,  20,  21,  -1,  	// #73 DPR_VFP2
    8,  10,  12,  14,  15,  16,  17,  20,  21,  -1,  	// #82 DPR_8
    7,  -1,  	// #92 GPRPair
    7,  -1,  	// #94 GPRPair_with_gsub_1_in_rGPR
    3,  4,  5,  7,  -1,  	// #96 GPRPair_with_gsub_0_in_tGPR
    1,  6,  7,  -1,  	// #101 GPRPair_with_gsub_0_in_hGPR
    2,  4,  6,  7,  -1,  	// #105 GPRPair_with_gsub_0_in_tcGPR
    2,  5,  6,  7,  -1,  	// #110 GPRPair_with_gsub_1_in_tcGPR
    2,  3,  4,  5,  6,  7,  -1,  	// #115 GPRPair_with_gsub_0_in_tGPR_and_tcGPR
    1,  6,  7,  -1,  	// #122 GPRPair_with_gsub_1_in_hGPR_and_rGPR
    0,  1,  2,  4,  6,  7,  -1,  	// #126 GPRPair_with_gsub_1_in_GPRsp
    1,  2,  5,  6,  7,  -1,  	// #133 GPRPair_with_gsub_1_in_hGPR_and_tcGPR
    21,  -1,  	// #139 DPairSpc
    14,  15,  16,  17,  20,  21,  -1,  	// #141 DPairSpc_with_ssub_0
    10,  12,  14,  15,  16,  17,  20,  21,  -1,  	// #148 DPairSpc_with_dsub_2_then_ssub_0
    8,  10,  12,  14,  15,  16,  17,  20,  21,  -1,  	// #157 DPairSpc_with_dsub_0_in_DPR_8
    8,  10,  12,  14,  15,  16,  17,  20,  21,  -1,  	// #167 DPairSpc_with_dsub_2_in_DPR_8
    21,  -1,  	// #177 DPair
    12,  14,  15,  16,  17,  20,  21,  -1,  	// #179 DPair_with_ssub_0
    21,  -1,  	// #187 QPR
    10,  12,  14,  15,  16,  17,  20,  21,  -1,  	// #189 DPair_with_ssub_2
    8,  10,  12,  14,  15,  16,  17,  20,  21,  -1,  	// #198 DPair_with_dsub_0_in_DPR_8
    10,  12,  14,  15,  16,  17,  20,  21,  -1,  	// #208 QPR_VFP2
    8,  10,  12,  14,  15,  16,  17,  20,  21,  -1,  	// #217 DPair_with_dsub_1_in_DPR_8
    8,  10,  12,  14,  15,  16,  17,  20,  21,  -1,  	// #227 QPR_8
    21,  -1,  	// #237 DTriple
    21,  -1,  	// #239 DTripleSpc
    16,  17,  20,  21,  -1,  	// #241 DTripleSpc_with_ssub_0
    14,  15,  16,  17,  20,  21,  -1,  	// #246 DTriple_with_ssub_0
    19,  21,  -1,  	// #253 DTriple_with_dsub_1_dsub_2_in_QPR
    20,  21,  -1,  	// #256 DTriple_with_qsub_0_in_QPR
    12,  14,  15,  16,  17,  20,  21,  -1,  	// #259 DTriple_with_ssub_2
    14,  15,  16,  17,  20,  21,  -1,  	// #267 DTripleSpc_with_dsub_2_then_ssub_0
    10,  12,  14,  15,  16,  17,  20,  21,  -1,  	// #274 DTriple_with_dsub_2_then_ssub_0
    10,  12,  14,  15,  16,  17,  20,  21,  -1,  	// #283 DTripleSpc_with_dsub_4_then_ssub_0
    8,  10,  12,  14,  15,  16,  17,  20,  21,  -1,  	// #292 DTripleSpc_with_dsub_0_in_DPR_8
    8,  10,  12,  14,  15,  16,  17,  20,  21,  -1,  	// #302 DTriple_with_dsub_0_in_DPR_8
    12,  14,  15,  16,  17,  20,  21,  -1,  	// #312 DTriple_with_qsub_0_in_QPR_VFP2
    11,  13,  14,  15,  16,  17,  18,  19,  20,  21,  -1,  	// #320 DTriple_with_ssub_0_and_DTriple_with_dsub_1_dsub_2_in_QPR
    9,  10,  11,  12,  13,  14,  15,  16,  17,  18,  19,  20,  21,  -1,  	// #331 DTriple_with_dsub_1_dsub_2_in_QPR_VFP2
    8,  10,  12,  14,  15,  16,  17,  20,  21,  -1,  	// #345 DTriple_with_dsub_1_in_DPR_8
    10,  12,  14,  15,  16,  17,  20,  21,  -1,  	// #355 DTriple_with_dsub_2_then_ssub_0_and_DTriple_with_qsub_0_in_QPR
    8,  10,  12,  14,  15,  16,  17,  20,  21,  -1,  	// #364 DTripleSpc_with_dsub_2_in_DPR_8
    8,  10,  12,  14,  15,  16,  17,  20,  21,  -1,  	// #374 DTriple_with_dsub_2_in_DPR_8
    8,  10,  12,  14,  15,  16,  17,  20,  21,  -1,  	// #384 DTripleSpc_with_dsub_4_in_DPR_8
    8,  9,  10,  11,  12,  13,  14,  15,  16,  17,  18,  19,  20,  21,  -1,  	// #394 DTriple_with_dsub_0_in_DPR_8_and_DTriple_with_dsub_1_dsub_2_in_QPR
    8,  10,  12,  14,  15,  16,  17,  20,  21,  -1,  	// #409 DTriple_with_qsub_0_in_QPR_8
    8,  9,  10,  11,  12,  13,  14,  15,  16,  17,  18,  19,  20,  21,  -1,  	// #419 DTriple_with_dsub_1_dsub_2_in_QPR_8
    8,  10,  12,  14,  15,  16,  17,  20,  21,  -1,  	// #434 DTriple_with_dsub_2_in_DPR_8_and_DTriple_with_qsub_0_in_QPR
    21,  -1,  	// #444 DQuadSpc
    16,  17,  20,  21,  -1,  	// #446 DQuadSpc_with_ssub_0
    14,  15,  16,  17,  20,  21,  -1,  	// #451 DQuadSpc_with_dsub_2_then_ssub_0
    10,  12,  14,  15,  16,  17,  20,  21,  -1,  	// #458 DQuadSpc_with_dsub_4_then_ssub_0
    8,  10,  12,  14,  15,  16,  17,  20,  21,  -1,  	// #467 DQuadSpc_with_dsub_0_in_DPR_8
    8,  10,  12,  14,  15,  16,  17,  20,  21,  -1,  	// #477 DQuadSpc_with_dsub_2_in_DPR_8
    8,  10,  12,  14,  15,  16,  17,  20,  21,  -1,  	// #487 DQuadSpc_with_dsub_4_in_DPR_8
    21,  -1,  	// #497 DQuad
    15,  16,  17,  20,  21,  -1,  	// #499 DQuad_with_ssub_0
    14,  15,  16,  17,  20,  21,  -1,  	// #505 DQuad_with_ssub_2
    21,  -1,  	// #512 QQPR
    18,  19,  20,  21,  -1,  	// #514 DQuad_with_dsub_1_dsub_2_in_QPR
    12,  14,  15,  16,  17,  20,  21,  -1,  	// #519 DQuad_with_dsub_2_then_ssub_0
    10,  12,  14,  15,  16,  17,  20,  21,  -1,  	// #527 DQuad_with_dsub_3_then_ssub_0
    8,  10,  12,  14,  15,  16,  17,  20,  21,  -1,  	// #536 DQuad_with_dsub_0_in_DPR_8
    14,  15,  16,  17,  20,  21,  -1,  	// #546 DQuad_with_qsub_0_in_QPR_VFP2
    13,  15,  16,  17,  18,  19,  20,  21,  -1,  	// #553 DQuad_with_ssub_0_and_DQuad_with_dsub_1_dsub_2_in_QPR
    9,  11,  12,  13,  14,  15,  16,  17,  18,  19,  20,  21,  -1,  	// #562 DQuad_with_dsub_1_dsub_2_in_QPR_VFP2
    8,  10,  12,  14,  15,  16,  17,  20,  21,  -1,  	// #575 DQuad_with_dsub_1_in_DPR_8
    10,  12,  14,  15,  16,  17,  20,  21,  -1,  	// #585 DQuad_with_qsub_1_in_QPR_VFP2
    8,  10,  12,  14,  15,  16,  17,  20,  21,  -1,  	// #594 DQuad_with_dsub_2_in_DPR_8
    9,  10,  11,  12,  13,  14,  15,  16,  17,  18,  19,  20,  21,  -1,  	// #604 DQuad_with_dsub_3_then_ssub_0_and_DQuad_with_dsub_1_dsub_2_in_QPR
    8,  10,  12,  14,  15,  16,  17,  20,  21,  -1,  	// #618 DQuad_with_dsub_3_in_DPR_8
    8,  9,  10,  11,  12,  13,  14,  15,  16,  17,  18,  19,  20,  21,  -1,  	// #628 DQuad_with_dsub_0_in_DPR_8_and_DQuad_with_dsub_1_dsub_2_in_QPR
    8,  10,  12,  14,  15,  16,  17,  20,  21,  -1,  	// #643 DQuad_with_qsub_0_in_QPR_8
    8,  9,  10,  11,  12,  13,  14,  15,  16,  17,  18,  19,  20,  21,  -1,  	// #653 DQuad_with_dsub_1_dsub_2_in_QPR_8
    8,  10,  12,  14,  15,  16,  17,  20,  21,  -1,  	// #668 DQuad_with_qsub_1_in_QPR_8
    8,  9,  10,  11,  12,  13,  14,  15,  16,  17,  18,  19,  20,  21,  -1,  	// #678 DQuad_with_dsub_3_in_DPR_8_and_DQuad_with_dsub_1_dsub_2_in_QPR
    21,  -1,  	// #693 QQQQPR
    17,  20,  21,  -1,  	// #695 QQQQPR_with_ssub_0
    16,  17,  20,  21,  -1,  	// #699 QQQQPR_with_dsub_2_then_ssub_0
    14,  15,  16,  17,  20,  21,  -1,  	// #704 QQQQPR_with_dsub_5_then_ssub_0
    10,  12,  14,  15,  16,  17,  20,  21,  -1,  	// #711 QQQQPR_with_dsub_7_then_ssub_0
    10,  12,  14,  15,  16,  17,  20,  21,  -1,  	// #720 QQQQPR_with_dsub_0_in_DPR_8
    8,  10,  12,  14,  15,  16,  17,  20,  21,  -1,  	// #729 QQQQPR_with_dsub_2_in_DPR_8
    8,  10,  12,  14,  15,  16,  17,  20,  21,  -1,  	// #739 QQQQPR_with_dsub_4_in_DPR_8
    8,  10,  12,  14,  15,  16,  17,  20,  21,  -1,  	// #749 QQQQPR_with_dsub_6_in_DPR_8
    16,  17,  18,  19,  20,  21,  -1,  	// #759 inferred~GPRPair_with_gsub_0_in_tcGPR+GPRPair_with_gsub_1_in_tcGPR~tGPR+GPRPair_with_gsub_1_in_tcGPR~hGPR+tcGPR~GPR+GPRwithAPSR~DTriple_with_ssub_0_and_DTriple_with_dsub_1_dsub_2_in_QPR~DPairSpc_with_ssub_0
    17,  18,  19,  20,  21,  -1,  	// #766 inferred~GPRPair_with_gsub_0_in_tcGPR+GPRPair_with_gsub_1_in_tcGPR~hGPR+tcGPR~GPR+GPRwithAPSR~DTriple_with_ssub_0_and_DTriple_with_dsub_1_dsub_2_in_QPR~DPairSpc_with_ssub_0
    0,  1,  2,  3,  5,  6,  7,  -1,  	// #772 inferred~hGPR~DQuad_with_ssub_0~DTripleSpc_with_ssub_0~QQQQPR_with_ssub_0~DTriple_with_dsub_1_dsub_2_in_QPR~DTriple_with_qsub_0_in_QPR~DPR
    0,  1,  2,  3,  4,  6,  7,  -1,  	// #780 inferred~hGPR~DQuad_with_ssub_0~DTripleSpc_with_ssub_0~QQQQPR_with_ssub_0~DQuad_with_dsub_1_dsub_2_in_QPR~DTriple_with_qsub_0_in_QPR~DPR
    -1 };

/// Get the dimensions of register pressure impacted by this register class.
/// Returns a -1 terminated array of pressure set IDs
const int* ARMGenRegisterInfo::
getRegClassPressureSets(const TargetRegisterClass *RC) const {
  static const unsigned RCSetStartTable[] = {
    0,9,11,13,23,25,27,31,36,40,44,49,56,63,64,71,73,82,92,94,96,101,105,110,115,122,126,133,139,141,148,157,167,177,179,187,189,198,208,217,227,237,239,241,246,253,256,259,267,274,283,292,302,312,320,331,345,355,364,374,384,394,409,419,434,444,446,451,458,467,477,487,497,499,505,512,514,519,527,536,546,553,562,575,585,594,604,618,628,643,653,668,678,693,695,699,704,711,720,729,739,749,0 };
  unsigned SetListStart = RCSetStartTable[RC->getID()];
  return &RCSetsTable[SetListStart];
}

/// Get the dimensions of register pressure impacted by this register unit.
/// Returns a -1 terminated array of pressure set IDs
const int* ARMGenRegisterInfo::
getRegUnitPressureSets(unsigned RegUnit) const {
  assert(RegUnit < 76 && "invalid register unit");
  static const unsigned RUSetStartTable[] = {
    63,9,63,63,63,63,63,63,27,27,64,63,13,13,394,394,394,394,394,394,394,394,394,394,394,394,394,394,394,394,394,394,394,394,394,394,331,331,331,331,331,331,331,331,562,320,553,759,766,766,514,514,514,514,514,514,514,514,514,253,63,63,63,49,49,49,49,31,31,31,31,133,772,27,27,780,0 };
  unsigned SetListStart = RUSetStartTable[RegUnit];
  return &RCSetsTable[SetListStart];
}

extern const MCRegisterDesc ARMRegDesc[];
extern const MCPhysReg ARMRegDiffLists[];
extern const char ARMRegStrings[];
extern const uint16_t ARMRegUnitRoots[][2];
extern const uint16_t ARMSubRegIdxLists[];
extern const MCRegisterInfo::SubRegCoveredBits ARMSubRegIdxRanges[];
extern const uint16_t ARMRegEncodingTable[];
// ARM Dwarf<->LLVM register mappings.
extern const MCRegisterInfo::DwarfLLVMRegPair ARMDwarfFlavour0Dwarf2L[];
extern const unsigned ARMDwarfFlavour0Dwarf2LSize;

extern const MCRegisterInfo::DwarfLLVMRegPair ARMEHFlavour0Dwarf2L[];
extern const unsigned ARMEHFlavour0Dwarf2LSize;

extern const MCRegisterInfo::DwarfLLVMRegPair ARMDwarfFlavour0L2Dwarf[];
extern const unsigned ARMDwarfFlavour0L2DwarfSize;

extern const MCRegisterInfo::DwarfLLVMRegPair ARMEHFlavour0L2Dwarf[];
extern const unsigned ARMEHFlavour0L2DwarfSize;

ARMGenRegisterInfo::
ARMGenRegisterInfo(unsigned RA, unsigned DwarfFlavour, unsigned EHFlavour, unsigned PC)
  : TargetRegisterInfo(ARMRegInfoDesc, RegisterClasses, RegisterClasses+102,
             SubRegIndexNameTable, SubRegIndexLaneMaskTable, 0xffffffff) {
  InitMCRegisterInfo(ARMRegDesc, 288, RA, PC,
                     ARMMCRegisterClasses, 102,
                     ARMRegUnitRoots,
                     76,
                     ARMRegDiffLists,
                     ARMRegStrings,
                     ARMSubRegIdxLists,
                     57,
                     ARMSubRegIdxRanges,
                     ARMRegEncodingTable);

  switch (DwarfFlavour) {
  default:
    llvm_unreachable("Unknown DWARF flavour");
  case 0:
    mapDwarfRegsToLLVMRegs(ARMDwarfFlavour0Dwarf2L, ARMDwarfFlavour0Dwarf2LSize, false);
    break;
  }
  switch (EHFlavour) {
  default:
    llvm_unreachable("Unknown DWARF flavour");
  case 0:
    mapDwarfRegsToLLVMRegs(ARMEHFlavour0Dwarf2L, ARMEHFlavour0Dwarf2LSize, true);
    break;
  }
  switch (DwarfFlavour) {
  default:
    llvm_unreachable("Unknown DWARF flavour");
  case 0:
    mapLLVMRegsToDwarfRegs(ARMDwarfFlavour0L2Dwarf, ARMDwarfFlavour0L2DwarfSize, false);
    break;
  }
  switch (EHFlavour) {
  default:
    llvm_unreachable("Unknown DWARF flavour");
  case 0:
    mapLLVMRegsToDwarfRegs(ARMEHFlavour0L2Dwarf, ARMEHFlavour0L2DwarfSize, true);
    break;
  }
}

static const MCPhysReg CSR_AAPCS_SaveList[] = { ARM::LR, ARM::R11, ARM::R10, ARM::R9, ARM::R8, ARM::R7, ARM::R6, ARM::R5, ARM::R4, ARM::D15, ARM::D14, ARM::D13, ARM::D12, ARM::D11, ARM::D10, ARM::D9, ARM::D8, 0 };
static const uint32_t CSR_AAPCS_RegMask[] = { 0x3fc00400, 0x01e00000, 0xc0001fe0, 0x0fc03fff, 0x80070000, 0x1f807800, 0x01e00000, 0x00060000, 0x00c00380, };
static const MCPhysReg CSR_AAPCS_ThisReturn_SaveList[] = { ARM::LR, ARM::R11, ARM::R10, ARM::R9, ARM::R8, ARM::R7, ARM::R6, ARM::R5, ARM::R4, ARM::D15, ARM::D14, ARM::D13, ARM::D12, ARM::D11, ARM::D10, ARM::D9, ARM::D8, ARM::R0, 0 };
static const uint32_t CSR_AAPCS_ThisReturn_RegMask[] = { 0x3fc00400, 0x01e00000, 0xc0001fe2, 0x0fc03fff, 0x80070000, 0x1f807800, 0x01e00000, 0x00060000, 0x00c00380, };
static const MCPhysReg CSR_NoRegs_SaveList[] = { 0 };
static const uint32_t CSR_NoRegs_RegMask[] = { 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, };
static const MCPhysReg CSR_iOS_SaveList[] = { ARM::LR, ARM::R7, ARM::R6, ARM::R5, ARM::R4, ARM::R11, ARM::R10, ARM::R8, ARM::D15, ARM::D14, ARM::D13, ARM::D12, ARM::D11, ARM::D10, ARM::D9, ARM::D8, 0 };
static const uint32_t CSR_iOS_RegMask[] = { 0x3fc00400, 0x01e00000, 0xc0001be0, 0x0fc03fff, 0x80070000, 0x1f805800, 0x01e00000, 0x00060000, 0x00c00380, };
static const MCPhysReg CSR_iOS_ThisReturn_SaveList[] = { ARM::LR, ARM::R7, ARM::R6, ARM::R5, ARM::R4, ARM::R11, ARM::R10, ARM::R8, ARM::D15, ARM::D14, ARM::D13, ARM::D12, ARM::D11, ARM::D10, ARM::D9, ARM::D8, ARM::R0, 0 };
static const uint32_t CSR_iOS_ThisReturn_RegMask[] = { 0x3fc00400, 0x01e00000, 0xc0001be2, 0x0fc03fff, 0x80070000, 0x1f805800, 0x01e00000, 0x00060000, 0x00c00380, };


} // End llvm namespace 
#endif // GET_REGINFO_TARGET_DESC

