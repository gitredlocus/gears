/*===- TableGen'erated file -------------------------------------*- C++ -*-===*\
|*                                                                            *|
|*Assembly Writer Source Fragment                                             *|
|*                                                                            *|
|* Automatically generated file, do not edit!                                 *|
|*                                                                            *|
\*===----------------------------------------------------------------------===*/

/// printInstruction - This method is automatically generated by tablegen
/// from the instruction set description.
void MipsInstPrinter::printInstruction(const MCInst *MI, raw_ostream &O) {
  static const uint32_t OpInfo[] = {
    0U,	// PHI
    0U,	// INLINEASM
    0U,	// PROLOG_LABEL
    0U,	// EH_LABEL
    0U,	// GC_LABEL
    0U,	// KILL
    0U,	// EXTRACT_SUBREG
    0U,	// INSERT_SUBREG
    0U,	// IMPLICIT_DEF
    0U,	// SUBREG_TO_REG
    0U,	// COPY_TO_REGCLASS
    3358U,	// DBG_VALUE
    0U,	// REG_SEQUENCE
    0U,	// COPY
    3351U,	// BUNDLE
    3368U,	// LIFETIME_START
    3338U,	// LIFETIME_END
    5492U,	// ABSQ_S_PH
    4542U,	// ABSQ_S_QB
    7112U,	// ABSQ_S_W
    4199382U,	// ADD
    4199601U,	// ADDQH_PH
    4199718U,	// ADDQH_R_PH
    4201316U,	// ADDQH_R_W
    4201260U,	// ADDQH_W
    4199675U,	// ADDQ_PH
    4199774U,	// ADDQ_S_PH
    4201396U,	// ADDQ_S_W
    4199006U,	// ADDSC
    4198714U,	// ADDUH_QB
    4198822U,	// ADDUH_R_QB
    4199873U,	// ADDU_PH
    4198927U,	// ADDU_QB
    4199818U,	// ADDU_S_PH
    4198868U,	// ADDU_S_QB
    4199013U,	// ADDWC
    4199382U,	// ADD_MM
    4200080U,	// ADDi
    4200080U,	// ADDi_MM
    4201073U,	// ADDiu
    4201073U,	// ADDiu_MM
    4201054U,	// ADDu
    4201054U,	// ADDu_MM
    0U,	// ADJCALLSTACKDOWN
    0U,	// ADJCALLSTACKUP
    4199404U,	// AND
    4199404U,	// AND64
    4199404U,	// AND_MM
    71308950U,	// ANDi
    71308950U,	// ANDi64
    71308950U,	// ANDi_MM
    4199418U,	// APPEND
    0U,	// ATOMIC_CMP_SWAP_I16
    0U,	// ATOMIC_CMP_SWAP_I16_P8
    0U,	// ATOMIC_CMP_SWAP_I32
    0U,	// ATOMIC_CMP_SWAP_I32_P8
    0U,	// ATOMIC_CMP_SWAP_I64
    0U,	// ATOMIC_CMP_SWAP_I64_P8
    0U,	// ATOMIC_CMP_SWAP_I8
    0U,	// ATOMIC_CMP_SWAP_I8_P8
    0U,	// ATOMIC_LOAD_ADD_I16
    0U,	// ATOMIC_LOAD_ADD_I16_P8
    0U,	// ATOMIC_LOAD_ADD_I32
    0U,	// ATOMIC_LOAD_ADD_I32_P8
    0U,	// ATOMIC_LOAD_ADD_I64
    0U,	// ATOMIC_LOAD_ADD_I64_P8
    0U,	// ATOMIC_LOAD_ADD_I8
    0U,	// ATOMIC_LOAD_ADD_I8_P8
    0U,	// ATOMIC_LOAD_AND_I16
    0U,	// ATOMIC_LOAD_AND_I16_P8
    0U,	// ATOMIC_LOAD_AND_I32
    0U,	// ATOMIC_LOAD_AND_I32_P8
    0U,	// ATOMIC_LOAD_AND_I64
    0U,	// ATOMIC_LOAD_AND_I64_P8
    0U,	// ATOMIC_LOAD_AND_I8
    0U,	// ATOMIC_LOAD_AND_I8_P8
    0U,	// ATOMIC_LOAD_NAND_I16
    0U,	// ATOMIC_LOAD_NAND_I16_P8
    0U,	// ATOMIC_LOAD_NAND_I32
    0U,	// ATOMIC_LOAD_NAND_I32_P8
    0U,	// ATOMIC_LOAD_NAND_I64
    0U,	// ATOMIC_LOAD_NAND_I64_P8
    0U,	// ATOMIC_LOAD_NAND_I8
    0U,	// ATOMIC_LOAD_NAND_I8_P8
    0U,	// ATOMIC_LOAD_OR_I16
    0U,	// ATOMIC_LOAD_OR_I16_P8
    0U,	// ATOMIC_LOAD_OR_I32
    0U,	// ATOMIC_LOAD_OR_I32_P8
    0U,	// ATOMIC_LOAD_OR_I64
    0U,	// ATOMIC_LOAD_OR_I64_P8
    0U,	// ATOMIC_LOAD_OR_I8
    0U,	// ATOMIC_LOAD_OR_I8_P8
    0U,	// ATOMIC_LOAD_SUB_I16
    0U,	// ATOMIC_LOAD_SUB_I16_P8
    0U,	// ATOMIC_LOAD_SUB_I32
    0U,	// ATOMIC_LOAD_SUB_I32_P8
    0U,	// ATOMIC_LOAD_SUB_I64
    0U,	// ATOMIC_LOAD_SUB_I64_P8
    0U,	// ATOMIC_LOAD_SUB_I8
    0U,	// ATOMIC_LOAD_SUB_I8_P8
    0U,	// ATOMIC_LOAD_XOR_I16
    0U,	// ATOMIC_LOAD_XOR_I16_P8
    0U,	// ATOMIC_LOAD_XOR_I32
    0U,	// ATOMIC_LOAD_XOR_I32_P8
    0U,	// ATOMIC_LOAD_XOR_I64
    0U,	// ATOMIC_LOAD_XOR_I64_P8
    0U,	// ATOMIC_LOAD_XOR_I8
    0U,	// ATOMIC_LOAD_XOR_I8_P8
    0U,	// ATOMIC_SWAP_I16
    0U,	// ATOMIC_SWAP_I16_P8
    0U,	// ATOMIC_SWAP_I32
    0U,	// ATOMIC_SWAP_I32_P8
    0U,	// ATOMIC_SWAP_I64
    0U,	// ATOMIC_SWAP_I64_P8
    0U,	// ATOMIC_SWAP_I8
    0U,	// ATOMIC_SWAP_I8_P8
    6769U,	// AddiuRxImmX16
    39537U,	// AddiuRxPcImmX16
    8919665U,	// AddiuRxRxImm16
    531057U,	// AddiuRxRxImmX16
    1055345U,	// AddiuRxRyOffMemX16
    72893U,	// AddiuSpImm16
    105661U,	// AddiuSpImmX16
    4201054U,	// AdduRxRyRz16
    529388U,	// AndRxRxRy16
    102638U,	// B
    4200357U,	// BALIGN
    0U,	// BAL_BR
    5152U,	// BC1F
    6701U,	// BC1T
    4200470U,	// BEQ
    4200470U,	// BEQ64
    7206U,	// BGEZ
    7206U,	// BGEZ64
    5864U,	// BGEZAL
    7250U,	// BGTZ
    7250U,	// BGTZ64
    6809U,	// BITREV
    7212U,	// BLEZ
    7212U,	// BLEZ64
    7256U,	// BLTZ
    7256U,	// BLTZ64
    5872U,	// BLTZAL
    4199430U,	// BNE
    4199430U,	// BNE64
    102523U,	// BPOSGE32
    0U,	// BPOSGE32_PSEUDO
    5834U,	// BREAK
    12590149U,	// BeqzRxImm16
    7237U,	// BeqzRxImmX16
    102638U,	// BimmX16
    12590130U,	// BnezRxImm16
    7218U,	// BnezRxImmX16
    3330U,	// Break16
    16783324U,	// BteqzT8CmpX16
    16783024U,	// BteqzT8CmpiX16
    16783923U,	// BteqzT8SltX16
    16783036U,	// BteqzT8SltiX16
    16783992U,	// BteqzT8SltiuX16
    16783999U,	// BteqzT8SltuX16
    105547U,	// BteqzX16
    20977628U,	// BtnezT8CmpX16
    20977328U,	// BtnezT8CmpiX16
    20978227U,	// BtnezT8SltX16
    20977340U,	// BtnezT8SltiX16
    20978296U,	// BtnezT8SltiuX16
    20978303U,	// BtnezT8SltuX16
    105528U,	// BtnezX16
    0U,	// BuildPairF64
    4837U,	// CEIL_L_D64
    6481U,	// CEIL_L_S
    5034U,	// CEIL_W_D32
    5034U,	// CEIL_W_D64
    6663U,	// CEIL_W_S
    4131U,	// CFC1
    6068U,	// CLO
    7232U,	// CLZ
    4198760U,	// CMPGDU_EQ_QB
    4198665U,	// CMPGDU_LE_QB
    4198879U,	// CMPGDU_LT_QB
    4198774U,	// CMPGU_EQ_QB
    4198679U,	// CMPGU_LE_QB
    4198893U,	// CMPGU_LT_QB
    4483U,	// CMPU_EQ_QB
    4388U,	// CMPU_LE_QB
    4602U,	// CMPU_LT_QB
    5380U,	// CMP_EQ_PH
    5276U,	// CMP_LE_PH
    5549U,	// CMP_LT_PH
    139312U,	// CTC1
    6366U,	// CVT_D32_S
    6869U,	// CVT_D32_W
    5841U,	// CVT_D64_L
    6366U,	// CVT_D64_S
    6869U,	// CVT_D64_W
    4858U,	// CVT_L_D64
    6502U,	// CVT_L_S
    4925U,	// CVT_S_D32
    4925U,	// CVT_S_D64
    5850U,	// CVT_S_L
    7063U,	// CVT_S_W
    5055U,	// CVT_W_D32
    5055U,	// CVT_W_D64
    6684U,	// CVT_W_S
    4899U,	// C_EQ_D32
    4899U,	// C_EQ_D64
    6543U,	// C_EQ_S
    4785U,	// C_F_D32
    4785U,	// C_F_D64
    6429U,	// C_F_S
    4749U,	// C_LE_D32
    4749U,	// C_LE_D64
    6393U,	// C_LE_S
    4950U,	// C_LT_D32
    4950U,	// C_LT_D64
    6585U,	// C_LT_S
    4740U,	// C_NGE_D32
    4740U,	// C_NGE_D64
    6384U,	// C_NGE_S
    4757U,	// C_NGLE_D32
    4757U,	// C_NGLE_D64
    6401U,	// C_NGLE_S
    4867U,	// C_NGL_D32
    4867U,	// C_NGL_D64
    6511U,	// C_NGL_S
    4941U,	// C_NGT_D32
    4941U,	// C_NGT_D64
    6576U,	// C_NGT_S
    4767U,	// C_OLE_D32
    4767U,	// C_OLE_D64
    6411U,	// C_OLE_S
    4958U,	// C_OLT_D32
    4958U,	// C_OLT_D64
    6593U,	// C_OLT_S
    4907U,	// C_SEQ_D32
    4907U,	// C_SEQ_D64
    6551U,	// C_SEQ_S
    4792U,	// C_SF_D32
    4792U,	// C_SF_D64
    6436U,	// C_SF_S
    4916U,	// C_UEQ_D32
    4916U,	// C_UEQ_D64
    6560U,	// C_UEQ_S
    4776U,	// C_ULE_D32
    4776U,	// C_ULE_D64
    6420U,	// C_ULE_S
    4967U,	// C_ULT_D32
    4967U,	// C_ULT_D64
    6602U,	// C_ULT_S
    4883U,	// C_UN_D32
    4883U,	// C_UN_D64
    6527U,	// C_UN_S
    6108U,	// CmpRxRy16
    25171632U,	// CmpiRxImm16
    5808U,	// CmpiRxImmX16
    105679U,	// Constant32
    4199381U,	// DADD
    4200079U,	// DADDi
    4201072U,	// DADDiu
    4201053U,	// DADDu
    6067U,	// DCLO
    7231U,	// DCLZ
    3406U,	// DERET
    205528299U,	// DEXT
    205528286U,	// DEXTM
    205528312U,	// DEXTU
    104082U,	// DI
    205528293U,	// DINS
    205528279U,	// DINSM
    205528305U,	// DINSU
    71307273U,	// DMFC0_3OP64
    4137U,	// DMFC1
    71307413U,	// DMFC2_3OP64
    12304U,	// DMTC0_3OP64
    139318U,	// DMTC1
    12444U,	// DMTC2_3OP64
    6712U,	// DMULT
    6789U,	// DMULTu
    4199932U,	// DPAQX_SA_W_PH
    4200015U,	// DPAQX_S_W_PH
    4201269U,	// DPAQ_SA_L_W
    4199974U,	// DPAQ_S_W_PH
    4200184U,	// DPAU_H_QBL
    4200480U,	// DPAU_H_QBR
    4200053U,	// DPAX_W_PH
    4199922U,	// DPA_W_PH
    4199947U,	// DPSQX_SA_W_PH
    4200029U,	// DPSQX_S_W_PH
    4201282U,	// DPSQ_SA_L_W
    4200002U,	// DPSQ_S_W_PH
    4200196U,	// DPSU_H_QBL
    4200492U,	// DPSU_H_QBR
    4200064U,	// DPSX_W_PH
    4200043U,	// DPS_W_PH
    4200637U,	// DROTR
    4201159U,	// DROTRV
    5202U,	// DSBH
    7344U,	// DSDIV
    5089U,	// DSHD
    4200330U,	// DSLL
    4198533U,	// DSLL32
    29366154U,	// DSLL64_32
    4201121U,	// DSLLV
    4198629U,	// DSRA
    4198515U,	// DSRA32
    4201106U,	// DSRAV
    4200336U,	// DSRL
    4198541U,	// DSRL32
    4201128U,	// DSRLV
    4201039U,	// DSUBu
    7330U,	// DUDIV
    7345U,	// DivRxRy16
    7331U,	// DivuRxRy16
    104092U,	// EI
    3407U,	// ERET
    205528300U,	// EXT
    71309328U,	// EXTP
    71309260U,	// EXTPDP
    4201143U,	// EXTPDPV
    4201152U,	// EXTPV
    4201459U,	// EXTRV_RS_W
    4201348U,	// EXTRV_R_W
    4199489U,	// EXTRV_S_H
    4201477U,	// EXTRV_W
    71310312U,	// EXTR_RS_W
    71310191U,	// EXTR_R_W
    71308343U,	// EXTR_S_H
    71310223U,	// EXTR_W
    0U,	// ExtractElementF64
    4934U,	// FABS_D32
    4934U,	// FABS_D64
    6569U,	// FABS_S
    4199031U,	// FADD_D32
    4199031U,	// FADD_D64
    4200681U,	// FADD_S
    183551U,	// FCMP_D32
    183551U,	// FCMP_D64
    216319U,	// FCMP_S32
    4199302U,	// FDIV_D32
    4199302U,	// FDIV_D64
    4200931U,	// FDIV_S
    4847U,	// FLOOR_L_D64
    6491U,	// FLOOR_L_S
    5044U,	// FLOOR_W_D32
    5044U,	// FLOOR_W_D64
    6673U,	// FLOOR_W_S
    5005U,	// FMOV_D32
    5005U,	// FMOV_D64
    6634U,	// FMOV_S
    4199180U,	// FMUL_D32
    4199180U,	// FMUL_D64
    4200824U,	// FMUL_S
    4808U,	// FNEG_D32
    4808U,	// FNEG_D64
    6452U,	// FNEG_S
    4976U,	// FSQRT_D32
    4976U,	// FSQRT_D64
    6611U,	// FSQRT_S
    4199022U,	// FSUB_D32
    4199022U,	// FSUB_D64
    4200663U,	// FSUB_S
    205528294U,	// INS
    531151U,	// INSV
    104135U,	// J
    104163U,	// JAL
    6317U,	// JALR
    6317U,	// JALR64
    0U,	// JALR64Pseudo
    0U,	// JALRPseudo
    104617U,	// JR
    104617U,	// JR64
    235235U,	// Jal16
    3392U,	// JrRa16
    3383U,	// JrcRa16
    105572U,	// JrcRx16
    102401U,	// JumpLinkReg16
    1577212U,	// LB
    1577212U,	// LB64
    1577212U,	// LB64_P8
    34085915U,	// LBUX
    1577212U,	// LB_MM
    1577212U,	// LB_MM_P8
    1577212U,	// LB_P8
    1579594U,	// LBu
    1579594U,	// LBu64
    1579594U,	// LBu64_P8
    1579594U,	// LBu_MM
    1579594U,	// LBu_MM_P8
    1579594U,	// LBu_P8
    1577960U,	// LD
    1576983U,	// LDC1
    1576983U,	// LDC164
    1576983U,	// LDC164_P8
    1578815U,	// LDL
    1578815U,	// LDL_P8
    1579111U,	// LDR
    1579111U,	// LDR_P8
    34082889U,	// LDXC1
    34082889U,	// LDXC164
    34082889U,	// LDXC164_P8
    1577195U,	// LD_B
    1577598U,	// LD_D
    1578033U,	// LD_H
    1577960U,	// LD_P8
    1579742U,	// LD_W
    1055345U,	// LEA_ADDiu
    1055344U,	// LEA_ADDiu64
    1578083U,	// LH
    1578083U,	// LH64
    1578083U,	// LH64_P8
    34085910U,	// LHX
    1578083U,	// LH_MM
    1578083U,	// LH_MM_P8
    1578083U,	// LH_P8
    1579627U,	// LHu
    1579627U,	// LHu64
    1579627U,	// LHu64_P8
    1579627U,	// LHu_MM
    1579627U,	// LHu_MM_P8
    1579627U,	// LHu_P8
    1578886U,	// LL
    1577959U,	// LLD
    1577959U,	// LLD_P8
    1578886U,	// LL_P8
    1576967U,	// LOAD_ACC128
    1576967U,	// LOAD_ACC128_P8
    1576967U,	// LOAD_ACC64
    1576967U,	// LOAD_ACC64DSP
    1576967U,	// LOAD_ACC64DSP_P8
    1576967U,	// LOAD_ACC64_P8
    1578977U,	// LOAD_CCOND_DSP
    1578977U,	// LOAD_CCOND_DSP_P8
    34082903U,	// LUXC1
    34082903U,	// LUXC164
    2102978U,	// LUi
    2102978U,	// LUi64
    2102978U,	// LUi_MM
    1580046U,	// LW
    1580046U,	// LW64
    1580046U,	// LW64_P8
    1577021U,	// LWC1
    1577021U,	// LWC1_P8
    1578907U,	// LWL
    1578907U,	// LWL64
    1578907U,	// LWL64_P8
    1578907U,	// LWL_MM
    1578907U,	// LWL_P8
    1579211U,	// LWR
    1579211U,	// LWR64
    1579211U,	// LWR64_P8
    1579211U,	// LWR_MM
    1579211U,	// LWR_P8
    34085921U,	// LWX
    34082917U,	// LWXC1
    34082917U,	// LWXC1_P8
    1580046U,	// LW_MM
    1580046U,	// LW_MM_P8
    1580046U,	// LW_P8
    1579661U,	// LWu
    1579661U,	// LWu_P8
    1577212U,	// LbRxRyOffMemX16
    1579594U,	// LbuRxRyOffMemX16
    1578083U,	// LhRxRyOffMemX16
    1579627U,	// LhuRxRyOffMemX16
    25171628U,	// LiRxImm16
    5804U,	// LiRxImmX16
    4271U,	// LoadAddr32Imm
    1577135U,	// LoadAddr32Reg
    5804U,	// LoadImm32Reg
    269326U,	// LwConstant32
    1580046U,	// LwRxRyOffMemX16
    38280206U,	// LwRxSpImmX16
    5083U,	// MADD
    6756U,	// MADDU
    4201060U,	// MADDU_DSP
    138416758U,	// MADD_D32
    138416758U,	// MADD_D64
    4199387U,	// MADD_DSP
    138418408U,	// MADD_S
    4200265U,	// MAQ_SA_W_PHL
    4200561U,	// MAQ_SA_W_PHR
    4200293U,	// MAQ_S_W_PHL
    4200589U,	// MAQ_S_W_PHR
    71307274U,	// MFC0_3OP
    4138U,	// MFC1
    71307414U,	// MFC2_3OP
    104096U,	// MFHI
    104096U,	// MFHI64
    5792U,	// MFHI_DSP
    104377U,	// MFLO
    104377U,	// MFLO64
    6073U,	// MFLO_DSP
    0U,	// MIPSeh_return32
    0U,	// MIPSeh_return64
    4198992U,	// MODSUB
    4199104U,	// MOVF_D32
    4199104U,	// MOVF_D64
    4199462U,	// MOVF_I
    4199462U,	// MOVF_I64
    4200748U,	// MOVF_S
    4199195U,	// MOVN_I64_D64
    4200365U,	// MOVN_I64_I
    4200365U,	// MOVN_I64_I64
    4200839U,	// MOVN_I64_S
    4199195U,	// MOVN_I_D32
    4199195U,	// MOVN_I_D64
    4200365U,	// MOVN_I_I
    4200365U,	// MOVN_I_I64
    4200839U,	// MOVN_I_S
    4199294U,	// MOVT_D32
    4199294U,	// MOVT_D64
    4201028U,	// MOVT_I
    4201028U,	// MOVT_I64
    4200923U,	// MOVT_S
    4199368U,	// MOVZ_I64_D64
    4201566U,	// MOVZ_I64_I
    4201566U,	// MOVZ_I64_I64
    4200997U,	// MOVZ_I64_S
    4199368U,	// MOVZ_I_D32
    4199368U,	// MOVZ_I_D64
    4201566U,	// MOVZ_I_I
    4201566U,	// MOVZ_I_I64
    4200997U,	// MOVZ_I_S
    4696U,	// MSUB
    6742U,	// MSUBU
    4201046U,	// MSUBU_DSP
    138416749U,	// MSUB_D32
    138416749U,	// MSUB_D64
    4199000U,	// MSUB_DSP
    138418390U,	// MSUB_S
    12305U,	// MTC0_3OP
    139319U,	// MTC1
    12445U,	// MTC2_3OP
    104102U,	// MTHI
    104102U,	// MTHI64
    140966U,	// MTHI_DSP
    141268U,	// MTHLIP
    104390U,	// MTLO
    104390U,	// MTLO64
    141254U,	// MTLO_DSP
    4200342U,	// MUL
    4200306U,	// MULEQ_S_W_PHL
    4200602U,	// MULEQ_S_W_PHR
    4200208U,	// MULEU_S_PH_QBL
    4200504U,	// MULEU_S_PH_QBR
    4199841U,	// MULQ_RS_PH
    4201437U,	// MULQ_RS_W
    4199785U,	// MULQ_S_PH
    4201406U,	// MULQ_S_W
    4199987U,	// MULSAQ_S_W_PH
    4199962U,	// MULSA_W_PH
    6713U,	// MULT
    4201094U,	// MULTU_DSP
    4201017U,	// MULT_DSP
    6713U,	// MULT_MM
    6790U,	// MULTu
    6790U,	// MULTu_MM
    4200342U,	// MUL_MM
    4199658U,	// MUL_PH
    4199753U,	// MUL_S_PH
    104096U,	// Mfhi16
    104377U,	// Mflo16
    5146U,	// Move32R16
    5146U,	// MoveR3216
    6713U,	// MultRxRy16
    2927161U,	// MultRxRyRz16
    6790U,	// MultuRxRy16
    2927238U,	// MultuRxRyRz16
    138416757U,	// NMADD_D32
    138416757U,	// NMADD_D64
    138418407U,	// NMADD_S
    138416748U,	// NMSUB_D32
    138416748U,	// NMSUB_D64
    138418389U,	// NMSUB_S
    0U,	// NOP
    4200627U,	// NOR
    4200627U,	// NOR64
    4200627U,	// NOR_MM
    5164U,	// NegRxRy16
    6719U,	// NotRxRy16
    4200628U,	// OR
    4200628U,	// OR64
    4200628U,	// OR_MM
    71308983U,	// ORi
    71308983U,	// ORi64
    71308983U,	// ORi_MM
    530612U,	// OrRxRxRy16
    4199647U,	// PACKRL_PH
    4199611U,	// PICK_PH
    4198724U,	// PICK_QB
    5935U,	// PRECEQU_PH_QBL
    4275U,	// PRECEQU_PH_QBLA
    6231U,	// PRECEQU_PH_QBR
    4308U,	// PRECEQU_PH_QBRA
    5975U,	// PRECEQ_W_PHL
    6271U,	// PRECEQ_W_PHR
    5920U,	// PRECEU_PH_QBL
    4259U,	// PRECEU_PH_QBLA
    6216U,	// PRECEU_PH_QBR
    4292U,	// PRECEU_PH_QBRA
    4199563U,	// PRECRQU_S_QB_PH
    4201204U,	// PRECRQ_PH_W
    4199536U,	// PRECRQ_QB_PH
    4201235U,	// PRECRQ_RS_PH_W
    4199550U,	// PRECR_QB_PH
    4201188U,	// PRECR_SRA_PH_W
    4201217U,	// PRECR_SRA_R_PH_W
    4199409U,	// PREPEND
    0U,	// PseudoCMPU_EQ_QB
    0U,	// PseudoCMPU_LE_QB
    0U,	// PseudoCMPU_LT_QB
    0U,	// PseudoCMP_EQ_PH
    0U,	// PseudoCMP_LE_PH
    0U,	// PseudoCMP_LT_PH
    4103U,	// PseudoCVT_D32_W
    4103U,	// PseudoCVT_D64_L
    4103U,	// PseudoCVT_D64_W
    4103U,	// PseudoCVT_S_L
    4103U,	// PseudoCVT_S_W
    0U,	// PseudoDMULT
    0U,	// PseudoDMULTu
    0U,	// PseudoDSDIV
    0U,	// PseudoDUDIV
    1576967U,	// PseudoLDC1
    0U,	// PseudoMADD
    0U,	// PseudoMADDU
    0U,	// PseudoMSUB
    0U,	// PseudoMSUBU
    0U,	// PseudoMULT
    0U,	// PseudoMULTu
    0U,	// PseudoPICK_PH
    0U,	// PseudoPICK_QB
    1576967U,	// PseudoSDC1
    0U,	// PseudoSDIV
    0U,	// PseudoUDIV
    4672U,	// RADDU_W_QB
    2103298U,	// RDDSP
    6340U,	// RDHWR
    6340U,	// RDHWR64
    5598U,	// REPLV_PH
    4652U,	// REPLV_QB
    2102477U,	// REPL_PH
    2101590U,	// REPL_QB
    104617U,	// RET
    4200638U,	// ROTR
    4201160U,	// ROTRV
    4201160U,	// ROTRV_MM
    4200638U,	// ROTR_MM
    4826U,	// ROUND_L_D64
    6470U,	// ROUND_L_S
    5023U,	// ROUND_W_D32
    5023U,	// ROUND_W_D64
    6652U,	// ROUND_W_S
    21515U,	// RestoreIncSpF16
    23658U,	// RestoreRaF16
    0U,	// RetRA
    0U,	// RetRA16
    1577548U,	// SB
    1577548U,	// SB64
    1577548U,	// SB64_P8
    1577548U,	// SB_MM
    1577548U,	// SB_MM_P8
    1577548U,	// SB_P8
    336481U,	// SC
    336848U,	// SCD
    336848U,	// SCD_P8
    336481U,	// SC_P8
    1577986U,	// SD
    1576989U,	// SDC1
    1576989U,	// SDC164
    1576989U,	// SDC164_P8
    7345U,	// SDIV
    1578820U,	// SDL
    1578820U,	// SDL_P8
    1579116U,	// SDR
    1579116U,	// SDR_P8
    34082896U,	// SDXC1
    34082896U,	// SDXC164
    34082896U,	// SDXC164_P8
    1577986U,	// SD_P8
    4343U,	// SEB
    4343U,	// SEB64
    5214U,	// SEH
    5214U,	// SEH64
    1578635U,	// SH
    1578635U,	// SH64
    1578635U,	// SH64_P8
    6079U,	// SHILO
    6831U,	// SHILOV
    4199892U,	// SHLLV_PH
    4198946U,	// SHLLV_QB
    4199829U,	// SHLLV_S_PH
    4201426U,	// SHLLV_S_W
    71308484U,	// SHLL_PH
    71307597U,	// SHLL_QB
    71308606U,	// SHLL_S_PH
    71310240U,	// SHLL_S_W
    4199882U,	// SHRAV_PH
    4198936U,	// SHRAV_QB
    4199730U,	// SHRAV_R_PH
    4198834U,	// SHRAV_R_QB
    4201337U,	// SHRAV_R_W
    71308391U,	// SHRA_PH
    71307520U,	// SHRA_QB
    71308559U,	// SHRA_R_PH
    71307663U,	// SHRA_R_QB
    71310159U,	// SHRA_R_W
    4199912U,	// SHRLV_PH
    4198966U,	// SHRLV_QB
    71308502U,	// SHRL_PH
    71307615U,	// SHRL_QB
    1578635U,	// SH_MM
    1578635U,	// SH_MM_P8
    1578635U,	// SH_P8
    4200331U,	// SLL
    41949067U,	// SLL64_32
    41949067U,	// SLL64_64
    4201122U,	// SLLV
    4201122U,	// SLLV_MM
    4200331U,	// SLL_MM
    4201011U,	// SLT
    4201011U,	// SLT64
    4201011U,	// SLT_MM
    4200124U,	// SLTi
    4200124U,	// SLTi64
    4200124U,	// SLTi_MM
    4201080U,	// SLTiu
    4201080U,	// SLTiu64
    4201080U,	// SLTiu_MM
    4201087U,	// SLTu
    4201087U,	// SLTu64
    4201087U,	// SLTu_MM
    4198630U,	// SRA
    4201107U,	// SRAV
    4201107U,	// SRAV_MM
    4198630U,	// SRA_MM
    4200337U,	// SRL
    4201129U,	// SRLV
    4201129U,	// SRLV_MM
    4200337U,	// SRL_MM
    1576967U,	// STORE_ACC128
    1576967U,	// STORE_ACC128_P8
    1576967U,	// STORE_ACC64
    1576967U,	// STORE_ACC64DSP
    1576967U,	// STORE_ACC64DSP_P8
    1576967U,	// STORE_ACC64_P8
    1578993U,	// STORE_CCOND_DSP
    1578993U,	// STORE_CCOND_DSP_P8
    1577201U,	// ST_B
    1577848U,	// ST_D
    1578060U,	// ST_H
    1580031U,	// ST_W
    4198995U,	// SUB
    4199591U,	// SUBQH_PH
    4199706U,	// SUBQH_R_PH
    4201305U,	// SUBQH_R_W
    4201251U,	// SUBQH_W
    4199666U,	// SUBQ_PH
    4199763U,	// SUBQ_S_PH
    4201386U,	// SUBQ_S_W
    4198704U,	// SUBUH_QB
    4198810U,	// SUBUH_R_QB
    4199864U,	// SUBU_PH
    4198918U,	// SUBU_QB
    4199807U,	// SUBU_S_PH
    4198857U,	// SUBU_S_QB
    4198995U,	// SUB_MM
    4201040U,	// SUBu
    4201040U,	// SUBu_MM
    34082910U,	// SUXC1
    34082910U,	// SUXC164
    1580050U,	// SW
    1580050U,	// SW64
    1580050U,	// SW64_P8
    1577027U,	// SWC1
    1577027U,	// SWC1_P8
    1578912U,	// SWL
    1578912U,	// SWL64
    1578912U,	// SWL64_P8
    1578912U,	// SWL_MM
    1578912U,	// SWL_P8
    1579216U,	// SWR
    1579216U,	// SWR64
    1579216U,	// SWR64_P8
    1579216U,	// SWR_MM
    1579216U,	// SWR_P8
    34082924U,	// SWXC1
    34082924U,	// SWXC1_P8
    1580050U,	// SW_MM
    1580050U,	// SW_MM_P8
    1580050U,	// SW_P8
    105673U,	// SYNC
    104321U,	// SYSCALL
    21524U,	// SaveDecSpF16
    23688U,	// SaveRaF16
    1577548U,	// SbRxRyOffMemX16
    388165U,	// SelBeqZ
    388146U,	// SelBneZ
    49309660U,	// SelTBteqZCmp
    49309360U,	// SelTBteqZCmpi
    49310259U,	// SelTBteqZSlt
    49309372U,	// SelTBteqZSlti
    49310328U,	// SelTBteqZSltiu
    49310335U,	// SelTBteqZSltu
    53503964U,	// SelTBtneZCmp
    53503664U,	// SelTBtneZCmpi
    53504563U,	// SelTBtneZSlt
    53503676U,	// SelTBtneZSlti
    53504632U,	// SelTBtneZSltiu
    53504639U,	// SelTBtneZSltu
    1578635U,	// ShRxRyOffMemX16
    4200331U,	// SllX16
    531106U,	// SllvRxRy16
    3975731U,	// SltCCRxRy16
    6707U,	// SltRxRy16
    3974844U,	// SltiCCRxImmX16
    25171644U,	// SltiRxImm16
    5820U,	// SltiRxImmX16
    3975800U,	// SltiuCCRxImmX16
    25172600U,	// SltiuRxImm16
    6776U,	// SltiuRxImmX16
    3975807U,	// SltuCCRxRy16
    6783U,	// SltuRxRy16
    3975807U,	// SltuRxRyRz16
    4198630U,	// SraX16
    531091U,	// SravRxRy16
    4200337U,	// SrlX16
    531113U,	// SrlvRxRy16
    4201040U,	// SubuRxRyRz16
    1580050U,	// SwRxRyOffMemX16
    38280210U,	// SwRxSpImmX16
    104135U,	// TAILCALL
    104617U,	// TAILCALL64_R
    104617U,	// TAILCALL_R
    71309339U,	// TEQ
    3400U,	// TRAP
    4815U,	// TRUNC_L_D64
    6459U,	// TRUNC_L_S
    5012U,	// TRUNC_W_D32
    5012U,	// TRUNC_W_D64
    6641U,	// TRUNC_W_S
    7331U,	// UDIV
    2103305U,	// WRDSP
    5208U,	// WSBH
    4200632U,	// XOR
    4200632U,	// XOR64
    4200632U,	// XOR_MM
    71308982U,	// XORi
    71308982U,	// XORi64
    71308982U,	// XORi_MM
    530616U,	// XorRxRxRy16
    0U
  };

  const char AsmStrs[] = {
  /* 0 */ 'j', 'a', 'l', 'r', 'c', 32, 9, 0,
  /* 8 */ 'd', 'm', 'f', 'c', '0', 9, 0,
  /* 15 */ 'd', 'm', 't', 'c', '0', 9, 0,
  /* 22 */ 'l', 'd', 'c', '1', 9, 0,
  /* 28 */ 's', 'd', 'c', '1', 9, 0,
  /* 34 */ 'c', 'f', 'c', '1', 9, 0,
  /* 40 */ 'd', 'm', 'f', 'c', '1', 9, 0,
  /* 47 */ 'c', 't', 'c', '1', 9, 0,
  /* 53 */ 'd', 'm', 't', 'c', '1', 9, 0,
  /* 60 */ 'l', 'w', 'c', '1', 9, 0,
  /* 66 */ 's', 'w', 'c', '1', 9, 0,
  /* 72 */ 'l', 'd', 'x', 'c', '1', 9, 0,
  /* 79 */ 's', 'd', 'x', 'c', '1', 9, 0,
  /* 86 */ 'l', 'u', 'x', 'c', '1', 9, 0,
  /* 93 */ 's', 'u', 'x', 'c', '1', 9, 0,
  /* 100 */ 'l', 'w', 'x', 'c', '1', 9, 0,
  /* 107 */ 's', 'w', 'x', 'c', '1', 9, 0,
  /* 114 */ 'd', 's', 'r', 'a', '3', '2', 9, 0,
  /* 122 */ 'b', 'p', 'o', 's', 'g', 'e', '3', '2', 9, 0,
  /* 132 */ 'd', 's', 'l', 'l', '3', '2', 9, 0,
  /* 140 */ 'd', 's', 'r', 'l', '3', '2', 9, 0,
  /* 148 */ 'd', 'm', 'f', 'c', '2', 9, 0,
  /* 155 */ 'd', 'm', 't', 'c', '2', 9, 0,
  /* 162 */ 'p', 'r', 'e', 'c', 'e', 'u', '.', 'p', 'h', '.', 'q', 'b', 'l', 'a', 9, 0,
  /* 178 */ 'p', 'r', 'e', 'c', 'e', 'q', 'u', '.', 'p', 'h', '.', 'q', 'b', 'l', 'a', 9, 0,
  /* 195 */ 'p', 'r', 'e', 'c', 'e', 'u', '.', 'p', 'h', '.', 'q', 'b', 'r', 'a', 9, 0,
  /* 211 */ 'p', 'r', 'e', 'c', 'e', 'q', 'u', '.', 'p', 'h', '.', 'q', 'b', 'r', 'a', 9, 0,
  /* 228 */ 'd', 's', 'r', 'a', 9, 0,
  /* 234 */ 'l', 'd', '.', 'b', 9, 0,
  /* 240 */ 's', 't', '.', 'b', 9, 0,
  /* 246 */ 's', 'e', 'b', 9, 0,
  /* 251 */ 'l', 'b', 9, 0,
  /* 255 */ 's', 'h', 'r', 'a', '.', 'q', 'b', 9, 0,
  /* 264 */ 'c', 'm', 'p', 'g', 'd', 'u', '.', 'l', 'e', '.', 'q', 'b', 9, 0,
  /* 278 */ 'c', 'm', 'p', 'g', 'u', '.', 'l', 'e', '.', 'q', 'b', 9, 0,
  /* 291 */ 'c', 'm', 'p', 'u', '.', 'l', 'e', '.', 'q', 'b', 9, 0,
  /* 303 */ 's', 'u', 'b', 'u', 'h', '.', 'q', 'b', 9, 0,
  /* 313 */ 'a', 'd', 'd', 'u', 'h', '.', 'q', 'b', 9, 0,
  /* 323 */ 'p', 'i', 'c', 'k', '.', 'q', 'b', 9, 0,
  /* 332 */ 's', 'h', 'l', 'l', '.', 'q', 'b', 9, 0,
  /* 341 */ 'r', 'e', 'p', 'l', '.', 'q', 'b', 9, 0,
  /* 350 */ 's', 'h', 'r', 'l', '.', 'q', 'b', 9, 0,
  /* 359 */ 'c', 'm', 'p', 'g', 'd', 'u', '.', 'e', 'q', '.', 'q', 'b', 9, 0,
  /* 373 */ 'c', 'm', 'p', 'g', 'u', '.', 'e', 'q', '.', 'q', 'b', 9, 0,
  /* 386 */ 'c', 'm', 'p', 'u', '.', 'e', 'q', '.', 'q', 'b', 9, 0,
  /* 398 */ 's', 'h', 'r', 'a', '_', 'r', '.', 'q', 'b', 9, 0,
  /* 409 */ 's', 'u', 'b', 'u', 'h', '_', 'r', '.', 'q', 'b', 9, 0,
  /* 421 */ 'a', 'd', 'd', 'u', 'h', '_', 'r', '.', 'q', 'b', 9, 0,
  /* 433 */ 's', 'h', 'r', 'a', 'v', '_', 'r', '.', 'q', 'b', 9, 0,
  /* 445 */ 'a', 'b', 's', 'q', '_', 's', '.', 'q', 'b', 9, 0,
  /* 456 */ 's', 'u', 'b', 'u', '_', 's', '.', 'q', 'b', 9, 0,
  /* 467 */ 'a', 'd', 'd', 'u', '_', 's', '.', 'q', 'b', 9, 0,
  /* 478 */ 'c', 'm', 'p', 'g', 'd', 'u', '.', 'l', 't', '.', 'q', 'b', 9, 0,
  /* 492 */ 'c', 'm', 'p', 'g', 'u', '.', 'l', 't', '.', 'q', 'b', 9, 0,
  /* 505 */ 'c', 'm', 'p', 'u', '.', 'l', 't', '.', 'q', 'b', 9, 0,
  /* 517 */ 's', 'u', 'b', 'u', '.', 'q', 'b', 9, 0,
  /* 526 */ 'a', 'd', 'd', 'u', '.', 'q', 'b', 9, 0,
  /* 535 */ 's', 'h', 'r', 'a', 'v', '.', 'q', 'b', 9, 0,
  /* 545 */ 's', 'h', 'l', 'l', 'v', '.', 'q', 'b', 9, 0,
  /* 555 */ 'r', 'e', 'p', 'l', 'v', '.', 'q', 'b', 9, 0,
  /* 565 */ 's', 'h', 'r', 'l', 'v', '.', 'q', 'b', 9, 0,
  /* 575 */ 'r', 'a', 'd', 'd', 'u', '.', 'w', '.', 'q', 'b', 9, 0,
  /* 587 */ 's', 'b', 9, 0,
  /* 591 */ 'm', 'o', 'd', 's', 'u', 'b', 9, 0,
  /* 599 */ 'm', 's', 'u', 'b', 9, 0,
  /* 605 */ 'a', 'd', 'd', 's', 'c', 9, 0,
  /* 612 */ 'a', 'd', 'd', 'w', 'c', 9, 0,
  /* 619 */ 'n', 'm', 's', 'u', 'b', '.', 'd', 9, 0,
  /* 628 */ 'n', 'm', 'a', 'd', 'd', '.', 'd', 9, 0,
  /* 637 */ 'l', 'd', '.', 'd', 9, 0,
  /* 643 */ 'c', '.', 'n', 'g', 'e', '.', 'd', 9, 0,
  /* 652 */ 'c', '.', 'l', 'e', '.', 'd', 9, 0,
  /* 660 */ 'c', '.', 'n', 'g', 'l', 'e', '.', 'd', 9, 0,
  /* 670 */ 'c', '.', 'o', 'l', 'e', '.', 'd', 9, 0,
  /* 679 */ 'c', '.', 'u', 'l', 'e', '.', 'd', 9, 0,
  /* 688 */ 'c', '.', 'f', '.', 'd', 9, 0,
  /* 695 */ 'c', '.', 's', 'f', '.', 'd', 9, 0,
  /* 703 */ 'm', 'o', 'v', 'f', '.', 'd', 9, 0,
  /* 711 */ 'n', 'e', 'g', '.', 'd', 9, 0,
  /* 718 */ 't', 'r', 'u', 'n', 'c', '.', 'l', '.', 'd', 9, 0,
  /* 729 */ 'r', 'o', 'u', 'n', 'd', '.', 'l', '.', 'd', 9, 0,
  /* 740 */ 'c', 'e', 'i', 'l', '.', 'l', '.', 'd', 9, 0,
  /* 750 */ 'f', 'l', 'o', 'o', 'r', '.', 'l', '.', 'd', 9, 0,
  /* 761 */ 'c', 'v', 't', '.', 'l', '.', 'd', 9, 0,
  /* 770 */ 'c', '.', 'n', 'g', 'l', '.', 'd', 9, 0,
  /* 779 */ 'm', 'u', 'l', '.', 'd', 9, 0,
  /* 786 */ 'c', '.', 'u', 'n', '.', 'd', 9, 0,
  /* 794 */ 'm', 'o', 'v', 'n', '.', 'd', 9, 0,
  /* 802 */ 'c', '.', 'e', 'q', '.', 'd', 9, 0,
  /* 810 */ 'c', '.', 's', 'e', 'q', '.', 'd', 9, 0,
  /* 819 */ 'c', '.', 'u', 'e', 'q', '.', 'd', 9, 0,
  /* 828 */ 'c', 'v', 't', '.', 's', '.', 'd', 9, 0,
  /* 837 */ 'a', 'b', 's', '.', 'd', 9, 0,
  /* 844 */ 'c', '.', 'n', 'g', 't', '.', 'd', 9, 0,
  /* 853 */ 'c', '.', 'l', 't', '.', 'd', 9, 0,
  /* 861 */ 'c', '.', 'o', 'l', 't', '.', 'd', 9, 0,
  /* 870 */ 'c', '.', 'u', 'l', 't', '.', 'd', 9, 0,
  /* 879 */ 's', 'q', 'r', 't', '.', 'd', 9, 0,
  /* 887 */ 's', 't', '.', 'd', 9, 0,
  /* 893 */ 'm', 'o', 'v', 't', '.', 'd', 9, 0,
  /* 901 */ 'd', 'i', 'v', '.', 'd', 9, 0,
  /* 908 */ 'm', 'o', 'v', '.', 'd', 9, 0,
  /* 915 */ 't', 'r', 'u', 'n', 'c', '.', 'w', '.', 'd', 9, 0,
  /* 926 */ 'r', 'o', 'u', 'n', 'd', '.', 'w', '.', 'd', 9, 0,
  /* 937 */ 'c', 'e', 'i', 'l', '.', 'w', '.', 'd', 9, 0,
  /* 947 */ 'f', 'l', 'o', 'o', 'r', '.', 'w', '.', 'd', 9, 0,
  /* 958 */ 'c', 'v', 't', '.', 'w', '.', 'd', 9, 0,
  /* 967 */ 'm', 'o', 'v', 'z', '.', 'd', 9, 0,
  /* 975 */ 's', 'c', 'd', 9, 0,
  /* 980 */ 'd', 'a', 'd', 'd', 9, 0,
  /* 986 */ 'm', 'a', 'd', 'd', 9, 0,
  /* 992 */ 'd', 's', 'h', 'd', 9, 0,
  /* 998 */ 'l', 'l', 'd', 9, 0,
  /* 1003 */ 'a', 'n', 'd', 9, 0,
  /* 1008 */ 'p', 'r', 'e', 'p', 'e', 'n', 'd', 9, 0,
  /* 1017 */ 'a', 'p', 'p', 'e', 'n', 'd', 9, 0,
  /* 1025 */ 's', 'd', 9, 0,
  /* 1029 */ 'b', 'n', 'e', 9, 0,
  /* 1034 */ 'r', 'e', 's', 't', 'o', 'r', 'e', 9, 0,
  /* 1043 */ 's', 'a', 'v', 'e', 9, 0,
  /* 1049 */ 'm', 'o', 'v', 'e', 9, 0,
  /* 1055 */ 'b', 'c', '1', 'f', 9, 0,
  /* 1061 */ 'm', 'o', 'v', 'f', 9, 0,
  /* 1067 */ 'n', 'e', 'g', 9, 0,
  /* 1072 */ 'l', 'd', '.', 'h', 9, 0,
  /* 1078 */ 'e', 'x', 't', 'r', '_', 's', '.', 'h', 9, 0,
  /* 1088 */ 'e', 'x', 't', 'r', 'v', '_', 's', '.', 'h', 9, 0,
  /* 1099 */ 's', 't', '.', 'h', 9, 0,
  /* 1105 */ 'd', 's', 'b', 'h', 9, 0,
  /* 1111 */ 'w', 's', 'b', 'h', 9, 0,
  /* 1117 */ 's', 'e', 'h', 9, 0,
  /* 1122 */ 'l', 'h', 9, 0,
  /* 1126 */ 's', 'h', 'r', 'a', '.', 'p', 'h', 9, 0,
  /* 1135 */ 'p', 'r', 'e', 'c', 'r', 'q', '.', 'q', 'b', '.', 'p', 'h', 9, 0,
  /* 1149 */ 'p', 'r', 'e', 'c', 'r', '.', 'q', 'b', '.', 'p', 'h', 9, 0,
  /* 1162 */ 'p', 'r', 'e', 'c', 'r', 'q', 'u', '_', 's', '.', 'q', 'b', '.', 'p', 'h', 9, 0,
  /* 1179 */ 'c', 'm', 'p', '.', 'l', 'e', '.', 'p', 'h', 9, 0,
  /* 1190 */ 's', 'u', 'b', 'q', 'h', '.', 'p', 'h', 9, 0,
  /* 1200 */ 'a', 'd', 'd', 'q', 'h', '.', 'p', 'h', 9, 0,
  /* 1210 */ 'p', 'i', 'c', 'k', '.', 'p', 'h', 9, 0,
  /* 1219 */ 's', 'h', 'l', 'l', '.', 'p', 'h', 9, 0,
  /* 1228 */ 'r', 'e', 'p', 'l', '.', 'p', 'h', 9, 0,
  /* 1237 */ 's', 'h', 'r', 'l', '.', 'p', 'h', 9, 0,
  /* 1246 */ 'p', 'a', 'c', 'k', 'r', 'l', '.', 'p', 'h', 9, 0,
  /* 1257 */ 'm', 'u', 'l', '.', 'p', 'h', 9, 0,
  /* 1265 */ 's', 'u', 'b', 'q', '.', 'p', 'h', 9, 0,
  /* 1274 */ 'a', 'd', 'd', 'q', '.', 'p', 'h', 9, 0,
  /* 1283 */ 'c', 'm', 'p', '.', 'e', 'q', '.', 'p', 'h', 9, 0,
  /* 1294 */ 's', 'h', 'r', 'a', '_', 'r', '.', 'p', 'h', 9, 0,
  /* 1305 */ 's', 'u', 'b', 'q', 'h', '_', 'r', '.', 'p', 'h', 9, 0,
  /* 1317 */ 'a', 'd', 'd', 'q', 'h', '_', 'r', '.', 'p', 'h', 9, 0,
  /* 1329 */ 's', 'h', 'r', 'a', 'v', '_', 'r', '.', 'p', 'h', 9, 0,
  /* 1341 */ 's', 'h', 'l', 'l', '_', 's', '.', 'p', 'h', 9, 0,
  /* 1352 */ 'm', 'u', 'l', '_', 's', '.', 'p', 'h', 9, 0,
  /* 1362 */ 's', 'u', 'b', 'q', '_', 's', '.', 'p', 'h', 9, 0,
  /* 1373 */ 'a', 'd', 'd', 'q', '_', 's', '.', 'p', 'h', 9, 0,
  /* 1384 */ 'm', 'u', 'l', 'q', '_', 's', '.', 'p', 'h', 9, 0,
  /* 1395 */ 'a', 'b', 's', 'q', '_', 's', '.', 'p', 'h', 9, 0,
  /* 1406 */ 's', 'u', 'b', 'u', '_', 's', '.', 'p', 'h', 9, 0,
  /* 1417 */ 'a', 'd', 'd', 'u', '_', 's', '.', 'p', 'h', 9, 0,
  /* 1428 */ 's', 'h', 'l', 'l', 'v', '_', 's', '.', 'p', 'h', 9, 0,
  /* 1440 */ 'm', 'u', 'l', 'q', '_', 'r', 's', '.', 'p', 'h', 9, 0,
  /* 1452 */ 'c', 'm', 'p', '.', 'l', 't', '.', 'p', 'h', 9, 0,
  /* 1463 */ 's', 'u', 'b', 'u', '.', 'p', 'h', 9, 0,
  /* 1472 */ 'a', 'd', 'd', 'u', '.', 'p', 'h', 9, 0,
  /* 1481 */ 's', 'h', 'r', 'a', 'v', '.', 'p', 'h', 9, 0,
  /* 1491 */ 's', 'h', 'l', 'l', 'v', '.', 'p', 'h', 9, 0,
  /* 1501 */ 'r', 'e', 'p', 'l', 'v', '.', 'p', 'h', 9, 0,
  /* 1511 */ 's', 'h', 'r', 'l', 'v', '.', 'p', 'h', 9, 0,
  /* 1521 */ 'd', 'p', 'a', '.', 'w', '.', 'p', 'h', 9, 0,
  /* 1531 */ 'd', 'p', 'a', 'q', 'x', '_', 's', 'a', '.', 'w', '.', 'p', 'h', 9, 0,
  /* 1546 */ 'd', 'p', 's', 'q', 'x', '_', 's', 'a', '.', 'w', '.', 'p', 'h', 9, 0,
  /* 1561 */ 'm', 'u', 'l', 's', 'a', '.', 'w', '.', 'p', 'h', 9, 0,
  /* 1573 */ 'd', 'p', 'a', 'q', '_', 's', '.', 'w', '.', 'p', 'h', 9, 0,
  /* 1586 */ 'm', 'u', 'l', 's', 'a', 'q', '_', 's', '.', 'w', '.', 'p', 'h', 9, 0,
  /* 1601 */ 'd', 'p', 's', 'q', '_', 's', '.', 'w', '.', 'p', 'h', 9, 0,
  /* 1614 */ 'd', 'p', 'a', 'q', 'x', '_', 's', '.', 'w', '.', 'p', 'h', 9, 0,
  /* 1628 */ 'd', 'p', 's', 'q', 'x', '_', 's', '.', 'w', '.', 'p', 'h', 9, 0,
  /* 1642 */ 'd', 'p', 's', '.', 'w', '.', 'p', 'h', 9, 0,
  /* 1652 */ 'd', 'p', 'a', 'x', '.', 'w', '.', 'p', 'h', 9, 0,
  /* 1663 */ 'd', 'p', 's', 'x', '.', 'w', '.', 'p', 'h', 9, 0,
  /* 1674 */ 's', 'h', 9, 0,
  /* 1678 */ 'd', 'a', 'd', 'd', 'i', 9, 0,
  /* 1685 */ 'a', 'n', 'd', 'i', 9, 0,
  /* 1691 */ 'e', 'i', 9, 0,
  /* 1695 */ 'm', 'f', 'h', 'i', 9, 0,
  /* 1701 */ 'm', 't', 'h', 'i', 9, 0,
  /* 1707 */ 'l', 'i', 9, 0,
  /* 1711 */ 'c', 'm', 'p', 'i', 9, 0,
  /* 1717 */ 'x', 'o', 'r', 'i', 9, 0,
  /* 1723 */ 's', 'l', 't', 'i', 9, 0,
  /* 1729 */ 'l', 'u', 'i', 9, 0,
  /* 1734 */ 'j', 9, 0,
  /* 1737 */ 'b', 'r', 'e', 'a', 'k', 9, 0,
  /* 1744 */ 'c', 'v', 't', '.', 'd', '.', 'l', 9, 0,
  /* 1753 */ 'c', 'v', 't', '.', 's', '.', 'l', 9, 0,
  /* 1762 */ 'j', 'a', 'l', 9, 0,
  /* 1767 */ 'b', 'g', 'e', 'z', 'a', 'l', 9, 0,
  /* 1775 */ 'b', 'l', 't', 'z', 'a', 'l', 9, 0,
  /* 1783 */ 'd', 'p', 'a', 'u', '.', 'h', '.', 'q', 'b', 'l', 9, 0,
  /* 1795 */ 'd', 'p', 's', 'u', '.', 'h', '.', 'q', 'b', 'l', 9, 0,
  /* 1807 */ 'm', 'u', 'l', 'e', 'u', '_', 's', '.', 'p', 'h', '.', 'q', 'b', 'l', 9, 0,
  /* 1823 */ 'p', 'r', 'e', 'c', 'e', 'u', '.', 'p', 'h', '.', 'q', 'b', 'l', 9, 0,
  /* 1838 */ 'p', 'r', 'e', 'c', 'e', 'q', 'u', '.', 'p', 'h', '.', 'q', 'b', 'l', 9, 0,
  /* 1854 */ 'l', 'd', 'l', 9, 0,
  /* 1859 */ 's', 'd', 'l', 9, 0,
  /* 1864 */ 'm', 'a', 'q', '_', 's', 'a', '.', 'w', '.', 'p', 'h', 'l', 9, 0,
  /* 1878 */ 'p', 'r', 'e', 'c', 'e', 'q', '.', 'w', '.', 'p', 'h', 'l', 9, 0,
  /* 1892 */ 'm', 'a', 'q', '_', 's', '.', 'w', '.', 'p', 'h', 'l', 9, 0,
  /* 1905 */ 'm', 'u', 'l', 'e', 'q', '_', 's', '.', 'w', '.', 'p', 'h', 'l', 9, 0,
  /* 1920 */ 's', 'y', 's', 'c', 'a', 'l', 'l', 9, 0,
  /* 1929 */ 'd', 's', 'l', 'l', 9, 0,
  /* 1935 */ 'd', 's', 'r', 'l', 9, 0,
  /* 1941 */ 'm', 'u', 'l', 9, 0,
  /* 1946 */ 'l', 'w', 'l', 9, 0,
  /* 1951 */ 's', 'w', 'l', 9, 0,
  /* 1956 */ 'b', 'a', 'l', 'i', 'g', 'n', 9, 0,
  /* 1964 */ 'm', 'o', 'v', 'n', 9, 0,
  /* 1970 */ 'd', 'c', 'l', 'o', 9, 0,
  /* 1976 */ 'm', 'f', 'l', 'o', 9, 0,
  /* 1982 */ 's', 'h', 'i', 'l', 'o', 9, 0,
  /* 1989 */ 'm', 't', 'l', 'o', 9, 0,
  /* 1995 */ 'e', 'x', 't', 'p', 'd', 'p', 9, 0,
  /* 2003 */ 'm', 't', 'h', 'l', 'i', 'p', 9, 0,
  /* 2011 */ 'c', 'm', 'p', 9, 0,
  /* 2016 */ 'l', 'o', 'a', 'd', '_', 'c', 'c', 'o', 'n', 'd', '_', 'd', 's', 'p', 9, 0,
  /* 2032 */ 's', 't', 'o', 'r', 'e', '_', 'c', 'c', 'o', 'n', 'd', '_', 'd', 's', 'p', 9, 0,
  /* 2049 */ 'r', 'd', 'd', 's', 'p', 9, 0,
  /* 2056 */ 'w', 'r', 'd', 's', 'p', 9, 0,
  /* 2063 */ 'e', 'x', 't', 'p', 9, 0,
  /* 2069 */ 'b', 'e', 'q', 9, 0,
  /* 2074 */ 't', 'e', 'q', 9, 0,
  /* 2079 */ 'd', 'p', 'a', 'u', '.', 'h', '.', 'q', 'b', 'r', 9, 0,
  /* 2091 */ 'd', 'p', 's', 'u', '.', 'h', '.', 'q', 'b', 'r', 9, 0,
  /* 2103 */ 'm', 'u', 'l', 'e', 'u', '_', 's', '.', 'p', 'h', '.', 'q', 'b', 'r', 9, 0,
  /* 2119 */ 'p', 'r', 'e', 'c', 'e', 'u', '.', 'p', 'h', '.', 'q', 'b', 'r', 9, 0,
  /* 2134 */ 'p', 'r', 'e', 'c', 'e', 'q', 'u', '.', 'p', 'h', '.', 'q', 'b', 'r', 9, 0,
  /* 2150 */ 'l', 'd', 'r', 9, 0,
  /* 2155 */ 's', 'd', 'r', 9, 0,
  /* 2160 */ 'm', 'a', 'q', '_', 's', 'a', '.', 'w', '.', 'p', 'h', 'r', 9, 0,
  /* 2174 */ 'p', 'r', 'e', 'c', 'e', 'q', '.', 'w', '.', 'p', 'h', 'r', 9, 0,
  /* 2188 */ 'm', 'a', 'q', '_', 's', '.', 'w', '.', 'p', 'h', 'r', 9, 0,
  /* 2201 */ 'm', 'u', 'l', 'e', 'q', '_', 's', '.', 'w', '.', 'p', 'h', 'r', 9, 0,
  /* 2216 */ 'j', 'r', 9, 0,
  /* 2220 */ 'j', 'a', 'l', 'r', 9, 0,
  /* 2226 */ 'n', 'o', 'r', 9, 0,
  /* 2231 */ 'x', 'o', 'r', 9, 0,
  /* 2236 */ 'd', 'r', 'o', 't', 'r', 9, 0,
  /* 2243 */ 'r', 'd', 'h', 'w', 'r', 9, 0,
  /* 2250 */ 'l', 'w', 'r', 9, 0,
  /* 2255 */ 's', 'w', 'r', 9, 0,
  /* 2260 */ 'n', 'm', 's', 'u', 'b', '.', 's', 9, 0,
  /* 2269 */ 'c', 'v', 't', '.', 'd', '.', 's', 9, 0,
  /* 2278 */ 'n', 'm', 'a', 'd', 'd', '.', 's', 9, 0,
  /* 2287 */ 'c', '.', 'n', 'g', 'e', '.', 's', 9, 0,
  /* 2296 */ 'c', '.', 'l', 'e', '.', 's', 9, 0,
  /* 2304 */ 'c', '.', 'n', 'g', 'l', 'e', '.', 's', 9, 0,
  /* 2314 */ 'c', '.', 'o', 'l', 'e', '.', 's', 9, 0,
  /* 2323 */ 'c', '.', 'u', 'l', 'e', '.', 's', 9, 0,
  /* 2332 */ 'c', '.', 'f', '.', 's', 9, 0,
  /* 2339 */ 'c', '.', 's', 'f', '.', 's', 9, 0,
  /* 2347 */ 'm', 'o', 'v', 'f', '.', 's', 9, 0,
  /* 2355 */ 'n', 'e', 'g', '.', 's', 9, 0,
  /* 2362 */ 't', 'r', 'u', 'n', 'c', '.', 'l', '.', 's', 9, 0,
  /* 2373 */ 'r', 'o', 'u', 'n', 'd', '.', 'l', '.', 's', 9, 0,
  /* 2384 */ 'c', 'e', 'i', 'l', '.', 'l', '.', 's', 9, 0,
  /* 2394 */ 'f', 'l', 'o', 'o', 'r', '.', 'l', '.', 's', 9, 0,
  /* 2405 */ 'c', 'v', 't', '.', 'l', '.', 's', 9, 0,
  /* 2414 */ 'c', '.', 'n', 'g', 'l', '.', 's', 9, 0,
  /* 2423 */ 'm', 'u', 'l', '.', 's', 9, 0,
  /* 2430 */ 'c', '.', 'u', 'n', '.', 's', 9, 0,
  /* 2438 */ 'm', 'o', 'v', 'n', '.', 's', 9, 0,
  /* 2446 */ 'c', '.', 'e', 'q', '.', 's', 9, 0,
  /* 2454 */ 'c', '.', 's', 'e', 'q', '.', 's', 9, 0,
  /* 2463 */ 'c', '.', 'u', 'e', 'q', '.', 's', 9, 0,
  /* 2472 */ 'a', 'b', 's', '.', 's', 9, 0,
  /* 2479 */ 'c', '.', 'n', 'g', 't', '.', 's', 9, 0,
  /* 2488 */ 'c', '.', 'l', 't', '.', 's', 9, 0,
  /* 2496 */ 'c', '.', 'o', 'l', 't', '.', 's', 9, 0,
  /* 2505 */ 'c', '.', 'u', 'l', 't', '.', 's', 9, 0,
  /* 2514 */ 's', 'q', 'r', 't', '.', 's', 9, 0,
  /* 2522 */ 'm', 'o', 'v', 't', '.', 's', 9, 0,
  /* 2530 */ 'd', 'i', 'v', '.', 's', 9, 0,
  /* 2537 */ 'm', 'o', 'v', '.', 's', 9, 0,
  /* 2544 */ 't', 'r', 'u', 'n', 'c', '.', 'w', '.', 's', 9, 0,
  /* 2555 */ 'r', 'o', 'u', 'n', 'd', '.', 'w', '.', 's', 9, 0,
  /* 2566 */ 'c', 'e', 'i', 'l', '.', 'w', '.', 's', 9, 0,
  /* 2576 */ 'f', 'l', 'o', 'o', 'r', '.', 'w', '.', 's', 9, 0,
  /* 2587 */ 'c', 'v', 't', '.', 'w', '.', 's', 9, 0,
  /* 2596 */ 'm', 'o', 'v', 'z', '.', 's', 9, 0,
  /* 2604 */ 'b', 'c', '1', 't', 9, 0,
  /* 2610 */ 's', 'l', 't', 9, 0,
  /* 2615 */ 'd', 'm', 'u', 'l', 't', 9, 0,
  /* 2622 */ 'n', 'o', 't', 9, 0,
  /* 2627 */ 'm', 'o', 'v', 't', 9, 0,
  /* 2633 */ 'l', 'b', 'u', 9, 0,
  /* 2638 */ 'd', 's', 'u', 'b', 'u', 9, 0,
  /* 2645 */ 'm', 's', 'u', 'b', 'u', 9, 0,
  /* 2652 */ 'd', 'a', 'd', 'd', 'u', 9, 0,
  /* 2659 */ 'm', 'a', 'd', 'd', 'u', 9, 0,
  /* 2666 */ 'l', 'h', 'u', 9, 0,
  /* 2671 */ 'd', 'a', 'd', 'd', 'i', 'u', 9, 0,
  /* 2679 */ 's', 'l', 't', 'i', 'u', 9, 0,
  /* 2686 */ 's', 'l', 't', 'u', 9, 0,
  /* 2692 */ 'd', 'm', 'u', 'l', 't', 'u', 9, 0,
  /* 2700 */ 'l', 'w', 'u', 9, 0,
  /* 2705 */ 'd', 's', 'r', 'a', 'v', 9, 0,
  /* 2712 */ 'b', 'i', 't', 'r', 'e', 'v', 9, 0,
  /* 2720 */ 'd', 's', 'l', 'l', 'v', 9, 0,
  /* 2727 */ 'd', 's', 'r', 'l', 'v', 9, 0,
  /* 2734 */ 's', 'h', 'i', 'l', 'o', 'v', 9, 0,
  /* 2742 */ 'e', 'x', 't', 'p', 'd', 'p', 'v', 9, 0,
  /* 2751 */ 'e', 'x', 't', 'p', 'v', 9, 0,
  /* 2758 */ 'd', 'r', 'o', 't', 'r', 'v', 9, 0,
  /* 2766 */ 'i', 'n', 's', 'v', 9, 0,
  /* 2772 */ 'c', 'v', 't', '.', 'd', '.', 'w', 9, 0,
  /* 2781 */ 'l', 'd', '.', 'w', 9, 0,
  /* 2787 */ 'p', 'r', 'e', 'c', 'r', '_', 's', 'r', 'a', '.', 'p', 'h', '.', 'w', 9, 0,
  /* 2803 */ 'p', 'r', 'e', 'c', 'r', 'q', '.', 'p', 'h', '.', 'w', 9, 0,
  /* 2816 */ 'p', 'r', 'e', 'c', 'r', '_', 's', 'r', 'a', '_', 'r', '.', 'p', 'h', '.', 'w', 9, 0,
  /* 2834 */ 'p', 'r', 'e', 'c', 'r', 'q', '_', 'r', 's', '.', 'p', 'h', '.', 'w', 9, 0,
  /* 2850 */ 's', 'u', 'b', 'q', 'h', '.', 'w', 9, 0,
  /* 2859 */ 'a', 'd', 'd', 'q', 'h', '.', 'w', 9, 0,
  /* 2868 */ 'd', 'p', 'a', 'q', '_', 's', 'a', '.', 'l', '.', 'w', 9, 0,
  /* 2881 */ 'd', 'p', 's', 'q', '_', 's', 'a', '.', 'l', '.', 'w', 9, 0,
  /* 2894 */ 's', 'h', 'r', 'a', '_', 'r', '.', 'w', 9, 0,
  /* 2904 */ 's', 'u', 'b', 'q', 'h', '_', 'r', '.', 'w', 9, 0,
  /* 2915 */ 'a', 'd', 'd', 'q', 'h', '_', 'r', '.', 'w', 9, 0,
  /* 2926 */ 'e', 'x', 't', 'r', '_', 'r', '.', 'w', 9, 0,
  /* 2936 */ 's', 'h', 'r', 'a', 'v', '_', 'r', '.', 'w', 9, 0,
  /* 2947 */ 'e', 'x', 't', 'r', 'v', '_', 'r', '.', 'w', 9, 0,
  /* 2958 */ 'e', 'x', 't', 'r', '.', 'w', 9, 0,
  /* 2966 */ 'c', 'v', 't', '.', 's', '.', 'w', 9, 0,
  /* 2975 */ 's', 'h', 'l', 'l', '_', 's', '.', 'w', 9, 0,
  /* 2985 */ 's', 'u', 'b', 'q', '_', 's', '.', 'w', 9, 0,
  /* 2995 */ 'a', 'd', 'd', 'q', '_', 's', '.', 'w', 9, 0,
  /* 3005 */ 'm', 'u', 'l', 'q', '_', 's', '.', 'w', 9, 0,
  /* 3015 */ 'a', 'b', 's', 'q', '_', 's', '.', 'w', 9, 0,
  /* 3025 */ 's', 'h', 'l', 'l', 'v', '_', 's', '.', 'w', 9, 0,
  /* 3036 */ 'm', 'u', 'l', 'q', '_', 'r', 's', '.', 'w', 9, 0,
  /* 3047 */ 'e', 'x', 't', 'r', '_', 'r', 's', '.', 'w', 9, 0,
  /* 3058 */ 'e', 'x', 't', 'r', 'v', '_', 'r', 's', '.', 'w', 9, 0,
  /* 3070 */ 's', 't', '.', 'w', 9, 0,
  /* 3076 */ 'e', 'x', 't', 'r', 'v', '.', 'w', 9, 0,
  /* 3085 */ 'l', 'w', 9, 0,
  /* 3089 */ 's', 'w', 9, 0,
  /* 3093 */ 'l', 'h', 'x', 9, 0,
  /* 3098 */ 'l', 'b', 'u', 'x', 9, 0,
  /* 3104 */ 'l', 'w', 'x', 9, 0,
  /* 3109 */ 'b', 'g', 'e', 'z', 9, 0,
  /* 3115 */ 'b', 'l', 'e', 'z', 9, 0,
  /* 3121 */ 'b', 'n', 'e', 'z', 9, 0,
  /* 3127 */ 'b', 't', 'n', 'e', 'z', 9, 0,
  /* 3134 */ 'd', 'c', 'l', 'z', 9, 0,
  /* 3140 */ 'b', 'e', 'q', 'z', 9, 0,
  /* 3146 */ 'b', 't', 'e', 'q', 'z', 9, 0,
  /* 3153 */ 'b', 'g', 't', 'z', 9, 0,
  /* 3159 */ 'b', 'l', 't', 'z', 9, 0,
  /* 3165 */ 'm', 'o', 'v', 'z', 9, 0,
  /* 3171 */ 'j', 'r', 'c', 9, 32, 0,
  /* 3177 */ 'r', 'e', 's', 't', 'o', 'r', 'e', 9, '$', 'r', 'a', ',', 32, 32, '$', 's', '0', ',', 32, '$', 's', '1', ',', 32, '$', 's', '2', ',', 32, 0,
  /* 3207 */ 's', 'a', 'v', 'e', 9, '$', 'r', 'a', ',', 32, '$', 's', '0', ',', 32, '$', 's', '1', ',', 32, '$', 's', '2', ',', 32, 0,
  /* 3233 */ 'd', 'd', 'i', 'v', 'u', 9, '$', 'z', 'e', 'r', 'o', ',', 32, 0,
  /* 3247 */ 'd', 'd', 'i', 'v', 9, '$', 'z', 'e', 'r', 'o', ',', 32, 0,
  /* 3260 */ 'a', 'd', 'd', 'i', 'u', 9, '$', 's', 'p', ',', 32, 0,
  /* 3272 */ 's', 'y', 'n', 'c', 32, 0,
  /* 3278 */ 9, '.', 'w', 'o', 'r', 'd', 32, 0,
  /* 3286 */ 'd', 'i', 'n', 's', 'm', 32, 0,
  /* 3293 */ 'd', 'e', 'x', 't', 'm', 32, 0,
  /* 3300 */ 'd', 'i', 'n', 's', 32, 0,
  /* 3306 */ 'd', 'e', 'x', 't', 32, 0,
  /* 3312 */ 'd', 'i', 'n', 's', 'u', 32, 0,
  /* 3319 */ 'd', 'e', 'x', 't', 'u', 32, 0,
  /* 3326 */ 'c', '.', 0,
  /* 3329 */ 'b', 'r', 'e', 'a', 'k', 32, '0', 0,
  /* 3337 */ 'L', 'I', 'F', 'E', 'T', 'I', 'M', 'E', '_', 'E', 'N', 'D', 0,
  /* 3350 */ 'B', 'U', 'N', 'D', 'L', 'E', 0,
  /* 3357 */ 'D', 'B', 'G', '_', 'V', 'A', 'L', 'U', 'E', 0,
  /* 3367 */ 'L', 'I', 'F', 'E', 'T', 'I', 'M', 'E', '_', 'S', 'T', 'A', 'R', 'T', 0,
  /* 3382 */ 'j', 'r', 'c', 9, 32, '$', 'r', 'a', 0,
  /* 3391 */ 'j', 'r', 9, 32, '$', 'r', 'a', 0,
  /* 3399 */ 'b', 'r', 'e', 'a', 'k', 0,
  /* 3405 */ 'd', 'e', 'r', 'e', 't', 0,
  };

  O << "\t";

  // Emit the opcode for the instruction.
  uint32_t Bits = OpInfo[MI->getOpcode()];
  assert(Bits != 0 && "Cannot print this instruction.");
  O << AsmStrs+(Bits & 4095)-1;


  // Fragment 0 encoded into 3 bits for 7 unique commands.
  switch ((Bits >> 12) & 7) {
  default:   // unreachable.
  case 0:
    // DBG_VALUE, BUNDLE, LIFETIME_START, LIFETIME_END, Break16, DERET, ERET,...
    return;
    break;
  case 1:
    // ABSQ_S_PH, ABSQ_S_QB, ABSQ_S_W, ADD, ADDQH_PH, ADDQH_R_PH, ADDQH_R_W, ...
    printOperand(MI, 0, O); 
    break;
  case 2:
    // CTC1, DMTC1, MTC1, MTHI_DSP, MTHLIP, MTLO_DSP, MultRxRyRz16, MultuRxRy...
    printOperand(MI, 1, O); 
    O << ", "; 
    break;
  case 3:
    // DMTC0_3OP64, DMTC2_3OP64, MTC0_3OP, MTC2_3OP
    printOperand(MI, 2, O); 
    O << ", "; 
    printOperand(MI, 0, O); 
    O << ", "; 
    printUnsignedImm(MI, 1, O); 
    return;
    break;
  case 4:
    // FCMP_D32, FCMP_D64, FCMP_S32
    printFCCOperand(MI, 2, O); 
    break;
  case 5:
    // RestoreIncSpF16, RestoreRaF16, SaveDecSpF16, SaveRaF16
    printUnsignedImm(MI, 0, O); 
    return;
    break;
  case 6:
    // SelBeqZ, SelBneZ, SelTBteqZCmp, SelTBteqZCmpi, SelTBteqZSlt, SelTBteqZ...
    printOperand(MI, 3, O); 
    break;
  }


  // Fragment 1 encoded into 4 bits for 12 unique commands.
  switch ((Bits >> 15) & 15) {
  default:   // unreachable.
  case 0:
    // ABSQ_S_PH, ABSQ_S_QB, ABSQ_S_W, ADD, ADDQH_PH, ADDQH_R_PH, ADDQH_R_W, ...
    O << ", "; 
    break;
  case 1:
    // AddiuRxPcImmX16
    O << ", $pc, "; 
    printOperand(MI, 1, O); 
    return;
    break;
  case 2:
    // AddiuSpImm16
    O << " # 16 bit inst"; 
    return;
    break;
  case 3:
    // AddiuSpImmX16, B, BPOSGE32, BimmX16, BteqzX16, BtnezX16, Constant32, D...
    return;
    break;
  case 4:
    // CTC1, DMTC1, MTC1, MTHI_DSP, MTHLIP, MTLO_DSP
    printOperand(MI, 0, O); 
    return;
    break;
  case 5:
    // FCMP_D32, FCMP_D64
    O << ".d\t"; 
    printOperand(MI, 0, O); 
    O << ", "; 
    printOperand(MI, 1, O); 
    return;
    break;
  case 6:
    // FCMP_S32
    O << ".s\t"; 
    printOperand(MI, 0, O); 
    O << ", "; 
    printOperand(MI, 1, O); 
    return;
    break;
  case 7:
    // Jal16
    O << "\n\tnop"; 
    return;
    break;
  case 8:
    // LwConstant32
    O << ", 1f\n\tb\t2f\n\t.align\t2\n1: \t.word\t"; 
    printOperand(MI, 1, O); 
    O << "\n2:"; 
    return;
    break;
  case 9:
    // MultRxRyRz16, MultuRxRyRz16, SltCCRxRy16, SltiCCRxImmX16, SltiuCCRxImm...
    printOperand(MI, 2, O); 
    break;
  case 10:
    // SC, SCD, SCD_P8, SC_P8
    printMemOperand(MI, 2, O); 
    return;
    break;
  case 11:
    // SelBeqZ, SelBneZ
    O << ", .+4\n\t\n\tmove "; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    return;
    break;
  }


  // Fragment 2 encoded into 3 bits for 8 unique commands.
  switch ((Bits >> 19) & 7) {
  default:   // unreachable.
  case 0:
    // ABSQ_S_PH, ABSQ_S_QB, ABSQ_S_W, ADD, ADDQH_PH, ADDQH_R_PH, ADDQH_R_W, ...
    printOperand(MI, 1, O); 
    break;
  case 1:
    // AddiuRxRxImm16, AddiuRxRxImmX16, AndRxRxRy16, INSV, LBUX, LDXC1, LDXC1...
    printOperand(MI, 2, O); 
    break;
  case 2:
    // AddiuRxRyOffMemX16, LEA_ADDiu, LEA_ADDiu64
    printMemOperandEA(MI, 1, O); 
    return;
    break;
  case 3:
    // LB, LB64, LB64_P8, LB_MM, LB_MM_P8, LB_P8, LBu, LBu64, LBu64_P8, LBu_M...
    printMemOperand(MI, 1, O); 
    return;
    break;
  case 4:
    // LUi, LUi64, LUi_MM, RDDSP, REPL_PH, REPL_QB, WRDSP
    printUnsignedImm(MI, 1, O); 
    return;
    break;
  case 5:
    // MultRxRyRz16, MultuRxRyRz16
    O << "\n\tmflo\t"; 
    printOperand(MI, 0, O); 
    return;
    break;
  case 6:
    // SelTBteqZCmp, SelTBteqZCmpi, SelTBteqZSlt, SelTBteqZSlti, SelTBteqZSlt...
    printOperand(MI, 4, O); 
    break;
  case 7:
    // SltCCRxRy16, SltiCCRxImmX16, SltiuCCRxImmX16, SltuCCRxRy16, SltuRxRyRz...
    O << "\n\tmove\t"; 
    printOperand(MI, 0, O); 
    O << ", $t8"; 
    return;
    break;
  }


  // Fragment 3 encoded into 4 bits for 13 unique commands.
  switch ((Bits >> 22) & 15) {
  default:   // unreachable.
  case 0:
    // ABSQ_S_PH, ABSQ_S_QB, ABSQ_S_W, AddiuRxImmX16, AddiuRxRxImmX16, AndRxR...
    return;
    break;
  case 1:
    // ADD, ADDQH_PH, ADDQH_R_PH, ADDQH_R_W, ADDQH_W, ADDQ_PH, ADDQ_S_PH, ADD...
    O << ", "; 
    break;
  case 2:
    // AddiuRxRxImm16
    O << "\t# 16 bit inst"; 
    return;
    break;
  case 3:
    // BeqzRxImm16, BnezRxImm16
    O << "  # 16 bit inst"; 
    return;
    break;
  case 4:
    // BteqzT8CmpX16, BteqzT8CmpiX16, BteqzT8SltX16, BteqzT8SltiX16, BteqzT8S...
    O << "\n\tbteqz\t"; 
    printOperand(MI, 2, O); 
    return;
    break;
  case 5:
    // BtnezT8CmpX16, BtnezT8CmpiX16, BtnezT8SltX16, BtnezT8SltiX16, BtnezT8S...
    O << "\n\tbtnez\t"; 
    printOperand(MI, 2, O); 
    return;
    break;
  case 6:
    // CmpiRxImm16, LiRxImm16, SltiRxImm16, SltiuRxImm16
    O << " \t# 16 bit inst"; 
    return;
    break;
  case 7:
    // DSLL64_32
    O << ", 32"; 
    return;
    break;
  case 8:
    // LBUX, LDXC1, LDXC164, LDXC164_P8, LHX, LUXC1, LUXC164, LWX, LWXC1, LWX...
    O << '('; 
    printOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 9:
    // LwRxSpImmX16, SwRxSpImmX16
    O << " ( "; 
    printOperand(MI, 1, O); 
    O << " ); "; 
    return;
    break;
  case 10:
    // SLL64_32, SLL64_64
    O << ", 0"; 
    return;
    break;
  case 11:
    // SelTBteqZCmp, SelTBteqZCmpi, SelTBteqZSlt, SelTBteqZSlti, SelTBteqZSlt...
    O << "\n\tbteqz\t.+4\n\tmove "; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    return;
    break;
  case 12:
    // SelTBtneZCmp, SelTBtneZCmpi, SelTBtneZSlt, SelTBtneZSlti, SelTBtneZSlt...
    O << "\n\tbtnez\t.+4\n\tmove "; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    return;
    break;
  }


  // Fragment 4 encoded into 1 bits for 2 unique commands.
  if ((Bits >> 26) & 1) {
    // ANDi, ANDi64, ANDi_MM, DEXT, DEXTM, DEXTU, DINS, DINSM, DINSU, DMFC0_3...
    printUnsignedImm(MI, 2, O); 
  } else {
    // ADD, ADDQH_PH, ADDQH_R_PH, ADDQH_R_W, ADDQH_W, ADDQ_PH, ADDQ_S_PH, ADD...
    printOperand(MI, 2, O); 
  }


  // Fragment 5 encoded into 1 bits for 2 unique commands.
  if ((Bits >> 27) & 1) {
    // DEXT, DEXTM, DEXTU, DINS, DINSM, DINSU, EXT, INS, MADD_D32, MADD_D64, ...
    O << ", "; 
    printOperand(MI, 3, O); 
    return;
  } else {
    // ADD, ADDQH_PH, ADDQH_R_PH, ADDQH_R_W, ADDQH_W, ADDQ_PH, ADDQ_S_PH, ADD...
    return;
  }

}


/// getRegisterName - This method is automatically generated by tblgen
/// from the register set description.  This returns the assembler name
/// for the specified register.
const char *MipsInstPrinter::getRegisterName(unsigned RegNo) {
  assert(RegNo && RegNo < 245 && "Invalid register number!");

  static const char AsmStrs[] = {
  /* 0 */ 'f', '1', '0', 0,
  /* 4 */ 'w', '1', '0', 0,
  /* 8 */ 'f', '2', '0', 0,
  /* 12 */ 'D', 'S', 'P', 'O', 'u', 't', 'F', 'l', 'a', 'g', '2', '0', 0,
  /* 25 */ 'w', '2', '0', 0,
  /* 29 */ 'f', '3', '0', 0,
  /* 33 */ 'w', '3', '0', 0,
  /* 37 */ 'a', 'c', '0', 0,
  /* 41 */ 'f', 'c', 'c', '0', 0,
  /* 46 */ 'f', '0', 0,
  /* 49 */ 'w', '0', 0,
  /* 52 */ 'f', '1', '1', 0,
  /* 56 */ 'w', '1', '1', 0,
  /* 60 */ 'f', '2', '1', 0,
  /* 64 */ 'D', 'S', 'P', 'O', 'u', 't', 'F', 'l', 'a', 'g', '2', '1', 0,
  /* 77 */ 'w', '2', '1', 0,
  /* 81 */ 'f', '3', '1', 0,
  /* 85 */ 'w', '3', '1', 0,
  /* 89 */ 'a', 'c', '1', 0,
  /* 93 */ 'f', 'c', 'c', '1', 0,
  /* 98 */ 'f', '1', 0,
  /* 101 */ 'w', '1', 0,
  /* 104 */ 'f', '1', '2', 0,
  /* 108 */ 'w', '1', '2', 0,
  /* 112 */ 'f', '2', '2', 0,
  /* 116 */ 'D', 'S', 'P', 'O', 'u', 't', 'F', 'l', 'a', 'g', '2', '2', 0,
  /* 129 */ 'w', '2', '2', 0,
  /* 133 */ 'a', 'c', '2', 0,
  /* 137 */ 'f', 'c', 'c', '2', 0,
  /* 142 */ 'f', '2', 0,
  /* 145 */ 'w', '2', 0,
  /* 148 */ 'f', '1', '3', 0,
  /* 152 */ 'w', '1', '3', 0,
  /* 156 */ 'f', '2', '3', 0,
  /* 160 */ 'D', 'S', 'P', 'O', 'u', 't', 'F', 'l', 'a', 'g', '2', '3', 0,
  /* 173 */ 'w', '2', '3', 0,
  /* 177 */ 'a', 'c', '3', 0,
  /* 181 */ 'f', 'c', 'c', '3', 0,
  /* 186 */ 'f', '3', 0,
  /* 189 */ 'w', '3', 0,
  /* 192 */ 'f', '1', '4', 0,
  /* 196 */ 'w', '1', '4', 0,
  /* 200 */ 'f', '2', '4', 0,
  /* 204 */ 'w', '2', '4', 0,
  /* 208 */ 'f', 'c', 'c', '4', 0,
  /* 213 */ 'f', '4', 0,
  /* 216 */ 'w', '4', 0,
  /* 219 */ 'f', '1', '5', 0,
  /* 223 */ 'w', '1', '5', 0,
  /* 227 */ 'f', '2', '5', 0,
  /* 231 */ 'w', '2', '5', 0,
  /* 235 */ 'f', 'c', 'c', '5', 0,
  /* 240 */ 'f', '5', 0,
  /* 243 */ 'w', '5', 0,
  /* 246 */ 'f', '1', '6', 0,
  /* 250 */ 'w', '1', '6', 0,
  /* 254 */ 'f', '2', '6', 0,
  /* 258 */ 'w', '2', '6', 0,
  /* 262 */ 'f', 'c', 'c', '6', 0,
  /* 267 */ 'f', '6', 0,
  /* 270 */ 'w', '6', 0,
  /* 273 */ 'f', '1', '7', 0,
  /* 277 */ 'w', '1', '7', 0,
  /* 281 */ 'f', '2', '7', 0,
  /* 285 */ 'w', '2', '7', 0,
  /* 289 */ 'f', 'c', 'c', '7', 0,
  /* 294 */ 'f', '7', 0,
  /* 297 */ 'w', '7', 0,
  /* 300 */ 'f', '1', '8', 0,
  /* 304 */ 'w', '1', '8', 0,
  /* 308 */ 'f', '2', '8', 0,
  /* 312 */ 'w', '2', '8', 0,
  /* 316 */ 'f', '8', 0,
  /* 319 */ 'w', '8', 0,
  /* 322 */ 'D', 'S', 'P', 'O', 'u', 't', 'F', 'l', 'a', 'g', '1', '6', '_', '1', '9', 0,
  /* 338 */ 'f', '1', '9', 0,
  /* 342 */ 'w', '1', '9', 0,
  /* 346 */ 'f', '2', '9', 0,
  /* 350 */ 'w', '2', '9', 0,
  /* 354 */ 'f', '9', 0,
  /* 357 */ 'w', '9', 0,
  /* 360 */ 'D', 'S', 'P', 'E', 'F', 'I', 0,
  /* 367 */ 'r', 'a', 0,
  /* 370 */ 'p', 'c', 0,
  /* 373 */ 'D', 'S', 'P', 'C', 'C', 'o', 'n', 'd', 0,
  /* 382 */ 'D', 'S', 'P', 'O', 'u', 't', 'F', 'l', 'a', 'g', 0,
  /* 393 */ 'h', 'i', 0,
  /* 396 */ 'l', 'o', 0,
  /* 399 */ 'z', 'e', 'r', 'o', 0,
  /* 404 */ 'f', 'p', 0,
  /* 407 */ 'g', 'p', 0,
  /* 410 */ 's', 'p', 0,
  /* 413 */ 'D', 'S', 'P', 'P', 'o', 's', 0,
  /* 420 */ 'D', 'S', 'P', 'S', 'C', 'o', 'u', 'n', 't', 0,
  /* 430 */ 'D', 'S', 'P', 'C', 'a', 'r', 'r', 'y', 0,
  };

  static const uint32_t RegAsmOffset[] = {
    54, 373, 430, 360, 382, 413, 420, 404, 407, 370, 367, 410, 399, 194, 
    221, 248, 275, 37, 89, 133, 177, 54, 46, 142, 213, 267, 316, 0, 
    104, 192, 246, 300, 8, 112, 200, 254, 308, 29, 12, 64, 116, 160, 
    46, 98, 142, 186, 213, 240, 267, 294, 316, 354, 0, 52, 104, 148, 
    192, 219, 246, 273, 300, 338, 8, 60, 112, 156, 200, 227, 254, 281, 
    308, 346, 29, 81, 41, 93, 137, 181, 208, 235, 262, 289, 2, 54, 
    106, 150, 194, 221, 248, 275, 302, 336, 1, 53, 105, 149, 193, 220, 
    247, 274, 301, 335, 9, 61, 113, 157, 201, 228, 255, 282, 309, 347, 
    30, 82, 404, 407, 37, 89, 133, 177, 347, 255, 282, 37, 89, 133, 
    177, 367, 247, 274, 301, 335, 9, 61, 113, 157, 410, 302, 336, 1, 
    53, 105, 149, 193, 220, 201, 228, 106, 150, 49, 101, 145, 189, 216, 
    243, 270, 297, 319, 357, 4, 56, 108, 152, 196, 223, 250, 277, 304, 
    342, 25, 77, 129, 173, 204, 231, 258, 285, 312, 350, 33, 85, 399, 
    194, 221, 248, 275, 37, 46, 98, 142, 186, 213, 240, 267, 294, 316, 
    354, 0, 52, 104, 148, 192, 219, 246, 273, 300, 338, 8, 60, 112, 
    156, 200, 227, 254, 281, 308, 346, 29, 81, 322, 393, 255, 282, 396, 
    247, 274, 301, 335, 9, 61, 113, 157, 302, 336, 1, 53, 105, 149, 
    193, 220, 201, 228, 106, 150, 
  };

  assert (*(AsmStrs+RegAsmOffset[RegNo-1]) &&
          "Invalid alt name index for register!");
  return AsmStrs+RegAsmOffset[RegNo-1];
}

#ifdef PRINT_ALIAS_INSTR
#undef PRINT_ALIAS_INSTR

static unsigned getMapOperandNumber(const SmallVectorImpl<std::pair<StringRef, unsigned> > &OpMap,
                                    StringRef Name) {
  for (SmallVectorImpl<std::pair<StringRef, unsigned> >::const_iterator
         I = OpMap.begin(), E = OpMap.end(); I != E; ++I)
    if (I->first == Name)
      return I->second;
  llvm_unreachable("Operand not in map!");
}

bool MipsInstPrinter::printAliasInstr(const MCInst *MI, raw_ostream &OS) {
  StringRef AsmString;
  SmallVector<std::pair<StringRef, unsigned>, 4> OpMap;
  switch (MI->getOpcode()) {
  default: return false;
  case Mips::ADDu:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == Mips::ZERO) {
      // (ADDu GPR32Opnd:$dst, GPR32Opnd:$src, ZERO)
      AsmString = "move $dst, $src";
      OpMap.push_back(std::make_pair("dst", 0));
      OpMap.push_back(std::make_pair("src", 1));
      break;
    }
    return false;
  case Mips::BREAK:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 0 &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 0) {
      // (BREAK 0, 0)
      AsmString = "break";
      break;
    }
    return false;
  case Mips::DADDu:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Mips::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(Mips::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == Mips::ZERO_64) {
      // (DADDu GPR64Opnd:$dst, GPR64Opnd:$src, ZERO_64)
      AsmString = "move $dst, $src";
      OpMap.push_back(std::make_pair("dst", 0));
      OpMap.push_back(std::make_pair("src", 1));
      break;
    }
    return false;
  case Mips::DI:
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).getReg() == Mips::ZERO) {
      // (DI ZERO)
      AsmString = "di";
      break;
    }
    return false;
  case Mips::EI:
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).getReg() == Mips::ZERO) {
      // (EI ZERO)
      AsmString = "ei";
      break;
    }
    return false;
  case Mips::SLL:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == Mips::ZERO &&
        MI->getOperand(1).getReg() == Mips::ZERO &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (SLL ZERO, ZERO, 0)
      AsmString = "nop";
      break;
    }
    return false;
  case Mips::SUB:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).getReg() == Mips::ZERO &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(2).getReg())) {
      // (SUB GPR32Opnd:$rt, ZERO, GPR32Opnd:$rs)
      AsmString = "neg $rt, $rs";
      OpMap.push_back(std::make_pair("rs", 2));
      OpMap.push_back(std::make_pair("rt", 0));
      break;
    }
    return false;
  case Mips::SUBu:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).getReg() == Mips::ZERO &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(Mips::GPR32RegClassID).contains(MI->getOperand(2).getReg())) {
      // (SUBu GPR32Opnd:$rt, ZERO, GPR32Opnd:$rs)
      AsmString = "negu $rt, $rs";
      OpMap.push_back(std::make_pair("rs", 2));
      OpMap.push_back(std::make_pair("rt", 0));
      break;
    }
    return false;
  case Mips::SYSCALL:
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 0) {
      // (SYSCALL 0)
      AsmString = "syscall";
      break;
    }
    return false;
  }

  std::pair<StringRef, StringRef> ASM = AsmString.split(' ');
  OS << '\t' << ASM.first;
  if (!ASM.second.empty()) {
    OS << '\t';
    for (StringRef::iterator
         I = ASM.second.begin(), E = ASM.second.end(); I != E; ) {
      if (*I == '$') {
        StringRef::iterator Start = ++I;
        while (I != E &&
               ((*I >= 'a' && *I <= 'z') ||
                (*I >= 'A' && *I <= 'Z') ||
                (*I >= '0' && *I <= '9') ||
                *I == '_'))
          ++I;
        StringRef Name(Start, I - Start);
        printOperand(MI, getMapOperandNumber(OpMap, Name), OS);
      } else {
        OS << *I++;
      }
    }
  }

  return true;
}

#endif // PRINT_ALIAS_INSTR
