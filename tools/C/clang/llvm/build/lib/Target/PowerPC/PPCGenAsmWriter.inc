/*===- TableGen'erated file -------------------------------------*- C++ -*-===*\
|*                                                                            *|
|*Assembly Writer Source Fragment                                             *|
|*                                                                            *|
|* Automatically generated file, do not edit!                                 *|
|*                                                                            *|
\*===----------------------------------------------------------------------===*/

/// printInstruction - This method is automatically generated by tablegen
/// from the instruction set description.
void PPCInstPrinter::printInstruction(const MCInst *MI, raw_ostream &O) {
  static const uint32_t OpInfo[] = {
    0U,	// PHI
    0U,	// INLINEASM
    0U,	// PROLOG_LABEL
    0U,	// EH_LABEL
    0U,	// GC_LABEL
    0U,	// KILL
    0U,	// EXTRACT_SUBREG
    0U,	// INSERT_SUBREG
    0U,	// IMPLICIT_DEF
    0U,	// SUBREG_TO_REG
    0U,	// COPY_TO_REGCLASS
    5268U,	// DBG_VALUE
    0U,	// REG_SEQUENCE
    0U,	// COPY
    5261U,	// BUNDLE
    5456U,	// LIFETIME_START
    5248U,	// LIFETIME_END
    9927U,	// ADD4
    8479U,	// ADD4o
    9927U,	// ADD8
    9927U,	// ADD8TLS
    8479U,	// ADD8o
    9833U,	// ADDC
    9833U,	// ADDC8
    8419U,	// ADDC8o
    8419U,	// ADDCo
    10051U,	// ADDE
    10051U,	// ADDE8
    8571U,	// ADDE8o
    8571U,	// ADDEo
    268445846U,	// ADDI
    268445846U,	// ADDI8
    268445324U,	// ADDIC
    268445324U,	// ADDIC8
    268443905U,	// ADDICo
    268446880U,	// ADDIS
    268446880U,	// ADDIS8
    5207U,	// ADDISdtprelHA
    5190U,	// ADDISgotTprelHA
    5162U,	// ADDIStlsgdHA
    5176U,	// ADDIStlsldHA
    5150U,	// ADDIStocHA
    5373U,	// ADDIdtprelL
    5336U,	// ADDItlsgdL
    5348U,	// ADDItlsldL
    5326U,	// ADDItocL
    33564496U,	// ADDME
    33564496U,	// ADDME8
    33563018U,	// ADDME8o
    33563018U,	// ADDMEo
    33564525U,	// ADDZE
    33564525U,	// ADDZE8
    33563051U,	// ADDZE8o
    33563051U,	// ADDZEo
    148754U,	// ADJCALLSTACKDOWN
    2376997U,	// ADJCALLSTACKUP
    9994U,	// AND
    9994U,	// AND8
    8533U,	// AND8o
    9841U,	// ANDC
    9841U,	// ANDC8
    8426U,	// ANDC8o
    8426U,	// ANDCo
    536880015U,	// ANDISo
    536880015U,	// ANDISo8
    536879631U,	// ANDIo
    536879631U,	// ANDIo8
    8533U,	// ANDo
    71574723U,	// ATOMIC_CMP_SWAP_I16
    71574701U,	// ATOMIC_CMP_SWAP_I32
    4624U,	// ATOMIC_CMP_SWAP_I64
    5063U,	// ATOMIC_CMP_SWAP_I8
    4821U,	// ATOMIC_LOAD_ADD_I16
    4384U,	// ATOMIC_LOAD_ADD_I32
    4564U,	// ATOMIC_LOAD_ADD_I64
    5002U,	// ATOMIC_LOAD_ADD_I8
    4864U,	// ATOMIC_LOAD_AND_I16
    4427U,	// ATOMIC_LOAD_AND_I32
    4723U,	// ATOMIC_LOAD_AND_I64
    5043U,	// ATOMIC_LOAD_AND_I8
    4842U,	// ATOMIC_LOAD_NAND_I16
    4405U,	// ATOMIC_LOAD_NAND_I32
    4585U,	// ATOMIC_LOAD_NAND_I64
    5022U,	// ATOMIC_LOAD_NAND_I8
    4923U,	// ATOMIC_LOAD_OR_I16
    4486U,	// ATOMIC_LOAD_OR_I32
    4666U,	// ATOMIC_LOAD_OR_I64
    5102U,	// ATOMIC_LOAD_OR_I8
    4800U,	// ATOMIC_LOAD_SUB_I16
    4363U,	// ATOMIC_LOAD_SUB_I32
    4543U,	// ATOMIC_LOAD_SUB_I64
    4968U,	// ATOMIC_LOAD_SUB_I8
    4902U,	// ATOMIC_LOAD_XOR_I16
    4465U,	// ATOMIC_LOAD_XOR_I32
    4645U,	// ATOMIC_LOAD_XOR_I64
    5083U,	// ATOMIC_LOAD_XOR_I8
    4885U,	// ATOMIC_SWAP_I16
    4448U,	// ATOMIC_SWAP_I32
    4607U,	// ATOMIC_SWAP_I64
    5134U,	// ATOMIC_SWAP_I8
    157059U,	// B
    165189U,	// BA
    439647U,	// BCC
    570719U,	// BCCA
    701791U,	// BCCL
    832863U,	// BCCLA
    963935U,	// BCCTR
    963935U,	// BCCTR8
    1095007U,	// BCCTRL
    1095007U,	// BCCTRL8
    1226079U,	// BCLR
    1357151U,	// BCLRL
    155725U,	// BCLalways
    5551U,	// BCTR
    5551U,	// BCTR8
    5513U,	// BCTRL
    5513U,	// BCTRL8
    159889U,	// BDNZ
    159889U,	// BDNZ8
    165240U,	// BDNZA
    163966U,	// BDNZAm
    163881U,	// BDNZAp
    158139U,	// BDNZL
    165221U,	// BDNZLA
    163950U,	// BDNZLAm
    163865U,	// BDNZLAp
    5544U,	// BDNZLR
    5544U,	// BDNZLR8
    5505U,	// BDNZLRL
    4339U,	// BDNZLRLm
    4307U,	// BDNZLRLp
    4355U,	// BDNZLRm
    4323U,	// BDNZLRp
    155789U,	// BDNZLm
    155704U,	// BDNZLp
    155803U,	// BDNZm
    155718U,	// BDNZp
    159858U,	// BDZ
    159858U,	// BDZ8
    165234U,	// BDZA
    163959U,	// BDZAm
    163874U,	// BDZAp
    158133U,	// BDZL
    165214U,	// BDZLA
    163942U,	// BDZLAm
    163857U,	// BDZLAp
    5538U,	// BDZLR
    5538U,	// BDZLR8
    5498U,	// BDZLRL
    4331U,	// BDZLRLm
    4299U,	// BDZLRLp
    4348U,	// BDZLRm
    4316U,	// BDZLRp
    155782U,	// BDZLm
    155697U,	// BDZLp
    155797U,	// BDZm
    155712U,	// BDZp
    158044U,	// BL
    158044U,	// BL8
    1468764U,	// BL8_NOP
    1493340U,	// BL8_NOP_TLS
    182620U,	// BL8_TLS
    165203U,	// BLA
    165203U,	// BLA8
    1475923U,	// BLA8_NOP
    5534U,	// BLR
    5493U,	// BLRL
    2952800420U,	// CLRLSLDI
    2952798715U,	// CLRLSLDIo
    3221235990U,	// CLRLSLWI
    3221234260U,	// CLRLSLWIo
    805316797U,	// CLRRDI
    805315094U,	// CLRRDIo
    1073752375U,	// CLRRWI
    1073750641U,	// CLRRWIo
    10012U,	// CMPD
    268445878U,	// CMPDI
    9979U,	// CMPLD
    536881308U,	// CMPLDI
    11838U,	// CMPLW
    536881422U,	// CMPLWI
    11868U,	// CMPW
    268446000U,	// CMPWI
    33564475U,	// CNTLZD
    33562994U,	// CNTLZDo
    33566453U,	// CNTLZW
    33563735U,	// CNTLZWo
    4786U,	// CR6SET
    4772U,	// CR6UNSET
    9999U,	// CRAND
    9839U,	// CRANDC
    11794U,	// CREQV
    9991U,	// CRNAND
    11092U,	// CRNOR
    11105U,	// CROR
    9896U,	// CRORC
    6303250U,	// CRSET
    6302572U,	// CRUNSET
    11116U,	// CRXOR
    58691U,	// DCBA
    59260U,	// DCBF
    59517U,	// DCBI
    60775U,	// DCBST
    60756U,	// DCBT
    60787U,	// DCBTST
    61543U,	// DCBZ
    59822U,	// DCBZL
    10037U,	// DIVD
    11716U,	// DIVDU
    9172U,	// DIVDUo
    8555U,	// DIVDo
    12015U,	// DIVW
    11763U,	// DIVWU
    9189U,	// DIVWUo
    9296U,	// DIVWo
    68794U,	// DSS
    5486U,	// DSSALL
    77166U,	// DST
    77166U,	// DST64
    77179U,	// DSTST
    77179U,	// DSTST64
    77192U,	// DSTSTT
    77192U,	// DSTSTT64
    77186U,	// DSTT
    77186U,	// DSTT64
    5222U,	// DYNALLOC
    4943U,	// DYNALLOC8
    4506U,	// EH_SjLj_LongJmp32
    4686U,	// EH_SjLj_LongJmp64
    4525U,	// EH_SjLj_SetJmp32
    4705U,	// EH_SjLj_SetJmp64
    155649U,	// EH_SjLj_Setup
    5519U,	// EIEIO
    11796U,	// EQV
    11796U,	// EQV8
    9204U,	// EQV8o
    9204U,	// EQVo
    2952800430U,	// EXTLDI
    2952798726U,	// EXTLDIo
    3221236008U,	// EXTLWI
    3221234280U,	// EXTLWIo
    2952800469U,	// EXTRDI
    2952798769U,	// EXTRDIo
    3221236047U,	// EXTRWI
    3221234316U,	// EXTRWIo
    33564144U,	// EXTSB
    33564144U,	// EXTSB8
    33562797U,	// EXTSB8o
    33562797U,	// EXTSBo
    33564707U,	// EXTSH
    33564707U,	// EXTSH8
    33563093U,	// EXTSH8o
    33563093U,	// EXTSHo
    33566348U,	// EXTSW
    33566348U,	// EXTSW_32_64
    33563688U,	// EXTSW_32_64o
    33563688U,	// EXTSWo
    33565602U,	// FABSD
    33563439U,	// FABSDo
    33565602U,	// FABSS
    33563439U,	// FABSSo
    9926U,	// FADD
    11263U,	// FADDS
    9049U,	// FADDSo
    8478U,	// FADDo
    0U,	// FADDrtz
    33564397U,	// FCFID
    33565719U,	// FCFIDS
    33563508U,	// FCFIDSo
    33566129U,	// FCFIDU
    33565913U,	// FCFIDUS
    33563560U,	// FCFIDUSo
    33563595U,	// FCFIDUo
    33562942U,	// FCFIDo
    11729U,	// FCMPUD
    11729U,	// FCMPUS
    33566871U,	// FCTIDUZ
    33563776U,	// FCTIDUZo
    33566839U,	// FCTIDZ
    33563760U,	// FCTIDZo
    33566880U,	// FCTIWUZ
    33563786U,	// FCTIWUZo
    33566889U,	// FCTIWZ
    33563796U,	// FCTIWZo
    11788U,	// FDIV
    11526U,	// FDIVS
    9138U,	// FDIVSo
    9197U,	// FDIVo
    2147493580U,	// FMADD
    2147494918U,	// FMADDS
    2147492705U,	// FMADDSo
    2147492133U,	// FMADDo
    33565519U,	// FMR
    33563421U,	// FMRo
    2147493444U,	// FMSUB
    2147494894U,	// FMSUBS
    2147492678U,	// FMSUBSo
    2147492039U,	// FMSUBo
    10651U,	// FMUL
    11443U,	// FMULS
    9111U,	// FMULSo
    8877U,	// FMULo
    33565608U,	// FNABSD
    33563446U,	// FNABSDo
    33565608U,	// FNABSS
    33563446U,	// FNABSSo
    33564588U,	// FNEGD
    33563075U,	// FNEGDo
    33564588U,	// FNEGS
    33563075U,	// FNEGSo
    2147493587U,	// FNMADD
    2147494926U,	// FNMADDS
    2147492714U,	// FNMADDSo
    2147492141U,	// FNMADDo
    2147493451U,	// FNMSUB
    2147494902U,	// FNMSUBS
    2147492687U,	// FNMSUBSo
    2147492047U,	// FNMSUBo
    33564511U,	// FRE
    33565727U,	// FRES
    33563517U,	// FRESo
    33563035U,	// FREo
    33565216U,	// FRIMD
    33563316U,	// FRIMDo
    33565216U,	// FRIMS
    33563316U,	// FRIMSo
    33565287U,	// FRIND
    33563340U,	// FRINDo
    33565287U,	// FRINS
    33563340U,	// FRINSo
    33565439U,	// FRIPD
    33563390U,	// FRIPDo
    33565439U,	// FRIPS
    33563390U,	// FRIPSo
    33566859U,	// FRIZD
    33563769U,	// FRIZDo
    33566859U,	// FRIZS
    33563769U,	// FRIZSo
    33565445U,	// FRSP
    33563397U,	// FRSPo
    33564516U,	// FRSQRTE
    33565733U,	// FRSQRTES
    33563524U,	// FRSQRTESo
    33563041U,	// FRSQRTEo
    2147494260U,	// FSELD
    2147492518U,	// FSELDo
    2147494260U,	// FSELS
    2147492518U,	// FSELSo
    33566048U,	// FSQRT
    33565905U,	// FSQRTS
    33563551U,	// FSQRTSo
    33563578U,	// FSQRTo
    9790U,	// FSUB
    11239U,	// FSUBS
    9022U,	// FSUBSo
    8384U,	// FSUBo
    5422U,	// GETtlsADDR
    5408U,	// GETtlsldADDR
    59523U,	// ICBI
    3221236000U,	// INSLWI
    3221234271U,	// INSLWIo
    2952800453U,	// INSRDI
    2952798751U,	// INSRDIo
    3221236031U,	// INSRWI
    3221234298U,	// INSRWIo
    2147494266U,	// ISEL
    2147494266U,	// ISEL8
    5473U,	// ISYNC
    8398164U,	// LA
    10495316U,	// LAx
    10498157U,	// LBZ
    10498157U,	// LBZ8
    12594682U,	// LBZU
    12594682U,	// LBZU8
    14692368U,	// LBZUX
    14692368U,	// LBZUX8
    37761101U,	// LBZX
    37761101U,	// LBZX8
    10495735U,	// LD
    37760876U,	// LDARX
    37760890U,	// LDBRX
    12594617U,	// LDU
    14692319U,	// LDUX
    37760819U,	// LDX
    5360U,	// LDgotTprelL
    1585334U,	// LDinto_toc
    5479U,	// LDtoc
    5446U,	// LDtocCPT
    5308U,	// LDtocJTI
    5318U,	// LDtocL
    4287U,	// LDtoc_restore
    10495707U,	// LFD
    12594588U,	// LFDU
    14692304U,	// LFDUX
    37760806U,	// LFDX
    37760771U,	// LFIWAX
    37761113U,	// LFIWZX
    10497077U,	// LFS
    12594648U,	// LFSU
    14692346U,	// LFSUX
    37760942U,	// LFSX
    10495310U,	// LHA
    10495310U,	// LHA8
    12594576U,	// LHAU
    12594576U,	// LHAU8
    14692283U,	// LHAUX
    14692283U,	// LHAUX8
    37760765U,	// LHAX
    37760765U,	// LHAX8
    37760905U,	// LHBRX
    10498175U,	// LHZ
    10498175U,	// LHZ8
    12594688U,	// LHZU
    12594688U,	// LHZU8
    14692375U,	// LHZUX
    14692375U,	// LHZUX8
    37761107U,	// LHZX
    37761107U,	// LHZX8
    16787685U,	// LI
    16787685U,	// LI8
    16788647U,	// LIS
    16788647U,	// LIS8
    10497617U,	// LMW
    37760785U,	// LVEBX
    37760830U,	// LVEHX
    37761072U,	// LVEWX
    37759381U,	// LVSL
    37759879U,	// LVSR
    37761061U,	// LVX
    37759393U,	// LVXL
    10495341U,	// LWA
    37760883U,	// LWARX
    14692290U,	// LWAUX
    37760779U,	// LWAX
    37760920U,	// LWBRX
    10498225U,	// LWZ
    10498225U,	// LWZ8
    12594694U,	// LWZU
    12594694U,	// LWZU8
    14692382U,	// LWZUX
    14692382U,	// LWZUX8
    37761121U,	// LWZX
    37761121U,	// LWZX8
    33564552U,	// MCRF
    142111U,	// MFCR
    142111U,	// MFCR8
    142228U,	// MFCTR
    142228U,	// MFCTR8
    142383U,	// MFFS
    142147U,	// MFLR
    142147U,	// MFLR8
    18884494U,	// MFOCRF
    18884494U,	// MFOCRF8
    33565561U,	// MFSPR
    33564159U,	// MFTB
    1715065U,	// MFTB8
    1846137U,	// MFVRSAVE
    1846137U,	// MFVRSAVEv
    142125U,	// MFVSCR
    33564574U,	// MTCRF
    33564574U,	// MTCRF8
    142235U,	// MTCTR
    142235U,	// MTCTR8
    142235U,	// MTCTR8loop
    142235U,	// MTCTRloop
    214173U,	// MTFSB0
    214181U,	// MTFSB1
    33564581U,	// MTFSF
    142153U,	// MTLR
    142153U,	// MTLR8
    92054U,	// MTOCRF
    92054U,	// MTOCRF8
    33565568U,	// MTSPR
    139354U,	// MTVRSAVE
    229466U,	// MTVRSAVEv
    142133U,	// MTVSCR
    9958U,	// MULHD
    11689U,	// MULHDU
    9154U,	// MULHDUo
    8502U,	// MULHDo
    11816U,	// MULHW
    11749U,	// MULHWU
    9180U,	// MULHWUo
    9217U,	// MULHWo
    9972U,	// MULLD
    8518U,	// MULLDo
    268445922U,	// MULLI
    268445922U,	// MULLI8
    11831U,	// MULLW
    9225U,	// MULLWo
    5434U,	// MovePCtoLR
    5121U,	// MovePCtoLR8
    9993U,	// NAND
    9993U,	// NAND8
    8532U,	// NAND8o
    8532U,	// NANDo
    33564589U,	// NEG
    33564589U,	// NEG8
    33563076U,	// NEG8o
    33563076U,	// NEGo
    5530U,	// NOP
    11094U,	// NOR
    11094U,	// NOR8
    8995U,	// NOR8o
    8995U,	// NORo
    11095U,	// OR
    11095U,	// OR8
    8996U,	// OR8o
    9898U,	// ORC
    9898U,	// ORC8
    8465U,	// ORC8o
    8465U,	// ORCo
    536881410U,	// ORI
    536881410U,	// ORI8
    536882349U,	// ORIS
    536882349U,	// ORIS8
    8996U,	// ORo
    33564455U,	// POPCNTD
    33562977U,	// POPCNTDo
    33566371U,	// POPCNTW
    33563696U,	// POPCNTWo
    5386U,	// RESTORE_CR
    5278U,	// RESTORE_VRSAVE
    2147494245U,	// RLDCL
    2147492501U,	// RLDCLo
    2147494680U,	// RLDCR
    2147492620U,	// RLDCRo
    2952799891U,	// RLDIC
    2952800620U,	// RLDICL
    2952798877U,	// RLDICLo
    2952801061U,	// RLDICR
    2952798996U,	// RLDICRo
    2952798473U,	// RLDICo
    121645289U,	// RLDIMI
    121643578U,	// RLDIMIo
    155199729U,	// RLWIMI
    155198019U,	// RLWIMIo
    3221236262U,	// RLWINM
    3221236262U,	// RLWINM8
    3221234363U,	// RLWINM8o
    3221234363U,	// RLWINMo
    2147494446U,	// RLWNM
    2147492548U,	// RLWNMo
    805316813U,	// ROTRDI
    805315112U,	// ROTRDIo
    1073752391U,	// ROTRWI
    1073750659U,	// ROTRWIo
    140975U,	// SC
    4744U,	// SELECT_CC_F4
    4954U,	// SELECT_CC_F8
    4758U,	// SELECT_CC_I4
    4988U,	// SELECT_CC_I8
    5232U,	// SELECT_CC_VRRC
    9986U,	// SLD
    805316776U,	// SLDI
    805315071U,	// SLDIo
    8526U,	// SLDo
    11852U,	// SLW
    1073752346U,	// SLWI
    1073750616U,	// SLWIo
    9233U,	// SLWo
    5398U,	// SPILL_CR
    5294U,	// SPILL_VRSAVE
    9920U,	// SRAD
    805316751U,	// SRADI
    805315059U,	// SRADIo
    8471U,	// SRADo
    11802U,	// SRAW
    1073752327U,	// SRAWI
    1073750604U,	// SRAWIo
    9210U,	// SRAWo
    10018U,	// SRD
    805316807U,	// SRDI
    805315105U,	// SRDIo
    8539U,	// SRDo
    11875U,	// SRW
    1073752385U,	// SRWI
    1073750652U,	// SRWIo
    9239U,	// SRWo
    10495501U,	// STB
    10495501U,	// STB8
    12684694U,	// STBU
    12684694U,	// STBU8
    14782409U,	// STBUX
    14782409U,	// STBUX8
    37760800U,	// STBX
    37760800U,	// STBX8
    10495792U,	// STD
    37760897U,	// STDBRX
    37758048U,	// STDCX
    12684734U,	// STDU
    14782437U,	// STDUX
    37760824U,	// STDX
    10495712U,	// STFD
    12684706U,	// STFDU
    14782423U,	// STFDUX
    37760812U,	// STFDX
    37761087U,	// STFIWX
    10497082U,	// STFS
    12684766U,	// STFSU
    14782465U,	// STFSUX
    37760948U,	// STFSX
    10496058U,	// STH
    10496058U,	// STH8
    37760912U,	// STHBRX
    12684747U,	// STHU
    12684747U,	// STHU8
    14782451U,	// STHUX
    14782451U,	// STHUX8
    37760845U,	// STHX
    37760845U,	// STHX8
    10497622U,	// STMW
    37760792U,	// STVEBX
    37760837U,	// STVEHX
    37761079U,	// STVEWX
    37761066U,	// STVX
    37759399U,	// STVXL
    10497708U,	// STW
    10497708U,	// STW8
    37760927U,	// STWBRX
    37758056U,	// STWCX
    12684781U,	// STWU
    12684781U,	// STWU8
    14782473U,	// STWUX
    14782473U,	// STWUX8
    37761095U,	// STWX
    37761095U,	// STWX8
    10114U,	// SUBF
    10114U,	// SUBF8
    8636U,	// SUBF8o
    9854U,	// SUBFC
    9854U,	// SUBFC8
    8433U,	// SUBFC8o
    8433U,	// SUBFCo
    10057U,	// SUBFE
    10057U,	// SUBFE8
    8578U,	// SUBFE8o
    8578U,	// SUBFEo
    268445338U,	// SUBFIC
    268445338U,	// SUBFIC8
    33564503U,	// SUBFME
    33564503U,	// SUBFME8
    33563026U,	// SUBFME8o
    33563026U,	// SUBFMEo
    33564532U,	// SUBFZE
    33564532U,	// SUBFZE8
    33563059U,	// SUBFZE8o
    33563059U,	// SUBFZEo
    8636U,	// SUBFo
    268445833U,	// SUBI
    268445317U,	// SUBIC
    268443897U,	// SUBICo
    268446873U,	// SUBIS
    140962U,	// SYNC
    157059U,	// TAILB
    157059U,	// TAILB8
    165189U,	// TAILBA
    165189U,	// TAILBA8
    5551U,	// TAILBCTR
    5551U,	// TAILBCTR8
    33850678U,	// TCRETURNai
    33850585U,	// TCRETURNai8
    33842867U,	// TCRETURNdi
    33842407U,	// TCRETURNdi8
    33827595U,	// TCRETURNri
    33826037U,	// TCRETURNri8
    83756U,	// TD
    268519645U,	// TDI
    5525U,	// TRAP
    85663U,	// TW
    268519767U,	// TWI
    33563907U,	// UPDATE_VRSAVE
    11962U,	// VADDCUW
    10909U,	// VADDFP
    11202U,	// VADDSBS
    11370U,	// VADDSHS
    11552U,	// VADDSWS
    10709U,	// VADDUBM
    11230U,	// VADDUBS
    10758U,	// VADDUHM
    11398U,	// VADDUHS
    10839U,	// VADDUWM
    11579U,	// VADDUWS
    10006U,	// VAND
    9847U,	// VANDC
    9649U,	// VAVGSB
    10212U,	// VAVGSH
    11880U,	// VAVGSW
    9755U,	// VAVGUB
    10312U,	// VAVGUH
    11971U,	// VAVGUW
    188755879U,	// VCFSX
    201338791U,	// VCFSX_0
    188755948U,	// VCFUX
    201338860U,	// VCFUX_0
    10873U,	// VCMPBFP
    8915U,	// VCMPBFPo
    10972U,	// VCMPEQFP
    8936U,	// VCMPEQFPo
    9780U,	// VCMPEQUB
    8373U,	// VCMPEQUBo
    10337U,	// VCMPEQUH
    8669U,	// VCMPEQUHo
    11987U,	// VCMPEQUW
    9274U,	// VCMPEQUWo
    10926U,	// VCMPGEFP
    8925U,	// VCMPGEFPo
    10982U,	// VCMPGTFP
    8947U,	// VCMPGTFPo
    9702U,	// VCMPGTSB
    8354U,	// VCMPGTSBo
    10265U,	// VCMPGTSH
    8650U,	// VCMPGTSHo
    11906U,	// VCMPGTSW
    9245U,	// VCMPGTSWo
    9811U,	// VCMPGTUB
    8408U,	// VCMPGTUBo
    10347U,	// VCMPGTUH
    8680U,	// VCMPGTUHo
    11997U,	// VCMPGTUW
    9285U,	// VCMPGTUWo
    188755268U,	// VCTSXS
    201338180U,	// VCTSXS_0
    188755276U,	// VCTUXS
    201338188U,	// VCTUXS_0
    33565375U,	// VEXPTEFP
    33565349U,	// VLOGEFP
    2147494548U,	// VMADDFP
    10992U,	// VMAXFP
    9719U,	// VMAXSB
    10282U,	// VMAXSH
    11923U,	// VMAXSW
    9821U,	// VMAXUB
    10357U,	// VMAXUH
    12007U,	// VMAXUW
    2147494995U,	// VMHADDSHS
    2147495006U,	// VMHRADDSHS
    10964U,	// VMINFP
    9685U,	// VMINSB
    10248U,	// VMINSH
    11898U,	// VMINSW
    9763U,	// VMINUB
    10320U,	// VMINUH
    11979U,	// VMINUW
    2147494395U,	// VMLADDUHM
    9606U,	// VMRGHB
    10169U,	// VMRGHH
    11808U,	// VMRGHW
    9614U,	// VMRGLB
    10177U,	// VMRGLH
    11823U,	// VMRGLW
    2147494338U,	// VMSUMMBM
    2147494376U,	// VMSUMSHM
    2147495027U,	// VMSUMSHS
    2147494366U,	// VMSUMUBM
    2147494415U,	// VMSUMUHM
    2147495055U,	// VMSUMUHS
    9640U,	// VMULESB
    10203U,	// VMULESH
    9746U,	// VMULEUB
    10303U,	// VMULEUH
    9693U,	// VMULOSB
    10256U,	// VMULOSH
    9771U,	// VMULOUB
    10328U,	// VMULOUH
    2147494530U,	// VNMSUBFP
    11099U,	// VNOR
    11111U,	// VOR
    2147494453U,	// VPERM
    12124U,	// VPKPX
    11455U,	// VPKSHSS
    11490U,	// VPKSHUS
    11464U,	// VPKSWSS
    11508U,	// VPKSWUS
    10812U,	// VPKUHUM
    11499U,	// VPKUHUS
    10821U,	// VPKUWUM
    11517U,	// VPKUWUS
    33565368U,	// VREFP
    33565209U,	// VRFIM
    33565280U,	// VRFIN
    33565432U,	// VRFIP
    33566852U,	// VRFIZ
    9622U,	// VRLB
    10185U,	// VRLH
    11845U,	// VRLW
    33565385U,	// VRSQRTEFP
    2147494272U,	// VSEL
    10646U,	// VSL
    9628U,	// VSLB
    2147494137U,	// VSLDOI
    10191U,	// VSLH
    10861U,	// VSLO
    11851U,	// VSLW
    188753413U,	// VSPLTB
    188753970U,	// VSPLTH
    23078338U,	// VSPLTISB
    23078901U,	// VSPLTISH
    23080560U,	// VSPLTISW
    188755611U,	// VSPLTW
    11144U,	// VSR
    9599U,	// VSRAB
    10162U,	// VSRAH
    11801U,	// VSRAW
    9634U,	// VSRB
    10197U,	// VSRH
    10867U,	// VSRO
    11874U,	// VSRW
    11953U,	// VSUBCUW
    10892U,	// VSUBFP
    11193U,	// VSUBSBS
    11338U,	// VSUBSHS
    11543U,	// VSUBSWS
    10700U,	// VSUBUBM
    11221U,	// VSUBUBS
    10738U,	// VSUBUHM
    11389U,	// VSUBUHS
    10830U,	// VSUBUWM
    11570U,	// VSUBUWS
    11533U,	// VSUM2SWS
    11183U,	// VSUM4SBS
    11328U,	// VSUM4SHS
    11211U,	// VSUM4UBS
    11561U,	// VSUMSWS
    33566547U,	// VUPKHPX
    33564089U,	// VUPKHSB
    33564652U,	// VUPKHSH
    33566563U,	// VUPKLPX
    33564108U,	// VUPKLSB
    33564671U,	// VUPKLSH
    11123U,	// VXOR
    6302579U,	// V_SET0
    6302579U,	// V_SET0B
    6302579U,	// V_SET0H
    1977968U,	// V_SETALLONES
    1977968U,	// V_SETALLONESB
    1977968U,	// V_SETALLONESH
    142682U,	// WAIT
    11118U,	// XOR
    11118U,	// XOR8
    9001U,	// XOR8o
    536881409U,	// XORI
    536881409U,	// XORI8
    536882348U,	// XORIS
    536882348U,	// XORIS8
    9001U,	// XORo
    1342260837U,	// gBC
    1610696009U,	// gBCA
    84877U,	// gBCCTR
    84365U,	// gBCCTRL
    1342261600U,	// gBCL
    1610696024U,	// gBCLA
    84797U,	// gBCLR
    84358U,	// gBCLRL
    0U
  };

  static const uint8_t OpInfo2[] = {
    0U,	// PHI
    0U,	// INLINEASM
    0U,	// PROLOG_LABEL
    0U,	// EH_LABEL
    0U,	// GC_LABEL
    0U,	// KILL
    0U,	// EXTRACT_SUBREG
    0U,	// INSERT_SUBREG
    0U,	// IMPLICIT_DEF
    0U,	// SUBREG_TO_REG
    0U,	// COPY_TO_REGCLASS
    0U,	// DBG_VALUE
    0U,	// REG_SEQUENCE
    0U,	// COPY
    0U,	// BUNDLE
    0U,	// LIFETIME_START
    0U,	// LIFETIME_END
    0U,	// ADD4
    0U,	// ADD4o
    0U,	// ADD8
    0U,	// ADD8TLS
    0U,	// ADD8o
    0U,	// ADDC
    0U,	// ADDC8
    0U,	// ADDC8o
    0U,	// ADDCo
    0U,	// ADDE
    0U,	// ADDE8
    0U,	// ADDE8o
    0U,	// ADDEo
    0U,	// ADDI
    0U,	// ADDI8
    0U,	// ADDIC
    0U,	// ADDIC8
    0U,	// ADDICo
    0U,	// ADDIS
    0U,	// ADDIS8
    0U,	// ADDISdtprelHA
    0U,	// ADDISgotTprelHA
    0U,	// ADDIStlsgdHA
    0U,	// ADDIStlsldHA
    0U,	// ADDIStocHA
    0U,	// ADDIdtprelL
    0U,	// ADDItlsgdL
    0U,	// ADDItlsldL
    0U,	// ADDItocL
    0U,	// ADDME
    0U,	// ADDME8
    0U,	// ADDME8o
    0U,	// ADDMEo
    0U,	// ADDZE
    0U,	// ADDZE8
    0U,	// ADDZE8o
    0U,	// ADDZEo
    0U,	// ADJCALLSTACKDOWN
    0U,	// ADJCALLSTACKUP
    0U,	// AND
    0U,	// AND8
    0U,	// AND8o
    0U,	// ANDC
    0U,	// ANDC8
    0U,	// ANDC8o
    0U,	// ANDCo
    0U,	// ANDISo
    0U,	// ANDISo8
    0U,	// ANDIo
    0U,	// ANDIo8
    0U,	// ANDo
    0U,	// ATOMIC_CMP_SWAP_I16
    0U,	// ATOMIC_CMP_SWAP_I32
    0U,	// ATOMIC_CMP_SWAP_I64
    0U,	// ATOMIC_CMP_SWAP_I8
    0U,	// ATOMIC_LOAD_ADD_I16
    0U,	// ATOMIC_LOAD_ADD_I32
    0U,	// ATOMIC_LOAD_ADD_I64
    0U,	// ATOMIC_LOAD_ADD_I8
    0U,	// ATOMIC_LOAD_AND_I16
    0U,	// ATOMIC_LOAD_AND_I32
    0U,	// ATOMIC_LOAD_AND_I64
    0U,	// ATOMIC_LOAD_AND_I8
    0U,	// ATOMIC_LOAD_NAND_I16
    0U,	// ATOMIC_LOAD_NAND_I32
    0U,	// ATOMIC_LOAD_NAND_I64
    0U,	// ATOMIC_LOAD_NAND_I8
    0U,	// ATOMIC_LOAD_OR_I16
    0U,	// ATOMIC_LOAD_OR_I32
    0U,	// ATOMIC_LOAD_OR_I64
    0U,	// ATOMIC_LOAD_OR_I8
    0U,	// ATOMIC_LOAD_SUB_I16
    0U,	// ATOMIC_LOAD_SUB_I32
    0U,	// ATOMIC_LOAD_SUB_I64
    0U,	// ATOMIC_LOAD_SUB_I8
    0U,	// ATOMIC_LOAD_XOR_I16
    0U,	// ATOMIC_LOAD_XOR_I32
    0U,	// ATOMIC_LOAD_XOR_I64
    0U,	// ATOMIC_LOAD_XOR_I8
    0U,	// ATOMIC_SWAP_I16
    0U,	// ATOMIC_SWAP_I32
    0U,	// ATOMIC_SWAP_I64
    0U,	// ATOMIC_SWAP_I8
    0U,	// B
    0U,	// BA
    0U,	// BCC
    0U,	// BCCA
    0U,	// BCCL
    0U,	// BCCLA
    0U,	// BCCTR
    0U,	// BCCTR8
    0U,	// BCCTRL
    0U,	// BCCTRL8
    0U,	// BCLR
    0U,	// BCLRL
    0U,	// BCLalways
    0U,	// BCTR
    0U,	// BCTR8
    0U,	// BCTRL
    0U,	// BCTRL8
    0U,	// BDNZ
    0U,	// BDNZ8
    0U,	// BDNZA
    0U,	// BDNZAm
    0U,	// BDNZAp
    0U,	// BDNZL
    0U,	// BDNZLA
    0U,	// BDNZLAm
    0U,	// BDNZLAp
    0U,	// BDNZLR
    0U,	// BDNZLR8
    0U,	// BDNZLRL
    0U,	// BDNZLRLm
    0U,	// BDNZLRLp
    0U,	// BDNZLRm
    0U,	// BDNZLRp
    0U,	// BDNZLm
    0U,	// BDNZLp
    0U,	// BDNZm
    0U,	// BDNZp
    0U,	// BDZ
    0U,	// BDZ8
    0U,	// BDZA
    0U,	// BDZAm
    0U,	// BDZAp
    0U,	// BDZL
    0U,	// BDZLA
    0U,	// BDZLAm
    0U,	// BDZLAp
    0U,	// BDZLR
    0U,	// BDZLR8
    0U,	// BDZLRL
    0U,	// BDZLRLm
    0U,	// BDZLRLp
    0U,	// BDZLRm
    0U,	// BDZLRp
    0U,	// BDZLm
    0U,	// BDZLp
    0U,	// BDZm
    0U,	// BDZp
    0U,	// BL
    0U,	// BL8
    0U,	// BL8_NOP
    0U,	// BL8_NOP_TLS
    0U,	// BL8_TLS
    0U,	// BLA
    0U,	// BLA8
    0U,	// BLA8_NOP
    0U,	// BLR
    0U,	// BLRL
    0U,	// CLRLSLDI
    0U,	// CLRLSLDIo
    1U,	// CLRLSLWI
    1U,	// CLRLSLWIo
    0U,	// CLRRDI
    0U,	// CLRRDIo
    0U,	// CLRRWI
    0U,	// CLRRWIo
    0U,	// CMPD
    0U,	// CMPDI
    0U,	// CMPLD
    0U,	// CMPLDI
    0U,	// CMPLW
    0U,	// CMPLWI
    0U,	// CMPW
    0U,	// CMPWI
    0U,	// CNTLZD
    0U,	// CNTLZDo
    0U,	// CNTLZW
    0U,	// CNTLZWo
    0U,	// CR6SET
    0U,	// CR6UNSET
    0U,	// CRAND
    0U,	// CRANDC
    0U,	// CREQV
    0U,	// CRNAND
    0U,	// CRNOR
    0U,	// CROR
    0U,	// CRORC
    0U,	// CRSET
    0U,	// CRUNSET
    0U,	// CRXOR
    0U,	// DCBA
    0U,	// DCBF
    0U,	// DCBI
    0U,	// DCBST
    0U,	// DCBT
    0U,	// DCBTST
    0U,	// DCBZ
    0U,	// DCBZL
    0U,	// DIVD
    0U,	// DIVDU
    0U,	// DIVDUo
    0U,	// DIVDo
    0U,	// DIVW
    0U,	// DIVWU
    0U,	// DIVWUo
    0U,	// DIVWo
    0U,	// DSS
    0U,	// DSSALL
    0U,	// DST
    0U,	// DST64
    0U,	// DSTST
    0U,	// DSTST64
    0U,	// DSTSTT
    0U,	// DSTSTT64
    0U,	// DSTT
    0U,	// DSTT64
    0U,	// DYNALLOC
    0U,	// DYNALLOC8
    0U,	// EH_SjLj_LongJmp32
    0U,	// EH_SjLj_LongJmp64
    0U,	// EH_SjLj_SetJmp32
    0U,	// EH_SjLj_SetJmp64
    0U,	// EH_SjLj_Setup
    0U,	// EIEIO
    0U,	// EQV
    0U,	// EQV8
    0U,	// EQV8o
    0U,	// EQVo
    0U,	// EXTLDI
    0U,	// EXTLDIo
    1U,	// EXTLWI
    1U,	// EXTLWIo
    0U,	// EXTRDI
    0U,	// EXTRDIo
    1U,	// EXTRWI
    1U,	// EXTRWIo
    0U,	// EXTSB
    0U,	// EXTSB8
    0U,	// EXTSB8o
    0U,	// EXTSBo
    0U,	// EXTSH
    0U,	// EXTSH8
    0U,	// EXTSH8o
    0U,	// EXTSHo
    0U,	// EXTSW
    0U,	// EXTSW_32_64
    0U,	// EXTSW_32_64o
    0U,	// EXTSWo
    0U,	// FABSD
    0U,	// FABSDo
    0U,	// FABSS
    0U,	// FABSSo
    0U,	// FADD
    0U,	// FADDS
    0U,	// FADDSo
    0U,	// FADDo
    0U,	// FADDrtz
    0U,	// FCFID
    0U,	// FCFIDS
    0U,	// FCFIDSo
    0U,	// FCFIDU
    0U,	// FCFIDUS
    0U,	// FCFIDUSo
    0U,	// FCFIDUo
    0U,	// FCFIDo
    0U,	// FCMPUD
    0U,	// FCMPUS
    0U,	// FCTIDUZ
    0U,	// FCTIDUZo
    0U,	// FCTIDZ
    0U,	// FCTIDZo
    0U,	// FCTIWUZ
    0U,	// FCTIWUZo
    0U,	// FCTIWZ
    0U,	// FCTIWZo
    0U,	// FDIV
    0U,	// FDIVS
    0U,	// FDIVSo
    0U,	// FDIVo
    2U,	// FMADD
    2U,	// FMADDS
    2U,	// FMADDSo
    2U,	// FMADDo
    0U,	// FMR
    0U,	// FMRo
    2U,	// FMSUB
    2U,	// FMSUBS
    2U,	// FMSUBSo
    2U,	// FMSUBo
    0U,	// FMUL
    0U,	// FMULS
    0U,	// FMULSo
    0U,	// FMULo
    0U,	// FNABSD
    0U,	// FNABSDo
    0U,	// FNABSS
    0U,	// FNABSSo
    0U,	// FNEGD
    0U,	// FNEGDo
    0U,	// FNEGS
    0U,	// FNEGSo
    2U,	// FNMADD
    2U,	// FNMADDS
    2U,	// FNMADDSo
    2U,	// FNMADDo
    2U,	// FNMSUB
    2U,	// FNMSUBS
    2U,	// FNMSUBSo
    2U,	// FNMSUBo
    0U,	// FRE
    0U,	// FRES
    0U,	// FRESo
    0U,	// FREo
    0U,	// FRIMD
    0U,	// FRIMDo
    0U,	// FRIMS
    0U,	// FRIMSo
    0U,	// FRIND
    0U,	// FRINDo
    0U,	// FRINS
    0U,	// FRINSo
    0U,	// FRIPD
    0U,	// FRIPDo
    0U,	// FRIPS
    0U,	// FRIPSo
    0U,	// FRIZD
    0U,	// FRIZDo
    0U,	// FRIZS
    0U,	// FRIZSo
    0U,	// FRSP
    0U,	// FRSPo
    0U,	// FRSQRTE
    0U,	// FRSQRTES
    0U,	// FRSQRTESo
    0U,	// FRSQRTEo
    2U,	// FSELD
    2U,	// FSELDo
    2U,	// FSELS
    2U,	// FSELSo
    0U,	// FSQRT
    0U,	// FSQRTS
    0U,	// FSQRTSo
    0U,	// FSQRTo
    0U,	// FSUB
    0U,	// FSUBS
    0U,	// FSUBSo
    0U,	// FSUBo
    0U,	// GETtlsADDR
    0U,	// GETtlsldADDR
    0U,	// ICBI
    1U,	// INSLWI
    1U,	// INSLWIo
    0U,	// INSRDI
    0U,	// INSRDIo
    1U,	// INSRWI
    1U,	// INSRWIo
    2U,	// ISEL
    2U,	// ISEL8
    0U,	// ISYNC
    0U,	// LA
    0U,	// LAx
    0U,	// LBZ
    0U,	// LBZ8
    0U,	// LBZU
    0U,	// LBZU8
    0U,	// LBZUX
    0U,	// LBZUX8
    0U,	// LBZX
    0U,	// LBZX8
    0U,	// LD
    0U,	// LDARX
    0U,	// LDBRX
    0U,	// LDU
    0U,	// LDUX
    0U,	// LDX
    0U,	// LDgotTprelL
    0U,	// LDinto_toc
    0U,	// LDtoc
    0U,	// LDtocCPT
    0U,	// LDtocJTI
    0U,	// LDtocL
    0U,	// LDtoc_restore
    0U,	// LFD
    0U,	// LFDU
    0U,	// LFDUX
    0U,	// LFDX
    0U,	// LFIWAX
    0U,	// LFIWZX
    0U,	// LFS
    0U,	// LFSU
    0U,	// LFSUX
    0U,	// LFSX
    0U,	// LHA
    0U,	// LHA8
    0U,	// LHAU
    0U,	// LHAU8
    0U,	// LHAUX
    0U,	// LHAUX8
    0U,	// LHAX
    0U,	// LHAX8
    0U,	// LHBRX
    0U,	// LHZ
    0U,	// LHZ8
    0U,	// LHZU
    0U,	// LHZU8
    0U,	// LHZUX
    0U,	// LHZUX8
    0U,	// LHZX
    0U,	// LHZX8
    0U,	// LI
    0U,	// LI8
    0U,	// LIS
    0U,	// LIS8
    0U,	// LMW
    0U,	// LVEBX
    0U,	// LVEHX
    0U,	// LVEWX
    0U,	// LVSL
    0U,	// LVSR
    0U,	// LVX
    0U,	// LVXL
    0U,	// LWA
    0U,	// LWARX
    0U,	// LWAUX
    0U,	// LWAX
    0U,	// LWBRX
    0U,	// LWZ
    0U,	// LWZ8
    0U,	// LWZU
    0U,	// LWZU8
    0U,	// LWZUX
    0U,	// LWZUX8
    0U,	// LWZX
    0U,	// LWZX8
    0U,	// MCRF
    0U,	// MFCR
    0U,	// MFCR8
    0U,	// MFCTR
    0U,	// MFCTR8
    0U,	// MFFS
    0U,	// MFLR
    0U,	// MFLR8
    0U,	// MFOCRF
    0U,	// MFOCRF8
    0U,	// MFSPR
    0U,	// MFTB
    0U,	// MFTB8
    0U,	// MFVRSAVE
    0U,	// MFVRSAVEv
    0U,	// MFVSCR
    0U,	// MTCRF
    0U,	// MTCRF8
    0U,	// MTCTR
    0U,	// MTCTR8
    0U,	// MTCTR8loop
    0U,	// MTCTRloop
    0U,	// MTFSB0
    0U,	// MTFSB1
    0U,	// MTFSF
    0U,	// MTLR
    0U,	// MTLR8
    0U,	// MTOCRF
    0U,	// MTOCRF8
    0U,	// MTSPR
    0U,	// MTVRSAVE
    0U,	// MTVRSAVEv
    0U,	// MTVSCR
    0U,	// MULHD
    0U,	// MULHDU
    0U,	// MULHDUo
    0U,	// MULHDo
    0U,	// MULHW
    0U,	// MULHWU
    0U,	// MULHWUo
    0U,	// MULHWo
    0U,	// MULLD
    0U,	// MULLDo
    0U,	// MULLI
    0U,	// MULLI8
    0U,	// MULLW
    0U,	// MULLWo
    0U,	// MovePCtoLR
    0U,	// MovePCtoLR8
    0U,	// NAND
    0U,	// NAND8
    0U,	// NAND8o
    0U,	// NANDo
    0U,	// NEG
    0U,	// NEG8
    0U,	// NEG8o
    0U,	// NEGo
    0U,	// NOP
    0U,	// NOR
    0U,	// NOR8
    0U,	// NOR8o
    0U,	// NORo
    0U,	// OR
    0U,	// OR8
    0U,	// OR8o
    0U,	// ORC
    0U,	// ORC8
    0U,	// ORC8o
    0U,	// ORCo
    0U,	// ORI
    0U,	// ORI8
    0U,	// ORIS
    0U,	// ORIS8
    0U,	// ORo
    0U,	// POPCNTD
    0U,	// POPCNTDo
    0U,	// POPCNTW
    0U,	// POPCNTWo
    0U,	// RESTORE_CR
    0U,	// RESTORE_VRSAVE
    0U,	// RLDCL
    0U,	// RLDCLo
    0U,	// RLDCR
    0U,	// RLDCRo
    0U,	// RLDIC
    0U,	// RLDICL
    0U,	// RLDICLo
    0U,	// RLDICR
    0U,	// RLDICRo
    0U,	// RLDICo
    0U,	// RLDIMI
    0U,	// RLDIMIo
    0U,	// RLWIMI
    0U,	// RLWIMIo
    5U,	// RLWINM
    5U,	// RLWINM8
    5U,	// RLWINM8o
    5U,	// RLWINMo
    5U,	// RLWNM
    5U,	// RLWNMo
    0U,	// ROTRDI
    0U,	// ROTRDIo
    0U,	// ROTRWI
    0U,	// ROTRWIo
    0U,	// SC
    0U,	// SELECT_CC_F4
    0U,	// SELECT_CC_F8
    0U,	// SELECT_CC_I4
    0U,	// SELECT_CC_I8
    0U,	// SELECT_CC_VRRC
    0U,	// SLD
    0U,	// SLDI
    0U,	// SLDIo
    0U,	// SLDo
    0U,	// SLW
    0U,	// SLWI
    0U,	// SLWIo
    0U,	// SLWo
    0U,	// SPILL_CR
    0U,	// SPILL_VRSAVE
    0U,	// SRAD
    0U,	// SRADI
    0U,	// SRADIo
    0U,	// SRADo
    0U,	// SRAW
    0U,	// SRAWI
    0U,	// SRAWIo
    0U,	// SRAWo
    0U,	// SRD
    0U,	// SRDI
    0U,	// SRDIo
    0U,	// SRDo
    0U,	// SRW
    0U,	// SRWI
    0U,	// SRWIo
    0U,	// SRWo
    0U,	// STB
    0U,	// STB8
    0U,	// STBU
    0U,	// STBU8
    0U,	// STBUX
    0U,	// STBUX8
    0U,	// STBX
    0U,	// STBX8
    0U,	// STD
    0U,	// STDBRX
    0U,	// STDCX
    0U,	// STDU
    0U,	// STDUX
    0U,	// STDX
    0U,	// STFD
    0U,	// STFDU
    0U,	// STFDUX
    0U,	// STFDX
    0U,	// STFIWX
    0U,	// STFS
    0U,	// STFSU
    0U,	// STFSUX
    0U,	// STFSX
    0U,	// STH
    0U,	// STH8
    0U,	// STHBRX
    0U,	// STHU
    0U,	// STHU8
    0U,	// STHUX
    0U,	// STHUX8
    0U,	// STHX
    0U,	// STHX8
    0U,	// STMW
    0U,	// STVEBX
    0U,	// STVEHX
    0U,	// STVEWX
    0U,	// STVX
    0U,	// STVXL
    0U,	// STW
    0U,	// STW8
    0U,	// STWBRX
    0U,	// STWCX
    0U,	// STWU
    0U,	// STWU8
    0U,	// STWUX
    0U,	// STWUX8
    0U,	// STWX
    0U,	// STWX8
    0U,	// SUBF
    0U,	// SUBF8
    0U,	// SUBF8o
    0U,	// SUBFC
    0U,	// SUBFC8
    0U,	// SUBFC8o
    0U,	// SUBFCo
    0U,	// SUBFE
    0U,	// SUBFE8
    0U,	// SUBFE8o
    0U,	// SUBFEo
    0U,	// SUBFIC
    0U,	// SUBFIC8
    0U,	// SUBFME
    0U,	// SUBFME8
    0U,	// SUBFME8o
    0U,	// SUBFMEo
    0U,	// SUBFZE
    0U,	// SUBFZE8
    0U,	// SUBFZE8o
    0U,	// SUBFZEo
    0U,	// SUBFo
    0U,	// SUBI
    0U,	// SUBIC
    0U,	// SUBICo
    0U,	// SUBIS
    0U,	// SYNC
    0U,	// TAILB
    0U,	// TAILB8
    0U,	// TAILBA
    0U,	// TAILBA8
    0U,	// TAILBCTR
    0U,	// TAILBCTR8
    0U,	// TCRETURNai
    0U,	// TCRETURNai8
    0U,	// TCRETURNdi
    0U,	// TCRETURNdi8
    0U,	// TCRETURNri
    0U,	// TCRETURNri8
    0U,	// TD
    0U,	// TDI
    0U,	// TRAP
    0U,	// TW
    0U,	// TWI
    0U,	// UPDATE_VRSAVE
    0U,	// VADDCUW
    0U,	// VADDFP
    0U,	// VADDSBS
    0U,	// VADDSHS
    0U,	// VADDSWS
    0U,	// VADDUBM
    0U,	// VADDUBS
    0U,	// VADDUHM
    0U,	// VADDUHS
    0U,	// VADDUWM
    0U,	// VADDUWS
    0U,	// VAND
    0U,	// VANDC
    0U,	// VAVGSB
    0U,	// VAVGSH
    0U,	// VAVGSW
    0U,	// VAVGUB
    0U,	// VAVGUH
    0U,	// VAVGUW
    0U,	// VCFSX
    0U,	// VCFSX_0
    0U,	// VCFUX
    0U,	// VCFUX_0
    0U,	// VCMPBFP
    0U,	// VCMPBFPo
    0U,	// VCMPEQFP
    0U,	// VCMPEQFPo
    0U,	// VCMPEQUB
    0U,	// VCMPEQUBo
    0U,	// VCMPEQUH
    0U,	// VCMPEQUHo
    0U,	// VCMPEQUW
    0U,	// VCMPEQUWo
    0U,	// VCMPGEFP
    0U,	// VCMPGEFPo
    0U,	// VCMPGTFP
    0U,	// VCMPGTFPo
    0U,	// VCMPGTSB
    0U,	// VCMPGTSBo
    0U,	// VCMPGTSH
    0U,	// VCMPGTSHo
    0U,	// VCMPGTSW
    0U,	// VCMPGTSWo
    0U,	// VCMPGTUB
    0U,	// VCMPGTUBo
    0U,	// VCMPGTUH
    0U,	// VCMPGTUHo
    0U,	// VCMPGTUW
    0U,	// VCMPGTUWo
    0U,	// VCTSXS
    0U,	// VCTSXS_0
    0U,	// VCTUXS
    0U,	// VCTUXS_0
    0U,	// VEXPTEFP
    0U,	// VLOGEFP
    2U,	// VMADDFP
    0U,	// VMAXFP
    0U,	// VMAXSB
    0U,	// VMAXSH
    0U,	// VMAXSW
    0U,	// VMAXUB
    0U,	// VMAXUH
    0U,	// VMAXUW
    2U,	// VMHADDSHS
    2U,	// VMHRADDSHS
    0U,	// VMINFP
    0U,	// VMINSB
    0U,	// VMINSH
    0U,	// VMINSW
    0U,	// VMINUB
    0U,	// VMINUH
    0U,	// VMINUW
    2U,	// VMLADDUHM
    0U,	// VMRGHB
    0U,	// VMRGHH
    0U,	// VMRGHW
    0U,	// VMRGLB
    0U,	// VMRGLH
    0U,	// VMRGLW
    2U,	// VMSUMMBM
    2U,	// VMSUMSHM
    2U,	// VMSUMSHS
    2U,	// VMSUMUBM
    2U,	// VMSUMUHM
    2U,	// VMSUMUHS
    0U,	// VMULESB
    0U,	// VMULESH
    0U,	// VMULEUB
    0U,	// VMULEUH
    0U,	// VMULOSB
    0U,	// VMULOSH
    0U,	// VMULOUB
    0U,	// VMULOUH
    2U,	// VNMSUBFP
    0U,	// VNOR
    0U,	// VOR
    2U,	// VPERM
    0U,	// VPKPX
    0U,	// VPKSHSS
    0U,	// VPKSHUS
    0U,	// VPKSWSS
    0U,	// VPKSWUS
    0U,	// VPKUHUM
    0U,	// VPKUHUS
    0U,	// VPKUWUM
    0U,	// VPKUWUS
    0U,	// VREFP
    0U,	// VRFIM
    0U,	// VRFIN
    0U,	// VRFIP
    0U,	// VRFIZ
    0U,	// VRLB
    0U,	// VRLH
    0U,	// VRLW
    0U,	// VRSQRTEFP
    2U,	// VSEL
    0U,	// VSL
    0U,	// VSLB
    1U,	// VSLDOI
    0U,	// VSLH
    0U,	// VSLO
    0U,	// VSLW
    0U,	// VSPLTB
    0U,	// VSPLTH
    0U,	// VSPLTISB
    0U,	// VSPLTISH
    0U,	// VSPLTISW
    0U,	// VSPLTW
    0U,	// VSR
    0U,	// VSRAB
    0U,	// VSRAH
    0U,	// VSRAW
    0U,	// VSRB
    0U,	// VSRH
    0U,	// VSRO
    0U,	// VSRW
    0U,	// VSUBCUW
    0U,	// VSUBFP
    0U,	// VSUBSBS
    0U,	// VSUBSHS
    0U,	// VSUBSWS
    0U,	// VSUBUBM
    0U,	// VSUBUBS
    0U,	// VSUBUHM
    0U,	// VSUBUHS
    0U,	// VSUBUWM
    0U,	// VSUBUWS
    0U,	// VSUM2SWS
    0U,	// VSUM4SBS
    0U,	// VSUM4SHS
    0U,	// VSUM4UBS
    0U,	// VSUMSWS
    0U,	// VUPKHPX
    0U,	// VUPKHSB
    0U,	// VUPKHSH
    0U,	// VUPKLPX
    0U,	// VUPKLSB
    0U,	// VUPKLSH
    0U,	// VXOR
    0U,	// V_SET0
    0U,	// V_SET0B
    0U,	// V_SET0H
    0U,	// V_SETALLONES
    0U,	// V_SETALLONESB
    0U,	// V_SETALLONESH
    0U,	// WAIT
    0U,	// XOR
    0U,	// XOR8
    0U,	// XOR8o
    0U,	// XORI
    0U,	// XORI8
    0U,	// XORIS
    0U,	// XORIS8
    0U,	// XORo
    0U,	// gBC
    0U,	// gBCA
    0U,	// gBCCTR
    0U,	// gBCCTRL
    0U,	// gBCL
    0U,	// gBCLA
    0U,	// gBCLR
    0U,	// gBCLRL
    0U
  };

  const char AsmStrs[] = {
  /* 0 */ '#', 'E', 'H', '_', 'S', 'j', 'L', 'j', '_', 'S', 'e', 't', 'u', 'p', 9, 0,
  /* 16 */ 'b', 'd', 'z', 'l', 'a', '+', 32, 0,
  /* 24 */ 'b', 'd', 'n', 'z', 'l', 'a', '+', 32, 0,
  /* 33 */ 'b', 'd', 'z', 'a', '+', 32, 0,
  /* 40 */ 'b', 'd', 'n', 'z', 'a', '+', 32, 0,
  /* 48 */ 'b', 'd', 'z', 'l', '+', 32, 0,
  /* 55 */ 'b', 'd', 'n', 'z', 'l', '+', 32, 0,
  /* 63 */ 'b', 'd', 'z', '+', 32, 0,
  /* 69 */ 'b', 'd', 'n', 'z', '+', 32, 0,
  /* 76 */ 'b', 'c', 'l', 32, '2', '0', ',', 32, '3', '1', ',', 32, 0,
  /* 89 */ 'm', 't', 's', 'p', 'r', 32, '2', '5', '6', ',', 32, 0,
  /* 101 */ 'b', 'd', 'z', 'l', 'a', '-', 32, 0,
  /* 109 */ 'b', 'd', 'n', 'z', 'l', 'a', '-', 32, 0,
  /* 118 */ 'b', 'd', 'z', 'a', '-', 32, 0,
  /* 125 */ 'b', 'd', 'n', 'z', 'a', '-', 32, 0,
  /* 133 */ 'b', 'd', 'z', 'l', '-', 32, 0,
  /* 140 */ 'b', 'd', 'n', 'z', 'l', '-', 32, 0,
  /* 148 */ 'b', 'd', 'z', '-', 32, 0,
  /* 154 */ 'b', 'd', 'n', 'z', '-', 32, 0,
  /* 161 */ 'v', 'c', 'm', 'p', 'g', 't', 's', 'b', '.', 32, 0,
  /* 172 */ 'e', 'x', 't', 's', 'b', '.', 32, 0,
  /* 180 */ 'v', 'c', 'm', 'p', 'e', 'q', 'u', 'b', '.', 32, 0,
  /* 191 */ 'f', 's', 'u', 'b', '.', 32, 0,
  /* 198 */ 'f', 'm', 's', 'u', 'b', '.', 32, 0,
  /* 206 */ 'f', 'n', 'm', 's', 'u', 'b', '.', 32, 0,
  /* 215 */ 'v', 'c', 'm', 'p', 'g', 't', 'u', 'b', '.', 32, 0,
  /* 226 */ 'a', 'd', 'd', 'c', '.', 32, 0,
  /* 233 */ 'a', 'n', 'd', 'c', '.', 32, 0,
  /* 240 */ 's', 'u', 'b', 'f', 'c', '.', 32, 0,
  /* 248 */ 's', 'u', 'b', 'i', 'c', '.', 32, 0,
  /* 256 */ 'a', 'd', 'd', 'i', 'c', '.', 32, 0,
  /* 264 */ 'r', 'l', 'd', 'i', 'c', '.', 32, 0,
  /* 272 */ 'o', 'r', 'c', '.', 32, 0,
  /* 278 */ 's', 'r', 'a', 'd', '.', 32, 0,
  /* 285 */ 'f', 'a', 'd', 'd', '.', 32, 0,
  /* 292 */ 'f', 'm', 'a', 'd', 'd', '.', 32, 0,
  /* 300 */ 'f', 'n', 'm', 'a', 'd', 'd', '.', 32, 0,
  /* 309 */ 'm', 'u', 'l', 'h', 'd', '.', 32, 0,
  /* 317 */ 'f', 'c', 'f', 'i', 'd', '.', 32, 0,
  /* 325 */ 'm', 'u', 'l', 'l', 'd', '.', 32, 0,
  /* 333 */ 's', 'l', 'd', '.', 32, 0,
  /* 339 */ 'n', 'a', 'n', 'd', '.', 32, 0,
  /* 346 */ 's', 'r', 'd', '.', 32, 0,
  /* 352 */ 'p', 'o', 'p', 'c', 'n', 't', 'd', '.', 32, 0,
  /* 362 */ 'd', 'i', 'v', 'd', '.', 32, 0,
  /* 369 */ 'c', 'n', 't', 'l', 'z', 'd', '.', 32, 0,
  /* 378 */ 'a', 'd', 'd', 'e', '.', 32, 0,
  /* 385 */ 's', 'u', 'b', 'f', 'e', '.', 32, 0,
  /* 393 */ 'a', 'd', 'd', 'm', 'e', '.', 32, 0,
  /* 401 */ 's', 'u', 'b', 'f', 'm', 'e', '.', 32, 0,
  /* 410 */ 'f', 'r', 'e', '.', 32, 0,
  /* 416 */ 'f', 'r', 's', 'q', 'r', 't', 'e', '.', 32, 0,
  /* 426 */ 'a', 'd', 'd', 'z', 'e', '.', 32, 0,
  /* 434 */ 's', 'u', 'b', 'f', 'z', 'e', '.', 32, 0,
  /* 443 */ 's', 'u', 'b', 'f', '.', 32, 0,
  /* 450 */ 'f', 'n', 'e', 'g', '.', 32, 0,
  /* 457 */ 'v', 'c', 'm', 'p', 'g', 't', 's', 'h', '.', 32, 0,
  /* 468 */ 'e', 'x', 't', 's', 'h', '.', 32, 0,
  /* 476 */ 'v', 'c', 'm', 'p', 'e', 'q', 'u', 'h', '.', 32, 0,
  /* 487 */ 'v', 'c', 'm', 'p', 'g', 't', 'u', 'h', '.', 32, 0,
  /* 498 */ 's', 'r', 'a', 'd', 'i', '.', 32, 0,
  /* 506 */ 'c', 'l', 'r', 'l', 's', 'l', 'd', 'i', '.', 32, 0,
  /* 517 */ 'e', 'x', 't', 'l', 'd', 'i', '.', 32, 0,
  /* 526 */ 'a', 'n', 'd', 'i', '.', 32, 0,
  /* 533 */ 'c', 'l', 'r', 'r', 'd', 'i', '.', 32, 0,
  /* 542 */ 'i', 'n', 's', 'r', 'd', 'i', '.', 32, 0,
  /* 551 */ 'r', 'o', 't', 'r', 'd', 'i', '.', 32, 0,
  /* 560 */ 'e', 'x', 't', 'r', 'd', 'i', '.', 32, 0,
  /* 569 */ 'r', 'l', 'd', 'i', 'm', 'i', '.', 32, 0,
  /* 578 */ 'r', 'l', 'w', 'i', 'm', 'i', '.', 32, 0,
  /* 587 */ 's', 'r', 'a', 'w', 'i', '.', 32, 0,
  /* 595 */ 'c', 'l', 'r', 'l', 's', 'l', 'w', 'i', '.', 32, 0,
  /* 606 */ 'i', 'n', 's', 'l', 'w', 'i', '.', 32, 0,
  /* 615 */ 'e', 'x', 't', 'l', 'w', 'i', '.', 32, 0,
  /* 624 */ 'c', 'l', 'r', 'r', 'w', 'i', '.', 32, 0,
  /* 633 */ 'i', 'n', 's', 'r', 'w', 'i', '.', 32, 0,
  /* 642 */ 'r', 'o', 't', 'r', 'w', 'i', '.', 32, 0,
  /* 651 */ 'e', 'x', 't', 'r', 'w', 'i', '.', 32, 0,
  /* 660 */ 'r', 'l', 'd', 'c', 'l', '.', 32, 0,
  /* 668 */ 'r', 'l', 'd', 'i', 'c', 'l', '.', 32, 0,
  /* 677 */ 'f', 's', 'e', 'l', '.', 32, 0,
  /* 684 */ 'f', 'm', 'u', 'l', '.', 32, 0,
  /* 691 */ 'f', 'r', 'i', 'm', '.', 32, 0,
  /* 698 */ 'r', 'l', 'w', 'i', 'n', 'm', '.', 32, 0,
  /* 707 */ 'r', 'l', 'w', 'n', 'm', '.', 32, 0,
  /* 715 */ 'f', 'r', 'i', 'n', '.', 32, 0,
  /* 722 */ 'v', 'c', 'm', 'p', 'b', 'f', 'p', '.', 32, 0,
  /* 732 */ 'v', 'c', 'm', 'p', 'g', 'e', 'f', 'p', '.', 32, 0,
  /* 743 */ 'v', 'c', 'm', 'p', 'e', 'q', 'f', 'p', '.', 32, 0,
  /* 754 */ 'v', 'c', 'm', 'p', 'g', 't', 'f', 'p', '.', 32, 0,
  /* 765 */ 'f', 'r', 'i', 'p', '.', 32, 0,
  /* 772 */ 'f', 'r', 's', 'p', '.', 32, 0,
  /* 779 */ 'r', 'l', 'd', 'c', 'r', '.', 32, 0,
  /* 787 */ 'r', 'l', 'd', 'i', 'c', 'r', '.', 32, 0,
  /* 796 */ 'f', 'm', 'r', '.', 32, 0,
  /* 802 */ 'n', 'o', 'r', '.', 32, 0,
  /* 808 */ 'x', 'o', 'r', '.', 32, 0,
  /* 814 */ 'f', 'a', 'b', 's', '.', 32, 0,
  /* 821 */ 'f', 'n', 'a', 'b', 's', '.', 32, 0,
  /* 829 */ 'f', 's', 'u', 'b', 's', '.', 32, 0,
  /* 837 */ 'f', 'm', 's', 'u', 'b', 's', '.', 32, 0,
  /* 846 */ 'f', 'n', 'm', 's', 'u', 'b', 's', '.', 32, 0,
  /* 856 */ 'f', 'a', 'd', 'd', 's', '.', 32, 0,
  /* 864 */ 'f', 'm', 'a', 'd', 'd', 's', '.', 32, 0,
  /* 873 */ 'f', 'n', 'm', 'a', 'd', 'd', 's', '.', 32, 0,
  /* 883 */ 'f', 'c', 'f', 'i', 'd', 's', '.', 32, 0,
  /* 892 */ 'f', 'r', 'e', 's', '.', 32, 0,
  /* 899 */ 'f', 'r', 's', 'q', 'r', 't', 'e', 's', '.', 32, 0,
  /* 910 */ 'a', 'n', 'd', 'i', 's', '.', 32, 0,
  /* 918 */ 'f', 'm', 'u', 'l', 's', '.', 32, 0,
  /* 926 */ 'f', 's', 'q', 'r', 't', 's', '.', 32, 0,
  /* 935 */ 'f', 'c', 'f', 'i', 'd', 'u', 's', '.', 32, 0,
  /* 945 */ 'f', 'd', 'i', 'v', 's', '.', 32, 0,
  /* 953 */ 'f', 's', 'q', 'r', 't', '.', 32, 0,
  /* 961 */ 'm', 'u', 'l', 'h', 'd', 'u', '.', 32, 0,
  /* 970 */ 'f', 'c', 'f', 'i', 'd', 'u', '.', 32, 0,
  /* 979 */ 'd', 'i', 'v', 'd', 'u', '.', 32, 0,
  /* 987 */ 'm', 'u', 'l', 'h', 'w', 'u', '.', 32, 0,
  /* 996 */ 'd', 'i', 'v', 'w', 'u', '.', 32, 0,
  /* 1004 */ 'f', 'd', 'i', 'v', '.', 32, 0,
  /* 1011 */ 'e', 'q', 'v', '.', 32, 0,
  /* 1017 */ 's', 'r', 'a', 'w', '.', 32, 0,
  /* 1024 */ 'm', 'u', 'l', 'h', 'w', '.', 32, 0,
  /* 1032 */ 'm', 'u', 'l', 'l', 'w', '.', 32, 0,
  /* 1040 */ 's', 'l', 'w', '.', 32, 0,
  /* 1046 */ 's', 'r', 'w', '.', 32, 0,
  /* 1052 */ 'v', 'c', 'm', 'p', 'g', 't', 's', 'w', '.', 32, 0,
  /* 1063 */ 'e', 'x', 't', 's', 'w', '.', 32, 0,
  /* 1071 */ 'p', 'o', 'p', 'c', 'n', 't', 'w', '.', 32, 0,
  /* 1081 */ 'v', 'c', 'm', 'p', 'e', 'q', 'u', 'w', '.', 32, 0,
  /* 1092 */ 'v', 'c', 'm', 'p', 'g', 't', 'u', 'w', '.', 32, 0,
  /* 1103 */ 'd', 'i', 'v', 'w', '.', 32, 0,
  /* 1110 */ 'c', 'n', 't', 'l', 'z', 'w', '.', 32, 0,
  /* 1119 */ 's', 't', 'd', 'c', 'x', '.', 32, 0,
  /* 1127 */ 's', 't', 'w', 'c', 'x', '.', 32, 0,
  /* 1135 */ 'f', 'c', 't', 'i', 'd', 'z', '.', 32, 0,
  /* 1144 */ 'f', 'r', 'i', 'z', '.', 32, 0,
  /* 1151 */ 'f', 'c', 't', 'i', 'd', 'u', 'z', '.', 32, 0,
  /* 1161 */ 'f', 'c', 't', 'i', 'w', 'u', 'z', '.', 32, 0,
  /* 1171 */ 'f', 'c', 't', 'i', 'w', 'z', '.', 32, 0,
  /* 1180 */ 'm', 't', 'f', 's', 'b', '0', 32, 0,
  /* 1188 */ 'm', 't', 'f', 's', 'b', '1', 32, 0,
  /* 1196 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'C', 'M', 'P', '_', 'S', 'W', 'A', 'P', '_', 'I', '3', '2', 32, 0,
  /* 1218 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'C', 'M', 'P', '_', 'S', 'W', 'A', 'P', '_', 'I', '1', '6', 32, 0,
  /* 1240 */ '#', 'T', 'C', '_', 'R', 'E', 'T', 'U', 'R', 'N', 'a', '8', 32, 0,
  /* 1254 */ '#', 'T', 'C', '_', 'R', 'E', 'T', 'U', 'R', 'N', 'd', '8', 32, 0,
  /* 1268 */ '#', 'T', 'C', '_', 'R', 'E', 'T', 'U', 'R', 'N', 'r', '8', 32, 0,
  /* 1282 */ 'U', 'P', 'D', 'A', 'T', 'E', '_', 'V', 'R', 'S', 'A', 'V', 'E', 32, 0,
  /* 1297 */ '#', 'A', 'D', 'J', 'C', 'A', 'L', 'L', 'S', 'T', 'A', 'C', 'K', 'D', 'O', 'W', 'N', 32, 0,
  /* 1316 */ '#', 'A', 'D', 'J', 'C', 'A', 'L', 'L', 'S', 'T', 'A', 'C', 'K', 'U', 'P', 32, 0,
  /* 1333 */ '#', 'T', 'C', '_', 'R', 'E', 'T', 'U', 'R', 'N', 'a', 32, 0,
  /* 1346 */ 'd', 'c', 'b', 'a', 32, 0,
  /* 1352 */ 'b', 'c', 'a', 32, 0,
  /* 1357 */ 'l', 'h', 'a', 32, 0,
  /* 1362 */ 'b', 'l', 'a', 32, 0,
  /* 1367 */ 'b', 'c', 'l', 'a', 32, 0,
  /* 1373 */ 'b', 'd', 'z', 'l', 'a', 32, 0,
  /* 1380 */ 'b', 'd', 'n', 'z', 'l', 'a', 32, 0,
  /* 1388 */ 'l', 'w', 'a', 32, 0,
  /* 1393 */ 'b', 'd', 'z', 'a', 32, 0,
  /* 1399 */ 'b', 'd', 'n', 'z', 'a', 32, 0,
  /* 1406 */ 'v', 's', 'r', 'a', 'b', 32, 0,
  /* 1413 */ 'v', 'm', 'r', 'g', 'h', 'b', 32, 0,
  /* 1421 */ 'v', 'm', 'r', 'g', 'l', 'b', 32, 0,
  /* 1429 */ 'v', 'r', 'l', 'b', 32, 0,
  /* 1435 */ 'v', 's', 'l', 'b', 32, 0,
  /* 1441 */ 'v', 's', 'r', 'b', 32, 0,
  /* 1447 */ 'v', 'm', 'u', 'l', 'e', 's', 'b', 32, 0,
  /* 1456 */ 'v', 'a', 'v', 'g', 's', 'b', 32, 0,
  /* 1464 */ 'v', 'u', 'p', 'k', 'h', 's', 'b', 32, 0,
  /* 1473 */ 'v', 's', 'p', 'l', 't', 'i', 's', 'b', 32, 0,
  /* 1483 */ 'v', 'u', 'p', 'k', 'l', 's', 'b', 32, 0,
  /* 1492 */ 'v', 'm', 'i', 'n', 's', 'b', 32, 0,
  /* 1500 */ 'v', 'm', 'u', 'l', 'o', 's', 'b', 32, 0,
  /* 1509 */ 'v', 'c', 'm', 'p', 'g', 't', 's', 'b', 32, 0,
  /* 1519 */ 'e', 'x', 't', 's', 'b', 32, 0,
  /* 1526 */ 'v', 'm', 'a', 'x', 's', 'b', 32, 0,
  /* 1534 */ 'm', 'f', 't', 'b', 32, 0,
  /* 1540 */ 'v', 's', 'p', 'l', 't', 'b', 32, 0,
  /* 1548 */ 's', 't', 'b', 32, 0,
  /* 1553 */ 'v', 'm', 'u', 'l', 'e', 'u', 'b', 32, 0,
  /* 1562 */ 'v', 'a', 'v', 'g', 'u', 'b', 32, 0,
  /* 1570 */ 'v', 'm', 'i', 'n', 'u', 'b', 32, 0,
  /* 1578 */ 'v', 'm', 'u', 'l', 'o', 'u', 'b', 32, 0,
  /* 1587 */ 'v', 'c', 'm', 'p', 'e', 'q', 'u', 'b', 32, 0,
  /* 1597 */ 'f', 's', 'u', 'b', 32, 0,
  /* 1603 */ 'f', 'm', 's', 'u', 'b', 32, 0,
  /* 1610 */ 'f', 'n', 'm', 's', 'u', 'b', 32, 0,
  /* 1618 */ 'v', 'c', 'm', 'p', 'g', 't', 'u', 'b', 32, 0,
  /* 1628 */ 'v', 'm', 'a', 'x', 'u', 'b', 32, 0,
  /* 1636 */ 'b', 'c', 32, 0,
  /* 1640 */ 'a', 'd', 'd', 'c', 32, 0,
  /* 1646 */ 'c', 'r', 'a', 'n', 'd', 'c', 32, 0,
  /* 1654 */ 'v', 'a', 'n', 'd', 'c', 32, 0,
  /* 1661 */ 's', 'u', 'b', 'f', 'c', 32, 0,
  /* 1668 */ 's', 'u', 'b', 'i', 'c', 32, 0,
  /* 1675 */ 'a', 'd', 'd', 'i', 'c', 32, 0,
  /* 1682 */ 'r', 'l', 'd', 'i', 'c', 32, 0,
  /* 1689 */ 's', 'u', 'b', 'f', 'i', 'c', 32, 0,
  /* 1697 */ 's', 'y', 'n', 'c', 32, 0,
  /* 1703 */ 'c', 'r', 'o', 'r', 'c', 32, 0,
  /* 1710 */ 's', 'c', 32, 0,
  /* 1714 */ '#', 'T', 'C', '_', 'R', 'E', 'T', 'U', 'R', 'N', 'd', 32, 0,
  /* 1727 */ 's', 'r', 'a', 'd', 32, 0,
  /* 1733 */ 'f', 'a', 'd', 'd', 32, 0,
  /* 1739 */ 'f', 'm', 'a', 'd', 'd', 32, 0,
  /* 1746 */ 'f', 'n', 'm', 'a', 'd', 'd', 32, 0,
  /* 1754 */ 'l', 'f', 'd', 32, 0,
  /* 1759 */ 's', 't', 'f', 'd', 32, 0,
  /* 1765 */ 'm', 'u', 'l', 'h', 'd', 32, 0,
  /* 1772 */ 'f', 'c', 'f', 'i', 'd', 32, 0,
  /* 1779 */ 'm', 'u', 'l', 'l', 'd', 32, 0,
  /* 1786 */ 'c', 'm', 'p', 'l', 'd', 32, 0,
  /* 1793 */ 's', 'l', 'd', 32, 0,
  /* 1798 */ 'c', 'r', 'n', 'a', 'n', 'd', 32, 0,
  /* 1806 */ 'c', 'r', 'a', 'n', 'd', 32, 0,
  /* 1813 */ 'v', 'a', 'n', 'd', 32, 0,
  /* 1819 */ 'c', 'm', 'p', 'd', 32, 0,
  /* 1825 */ 's', 'r', 'd', 32, 0,
  /* 1830 */ 'p', 'o', 'p', 'c', 'n', 't', 'd', 32, 0,
  /* 1839 */ 's', 't', 'd', 32, 0,
  /* 1844 */ 'd', 'i', 'v', 'd', 32, 0,
  /* 1850 */ 'c', 'n', 't', 'l', 'z', 'd', 32, 0,
  /* 1858 */ 'a', 'd', 'd', 'e', 32, 0,
  /* 1864 */ 's', 'u', 'b', 'f', 'e', 32, 0,
  /* 1871 */ 'a', 'd', 'd', 'm', 'e', 32, 0,
  /* 1878 */ 's', 'u', 'b', 'f', 'm', 'e', 32, 0,
  /* 1886 */ 'f', 'r', 'e', 32, 0,
  /* 1891 */ 'f', 'r', 's', 'q', 'r', 't', 'e', 32, 0,
  /* 1900 */ 'a', 'd', 'd', 'z', 'e', 32, 0,
  /* 1907 */ 's', 'u', 'b', 'f', 'z', 'e', 32, 0,
  /* 1915 */ 'd', 'c', 'b', 'f', 32, 0,
  /* 1921 */ 's', 'u', 'b', 'f', 32, 0,
  /* 1927 */ 'm', 'c', 'r', 'f', 32, 0,
  /* 1933 */ 'm', 'f', 'o', 'c', 'r', 'f', 32, 0,
  /* 1941 */ 'm', 't', 'o', 'c', 'r', 'f', 32, 0,
  /* 1949 */ 'm', 't', 'c', 'r', 'f', 32, 0,
  /* 1956 */ 'm', 't', 'f', 's', 'f', 32, 0,
  /* 1963 */ 'f', 'n', 'e', 'g', 32, 0,
  /* 1969 */ 'v', 's', 'r', 'a', 'h', 32, 0,
  /* 1976 */ 'v', 'm', 'r', 'g', 'h', 'h', 32, 0,
  /* 1984 */ 'v', 'm', 'r', 'g', 'l', 'h', 32, 0,
  /* 1992 */ 'v', 'r', 'l', 'h', 32, 0,
  /* 1998 */ 'v', 's', 'l', 'h', 32, 0,
  /* 2004 */ 'v', 's', 'r', 'h', 32, 0,
  /* 2010 */ 'v', 'm', 'u', 'l', 'e', 's', 'h', 32, 0,
  /* 2019 */ 'v', 'a', 'v', 'g', 's', 'h', 32, 0,
  /* 2027 */ 'v', 'u', 'p', 'k', 'h', 's', 'h', 32, 0,
  /* 2036 */ 'v', 's', 'p', 'l', 't', 'i', 's', 'h', 32, 0,
  /* 2046 */ 'v', 'u', 'p', 'k', 'l', 's', 'h', 32, 0,
  /* 2055 */ 'v', 'm', 'i', 'n', 's', 'h', 32, 0,
  /* 2063 */ 'v', 'm', 'u', 'l', 'o', 's', 'h', 32, 0,
  /* 2072 */ 'v', 'c', 'm', 'p', 'g', 't', 's', 'h', 32, 0,
  /* 2082 */ 'e', 'x', 't', 's', 'h', 32, 0,
  /* 2089 */ 'v', 'm', 'a', 'x', 's', 'h', 32, 0,
  /* 2097 */ 'v', 's', 'p', 'l', 't', 'h', 32, 0,
  /* 2105 */ 's', 't', 'h', 32, 0,
  /* 2110 */ 'v', 'm', 'u', 'l', 'e', 'u', 'h', 32, 0,
  /* 2119 */ 'v', 'a', 'v', 'g', 'u', 'h', 32, 0,
  /* 2127 */ 'v', 'm', 'i', 'n', 'u', 'h', 32, 0,
  /* 2135 */ 'v', 'm', 'u', 'l', 'o', 'u', 'h', 32, 0,
  /* 2144 */ 'v', 'c', 'm', 'p', 'e', 'q', 'u', 'h', 32, 0,
  /* 2154 */ 'v', 'c', 'm', 'p', 'g', 't', 'u', 'h', 32, 0,
  /* 2164 */ 'v', 'm', 'a', 'x', 'u', 'h', 32, 0,
  /* 2172 */ 'd', 'c', 'b', 'i', 32, 0,
  /* 2178 */ 'i', 'c', 'b', 'i', 32, 0,
  /* 2184 */ 's', 'u', 'b', 'i', 32, 0,
  /* 2190 */ 's', 'r', 'a', 'd', 'i', 32, 0,
  /* 2197 */ 'a', 'd', 'd', 'i', 32, 0,
  /* 2203 */ 'c', 'm', 'p', 'l', 'd', 'i', 32, 0,
  /* 2211 */ 'c', 'l', 'r', 'l', 's', 'l', 'd', 'i', 32, 0,
  /* 2221 */ 'e', 'x', 't', 'l', 'd', 'i', 32, 0,
  /* 2229 */ 'c', 'm', 'p', 'd', 'i', 32, 0,
  /* 2236 */ 'c', 'l', 'r', 'r', 'd', 'i', 32, 0,
  /* 2244 */ 'i', 'n', 's', 'r', 'd', 'i', 32, 0,
  /* 2252 */ 'r', 'o', 't', 'r', 'd', 'i', 32, 0,
  /* 2260 */ 'e', 'x', 't', 'r', 'd', 'i', 32, 0,
  /* 2268 */ 't', 'd', 'i', 32, 0,
  /* 2273 */ 'm', 'u', 'l', 'l', 'i', 32, 0,
  /* 2280 */ 'r', 'l', 'd', 'i', 'm', 'i', 32, 0,
  /* 2288 */ 'r', 'l', 'w', 'i', 'm', 'i', 32, 0,
  /* 2296 */ 'v', 's', 'l', 'd', 'o', 'i', 32, 0,
  /* 2304 */ 'x', 'o', 'r', 'i', 32, 0,
  /* 2310 */ 's', 'r', 'a', 'w', 'i', 32, 0,
  /* 2317 */ 'c', 'm', 'p', 'l', 'w', 'i', 32, 0,
  /* 2325 */ 'c', 'l', 'r', 'l', 's', 'l', 'w', 'i', 32, 0,
  /* 2335 */ 'i', 'n', 's', 'l', 'w', 'i', 32, 0,
  /* 2343 */ 'e', 'x', 't', 'l', 'w', 'i', 32, 0,
  /* 2351 */ 'c', 'm', 'p', 'w', 'i', 32, 0,
  /* 2358 */ 'c', 'l', 'r', 'r', 'w', 'i', 32, 0,
  /* 2366 */ 'i', 'n', 's', 'r', 'w', 'i', 32, 0,
  /* 2374 */ 'r', 'o', 't', 'r', 'w', 'i', 32, 0,
  /* 2382 */ 'e', 'x', 't', 'r', 'w', 'i', 32, 0,
  /* 2390 */ 't', 'w', 'i', 32, 0,
  /* 2395 */ 'b', 'l', 32, 0,
  /* 2399 */ 'b', 'c', 'l', 32, 0,
  /* 2404 */ 'r', 'l', 'd', 'c', 'l', 32, 0,
  /* 2411 */ 'r', 'l', 'd', 'i', 'c', 'l', 32, 0,
  /* 2419 */ 'f', 's', 'e', 'l', 32, 0,
  /* 2425 */ 'i', 's', 'e', 'l', 32, 0,
  /* 2431 */ 'v', 's', 'e', 'l', 32, 0,
  /* 2437 */ 'b', 'c', 'l', 'r', 'l', 32, 0,
  /* 2444 */ 'b', 'c', 'c', 't', 'r', 'l', 32, 0,
  /* 2452 */ 'l', 'v', 's', 'l', 32, 0,
  /* 2458 */ 'f', 'm', 'u', 'l', 32, 0,
  /* 2464 */ 'l', 'v', 'x', 'l', 32, 0,
  /* 2470 */ 's', 't', 'v', 'x', 'l', 32, 0,
  /* 2477 */ 'd', 'c', 'b', 'z', 'l', 32, 0,
  /* 2484 */ 'b', 'd', 'z', 'l', 32, 0,
  /* 2490 */ 'b', 'd', 'n', 'z', 'l', 32, 0,
  /* 2497 */ 'v', 'm', 's', 'u', 'm', 'm', 'b', 'm', 32, 0,
  /* 2507 */ 'v', 's', 'u', 'b', 'u', 'b', 'm', 32, 0,
  /* 2516 */ 'v', 'a', 'd', 'd', 'u', 'b', 'm', 32, 0,
  /* 2525 */ 'v', 'm', 's', 'u', 'm', 'u', 'b', 'm', 32, 0,
  /* 2535 */ 'v', 'm', 's', 'u', 'm', 's', 'h', 'm', 32, 0,
  /* 2545 */ 'v', 's', 'u', 'b', 'u', 'h', 'm', 32, 0,
  /* 2554 */ 'v', 'm', 'l', 'a', 'd', 'd', 'u', 'h', 'm', 32, 0,
  /* 2565 */ 'v', 'a', 'd', 'd', 'u', 'h', 'm', 32, 0,
  /* 2574 */ 'v', 'm', 's', 'u', 'm', 'u', 'h', 'm', 32, 0,
  /* 2584 */ 'v', 'r', 'f', 'i', 'm', 32, 0,
  /* 2591 */ 'f', 'r', 'i', 'm', 32, 0,
  /* 2597 */ 'r', 'l', 'w', 'i', 'n', 'm', 32, 0,
  /* 2605 */ 'r', 'l', 'w', 'n', 'm', 32, 0,
  /* 2612 */ 'v', 'p', 'e', 'r', 'm', 32, 0,
  /* 2619 */ 'v', 'p', 'k', 'u', 'h', 'u', 'm', 32, 0,
  /* 2628 */ 'v', 'p', 'k', 'u', 'w', 'u', 'm', 32, 0,
  /* 2637 */ 'v', 's', 'u', 'b', 'u', 'w', 'm', 32, 0,
  /* 2646 */ 'v', 'a', 'd', 'd', 'u', 'w', 'm', 32, 0,
  /* 2655 */ 'v', 'r', 'f', 'i', 'n', 32, 0,
  /* 2662 */ 'f', 'r', 'i', 'n', 32, 0,
  /* 2668 */ 'v', 's', 'l', 'o', 32, 0,
  /* 2674 */ 'v', 's', 'r', 'o', 32, 0,
  /* 2680 */ 'v', 'c', 'm', 'p', 'b', 'f', 'p', 32, 0,
  /* 2689 */ 'v', 'n', 'm', 's', 'u', 'b', 'f', 'p', 32, 0,
  /* 2699 */ 'v', 's', 'u', 'b', 'f', 'p', 32, 0,
  /* 2707 */ 'v', 'm', 'a', 'd', 'd', 'f', 'p', 32, 0,
  /* 2716 */ 'v', 'a', 'd', 'd', 'f', 'p', 32, 0,
  /* 2724 */ 'v', 'l', 'o', 'g', 'e', 'f', 'p', 32, 0,
  /* 2733 */ 'v', 'c', 'm', 'p', 'g', 'e', 'f', 'p', 32, 0,
  /* 2743 */ 'v', 'r', 'e', 'f', 'p', 32, 0,
  /* 2750 */ 'v', 'e', 'x', 'p', 't', 'e', 'f', 'p', 32, 0,
  /* 2760 */ 'v', 'r', 's', 'q', 'r', 't', 'e', 'f', 'p', 32, 0,
  /* 2771 */ 'v', 'm', 'i', 'n', 'f', 'p', 32, 0,
  /* 2779 */ 'v', 'c', 'm', 'p', 'e', 'q', 'f', 'p', 32, 0,
  /* 2789 */ 'v', 'c', 'm', 'p', 'g', 't', 'f', 'p', 32, 0,
  /* 2799 */ 'v', 'm', 'a', 'x', 'f', 'p', 32, 0,
  /* 2807 */ 'v', 'r', 'f', 'i', 'p', 32, 0,
  /* 2814 */ 'f', 'r', 'i', 'p', 32, 0,
  /* 2820 */ 'f', 'r', 's', 'p', 32, 0,
  /* 2826 */ '#', 'T', 'C', '_', 'R', 'E', 'T', 'U', 'R', 'N', 'r', 32, 0,
  /* 2839 */ 'r', 'l', 'd', 'c', 'r', 32, 0,
  /* 2846 */ 'm', 'f', 'c', 'r', 32, 0,
  /* 2852 */ 'r', 'l', 'd', 'i', 'c', 'r', 32, 0,
  /* 2860 */ 'm', 'f', 'v', 's', 'c', 'r', 32, 0,
  /* 2868 */ 'm', 't', 'v', 's', 'c', 'r', 32, 0,
  /* 2876 */ 'b', 'c', 'l', 'r', 32, 0,
  /* 2882 */ 'm', 'f', 'l', 'r', 32, 0,
  /* 2888 */ 'm', 't', 'l', 'r', 32, 0,
  /* 2894 */ 'f', 'm', 'r', 32, 0,
  /* 2899 */ 'c', 'r', 'n', 'o', 'r', 32, 0,
  /* 2906 */ 'v', 'n', 'o', 'r', 32, 0,
  /* 2912 */ 'c', 'r', 'o', 'r', 32, 0,
  /* 2918 */ 'v', 'o', 'r', 32, 0,
  /* 2923 */ 'c', 'r', 'x', 'o', 'r', 32, 0,
  /* 2930 */ 'v', 'x', 'o', 'r', 32, 0,
  /* 2936 */ 'm', 'f', 's', 'p', 'r', 32, 0,
  /* 2943 */ 'm', 't', 's', 'p', 'r', 32, 0,
  /* 2950 */ 'l', 'v', 's', 'r', 32, 0,
  /* 2956 */ 'b', 'c', 'c', 't', 'r', 32, 0,
  /* 2963 */ 'm', 'f', 'c', 't', 'r', 32, 0,
  /* 2970 */ 'm', 't', 'c', 't', 'r', 32, 0,
  /* 2977 */ 'f', 'a', 'b', 's', 32, 0,
  /* 2983 */ 'f', 'n', 'a', 'b', 's', 32, 0,
  /* 2990 */ 'v', 's', 'u', 'm', '4', 's', 'b', 's', 32, 0,
  /* 3000 */ 'v', 's', 'u', 'b', 's', 'b', 's', 32, 0,
  /* 3009 */ 'v', 'a', 'd', 'd', 's', 'b', 's', 32, 0,
  /* 3018 */ 'v', 's', 'u', 'm', '4', 'u', 'b', 's', 32, 0,
  /* 3028 */ 'v', 's', 'u', 'b', 'u', 'b', 's', 32, 0,
  /* 3037 */ 'v', 'a', 'd', 'd', 'u', 'b', 's', 32, 0,
  /* 3046 */ 'f', 's', 'u', 'b', 's', 32, 0,
  /* 3053 */ 'f', 'm', 's', 'u', 'b', 's', 32, 0,
  /* 3061 */ 'f', 'n', 'm', 's', 'u', 'b', 's', 32, 0,
  /* 3070 */ 'f', 'a', 'd', 'd', 's', 32, 0,
  /* 3077 */ 'f', 'm', 'a', 'd', 'd', 's', 32, 0,
  /* 3085 */ 'f', 'n', 'm', 'a', 'd', 'd', 's', 32, 0,
  /* 3094 */ 'f', 'c', 'f', 'i', 'd', 's', 32, 0,
  /* 3102 */ 'f', 'r', 'e', 's', 32, 0,
  /* 3108 */ 'f', 'r', 's', 'q', 'r', 't', 'e', 's', 32, 0,
  /* 3118 */ 'm', 'f', 'f', 's', 32, 0,
  /* 3124 */ 'l', 'f', 's', 32, 0,
  /* 3129 */ 's', 't', 'f', 's', 32, 0,
  /* 3135 */ 'v', 's', 'u', 'm', '4', 's', 'h', 's', 32, 0,
  /* 3145 */ 'v', 's', 'u', 'b', 's', 'h', 's', 32, 0,
  /* 3154 */ 'v', 'm', 'h', 'a', 'd', 'd', 's', 'h', 's', 32, 0,
  /* 3165 */ 'v', 'm', 'h', 'r', 'a', 'd', 'd', 's', 'h', 's', 32, 0,
  /* 3177 */ 'v', 'a', 'd', 'd', 's', 'h', 's', 32, 0,
  /* 3186 */ 'v', 'm', 's', 'u', 'm', 's', 'h', 's', 32, 0,
  /* 3196 */ 'v', 's', 'u', 'b', 'u', 'h', 's', 32, 0,
  /* 3205 */ 'v', 'a', 'd', 'd', 'u', 'h', 's', 32, 0,
  /* 3214 */ 'v', 'm', 's', 'u', 'm', 'u', 'h', 's', 32, 0,
  /* 3224 */ 's', 'u', 'b', 'i', 's', 32, 0,
  /* 3231 */ 'a', 'd', 'd', 'i', 's', 32, 0,
  /* 3238 */ 'l', 'i', 's', 32, 0,
  /* 3243 */ 'x', 'o', 'r', 'i', 's', 32, 0,
  /* 3250 */ 'f', 'm', 'u', 'l', 's', 32, 0,
  /* 3257 */ 'd', 's', 's', 32, 0,
  /* 3262 */ 'v', 'p', 'k', 's', 'h', 's', 's', 32, 0,
  /* 3271 */ 'v', 'p', 'k', 's', 'w', 's', 's', 32, 0,
  /* 3280 */ 'f', 's', 'q', 'r', 't', 's', 32, 0,
  /* 3288 */ 'f', 'c', 'f', 'i', 'd', 'u', 's', 32, 0,
  /* 3297 */ 'v', 'p', 'k', 's', 'h', 'u', 's', 32, 0,
  /* 3306 */ 'v', 'p', 'k', 'u', 'h', 'u', 's', 32, 0,
  /* 3315 */ 'v', 'p', 'k', 's', 'w', 'u', 's', 32, 0,
  /* 3324 */ 'v', 'p', 'k', 'u', 'w', 'u', 's', 32, 0,
  /* 3333 */ 'f', 'd', 'i', 'v', 's', 32, 0,
  /* 3340 */ 'v', 's', 'u', 'm', '2', 's', 'w', 's', 32, 0,
  /* 3350 */ 'v', 's', 'u', 'b', 's', 'w', 's', 32, 0,
  /* 3359 */ 'v', 'a', 'd', 'd', 's', 'w', 's', 32, 0,
  /* 3368 */ 'v', 's', 'u', 'm', 's', 'w', 's', 32, 0,
  /* 3377 */ 'v', 's', 'u', 'b', 'u', 'w', 's', 32, 0,
  /* 3386 */ 'v', 'a', 'd', 'd', 'u', 'w', 's', 32, 0,
  /* 3395 */ 'v', 'c', 't', 's', 'x', 's', 32, 0,
  /* 3403 */ 'v', 'c', 't', 'u', 'x', 's', 32, 0,
  /* 3411 */ 'd', 'c', 'b', 't', 32, 0,
  /* 3417 */ 'w', 'a', 'i', 't', 32, 0,
  /* 3423 */ 'f', 's', 'q', 'r', 't', 32, 0,
  /* 3430 */ 'd', 'c', 'b', 's', 't', 32, 0,
  /* 3437 */ 'd', 's', 't', 32, 0,
  /* 3442 */ 'd', 'c', 'b', 't', 's', 't', 32, 0,
  /* 3450 */ 'd', 's', 't', 's', 't', 32, 0,
  /* 3457 */ 'd', 's', 't', 't', 32, 0,
  /* 3463 */ 'd', 's', 't', 's', 't', 't', 32, 0,
  /* 3471 */ 'l', 'h', 'a', 'u', 32, 0,
  /* 3477 */ 's', 't', 'b', 'u', 32, 0,
  /* 3483 */ 'l', 'f', 'd', 'u', 32, 0,
  /* 3489 */ 's', 't', 'f', 'd', 'u', 32, 0,
  /* 3496 */ 'm', 'u', 'l', 'h', 'd', 'u', 32, 0,
  /* 3504 */ 'f', 'c', 'f', 'i', 'd', 'u', 32, 0,
  /* 3512 */ 'l', 'd', 'u', 32, 0,
  /* 3517 */ 's', 't', 'd', 'u', 32, 0,
  /* 3523 */ 'd', 'i', 'v', 'd', 'u', 32, 0,
  /* 3530 */ 's', 't', 'h', 'u', 32, 0,
  /* 3536 */ 'f', 'c', 'm', 'p', 'u', 32, 0,
  /* 3543 */ 'l', 'f', 's', 'u', 32, 0,
  /* 3549 */ 's', 't', 'f', 's', 'u', 32, 0,
  /* 3556 */ 'm', 'u', 'l', 'h', 'w', 'u', 32, 0,
  /* 3564 */ 's', 't', 'w', 'u', 32, 0,
  /* 3570 */ 'd', 'i', 'v', 'w', 'u', 32, 0,
  /* 3577 */ 'l', 'b', 'z', 'u', 32, 0,
  /* 3583 */ 'l', 'h', 'z', 'u', 32, 0,
  /* 3589 */ 'l', 'w', 'z', 'u', 32, 0,
  /* 3595 */ 'f', 'd', 'i', 'v', 32, 0,
  /* 3601 */ 'c', 'r', 'e', 'q', 'v', 32, 0,
  /* 3608 */ 'v', 's', 'r', 'a', 'w', 32, 0,
  /* 3615 */ 'v', 'm', 'r', 'g', 'h', 'w', 32, 0,
  /* 3623 */ 'm', 'u', 'l', 'h', 'w', 32, 0,
  /* 3630 */ 'v', 'm', 'r', 'g', 'l', 'w', 32, 0,
  /* 3638 */ 'm', 'u', 'l', 'l', 'w', 32, 0,
  /* 3645 */ 'c', 'm', 'p', 'l', 'w', 32, 0,
  /* 3652 */ 'v', 'r', 'l', 'w', 32, 0,
  /* 3658 */ 'v', 's', 'l', 'w', 32, 0,
  /* 3664 */ 'l', 'm', 'w', 32, 0,
  /* 3669 */ 's', 't', 'm', 'w', 32, 0,
  /* 3675 */ 'c', 'm', 'p', 'w', 32, 0,
  /* 3681 */ 'v', 's', 'r', 'w', 32, 0,
  /* 3687 */ 'v', 'a', 'v', 'g', 's', 'w', 32, 0,
  /* 3695 */ 'v', 's', 'p', 'l', 't', 'i', 's', 'w', 32, 0,
  /* 3705 */ 'v', 'm', 'i', 'n', 's', 'w', 32, 0,
  /* 3713 */ 'v', 'c', 'm', 'p', 'g', 't', 's', 'w', 32, 0,
  /* 3723 */ 'e', 'x', 't', 's', 'w', 32, 0,
  /* 3730 */ 'v', 'm', 'a', 'x', 's', 'w', 32, 0,
  /* 3738 */ 'v', 's', 'p', 'l', 't', 'w', 32, 0,
  /* 3746 */ 'p', 'o', 'p', 'c', 'n', 't', 'w', 32, 0,
  /* 3755 */ 's', 't', 'w', 32, 0,
  /* 3760 */ 'v', 's', 'u', 'b', 'c', 'u', 'w', 32, 0,
  /* 3769 */ 'v', 'a', 'd', 'd', 'c', 'u', 'w', 32, 0,
  /* 3778 */ 'v', 'a', 'v', 'g', 'u', 'w', 32, 0,
  /* 3786 */ 'v', 'm', 'i', 'n', 'u', 'w', 32, 0,
  /* 3794 */ 'v', 'c', 'm', 'p', 'e', 'q', 'u', 'w', 32, 0,
  /* 3804 */ 'v', 'c', 'm', 'p', 'g', 't', 'u', 'w', 32, 0,
  /* 3814 */ 'v', 'm', 'a', 'x', 'u', 'w', 32, 0,
  /* 3822 */ 'd', 'i', 'v', 'w', 32, 0,
  /* 3828 */ 'c', 'n', 't', 'l', 'z', 'w', 32, 0,
  /* 3836 */ 'l', 'h', 'a', 'x', 32, 0,
  /* 3842 */ 'l', 'f', 'i', 'w', 'a', 'x', 32, 0,
  /* 3850 */ 'l', 'w', 'a', 'x', 32, 0,
  /* 3856 */ 'l', 'v', 'e', 'b', 'x', 32, 0,
  /* 3863 */ 's', 't', 'v', 'e', 'b', 'x', 32, 0,
  /* 3871 */ 's', 't', 'b', 'x', 32, 0,
  /* 3877 */ 'l', 'f', 'd', 'x', 32, 0,
  /* 3883 */ 's', 't', 'f', 'd', 'x', 32, 0,
  /* 3890 */ 'l', 'd', 'x', 32, 0,
  /* 3895 */ 's', 't', 'd', 'x', 32, 0,
  /* 3901 */ 'l', 'v', 'e', 'h', 'x', 32, 0,
  /* 3908 */ 's', 't', 'v', 'e', 'h', 'x', 32, 0,
  /* 3916 */ 's', 't', 'h', 'x', 32, 0,
  /* 3922 */ 'v', 'u', 'p', 'k', 'h', 'p', 'x', 32, 0,
  /* 3931 */ 'v', 'p', 'k', 'p', 'x', 32, 0,
  /* 3938 */ 'v', 'u', 'p', 'k', 'l', 'p', 'x', 32, 0,
  /* 3947 */ 'l', 'd', 'a', 'r', 'x', 32, 0,
  /* 3954 */ 'l', 'w', 'a', 'r', 'x', 32, 0,
  /* 3961 */ 'l', 'd', 'b', 'r', 'x', 32, 0,
  /* 3968 */ 's', 't', 'd', 'b', 'r', 'x', 32, 0,
  /* 3976 */ 'l', 'h', 'b', 'r', 'x', 32, 0,
  /* 3983 */ 's', 't', 'h', 'b', 'r', 'x', 32, 0,
  /* 3991 */ 'l', 'w', 'b', 'r', 'x', 32, 0,
  /* 3998 */ 's', 't', 'w', 'b', 'r', 'x', 32, 0,
  /* 4006 */ 'v', 'c', 'f', 's', 'x', 32, 0,
  /* 4013 */ 'l', 'f', 's', 'x', 32, 0,
  /* 4019 */ 's', 't', 'f', 's', 'x', 32, 0,
  /* 4026 */ 'l', 'h', 'a', 'u', 'x', 32, 0,
  /* 4033 */ 'l', 'w', 'a', 'u', 'x', 32, 0,
  /* 4040 */ 's', 't', 'b', 'u', 'x', 32, 0,
  /* 4047 */ 'l', 'f', 'd', 'u', 'x', 32, 0,
  /* 4054 */ 's', 't', 'f', 'd', 'u', 'x', 32, 0,
  /* 4062 */ 'l', 'd', 'u', 'x', 32, 0,
  /* 4068 */ 's', 't', 'd', 'u', 'x', 32, 0,
  /* 4075 */ 'v', 'c', 'f', 'u', 'x', 32, 0,
  /* 4082 */ 's', 't', 'h', 'u', 'x', 32, 0,
  /* 4089 */ 'l', 'f', 's', 'u', 'x', 32, 0,
  /* 4096 */ 's', 't', 'f', 's', 'u', 'x', 32, 0,
  /* 4104 */ 's', 't', 'w', 'u', 'x', 32, 0,
  /* 4111 */ 'l', 'b', 'z', 'u', 'x', 32, 0,
  /* 4118 */ 'l', 'h', 'z', 'u', 'x', 32, 0,
  /* 4125 */ 'l', 'w', 'z', 'u', 'x', 32, 0,
  /* 4132 */ 'l', 'v', 'x', 32, 0,
  /* 4137 */ 's', 't', 'v', 'x', 32, 0,
  /* 4143 */ 'l', 'v', 'e', 'w', 'x', 32, 0,
  /* 4150 */ 's', 't', 'v', 'e', 'w', 'x', 32, 0,
  /* 4158 */ 's', 't', 'f', 'i', 'w', 'x', 32, 0,
  /* 4166 */ 's', 't', 'w', 'x', 32, 0,
  /* 4172 */ 'l', 'b', 'z', 'x', 32, 0,
  /* 4178 */ 'l', 'h', 'z', 'x', 32, 0,
  /* 4184 */ 'l', 'f', 'i', 'w', 'z', 'x', 32, 0,
  /* 4192 */ 'l', 'w', 'z', 'x', 32, 0,
  /* 4198 */ 'd', 'c', 'b', 'z', 32, 0,
  /* 4204 */ 'l', 'b', 'z', 32, 0,
  /* 4209 */ 'b', 'd', 'z', 32, 0,
  /* 4214 */ 'f', 'c', 't', 'i', 'd', 'z', 32, 0,
  /* 4222 */ 'l', 'h', 'z', 32, 0,
  /* 4227 */ 'v', 'r', 'f', 'i', 'z', 32, 0,
  /* 4234 */ 'f', 'r', 'i', 'z', 32, 0,
  /* 4240 */ 'b', 'd', 'n', 'z', 32, 0,
  /* 4246 */ 'f', 'c', 't', 'i', 'd', 'u', 'z', 32, 0,
  /* 4255 */ 'f', 'c', 't', 'i', 'w', 'u', 'z', 32, 0,
  /* 4264 */ 'f', 'c', 't', 'i', 'w', 'z', 32, 0,
  /* 4272 */ 'l', 'w', 'z', 32, 0,
  /* 4277 */ 'l', 'd', 32, '2', ',', 32, '8', '(', 0,
  /* 4286 */ 'l', 'd', 32, '2', ',', 32, '4', '0', '(', '1', ')', 0,
  /* 4298 */ 'b', 'd', 'z', 'l', 'r', 'l', '+', 0,
  /* 4306 */ 'b', 'd', 'n', 'z', 'l', 'r', 'l', '+', 0,
  /* 4315 */ 'b', 'd', 'z', 'l', 'r', '+', 0,
  /* 4322 */ 'b', 'd', 'n', 'z', 'l', 'r', '+', 0,
  /* 4330 */ 'b', 'd', 'z', 'l', 'r', 'l', '-', 0,
  /* 4338 */ 'b', 'd', 'n', 'z', 'l', 'r', 'l', '-', 0,
  /* 4347 */ 'b', 'd', 'z', 'l', 'r', '-', 0,
  /* 4354 */ 'b', 'd', 'n', 'z', 'l', 'r', '-', 0,
  /* 4362 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'S', 'U', 'B', '_', 'I', '3', '2', 0,
  /* 4383 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'A', 'D', 'D', '_', 'I', '3', '2', 0,
  /* 4404 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'N', 'A', 'N', 'D', '_', 'I', '3', '2', 0,
  /* 4426 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'A', 'N', 'D', '_', 'I', '3', '2', 0,
  /* 4447 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'S', 'W', 'A', 'P', '_', 'I', '3', '2', 0,
  /* 4464 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'X', 'O', 'R', '_', 'I', '3', '2', 0,
  /* 4485 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'O', 'R', '_', 'I', '3', '2', 0,
  /* 4505 */ '#', 'E', 'H', '_', 'S', 'J', 'L', 'J', '_', 'L', 'O', 'N', 'G', 'J', 'M', 'P', '3', '2', 0,
  /* 4524 */ '#', 'E', 'H', '_', 'S', 'J', 'L', 'J', '_', 'S', 'E', 'T', 'J', 'M', 'P', '3', '2', 0,
  /* 4542 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'S', 'U', 'B', '_', 'I', '6', '4', 0,
  /* 4563 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'A', 'D', 'D', '_', 'I', '6', '4', 0,
  /* 4584 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'N', 'A', 'N', 'D', '_', 'I', '6', '4', 0,
  /* 4606 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'S', 'W', 'A', 'P', '_', 'I', '6', '4', 0,
  /* 4623 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'C', 'M', 'P', '_', 'S', 'W', 'A', 'P', '_', 'I', '6', '4', 0,
  /* 4644 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'X', 'O', 'R', '_', 'I', '6', '4', 0,
  /* 4665 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'O', 'R', '_', 'I', '6', '4', 0,
  /* 4685 */ '#', 'E', 'H', '_', 'S', 'J', 'L', 'J', '_', 'L', 'O', 'N', 'G', 'J', 'M', 'P', '6', '4', 0,
  /* 4704 */ '#', 'E', 'H', '_', 'S', 'J', 'L', 'J', '_', 'S', 'E', 'T', 'J', 'M', 'P', '6', '4', 0,
  /* 4722 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'A', 'N', 'D', '_', 'i', '6', '4', 0,
  /* 4743 */ '#', 'S', 'E', 'L', 'E', 'C', 'T', '_', 'C', 'C', '_', 'F', '4', 0,
  /* 4757 */ '#', 'S', 'E', 'L', 'E', 'C', 'T', '_', 'C', 'C', '_', 'I', '4', 0,
  /* 4771 */ 'c', 'r', 'x', 'o', 'r', 32, '6', ',', 32, '6', ',', 32, '6', 0,
  /* 4785 */ 'c', 'r', 'e', 'q', 'v', 32, '6', ',', 32, '6', ',', 32, '6', 0,
  /* 4799 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'S', 'U', 'B', '_', 'I', '1', '6', 0,
  /* 4820 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'A', 'D', 'D', '_', 'I', '1', '6', 0,
  /* 4841 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'N', 'A', 'N', 'D', '_', 'I', '1', '6', 0,
  /* 4863 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'A', 'N', 'D', '_', 'I', '1', '6', 0,
  /* 4884 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'S', 'W', 'A', 'P', '_', 'I', '1', '6', 0,
  /* 4901 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'X', 'O', 'R', '_', 'I', '1', '6', 0,
  /* 4922 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'O', 'R', '_', 'I', '1', '6', 0,
  /* 4942 */ '#', 'D', 'Y', 'N', 'A', 'L', 'L', 'O', 'C', '8', 0,
  /* 4953 */ '#', 'S', 'E', 'L', 'E', 'C', 'T', '_', 'C', 'C', '_', 'F', '8', 0,
  /* 4967 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'S', 'U', 'B', '_', 'I', '8', 0,
  /* 4987 */ '#', 'S', 'E', 'L', 'E', 'C', 'T', '_', 'C', 'C', '_', 'I', '8', 0,
  /* 5001 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'A', 'D', 'D', '_', 'I', '8', 0,
  /* 5021 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'N', 'A', 'N', 'D', '_', 'I', '8', 0,
  /* 5042 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'A', 'N', 'D', '_', 'I', '8', 0,
  /* 5062 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'C', 'M', 'P', '_', 'S', 'W', 'A', 'P', '_', 'I', '8', 0,
  /* 5082 */ 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'X', 'O', 'R', '_', 'I', '8', 0,
  /* 5101 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'O', 'R', '_', 'I', '8', 0,
  /* 5120 */ '#', 'M', 'o', 'v', 'e', 'P', 'C', 't', 'o', 'L', 'R', '8', 0,
  /* 5133 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'S', 'W', 'A', 'P', '_', 'i', '8', 0,
  /* 5149 */ '#', 'A', 'D', 'D', 'I', 'S', 't', 'o', 'c', 'H', 'A', 0,
  /* 5161 */ '#', 'A', 'D', 'D', 'I', 'S', 't', 'l', 's', 'g', 'd', 'H', 'A', 0,
  /* 5175 */ '#', 'A', 'D', 'D', 'I', 'S', 't', 'l', 's', 'l', 'd', 'H', 'A', 0,
  /* 5189 */ '#', 'A', 'D', 'D', 'I', 'S', 'g', 'o', 't', 'T', 'p', 'r', 'e', 'l', 'H', 'A', 0,
  /* 5206 */ '#', 'A', 'D', 'D', 'I', 'S', 'd', 't', 'p', 'r', 'e', 'l', 'H', 'A', 0,
  /* 5221 */ '#', 'D', 'Y', 'N', 'A', 'L', 'L', 'O', 'C', 0,
  /* 5231 */ '#', 'S', 'E', 'L', 'E', 'C', 'T', '_', 'C', 'C', '_', 'V', 'R', 'R', 'C', 0,
  /* 5247 */ 'L', 'I', 'F', 'E', 'T', 'I', 'M', 'E', '_', 'E', 'N', 'D', 0,
  /* 5260 */ 'B', 'U', 'N', 'D', 'L', 'E', 0,
  /* 5267 */ 'D', 'B', 'G', '_', 'V', 'A', 'L', 'U', 'E', 0,
  /* 5277 */ '#', 'R', 'E', 'S', 'T', 'O', 'R', 'E', '_', 'V', 'R', 'S', 'A', 'V', 'E', 0,
  /* 5293 */ '#', 'S', 'P', 'I', 'L', 'L', '_', 'V', 'R', 'S', 'A', 'V', 'E', 0,
  /* 5307 */ '#', 'L', 'D', 't', 'o', 'c', 'J', 'T', 'I', 0,
  /* 5317 */ '#', 'L', 'D', 't', 'o', 'c', 'L', 0,
  /* 5325 */ '#', 'A', 'D', 'D', 'I', 't', 'o', 'c', 'L', 0,
  /* 5335 */ '#', 'A', 'D', 'D', 'I', 't', 'l', 's', 'g', 'd', 'L', 0,
  /* 5347 */ '#', 'A', 'D', 'D', 'I', 't', 'l', 's', 'l', 'd', 'L', 0,
  /* 5359 */ '#', 'L', 'D', 'g', 'o', 't', 'T', 'p', 'r', 'e', 'l', 'L', 0,
  /* 5372 */ '#', 'A', 'D', 'D', 'I', 'd', 't', 'p', 'r', 'e', 'l', 'L', 0,
  /* 5385 */ '#', 'R', 'E', 'S', 'T', 'O', 'R', 'E', '_', 'C', 'R', 0,
  /* 5397 */ '#', 'S', 'P', 'I', 'L', 'L', '_', 'C', 'R', 0,
  /* 5407 */ '#', 'G', 'E', 'T', 't', 'l', 's', 'l', 'd', 'A', 'D', 'D', 'R', 0,
  /* 5421 */ '#', 'G', 'E', 'T', 't', 'l', 's', 'A', 'D', 'D', 'R', 0,
  /* 5433 */ '#', 'M', 'o', 'v', 'e', 'P', 'C', 't', 'o', 'L', 'R', 0,
  /* 5445 */ '#', 'L', 'D', 't', 'o', 'c', 'C', 'P', 'T', 0,
  /* 5455 */ 'L', 'I', 'F', 'E', 'T', 'I', 'M', 'E', '_', 'S', 'T', 'A', 'R', 'T', 0,
  /* 5470 */ 'b', 0,
  /* 5472 */ 'i', 's', 'y', 'n', 'c', 0,
  /* 5478 */ '#', 'L', 'D', 't', 'o', 'c', 0,
  /* 5485 */ 'd', 's', 's', 'a', 'l', 'l', 0,
  /* 5492 */ 'b', 'l', 'r', 'l', 0,
  /* 5497 */ 'b', 'd', 'z', 'l', 'r', 'l', 0,
  /* 5504 */ 'b', 'd', 'n', 'z', 'l', 'r', 'l', 0,
  /* 5512 */ 'b', 'c', 't', 'r', 'l', 0,
  /* 5518 */ 'e', 'i', 'e', 'i', 'o', 0,
  /* 5524 */ 't', 'r', 'a', 'p', 0,
  /* 5529 */ 'n', 'o', 'p', 0,
  /* 5533 */ 'b', 'l', 'r', 0,
  /* 5537 */ 'b', 'd', 'z', 'l', 'r', 0,
  /* 5543 */ 'b', 'd', 'n', 'z', 'l', 'r', 0,
  /* 5550 */ 'b', 'c', 't', 'r', 0,
  };

  O << "\t";

  // Emit the opcode for the instruction.
  uint64_t Bits1 = OpInfo[MI->getOpcode()];
  uint64_t Bits2 = OpInfo2[MI->getOpcode()];
  uint64_t Bits = (Bits2 << 32) | Bits1;
  assert(Bits != 0 && "Cannot print this instruction.");
  O << AsmStrs+(Bits & 8191)-1;


  // Fragment 0 encoded into 4 bits for 13 unique commands.
  switch ((Bits >> 13) & 15) {
  default:   // unreachable.
  case 0:
    // DBG_VALUE, BUNDLE, LIFETIME_START, LIFETIME_END, ADDISdtprelHA, ADDISg...
    return;
    break;
  case 1:
    // ADD4, ADD4o, ADD8, ADD8TLS, ADD8o, ADDC, ADDC8, ADDC8o, ADDCo, ADDE, A...
    printOperand(MI, 0, O); 
    break;
  case 2:
    // ADJCALLSTACKDOWN, ADJCALLSTACKUP
    printU16ImmOperand(MI, 0, O); 
    break;
  case 3:
    // B, BCLalways, BDNZ, BDNZ8, BDNZL, BDNZLm, BDNZLp, BDNZm, BDNZp, BDZ, B...
    printBranchOperand(MI, 0, O); 
    break;
  case 4:
    // BA, BDNZA, BDNZAm, BDNZAp, BDNZLA, BDNZLAm, BDNZLAp, BDZA, BDZAm, BDZA...
    printAbsBranchOperand(MI, 0, O); 
    break;
  case 5:
    // BCC, BCCA, BCCL, BCCLA, BCCTR, BCCTR8, BCCTRL, BCCTRL8, BCLR, BCLRL
    printPredicateOperand(MI, 0, O, "cc"); 
    break;
  case 6:
    // BL8_NOP_TLS, BL8_TLS
    printTLSCall(MI, 0, O); 
    break;
  case 7:
    // DCBA, DCBF, DCBI, DCBST, DCBT, DCBTST, DCBZ, DCBZL, ICBI
    printMemRegReg(MI, 0, O); 
    return;
    break;
  case 8:
    // DSS
    printU5ImmOperand(MI, 1, O); 
    return;
    break;
  case 9:
    // DST, DST64, DSTST, DSTST64, DSTSTT, DSTSTT64, DSTT, DSTT64
    printOperand(MI, 2, O); 
    O << ", "; 
    printOperand(MI, 3, O); 
    O << ", "; 
    printU5ImmOperand(MI, 1, O); 
    return;
    break;
  case 10:
    // MTFSB0, MTFSB1, TD, TDI, TW, TWI, gBC, gBCA, gBCCTR, gBCCTRL, gBCL, gB...
    printU5ImmOperand(MI, 0, O); 
    break;
  case 11:
    // MTOCRF, MTOCRF8
    printcrbitm(MI, 0, O); 
    O << ", "; 
    printOperand(MI, 1, O); 
    return;
    break;
  case 12:
    // MTVRSAVEv, STBU, STBU8, STBUX, STBUX8, STDU, STDUX, STFDU, STFDUX, STF...
    printOperand(MI, 1, O); 
    break;
  }


  // Fragment 1 encoded into 4 bits for 16 unique commands.
  switch ((Bits >> 17) & 15) {
  default:   // unreachable.
  case 0:
    // ADD4, ADD4o, ADD8, ADD8TLS, ADD8o, ADDC, ADDC8, ADDC8o, ADDCo, ADDE, A...
    O << ", "; 
    break;
  case 1:
    // ADJCALLSTACKDOWN, B, BA, BCLalways, BDNZ, BDNZ8, BDNZA, BDNZAm, BDNZAp...
    return;
    break;
  case 2:
    // ADJCALLSTACKUP, ATOMIC_CMP_SWAP_I16, ATOMIC_CMP_SWAP_I32, TCRETURNai, ...
    O << ' '; 
    break;
  case 3:
    // BCC
    printPredicateOperand(MI, 0, O, "pm"); 
    O << ' '; 
    printPredicateOperand(MI, 0, O, "reg"); 
    O << ", "; 
    printBranchOperand(MI, 2, O); 
    return;
    break;
  case 4:
    // BCCA
    O << 'a'; 
    printPredicateOperand(MI, 0, O, "pm"); 
    O << ' '; 
    printPredicateOperand(MI, 0, O, "reg"); 
    O << ", "; 
    printAbsBranchOperand(MI, 2, O); 
    return;
    break;
  case 5:
    // BCCL
    O << 'l'; 
    printPredicateOperand(MI, 0, O, "pm"); 
    O << ' '; 
    printPredicateOperand(MI, 0, O, "reg"); 
    O << ", "; 
    printBranchOperand(MI, 2, O); 
    return;
    break;
  case 6:
    // BCCLA
    O << "la"; 
    printPredicateOperand(MI, 0, O, "pm"); 
    O << ' '; 
    printPredicateOperand(MI, 0, O, "reg"); 
    O << ", "; 
    printAbsBranchOperand(MI, 2, O); 
    return;
    break;
  case 7:
    // BCCTR, BCCTR8
    O << "ctr"; 
    printPredicateOperand(MI, 0, O, "pm"); 
    O << ' '; 
    printPredicateOperand(MI, 0, O, "reg"); 
    return;
    break;
  case 8:
    // BCCTRL, BCCTRL8
    O << "ctrl"; 
    printPredicateOperand(MI, 0, O, "pm"); 
    O << ' '; 
    printPredicateOperand(MI, 0, O, "reg"); 
    return;
    break;
  case 9:
    // BCLR
    O << "lr"; 
    printPredicateOperand(MI, 0, O, "pm"); 
    O << ' '; 
    printPredicateOperand(MI, 0, O, "reg"); 
    return;
    break;
  case 10:
    // BCLRL
    O << "lrl"; 
    printPredicateOperand(MI, 0, O, "pm"); 
    O << ' '; 
    printPredicateOperand(MI, 0, O, "reg"); 
    return;
    break;
  case 11:
    // BL8_NOP, BL8_NOP_TLS, BLA8_NOP
    O << "\n\tnop"; 
    return;
    break;
  case 12:
    // LDinto_toc
    O << ')'; 
    return;
    break;
  case 13:
    // MFTB8
    O << ", 268"; 
    return;
    break;
  case 14:
    // MFVRSAVE, MFVRSAVEv
    O << ", 256"; 
    return;
    break;
  case 15:
    // V_SETALLONES, V_SETALLONESB, V_SETALLONESH
    O << ", -1"; 
    return;
    break;
  }


  // Fragment 2 encoded into 4 bits for 12 unique commands.
  switch ((Bits >> 21) & 15) {
  default:   // unreachable.
  case 0:
    // ADD4, ADD4o, ADD8, ADD8TLS, ADD8o, ADDC, ADDC8, ADDC8o, ADDCo, ADDE, A...
    printOperand(MI, 1, O); 
    break;
  case 1:
    // ADJCALLSTACKUP
    printU16ImmOperand(MI, 1, O); 
    return;
    break;
  case 2:
    // ATOMIC_CMP_SWAP_I16, ATOMIC_CMP_SWAP_I32, LBZX, LBZX8, LDARX, LDBRX, L...
    printMemRegReg(MI, 1, O); 
    break;
  case 3:
    // CRSET, CRUNSET, V_SET0, V_SET0B, V_SET0H
    printOperand(MI, 0, O); 
    O << ", "; 
    printOperand(MI, 0, O); 
    return;
    break;
  case 4:
    // LA
    printS16ImmOperand(MI, 2, O); 
    O << '('; 
    printOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 5:
    // LAx, LBZ, LBZ8, LD, LFD, LFS, LHA, LHA8, LHZ, LHZ8, LMW, LWA, LWZ, LWZ...
    printMemRegImm(MI, 1, O); 
    return;
    break;
  case 6:
    // LBZU, LBZU8, LDU, LFDU, LFSU, LHAU, LHAU8, LHZU, LHZU8, LWZU, LWZU8, S...
    printMemRegImm(MI, 2, O); 
    return;
    break;
  case 7:
    // LBZUX, LBZUX8, LDUX, LFDUX, LFSUX, LHAUX, LHAUX8, LHZUX, LHZUX8, LWAUX...
    printMemRegReg(MI, 2, O); 
    return;
    break;
  case 8:
    // LI, LI8, LIS, LIS8
    printS16ImmOperand(MI, 1, O); 
    return;
    break;
  case 9:
    // MFOCRF, MFOCRF8
    printcrbitm(MI, 1, O); 
    return;
    break;
  case 10:
    // RLDIMI, RLDIMIo, RLWIMI, RLWIMIo, VCFSX, VCFUX, VCTSXS, VCTUXS, VSPLTB...
    printOperand(MI, 2, O); 
    O << ", "; 
    break;
  case 11:
    // VSPLTISB, VSPLTISH, VSPLTISW
    printS5ImmOperand(MI, 1, O); 
    return;
    break;
  }


  // Fragment 3 encoded into 3 bits for 7 unique commands.
  switch ((Bits >> 25) & 7) {
  default:   // unreachable.
  case 0:
    // ADD4, ADD4o, ADD8, ADD8TLS, ADD8o, ADDC, ADDC8, ADDC8o, ADDCo, ADDE, A...
    O << ", "; 
    break;
  case 1:
    // ADDME, ADDME8, ADDME8o, ADDMEo, ADDZE, ADDZE8, ADDZE8o, ADDZEo, CNTLZD...
    return;
    break;
  case 2:
    // ATOMIC_CMP_SWAP_I16, ATOMIC_CMP_SWAP_I32
    O << ' '; 
    printOperand(MI, 3, O); 
    O << ' '; 
    printOperand(MI, 4, O); 
    return;
    break;
  case 3:
    // RLDIMI, RLDIMIo
    printU6ImmOperand(MI, 3, O); 
    O << ", "; 
    printU6ImmOperand(MI, 4, O); 
    return;
    break;
  case 4:
    // RLWIMI, RLWIMIo
    printU5ImmOperand(MI, 3, O); 
    O << ", "; 
    printU5ImmOperand(MI, 4, O); 
    O << ", "; 
    printU5ImmOperand(MI, 5, O); 
    return;
    break;
  case 5:
    // VCFSX, VCFUX, VCTSXS, VCTUXS, VSPLTB, VSPLTH, VSPLTW
    printU5ImmOperand(MI, 1, O); 
    return;
    break;
  case 6:
    // VCFSX_0, VCFUX_0, VCTSXS_0, VCTUXS_0
    O << ", 0"; 
    return;
    break;
  }


  // Fragment 4 encoded into 3 bits for 7 unique commands.
  switch ((Bits >> 28) & 7) {
  default:   // unreachable.
  case 0:
    // ADD4, ADD4o, ADD8, ADD8TLS, ADD8o, ADDC, ADDC8, ADDC8o, ADDCo, ADDE, A...
    printOperand(MI, 2, O); 
    break;
  case 1:
    // ADDI, ADDI8, ADDIC, ADDIC8, ADDICo, ADDIS, ADDIS8, CMPDI, CMPWI, MULLI...
    printS16ImmOperand(MI, 2, O); 
    return;
    break;
  case 2:
    // ANDISo, ANDISo8, ANDIo, ANDIo8, CMPLDI, CMPLWI, ORI, ORI8, ORIS, ORIS8...
    printU16ImmOperand(MI, 2, O); 
    return;
    break;
  case 3:
    // CLRLSLDI, CLRLSLDIo, CLRRDI, CLRRDIo, EXTLDI, EXTLDIo, EXTRDI, EXTRDIo...
    printU6ImmOperand(MI, 2, O); 
    break;
  case 4:
    // CLRLSLWI, CLRLSLWIo, CLRRWI, CLRRWIo, EXTLWI, EXTLWIo, EXTRWI, EXTRWIo...
    printU5ImmOperand(MI, 2, O); 
    break;
  case 5:
    // gBC, gBCL
    printBranchOperand(MI, 2, O); 
    return;
    break;
  case 6:
    // gBCA, gBCLA
    printAbsBranchOperand(MI, 2, O); 
    return;
    break;
  }


  // Fragment 5 encoded into 1 bits for 2 unique commands.
  if ((Bits >> 31) & 1) {
    // CLRLSLDI, CLRLSLDIo, CLRLSLWI, CLRLSLWIo, EXTLDI, EXTLDIo, EXTLWI, EXT...
    O << ", "; 
  } else {
    // ADD4, ADD4o, ADD8, ADD8TLS, ADD8o, ADDC, ADDC8, ADDC8o, ADDCo, ADDE, A...
    return;
  }


  // Fragment 6 encoded into 2 bits for 3 unique commands.
  switch ((Bits >> 32) & 3) {
  default:   // unreachable.
  case 0:
    // CLRLSLDI, CLRLSLDIo, EXTLDI, EXTLDIo, EXTRDI, EXTRDIo, INSRDI, INSRDIo...
    printU6ImmOperand(MI, 3, O); 
    return;
    break;
  case 1:
    // CLRLSLWI, CLRLSLWIo, EXTLWI, EXTLWIo, EXTRWI, EXTRWIo, INSLWI, INSLWIo...
    printU5ImmOperand(MI, 3, O); 
    break;
  case 2:
    // FMADD, FMADDS, FMADDSo, FMADDo, FMSUB, FMSUBS, FMSUBSo, FMSUBo, FNMADD...
    printOperand(MI, 3, O); 
    return;
    break;
  }


  // Fragment 7 encoded into 1 bits for 2 unique commands.
  if ((Bits >> 34) & 1) {
    // RLWINM, RLWINM8, RLWINM8o, RLWINMo, RLWNM, RLWNMo
    O << ", "; 
    printU5ImmOperand(MI, 4, O); 
    return;
  } else {
    // CLRLSLWI, CLRLSLWIo, EXTLWI, EXTLWIo, EXTRWI, EXTRWIo, INSLWI, INSLWIo...
    return;
  }

}


/// getRegisterName - This method is automatically generated by tblgen
/// from the register set description.  This returns the assembler name
/// for the specified register.
const char *PPCInstPrinter::getRegisterName(unsigned RegNo) {
  assert(RegNo && RegNo < 182 && "Invalid register number!");

  static const char AsmStrs[] = {
  /* 0 */ '*', '*', 'R', 'O', 'U', 'N', 'D', 'I', 'N', 'G', 32, 'M', 'O', 'D', 'E', '*', '*', 0,
  /* 18 */ '*', '*', 'F', 'R', 'A', 'M', 'E', 32, 'P', 'O', 'I', 'N', 'T', 'E', 'R', '*', '*', 0,
  /* 36 */ '*', '*', 'B', 'A', 'S', 'E', 32, 'P', 'O', 'I', 'N', 'T', 'E', 'R', '*', '*', 0,
  /* 53 */ 'f', '1', '0', 0,
  /* 57 */ 'r', '1', '0', 0,
  /* 61 */ 'v', '1', '0', 0,
  /* 65 */ 'f', '2', '0', 0,
  /* 69 */ 'r', '2', '0', 0,
  /* 73 */ 'v', '2', '0', 0,
  /* 77 */ 'f', '3', '0', 0,
  /* 81 */ 'r', '3', '0', 0,
  /* 85 */ 'v', '3', '0', 0,
  /* 89 */ 'f', '0', 0,
  /* 92 */ 'c', 'r', '0', 0,
  /* 96 */ 'v', '0', 0,
  /* 99 */ 'f', '1', '1', 0,
  /* 103 */ 'r', '1', '1', 0,
  /* 107 */ 'v', '1', '1', 0,
  /* 111 */ 'f', '2', '1', 0,
  /* 115 */ 'r', '2', '1', 0,
  /* 119 */ 'v', '2', '1', 0,
  /* 123 */ 'f', '3', '1', 0,
  /* 127 */ 'r', '3', '1', 0,
  /* 131 */ 'v', '3', '1', 0,
  /* 135 */ 'f', '1', 0,
  /* 138 */ 'c', 'r', '1', 0,
  /* 142 */ 'v', '1', 0,
  /* 145 */ 'f', '1', '2', 0,
  /* 149 */ 'r', '1', '2', 0,
  /* 153 */ 'v', '1', '2', 0,
  /* 157 */ 'f', '2', '2', 0,
  /* 161 */ 'r', '2', '2', 0,
  /* 165 */ 'v', '2', '2', 0,
  /* 169 */ 'f', '2', 0,
  /* 172 */ 'c', 'r', '2', 0,
  /* 176 */ 'v', '2', 0,
  /* 179 */ 'f', '1', '3', 0,
  /* 183 */ 'r', '1', '3', 0,
  /* 187 */ 'v', '1', '3', 0,
  /* 191 */ 'f', '2', '3', 0,
  /* 195 */ 'r', '2', '3', 0,
  /* 199 */ 'v', '2', '3', 0,
  /* 203 */ 'f', '3', 0,
  /* 206 */ 'c', 'r', '3', 0,
  /* 210 */ 'v', '3', 0,
  /* 213 */ 'f', '1', '4', 0,
  /* 217 */ 'r', '1', '4', 0,
  /* 221 */ 'v', '1', '4', 0,
  /* 225 */ 'f', '2', '4', 0,
  /* 229 */ 'r', '2', '4', 0,
  /* 233 */ 'v', '2', '4', 0,
  /* 237 */ 'f', '4', 0,
  /* 240 */ 'c', 'r', '4', 0,
  /* 244 */ 'v', '4', 0,
  /* 247 */ 'f', '1', '5', 0,
  /* 251 */ 'r', '1', '5', 0,
  /* 255 */ 'v', '1', '5', 0,
  /* 259 */ 'f', '2', '5', 0,
  /* 263 */ 'r', '2', '5', 0,
  /* 267 */ 'v', '2', '5', 0,
  /* 271 */ 'f', '5', 0,
  /* 274 */ 'c', 'r', '5', 0,
  /* 278 */ 'v', '5', 0,
  /* 281 */ 'f', '1', '6', 0,
  /* 285 */ 'r', '1', '6', 0,
  /* 289 */ 'v', '1', '6', 0,
  /* 293 */ 'f', '2', '6', 0,
  /* 297 */ 'r', '2', '6', 0,
  /* 301 */ 'v', '2', '6', 0,
  /* 305 */ 'f', '6', 0,
  /* 308 */ 'c', 'r', '6', 0,
  /* 312 */ 'v', '6', 0,
  /* 315 */ 'f', '1', '7', 0,
  /* 319 */ 'r', '1', '7', 0,
  /* 323 */ 'v', '1', '7', 0,
  /* 327 */ 'f', '2', '7', 0,
  /* 331 */ 'r', '2', '7', 0,
  /* 335 */ 'v', '2', '7', 0,
  /* 339 */ 'f', '7', 0,
  /* 342 */ 'c', 'r', '7', 0,
  /* 346 */ 'v', '7', 0,
  /* 349 */ 'f', '1', '8', 0,
  /* 353 */ 'r', '1', '8', 0,
  /* 357 */ 'v', '1', '8', 0,
  /* 361 */ 'f', '2', '8', 0,
  /* 365 */ 'r', '2', '8', 0,
  /* 369 */ 'v', '2', '8', 0,
  /* 373 */ 'f', '8', 0,
  /* 376 */ 'r', '8', 0,
  /* 379 */ 'v', '8', 0,
  /* 382 */ 'f', '1', '9', 0,
  /* 386 */ 'r', '1', '9', 0,
  /* 390 */ 'v', '1', '9', 0,
  /* 394 */ 'f', '2', '9', 0,
  /* 398 */ 'r', '2', '9', 0,
  /* 402 */ 'v', '2', '9', 0,
  /* 406 */ 'f', '9', 0,
  /* 409 */ 'r', '9', 0,
  /* 412 */ 'v', '9', 0,
  /* 415 */ 'c', 'a', 0,
  /* 418 */ 'v', 'r', 's', 'a', 'v', 'e', 0,
  /* 425 */ 'l', 'r', 0,
  /* 428 */ 'c', 't', 'r', 0,
  };

  static const uint32_t RegAsmOffset[] = {
    36, 415, 428, 18, 425, 0, 418, 55, 36, 92, 138, 172, 206, 240, 
    274, 308, 342, 428, 89, 135, 169, 203, 237, 271, 305, 339, 373, 406, 
    53, 99, 145, 179, 213, 247, 281, 315, 349, 382, 65, 111, 157, 191, 
    225, 259, 293, 327, 361, 394, 77, 123, 18, 425, 93, 139, 173, 207, 
    241, 275, 309, 343, 376, 409, 57, 103, 149, 183, 217, 251, 285, 319, 
    353, 386, 69, 115, 161, 195, 229, 263, 297, 331, 365, 398, 81, 127, 
    96, 142, 176, 210, 244, 278, 312, 346, 379, 412, 61, 107, 153, 187, 
    221, 255, 289, 323, 357, 390, 73, 119, 165, 199, 233, 267, 301, 335, 
    369, 402, 85, 131, 93, 139, 173, 207, 241, 275, 309, 343, 376, 409, 
    57, 103, 149, 183, 217, 251, 285, 319, 353, 386, 69, 115, 161, 195, 
    229, 263, 297, 331, 365, 398, 81, 127, 55, 147, 283, 54, 214, 350, 
    158, 294, 78, 101, 249, 384, 180, 316, 112, 260, 395, 55, 215, 351, 
    146, 282, 66, 226, 362, 181, 317, 100, 248, 383, 192, 328, 124, 
  };

  assert (*(AsmStrs+RegAsmOffset[RegNo-1]) &&
          "Invalid alt name index for register!");
  return AsmStrs+RegAsmOffset[RegNo-1];
}

#ifdef PRINT_ALIAS_INSTR
#undef PRINT_ALIAS_INSTR

static unsigned getMapOperandNumber(const SmallVectorImpl<std::pair<StringRef, unsigned> > &OpMap,
                                    StringRef Name) {
  for (SmallVectorImpl<std::pair<StringRef, unsigned> >::const_iterator
         I = OpMap.begin(), E = OpMap.end(); I != E; ++I)
    if (I->first == Name)
      return I->second;
  llvm_unreachable("Operand not in map!");
}

bool PPCInstPrinter::printAliasInstr(const MCInst *MI, raw_ostream &OS) {
  StringRef AsmString;
  SmallVector<std::pair<StringRef, unsigned>, 4> OpMap;
  switch (MI->getOpcode()) {
  default: return false;
  case PPC::BCCTR:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 12 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCTR 12, CR0)
      AsmString = "bltctr";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 14 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCTR 14, CR0)
      AsmString = "bltctr-";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 15 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCTR 15, CR0)
      AsmString = "bltctr+";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 44 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCTR 44, CR0)
      AsmString = "bgtctr";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 46 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCTR 46, CR0)
      AsmString = "bgtctr-";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 47 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCTR 47, CR0)
      AsmString = "bgtctr+";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 76 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCTR 76, CR0)
      AsmString = "beqctr";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 78 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCTR 78, CR0)
      AsmString = "beqctr-";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 79 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCTR 79, CR0)
      AsmString = "beqctr+";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 68 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCTR 68, CR0)
      AsmString = "bnectr";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 70 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCTR 70, CR0)
      AsmString = "bnectr-";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 71 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCTR 71, CR0)
      AsmString = "bnectr+";
      break;
    }
    return false;
  case PPC::BCCTRL:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 12 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCTRL 12, CR0)
      AsmString = "bltctrl";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 14 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCTRL 14, CR0)
      AsmString = "bltctrl-";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 15 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCTRL 15, CR0)
      AsmString = "bltctrl+";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 44 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCTRL 44, CR0)
      AsmString = "bgtctrl";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 46 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCTRL 46, CR0)
      AsmString = "bgtctrl-";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 47 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCTRL 47, CR0)
      AsmString = "bgtctrl+";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 76 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCTRL 76, CR0)
      AsmString = "beqctrl";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 78 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCTRL 78, CR0)
      AsmString = "beqctrl-";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 79 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCTRL 79, CR0)
      AsmString = "beqctrl+";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 68 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCTRL 68, CR0)
      AsmString = "bnectrl";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 70 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCTRL 70, CR0)
      AsmString = "bnectrl-";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 71 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCTRL 71, CR0)
      AsmString = "bnectrl+";
      break;
    }
    return false;
  case PPC::BCLR:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 12 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCLR 12, CR0)
      AsmString = "bltlr";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 14 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCLR 14, CR0)
      AsmString = "bltlr-";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 15 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCLR 15, CR0)
      AsmString = "bltlr+";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 44 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCLR 44, CR0)
      AsmString = "bgtlr";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 46 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCLR 46, CR0)
      AsmString = "bgtlr-";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 47 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCLR 47, CR0)
      AsmString = "bgtlr+";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 76 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCLR 76, CR0)
      AsmString = "beqlr";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 78 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCLR 78, CR0)
      AsmString = "beqlr-";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 79 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCLR 79, CR0)
      AsmString = "beqlr+";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 68 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCLR 68, CR0)
      AsmString = "bnelr";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 70 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCLR 70, CR0)
      AsmString = "bnelr-";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 71 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCLR 71, CR0)
      AsmString = "bnelr+";
      break;
    }
    return false;
  case PPC::BCLRL:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 12 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCLRL 12, CR0)
      AsmString = "bltlrl";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 14 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCLRL 14, CR0)
      AsmString = "bltlrl-";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 15 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCLRL 15, CR0)
      AsmString = "bltlrl+";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 44 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCLRL 44, CR0)
      AsmString = "bgtlrl";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 46 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCLRL 46, CR0)
      AsmString = "bgtlrl-";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 47 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCLRL 47, CR0)
      AsmString = "bgtlrl+";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 76 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCLRL 76, CR0)
      AsmString = "beqlrl";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 78 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCLRL 78, CR0)
      AsmString = "beqlrl-";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 79 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCLRL 79, CR0)
      AsmString = "beqlrl+";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 68 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCLRL 68, CR0)
      AsmString = "bnelrl";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 70 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCLRL 70, CR0)
      AsmString = "bnelrl-";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 71 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCLRL 71, CR0)
      AsmString = "bnelrl+";
      break;
    }
    return false;
  case PPC::SC:
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 0) {
      // (SC 0)
      AsmString = "sc";
      break;
    }
    return false;
  case PPC::SYNC:
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 1) {
      // (SYNC 1)
      AsmString = "lwsync";
      break;
    }
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 2) {
      // (SYNC 2)
      AsmString = "ptesync";
      break;
    }
    return false;
  case PPC::WAIT:
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 0) {
      // (WAIT 0)
      AsmString = "wait";
      break;
    }
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 1) {
      // (WAIT 1)
      AsmString = "waitrsv";
      break;
    }
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 2) {
      // (WAIT 2)
      AsmString = "waitimpl";
      break;
    }
    return false;
  case PPC::XORI:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == PPC::R0 &&
        MI->getOperand(1).getReg() == PPC::R0 &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (XORI R0, R0, 0)
      AsmString = "xnop";
      break;
    }
    return false;
  }

  std::pair<StringRef, StringRef> ASM = AsmString.split(' ');
  OS << '\t' << ASM.first;
  if (!ASM.second.empty()) {
    OS << '\t';
    for (StringRef::iterator
         I = ASM.second.begin(), E = ASM.second.end(); I != E; ) {
      if (*I == '$') {
        StringRef::iterator Start = ++I;
        while (I != E &&
               ((*I >= 'a' && *I <= 'z') ||
                (*I >= 'A' && *I <= 'Z') ||
                (*I >= '0' && *I <= '9') ||
                *I == '_'))
          ++I;
        StringRef Name(Start, I - Start);
        printOperand(MI, getMapOperandNumber(OpMap, Name), OS);
      } else {
        OS << *I++;
      }
    }
  }

  return true;
}

#endif // PRINT_ALIAS_INSTR
