/*===- TableGen'erated file -------------------------------------*- C++ -*-===*\
|*                                                                            *|
|*Assembly Writer Source Fragment                                             *|
|*                                                                            *|
|* Automatically generated file, do not edit!                                 *|
|*                                                                            *|
\*===----------------------------------------------------------------------===*/

/// printInstruction - This method is automatically generated by tablegen
/// from the instruction set description.
void SystemZInstPrinter::printInstruction(const MCInst *MI, raw_ostream &O) {
  static const uint32_t OpInfo[] = {
    0U,	// PHI
    0U,	// INLINEASM
    0U,	// PROLOG_LABEL
    0U,	// EH_LABEL
    0U,	// GC_LABEL
    0U,	// KILL
    0U,	// EXTRACT_SUBREG
    0U,	// INSERT_SUBREG
    0U,	// IMPLICIT_DEF
    0U,	// SUBREG_TO_REG
    0U,	// COPY_TO_REGCLASS
    3149U,	// DBG_VALUE
    0U,	// REG_SEQUENCE
    0U,	// COPY
    3142U,	// BUNDLE
    3159U,	// LIFETIME_START
    3129U,	// LIFETIME_END
    4098U,	// A
    4107U,	// ADB
    530646U,	// ADBR
    0U,	// ADJCALLSTACKDOWN
    0U,	// ADJCALLSTACKUP
    0U,	// ADJDYNALLOC
    4152U,	// AEB
    530749U,	// AEBR
    0U,	// AEXT128_64
    1054092U,	// AFI
    4910U,	// AG
    4794U,	// AGF
    1054102U,	// AGFI
    531048U,	// AGFR
    1578464U,	// AGHI
    18880133U,	// AGHIK
    531110U,	// AGR
    85989038U,	// AGRK
    75304U,	// AGSI
    5098U,	// AH
    1578454U,	// AHI
    18880127U,	// AHIK
    7080U,	// AHY
    5882U,	// AL
    4218U,	// ALC
    4948U,	// ALCG
    531122U,	// ALCGR
    530995U,	// ALCR
    2627006U,	// ALFI
    4979U,	// ALG
    4804U,	// ALGF
    2626978U,	// ALGFI
    531061U,	// ALGFR
    18880140U,	// ALGHSIK
    531142U,	// ALGR
    85989044U,	// ALGRK
    18880149U,	// ALHSIK
    531227U,	// ALR
    85989082U,	// ALRK
    7138U,	// ALY
    530641U,	// AR
    85989033U,	// ARK
    75299U,	// ASI
    0U,	// ATOMIC_CMP_SWAPW
    0U,	// ATOMIC_LOADW_AFI
    0U,	// ATOMIC_LOADW_AR
    0U,	// ATOMIC_LOADW_MAX
    0U,	// ATOMIC_LOADW_MIN
    0U,	// ATOMIC_LOADW_NILH
    0U,	// ATOMIC_LOADW_NILHi
    0U,	// ATOMIC_LOADW_NR
    0U,	// ATOMIC_LOADW_NRi
    0U,	// ATOMIC_LOADW_OILH
    0U,	// ATOMIC_LOADW_OR
    0U,	// ATOMIC_LOADW_SR
    0U,	// ATOMIC_LOADW_UMAX
    0U,	// ATOMIC_LOADW_UMIN
    0U,	// ATOMIC_LOADW_XILF
    0U,	// ATOMIC_LOADW_XR
    0U,	// ATOMIC_LOAD_AFI
    0U,	// ATOMIC_LOAD_AGFI
    0U,	// ATOMIC_LOAD_AGHI
    0U,	// ATOMIC_LOAD_AGR
    0U,	// ATOMIC_LOAD_AHI
    0U,	// ATOMIC_LOAD_AR
    0U,	// ATOMIC_LOAD_MAX_32
    0U,	// ATOMIC_LOAD_MAX_64
    0U,	// ATOMIC_LOAD_MIN_32
    0U,	// ATOMIC_LOAD_MIN_64
    0U,	// ATOMIC_LOAD_NGR
    0U,	// ATOMIC_LOAD_NGRi
    0U,	// ATOMIC_LOAD_NIHF
    0U,	// ATOMIC_LOAD_NIHFi
    0U,	// ATOMIC_LOAD_NIHH
    0U,	// ATOMIC_LOAD_NIHHi
    0U,	// ATOMIC_LOAD_NIHL
    0U,	// ATOMIC_LOAD_NIHLi
    0U,	// ATOMIC_LOAD_NILF
    0U,	// ATOMIC_LOAD_NILF32
    0U,	// ATOMIC_LOAD_NILF32i
    0U,	// ATOMIC_LOAD_NILFi
    0U,	// ATOMIC_LOAD_NILH
    0U,	// ATOMIC_LOAD_NILH32
    0U,	// ATOMIC_LOAD_NILH32i
    0U,	// ATOMIC_LOAD_NILHi
    0U,	// ATOMIC_LOAD_NILL
    0U,	// ATOMIC_LOAD_NILL32
    0U,	// ATOMIC_LOAD_NILL32i
    0U,	// ATOMIC_LOAD_NILLi
    0U,	// ATOMIC_LOAD_NR
    0U,	// ATOMIC_LOAD_NRi
    0U,	// ATOMIC_LOAD_OGR
    0U,	// ATOMIC_LOAD_OIHF
    0U,	// ATOMIC_LOAD_OIHH
    0U,	// ATOMIC_LOAD_OIHL
    0U,	// ATOMIC_LOAD_OILF
    0U,	// ATOMIC_LOAD_OILF32
    0U,	// ATOMIC_LOAD_OILH
    0U,	// ATOMIC_LOAD_OILH32
    0U,	// ATOMIC_LOAD_OILL
    0U,	// ATOMIC_LOAD_OILL32
    0U,	// ATOMIC_LOAD_OR
    0U,	// ATOMIC_LOAD_SGR
    0U,	// ATOMIC_LOAD_SR
    0U,	// ATOMIC_LOAD_UMAX_32
    0U,	// ATOMIC_LOAD_UMAX_64
    0U,	// ATOMIC_LOAD_UMIN_32
    0U,	// ATOMIC_LOAD_UMIN_64
    0U,	// ATOMIC_LOAD_XGR
    0U,	// ATOMIC_LOAD_XIHF
    0U,	// ATOMIC_LOAD_XILF
    0U,	// ATOMIC_LOAD_XILF32
    0U,	// ATOMIC_LOAD_XR
    0U,	// ATOMIC_SWAPW
    0U,	// ATOMIC_SWAP_32
    0U,	// ATOMIC_SWAP_64
    530900U,	// AXBR
    7043U,	// AY
    2104119U,	// AsmBASR
    3152728U,	// AsmBRAS
    3151953U,	// AsmBRASL
    12436U,	// AsmBRC
    14091U,	// AsmBRCL
    37230184U,	// AsmCGIJ
    153097843U,	// AsmCGRJ
    37230179U,	// AsmCIJ
    153097838U,	// AsmCRJ
    16772U,	// AsmEJ
    16584U,	// AsmEJG
    4198572U,	// AsmELOC
    4198585U,	// AsmELOCG
    529069U,	// AsmELOCGR
    529062U,	// AsmELOCR
    4722866U,	// AsmESTOC
    4722880U,	// AsmESTOCG
    16629U,	// AsmHEJ
    16621U,	// AsmHEJG
    4198605U,	// AsmHELOC
    4198620U,	// AsmHELOCG
    528761U,	// AsmHELOCGR
    528753U,	// AsmHELOCR
    4722900U,	// AsmHESTOC
    4722916U,	// AsmHESTOCG
    17456U,	// AsmHJ
    17418U,	// AsmHJG
    4199406U,	// AsmHLOC
    4199419U,	// AsmHLOCG
    529787U,	// AsmHLOCGR
    529780U,	// AsmHLOCR
    4723700U,	// AsmHSTOC
    4723714U,	// AsmHSTOCG
    54007005U,	// AsmJEAltCGI
    220206318U,	// AsmJEAltCGR
    54006997U,	// AsmJEAltCI
    220206310U,	// AsmJEAltCR
    54006152U,	// AsmJECGI
    220205461U,	// AsmJECGR
    54006146U,	// AsmJECI
    220205455U,	// AsmJECR
    54006291U,	// AsmJHAltCGI
    220205604U,	// AsmJHAltCGR
    54006283U,	// AsmJHAltCI
    220205596U,	// AsmJHAltCR
    54006836U,	// AsmJHCGI
    220206145U,	// AsmJHCGR
    54006830U,	// AsmJHCI
    220206139U,	// AsmJHCR
    54007724U,	// AsmJHEAltCGI
    220207035U,	// AsmJHEAltCGR
    54007717U,	// AsmJHEAltCI
    220207028U,	// AsmJHEAltCR
    54006010U,	// AsmJHECGI
    220205321U,	// AsmJHECGR
    54006003U,	// AsmJHECI
    220205314U,	// AsmJHECR
    54006084U,	// AsmJLAltCGI
    220205397U,	// AsmJLAltCGR
    54006076U,	// AsmJLAltCI
    220205389U,	// AsmJLAltCR
    54007624U,	// AsmJLCGI
    220206933U,	// AsmJLCGR
    54007618U,	// AsmJLCI
    220206927U,	// AsmJLCR
    54007116U,	// AsmJLEAltCGI
    220206427U,	// AsmJLEAltCGR
    54007109U,	// AsmJLEAltCI
    220206420U,	// AsmJLEAltCR
    54006217U,	// AsmJLECGI
    220205528U,	// AsmJLECGR
    54006210U,	// AsmJLECI
    220205521U,	// AsmJLECR
    54006398U,	// AsmJLHAltCGI
    220205709U,	// AsmJLHAltCGR
    54006391U,	// AsmJLHAltCI
    220205702U,	// AsmJLHAltCR
    54006926U,	// AsmJLHCGI
    220206237U,	// AsmJLHCGR
    54006919U,	// AsmJLHCI
    220206230U,	// AsmJLHCR
    16836U,	// AsmLEJ
    16828U,	// AsmLEJG
    4198812U,	// AsmLELOC
    4198827U,	// AsmLELOCG
    528968U,	// AsmLELOCGR
    528960U,	// AsmLELOCR
    4723107U,	// AsmLESTOC
    4723123U,	// AsmLESTOCG
    17545U,	// AsmLHJ
    17512U,	// AsmLHJG
    4199496U,	// AsmLHLOC
    4199511U,	// AsmLHLOCG
    529682U,	// AsmLHLOCGR
    529674U,	// AsmLHLOCR
    4723791U,	// AsmLHSTOC
    4723807U,	// AsmLHSTOCG
    18244U,	// AsmLJ
    18212U,	// AsmLJG
    4200190U,	// AsmLLOC
    4200213U,	// AsmLLOCG
    530424U,	// AsmLLOCGR
    530394U,	// AsmLLOCR
    289411209U,	// AsmLOC
    289411930U,	// AsmLOCG
    352852665U,	// AsmLOCGR
    352852543U,	// AsmLOCR
    4724484U,	// AsmLSTOC
    4724508U,	// AsmLSTOCG
    17017U,	// AsmNEJ
    17009U,	// AsmNEJG
    4198993U,	// AsmNELOC
    4199008U,	// AsmNELOCG
    529053U,	// AsmNELOCGR
    529045U,	// AsmNELOCR
    4723288U,	// AsmNESTOC
    4723304U,	// AsmNESTOCG
    16702U,	// AsmNHEJ
    16693U,	// AsmNHEJG
    4198673U,	// AsmNHELOC
    4198690U,	// AsmNHELOCG
    528743U,	// AsmNHELOCGR
    528734U,	// AsmNHELOCR
    4722969U,	// AsmNHESTOC
    4722987U,	// AsmNHESTOCG
    17735U,	// AsmNHJ
    17727U,	// AsmNHJG
    4199711U,	// AsmNHLOC
    4199726U,	// AsmNHLOCG
    529771U,	// AsmNHLOCGR
    529763U,	// AsmNHLOCR
    4724006U,	// AsmNHSTOC
    4724022U,	// AsmNHSTOCG
    16909U,	// AsmNLEJ
    16900U,	// AsmNLEJG
    4198880U,	// AsmNLELOC
    4198897U,	// AsmNLELOCG
    528950U,	// AsmNLELOCGR
    528941U,	// AsmNLELOCR
    4723176U,	// AsmNLESTOC
    4723194U,	// AsmNLESTOCG
    17623U,	// AsmNLHJ
    17614U,	// AsmNLHJG
    4199594U,	// AsmNLHLOC
    4199611U,	// AsmNLHLOCG
    529664U,	// AsmNLHLOCGR
    529655U,	// AsmNLHLOCR
    4723890U,	// AsmNLHSTOC
    4723908U,	// AsmNLHSTOCG
    18343U,	// AsmNLJ
    18335U,	// AsmNLJG
    4200319U,	// AsmNLLOC
    4200334U,	// AsmNLLOCG
    530379U,	// AsmNLLOCGR
    530371U,	// AsmNLLOCR
    4724614U,	// AsmNLSTOC
    4724630U,	// AsmNLSTOCG
    18603U,	// AsmNOJ
    18597U,	// AsmNOJG
    4200581U,	// AsmNOLOC
    4200596U,	// AsmNOLOCG
    530616U,	// AsmNOLOCGR
    530608U,	// AsmNOLOCR
    4724876U,	// AsmNOSTOC
    4724892U,	// AsmNOSTOCG
    18561U,	// AsmOJ
    18556U,	// AsmOJG
    4200544U,	// AsmOLOC
    4200557U,	// AsmOLOCG
    530632U,	// AsmOLOCGR
    530625U,	// AsmOLOCR
    4724838U,	// AsmOSTOC
    4724852U,	// AsmOSTOCG
    357044366U,	// AsmSTOC
    357045088U,	// AsmSTOCG
    138265U,	// BASR
    137432U,	// BR
    23589U,	// BRAS
    23564U,	// BRASL
    27775U,	// BRC
    27770U,	// BRCL
    5249894U,	// BRCT
    5247944U,	// BRCTG
    5771379U,	// C
    5771280U,	// CDB
    2103517U,	// CDBR
    2103710U,	// CDFBR
    2103731U,	// CDGBR
    5771325U,	// CEB
    2103620U,	// CEBR
    2103717U,	// CEFBR
    2103738U,	// CEGBR
    6297840U,	// CFDBR
    6297951U,	// CFEBR
    6821265U,	// CFI
    6298095U,	// CFXBR
    5772118U,	// CG
    6297847U,	// CGDBR
    6297958U,	// CGEBR
    5771967U,	// CGF
    6821276U,	// CGFI
    2103919U,	// CGFR
    3151841U,	// CGFRL
    5772285U,	// CGH
    7345638U,	// CGHI
    3151892U,	// CGHRL
    206396U,	// CGHSI
    294017U,	// CGIJ
    2103988U,	// CGR
    359562U,	// CGRJ
    3151866U,	// CGRL
    6298102U,	// CGXBR
    5772272U,	// CH
    206411U,	// CHHSI
    7345627U,	// CHI
    3151886U,	// CHRL
    206382U,	// CHSI
    5774253U,	// CHY
    294013U,	// CIJ
    5773056U,	// CL
    32895U,	// CLC
    0U,	// CLCWrapper
    402996U,	// CLFHSI
    7869892U,	// CLFI
    5772160U,	// CLG
    5771978U,	// CLGF
    7869865U,	// CLGFI
    2103932U,	// CLGFR
    3151848U,	// CLGFRL
    3151899U,	// CLGHRL
    403011U,	// CLGHSI
    2104012U,	// CLGR
    3151872U,	// CLGRL
    403026U,	// CLHHSI
    3151915U,	// CLHRL
    468502U,	// CLI
    469959U,	// CLIY
    2104096U,	// CLR
    3151936U,	// CLRL
    5774311U,	// CLY
    85989968U,	// CPSDRdd
    85989968U,	// CPSDRds
    85989968U,	// CPSDRsd
    85989968U,	// CPSDRss
    2103855U,	// CR
    359558U,	// CRJ
    3151836U,	// CRL
    419961694U,	// CS
    419959737U,	// CSG
    419961849U,	// CSY
    2103771U,	// CXBR
    2103724U,	// CXFBR
    2103751U,	// CXGBR
    5774216U,	// CY
    0U,	// CondStore16
    0U,	// CondStore16Inv
    0U,	// CondStore16_32
    0U,	// CondStore16_32Inv
    0U,	// CondStore32
    0U,	// CondStore32Inv
    0U,	// CondStore32_32
    0U,	// CondStore32_32Inv
    0U,	// CondStore64
    0U,	// CondStore64Inv
    0U,	// CondStore8
    0U,	// CondStore8Inv
    0U,	// CondStore8_32
    0U,	// CondStore8_32Inv
    0U,	// CondStoreF32
    0U,	// CondStoreF32Inv
    0U,	// CondStoreF64
    0U,	// CondStoreF64Inv
    4117U,	// DDB
    530659U,	// DDBR
    4163U,	// DEB
    530763U,	// DEBR
    5905U,	// DL
    4997U,	// DLG
    531154U,	// DLGR
    531237U,	// DLR
    5054U,	// DSG
    4828U,	// DSGF
    531089U,	// DSGFR
    531184U,	// DSGR
    530914U,	// DXBR
    8394960U,	// EAR
    6297854U,	// FIDBR
    6297965U,	// FIEBR
    6298109U,	// FIXBR
    2104041U,	// FLOGR
    4214U,	// IC
    4214U,	// IC32
    7047U,	// IC32Y
    7047U,	// ICY
    2626286U,	// IIHF
    8918037U,	// IIHH
    8918825U,	// IIHL
    2626317U,	// IILF
    7869197U,	// IILF32
    8918126U,	// IILH
    8918126U,	// IILH32
    8918876U,	// IILL
    8918876U,	// IILL32
    137304U,	// IPM
    18021U,	// J
    17263U,	// JG
    5773051U,	// L
    0U,	// L128
    5771265U,	// LA
    3151828U,	// LARL
    5774210U,	// LAY
    5771372U,	// LB
    2103759U,	// LBR
    2103516U,	// LCDBR
    2103619U,	// LCEBR
    2103918U,	// LCGFR
    2103987U,	// LCGR
    2103860U,	// LCR
    2103770U,	// LCXBR
    5771427U,	// LD
    5771330U,	// LDEB
    2103626U,	// LDEBR
    2104000U,	// LDGR
    2103883U,	// LDR
    2103777U,	// LDXBR
    5774226U,	// LDY
    5771679U,	// LE
    2103529U,	// LEDBR
    2103901U,	// LER
    2103784U,	// LEXBR
    5774237U,	// LEY
    5772148U,	// LG
    5771366U,	// LGB
    2103745U,	// LGBR
    2103877U,	// LGDR
    5771973U,	// LGF
    6821283U,	// LGFI
    2103926U,	// LGFR
    3151849U,	// LGFRL
    5772304U,	// LGH
    7345644U,	// LGHI
    2104079U,	// LGHR
    3151900U,	// LGHRL
    2104007U,	// LGR
    3151873U,	// LGRL
    5772363U,	// LH
    7345670U,	// LHI
    2104086U,	// LHR
    3151916U,	// LHRL
    5774258U,	// LHY
    5771396U,	// LLC
    2103865U,	// LLCR
    5771376U,	// LLGC
    2103852U,	// LLGCR
    5771984U,	// LLGF
    2103939U,	// LLGFR
    3151856U,	// LLGFRL
    5772303U,	// LLGH
    2104078U,	// LLGHR
    3151907U,	// LLGHRL
    5772453U,	// LLH
    2104085U,	// LLHR
    3151922U,	// LLHRL
    7869172U,	// LLIHF
    9442331U,	// LLIHH
    9443119U,	// LLIHL
    7869203U,	// LLILF
    9442420U,	// LLILH
    9443170U,	// LLILL
    488641446U,	// LMG
    2103563U,	// LNDBR
    2103668U,	// LNEBR
    2103818U,	// LNXBR
    40038U,	// LOC
    40047U,	// LOCG
    44180U,	// LOCGR
    44175U,	// LOCR
    2103570U,	// LPDBR
    2103675U,	// LPEBR
    2103825U,	// LPXBR
    2104092U,	// LR
    3151937U,	// LRL
    5774196U,	// LRV
    5772249U,	// LRVG
    2104066U,	// LRVGR
    2104135U,	// LRVR
    5774188U,	// LT
    2103591U,	// LTDBR
    2103591U,	// LTDBRCompare
    2103696U,	// LTEBR
    2103696U,	// LTEBRCompare
    5772239U,	// LTG
    5772008U,	// LTGF
    2103967U,	// LTGFR
    2104060U,	// LTGR
    2104130U,	// LTR
    2103845U,	// LTXBR
    2103845U,	// LTXBRCompare
    0U,	// LX
    5771307U,	// LXDB
    2103598U,	// LXDBR
    5771360U,	// LXEB
    2103703U,	// LXEBR
    2104141U,	// LXR
    5774307U,	// LY
    137815U,	// LZDR
    137826U,	// LZER
    138066U,	// LZXR
    554176522U,	// MADB
    621287637U,	// MADBR
    554176567U,	// MAEB
    621287740U,	// MAEBR
    4122U,	// MDB
    530693U,	// MDBR
    4168U,	// MDEB
    530769U,	// MDEBR
    4174U,	// MEEB
    530776U,	// MEEBR
    1578482U,	// MGHI
    5403U,	// MH
    1578507U,	// MHI
    7095U,	// MHY
    5014U,	// MLG
    531160U,	// MLGR
    7010U,	// MS
    554176549U,	// MSDB
    621287712U,	// MSDBR
    554176602U,	// MSEB
    621287817U,	// MSEBR
    1054160U,	// MSFI
    5059U,	// MSG
    4834U,	// MSGF
    1054135U,	// MSGFI
    531096U,	// MSGFR
    531190U,	// MSGR
    531261U,	// MSR
    7166U,	// MSY
    32926U,	// MVC
    0U,	// MVCWrapper
    206328U,	// MVGHI
    206335U,	// MVHHI
    206352U,	// MVHI
    468570U,	// MVI
    469975U,	// MVIY
    530948U,	// MXBR
    4145U,	// MXDB
    530741U,	// MXDBR
    6237U,	// N
    5041U,	// NG
    531172U,	// NGR
    85989058U,	// NGRK
    468507U,	// NI
    2626299U,	// NIHF
    8918050U,	// NIHH
    8918838U,	// NIHL
    2626330U,	// NILF
    2626330U,	// NILF32
    8918139U,	// NILH
    8918139U,	// NILH32
    8918889U,	// NILL
    8918889U,	// NILL32
    469965U,	// NIY
    531247U,	// NR
    85989094U,	// NRK
    7153U,	// NY
    6243U,	// O
    5045U,	// OG
    531179U,	// OGR
    85989064U,	// OGRK
    468511U,	// OI
    2626305U,	// OIHF
    8918056U,	// OIHH
    8918844U,	// OIHL
    2626336U,	// OILF
    2626336U,	// OILF32
    8918145U,	// OILH
    8918145U,	// OILH32
    8918895U,	// OILL
    8918895U,	// OILL32
    469970U,	// OIY
    531251U,	// OR
    85989099U,	// ORK
    7157U,	// OY
    3121U,	// RET
    688395064U,	// RISBG
    688395064U,	// RISBG32
    688395111U,	// RISBHG
    688395128U,	// RISBLG
    688395128U,	// RISBLG32
    488642421U,	// RLL
    488641418U,	// RLLG
    688395071U,	// RNSBG
    688395078U,	// ROSBG
    688395085U,	// RXSBG
    7003U,	// S
    4134U,	// SDB
    530721U,	// SDBR
    4187U,	// SEB
    530826U,	// SEBR
    5050U,	// SG
    4829U,	// SGF
    531090U,	// SGFR
    531185U,	// SGR
    85989070U,	// SGRK
    5507U,	// SH
    7100U,	// SHY
    6228U,	// SL
    4203U,	// SLB
    4914U,	// SLBG
    530894U,	// SLBR
    2627018U,	// SLFI
    5025U,	// SLG
    531115U,	// SLGBR
    4822U,	// SLGF
    2626992U,	// SLGFI
    531082U,	// SLGFR
    531166U,	// SLGR
    85989051U,	// SLGRK
    4200314U,	// SLL
    488641424U,	// SLLG
    488642205U,	// SLLK
    531242U,	// SLR
    85989088U,	// SLRK
    7148U,	// SLY
    5771295U,	// SQDB
    2103577U,	// SQDBR
    5771348U,	// SQEB
    2103682U,	// SQEBR
    2103832U,	// SQXBR
    531257U,	// SR
    4198405U,	// SRA
    488641324U,	// SRAG
    488642169U,	// SRAK
    85989104U,	// SRK
    4200518U,	// SRL
    488641435U,	// SRLG
    488642211U,	// SRLK
    5774192U,	// ST
    0U,	// ST128
    5774192U,	// ST32
    5774339U,	// ST32Y
    5771417U,	// STC
    5771417U,	// STC32
    5774220U,	// STC32Y
    5774220U,	// STCY
    5771431U,	// STD
    5774231U,	// STDY
    5771957U,	// STE
    5774242U,	// STEY
    5772244U,	// STG
    3151879U,	// STGRL
    5772679U,	// STH
    5772679U,	// STH32
    5774273U,	// STH32Y
    3151929U,	// STHRL
    3151929U,	// STHRL32
    5774273U,	// STHY
    488641451U,	// STMG
    48234U,	// STOC
    48234U,	// STOC32
    48244U,	// STOCG
    3151947U,	// STRL
    3151947U,	// STRL32
    5774201U,	// STRV
    5772255U,	// STRVG
    0U,	// STX
    5774339U,	// STY
    530975U,	// SXBR
    7162U,	// SY
    0U,	// Select32
    0U,	// Select64
    0U,	// SelectF128
    0U,	// SelectF32
    0U,	// SelectF64
    7039U,	// X
    5094U,	// XG
    531209U,	// XGR
    85989076U,	// XGRK
    468575U,	// XI
    2626311U,	// XIHF
    2626342U,	// XILF
    2626342U,	// XILF32
    469981U,	// XIY
    531278U,	// XR
    85989109U,	// XRK
    7176U,	// XY
    0U,	// ZEXT128_32
    0U,	// ZEXT128_64
    0U
  };

  const char AsmStrs[] = {
  /* 0 */ 'l', 'a', 9, 0,
  /* 4 */ 's', 'r', 'a', 9, 0,
  /* 9 */ 'm', 'a', 'd', 'b', 9, 0,
  /* 15 */ 'c', 'd', 'b', 9, 0,
  /* 20 */ 'd', 'd', 'b', 9, 0,
  /* 25 */ 'm', 'd', 'b', 9, 0,
  /* 30 */ 's', 'q', 'd', 'b', 9, 0,
  /* 36 */ 'm', 's', 'd', 'b', 9, 0,
  /* 42 */ 'l', 'x', 'd', 'b', 9, 0,
  /* 48 */ 'm', 'x', 'd', 'b', 9, 0,
  /* 54 */ 'm', 'a', 'e', 'b', 9, 0,
  /* 60 */ 'c', 'e', 'b', 9, 0,
  /* 65 */ 'l', 'd', 'e', 'b', 9, 0,
  /* 71 */ 'm', 'd', 'e', 'b', 9, 0,
  /* 77 */ 'm', 'e', 'e', 'b', 9, 0,
  /* 83 */ 's', 'q', 'e', 'b', 9, 0,
  /* 89 */ 'm', 's', 'e', 'b', 9, 0,
  /* 95 */ 'l', 'x', 'e', 'b', 9, 0,
  /* 101 */ 'l', 'g', 'b', 9, 0,
  /* 106 */ 's', 'l', 'b', 9, 0,
  /* 111 */ 'l', 'l', 'g', 'c', 9, 0,
  /* 117 */ 'i', 'c', 9, 0,
  /* 121 */ 'a', 'l', 'c', 9, 0,
  /* 126 */ 'c', 'l', 'c', 9, 0,
  /* 131 */ 'l', 'l', 'c', 9, 0,
  /* 136 */ 'l', 'o', 'c', 9, 0,
  /* 141 */ 's', 't', 'o', 'c', 9, 0,
  /* 147 */ 'b', 'r', 'c', 9, 0,
  /* 152 */ 's', 't', 'c', 9, 0,
  /* 157 */ 'm', 'v', 'c', 9, 0,
  /* 162 */ 'l', 'd', 9, 0,
  /* 166 */ 's', 't', 'd', 9, 0,
  /* 171 */ 'l', 'o', 'c', 'e', 9, 0,
  /* 177 */ 's', 't', 'o', 'c', 'e', 9, 0,
  /* 184 */ 'l', 'o', 'c', 'g', 'e', 9, 0,
  /* 191 */ 's', 't', 'o', 'c', 'g', 'e', 9, 0,
  /* 199 */ 'j', 'g', 'e', 9, 0,
  /* 204 */ 'l', 'o', 'c', 'h', 'e', 9, 0,
  /* 211 */ 's', 't', 'o', 'c', 'h', 'e', 9, 0,
  /* 219 */ 'l', 'o', 'c', 'g', 'h', 'e', 9, 0,
  /* 227 */ 's', 't', 'o', 'c', 'g', 'h', 'e', 9, 0,
  /* 236 */ 'j', 'g', 'h', 'e', 9, 0,
  /* 242 */ 'c', 'i', 'j', 'h', 'e', 9, 0,
  /* 249 */ 'c', 'g', 'i', 'j', 'h', 'e', 9, 0,
  /* 257 */ 'c', 'r', 'j', 'h', 'e', 9, 0,
  /* 264 */ 'c', 'g', 'r', 'j', 'h', 'e', 9, 0,
  /* 272 */ 'l', 'o', 'c', 'n', 'h', 'e', 9, 0,
  /* 280 */ 's', 't', 'o', 'c', 'n', 'h', 'e', 9, 0,
  /* 289 */ 'l', 'o', 'c', 'g', 'n', 'h', 'e', 9, 0,
  /* 298 */ 's', 't', 'o', 'c', 'g', 'n', 'h', 'e', 9, 0,
  /* 308 */ 'j', 'g', 'n', 'h', 'e', 9, 0,
  /* 315 */ 'c', 'i', 'j', 'n', 'h', 'e', 9, 0,
  /* 323 */ 'c', 'g', 'i', 'j', 'n', 'h', 'e', 9, 0,
  /* 332 */ 'c', 'r', 'j', 'n', 'h', 'e', 9, 0,
  /* 340 */ 'c', 'g', 'r', 'j', 'n', 'h', 'e', 9, 0,
  /* 349 */ 'l', 'o', 'c', 'r', 'n', 'h', 'e', 9, 0,
  /* 358 */ 'l', 'o', 'c', 'g', 'r', 'n', 'h', 'e', 9, 0,
  /* 368 */ 'l', 'o', 'c', 'r', 'h', 'e', 9, 0,
  /* 376 */ 'l', 'o', 'c', 'g', 'r', 'h', 'e', 9, 0,
  /* 385 */ 'c', 'i', 'j', 'e', 9, 0,
  /* 391 */ 'c', 'g', 'i', 'j', 'e', 9, 0,
  /* 398 */ 'c', 'r', 'j', 'e', 9, 0,
  /* 404 */ 'c', 'g', 'r', 'j', 'e', 9, 0,
  /* 411 */ 'l', 'o', 'c', 'l', 'e', 9, 0,
  /* 418 */ 's', 't', 'o', 'c', 'l', 'e', 9, 0,
  /* 426 */ 'l', 'o', 'c', 'g', 'l', 'e', 9, 0,
  /* 434 */ 's', 't', 'o', 'c', 'g', 'l', 'e', 9, 0,
  /* 443 */ 'j', 'g', 'l', 'e', 9, 0,
  /* 449 */ 'c', 'i', 'j', 'l', 'e', 9, 0,
  /* 456 */ 'c', 'g', 'i', 'j', 'l', 'e', 9, 0,
  /* 464 */ 'c', 'r', 'j', 'l', 'e', 9, 0,
  /* 471 */ 'c', 'g', 'r', 'j', 'l', 'e', 9, 0,
  /* 479 */ 'l', 'o', 'c', 'n', 'l', 'e', 9, 0,
  /* 487 */ 's', 't', 'o', 'c', 'n', 'l', 'e', 9, 0,
  /* 496 */ 'l', 'o', 'c', 'g', 'n', 'l', 'e', 9, 0,
  /* 505 */ 's', 't', 'o', 'c', 'g', 'n', 'l', 'e', 9, 0,
  /* 515 */ 'j', 'g', 'n', 'l', 'e', 9, 0,
  /* 522 */ 'c', 'i', 'j', 'n', 'l', 'e', 9, 0,
  /* 530 */ 'c', 'g', 'i', 'j', 'n', 'l', 'e', 9, 0,
  /* 539 */ 'c', 'r', 'j', 'n', 'l', 'e', 9, 0,
  /* 547 */ 'c', 'g', 'r', 'j', 'n', 'l', 'e', 9, 0,
  /* 556 */ 'l', 'o', 'c', 'r', 'n', 'l', 'e', 9, 0,
  /* 565 */ 'l', 'o', 'c', 'g', 'r', 'n', 'l', 'e', 9, 0,
  /* 575 */ 'l', 'o', 'c', 'r', 'l', 'e', 9, 0,
  /* 583 */ 'l', 'o', 'c', 'g', 'r', 'l', 'e', 9, 0,
  /* 592 */ 'l', 'o', 'c', 'n', 'e', 9, 0,
  /* 599 */ 's', 't', 'o', 'c', 'n', 'e', 9, 0,
  /* 607 */ 'l', 'o', 'c', 'g', 'n', 'e', 9, 0,
  /* 615 */ 's', 't', 'o', 'c', 'g', 'n', 'e', 9, 0,
  /* 624 */ 'j', 'g', 'n', 'e', 9, 0,
  /* 630 */ 'c', 'i', 'j', 'n', 'e', 9, 0,
  /* 637 */ 'c', 'g', 'i', 'j', 'n', 'e', 9, 0,
  /* 645 */ 'c', 'r', 'j', 'n', 'e', 9, 0,
  /* 652 */ 'c', 'g', 'r', 'j', 'n', 'e', 9, 0,
  /* 660 */ 'l', 'o', 'c', 'r', 'n', 'e', 9, 0,
  /* 668 */ 'l', 'o', 'c', 'g', 'r', 'n', 'e', 9, 0,
  /* 677 */ 'l', 'o', 'c', 'r', 'e', 9, 0,
  /* 684 */ 'l', 'o', 'c', 'g', 'r', 'e', 9, 0,
  /* 692 */ 's', 't', 'e', 9, 0,
  /* 697 */ 'a', 'g', 'f', 9, 0,
  /* 702 */ 'c', 'g', 'f', 9, 0,
  /* 707 */ 'a', 'l', 'g', 'f', 9, 0,
  /* 713 */ 'c', 'l', 'g', 'f', 9, 0,
  /* 719 */ 'l', 'l', 'g', 'f', 9, 0,
  /* 725 */ 's', 'l', 'g', 'f', 9, 0,
  /* 731 */ 'd', 's', 'g', 'f', 9, 0,
  /* 737 */ 'm', 's', 'g', 'f', 9, 0,
  /* 743 */ 'l', 't', 'g', 'f', 9, 0,
  /* 749 */ 'i', 'i', 'h', 'f', 9, 0,
  /* 755 */ 'l', 'l', 'i', 'h', 'f', 9, 0,
  /* 762 */ 'n', 'i', 'h', 'f', 9, 0,
  /* 768 */ 'o', 'i', 'h', 'f', 9, 0,
  /* 774 */ 'x', 'i', 'h', 'f', 9, 0,
  /* 780 */ 'i', 'i', 'l', 'f', 9, 0,
  /* 786 */ 'l', 'l', 'i', 'l', 'f', 9, 0,
  /* 793 */ 'n', 'i', 'l', 'f', 9, 0,
  /* 799 */ 'o', 'i', 'l', 'f', 9, 0,
  /* 805 */ 'x', 'i', 'l', 'f', 9, 0,
  /* 811 */ 's', 'r', 'a', 'g', 9, 0,
  /* 817 */ 's', 'l', 'b', 'g', 9, 0,
  /* 823 */ 'r', 'i', 's', 'b', 'g', 9, 0,
  /* 830 */ 'r', 'n', 's', 'b', 'g', 9, 0,
  /* 837 */ 'r', 'o', 's', 'b', 'g', 9, 0,
  /* 844 */ 'r', 'x', 's', 'b', 'g', 9, 0,
  /* 851 */ 'a', 'l', 'c', 'g', 9, 0,
  /* 857 */ 'l', 'o', 'c', 'g', 9, 0,
  /* 863 */ 's', 't', 'o', 'c', 'g', 9, 0,
  /* 870 */ 'r', 'i', 's', 'b', 'h', 'g', 9, 0,
  /* 878 */ 'j', 'g', 9, 0,
  /* 882 */ 'a', 'l', 'g', 9, 0,
  /* 887 */ 'r', 'i', 's', 'b', 'l', 'g', 9, 0,
  /* 895 */ 'c', 'l', 'g', 9, 0,
  /* 900 */ 'd', 'l', 'g', 9, 0,
  /* 905 */ 'r', 'l', 'l', 'g', 9, 0,
  /* 911 */ 's', 'l', 'l', 'g', 9, 0,
  /* 917 */ 'm', 'l', 'g', 9, 0,
  /* 922 */ 's', 'r', 'l', 'g', 9, 0,
  /* 928 */ 's', 'l', 'g', 9, 0,
  /* 933 */ 'l', 'm', 'g', 9, 0,
  /* 938 */ 's', 't', 'm', 'g', 9, 0,
  /* 944 */ 'n', 'g', 9, 0,
  /* 948 */ 'o', 'g', 9, 0,
  /* 952 */ 'c', 's', 'g', 9, 0,
  /* 957 */ 'd', 's', 'g', 9, 0,
  /* 962 */ 'm', 's', 'g', 9, 0,
  /* 967 */ 'b', 'r', 'c', 't', 'g', 9, 0,
  /* 974 */ 'l', 't', 'g', 9, 0,
  /* 979 */ 's', 't', 'g', 9, 0,
  /* 984 */ 'l', 'r', 'v', 'g', 9, 0,
  /* 990 */ 's', 't', 'r', 'v', 'g', 9, 0,
  /* 997 */ 'x', 'g', 9, 0,
  /* 1001 */ 'a', 'h', 9, 0,
  /* 1005 */ 'l', 'o', 'c', 'h', 9, 0,
  /* 1011 */ 's', 't', 'o', 'c', 'h', 9, 0,
  /* 1018 */ 'l', 'o', 'c', 'g', 'h', 9, 0,
  /* 1025 */ 's', 't', 'o', 'c', 'g', 'h', 9, 0,
  /* 1033 */ 'j', 'g', 'h', 9, 0,
  /* 1038 */ 'l', 'l', 'g', 'h', 9, 0,
  /* 1044 */ 'i', 'i', 'h', 'h', 9, 0,
  /* 1050 */ 'l', 'l', 'i', 'h', 'h', 9, 0,
  /* 1057 */ 'n', 'i', 'h', 'h', 9, 0,
  /* 1063 */ 'o', 'i', 'h', 'h', 9, 0,
  /* 1069 */ 'c', 'i', 'j', 'h', 9, 0,
  /* 1075 */ 'c', 'g', 'i', 'j', 'h', 9, 0,
  /* 1082 */ 'c', 'r', 'j', 'h', 9, 0,
  /* 1088 */ 'c', 'g', 'r', 'j', 'h', 9, 0,
  /* 1095 */ 'l', 'o', 'c', 'l', 'h', 9, 0,
  /* 1102 */ 's', 't', 'o', 'c', 'l', 'h', 9, 0,
  /* 1110 */ 'l', 'o', 'c', 'g', 'l', 'h', 9, 0,
  /* 1118 */ 's', 't', 'o', 'c', 'g', 'l', 'h', 9, 0,
  /* 1127 */ 'j', 'g', 'l', 'h', 9, 0,
  /* 1133 */ 'i', 'i', 'l', 'h', 9, 0,
  /* 1139 */ 'l', 'l', 'i', 'l', 'h', 9, 0,
  /* 1146 */ 'n', 'i', 'l', 'h', 9, 0,
  /* 1152 */ 'o', 'i', 'l', 'h', 9, 0,
  /* 1158 */ 'c', 'i', 'j', 'l', 'h', 9, 0,
  /* 1165 */ 'c', 'g', 'i', 'j', 'l', 'h', 9, 0,
  /* 1173 */ 'c', 'r', 'j', 'l', 'h', 9, 0,
  /* 1180 */ 'c', 'g', 'r', 'j', 'l', 'h', 9, 0,
  /* 1188 */ 'l', 'l', 'h', 9, 0,
  /* 1193 */ 'l', 'o', 'c', 'n', 'l', 'h', 9, 0,
  /* 1201 */ 's', 't', 'o', 'c', 'n', 'l', 'h', 9, 0,
  /* 1210 */ 'l', 'o', 'c', 'g', 'n', 'l', 'h', 9, 0,
  /* 1219 */ 's', 't', 'o', 'c', 'g', 'n', 'l', 'h', 9, 0,
  /* 1229 */ 'j', 'g', 'n', 'l', 'h', 9, 0,
  /* 1236 */ 'c', 'i', 'j', 'n', 'l', 'h', 9, 0,
  /* 1244 */ 'c', 'g', 'i', 'j', 'n', 'l', 'h', 9, 0,
  /* 1253 */ 'c', 'r', 'j', 'n', 'l', 'h', 9, 0,
  /* 1261 */ 'c', 'g', 'r', 'j', 'n', 'l', 'h', 9, 0,
  /* 1270 */ 'l', 'o', 'c', 'r', 'n', 'l', 'h', 9, 0,
  /* 1279 */ 'l', 'o', 'c', 'g', 'r', 'n', 'l', 'h', 9, 0,
  /* 1289 */ 'l', 'o', 'c', 'r', 'l', 'h', 9, 0,
  /* 1297 */ 'l', 'o', 'c', 'g', 'r', 'l', 'h', 9, 0,
  /* 1306 */ 'm', 'h', 9, 0,
  /* 1310 */ 'l', 'o', 'c', 'n', 'h', 9, 0,
  /* 1317 */ 's', 't', 'o', 'c', 'n', 'h', 9, 0,
  /* 1325 */ 'l', 'o', 'c', 'g', 'n', 'h', 9, 0,
  /* 1333 */ 's', 't', 'o', 'c', 'g', 'n', 'h', 9, 0,
  /* 1342 */ 'j', 'g', 'n', 'h', 9, 0,
  /* 1348 */ 'c', 'i', 'j', 'n', 'h', 9, 0,
  /* 1355 */ 'c', 'g', 'i', 'j', 'n', 'h', 9, 0,
  /* 1363 */ 'c', 'r', 'j', 'n', 'h', 9, 0,
  /* 1370 */ 'c', 'g', 'r', 'j', 'n', 'h', 9, 0,
  /* 1378 */ 'l', 'o', 'c', 'r', 'n', 'h', 9, 0,
  /* 1386 */ 'l', 'o', 'c', 'g', 'r', 'n', 'h', 9, 0,
  /* 1395 */ 'l', 'o', 'c', 'r', 'h', 9, 0,
  /* 1402 */ 'l', 'o', 'c', 'g', 'r', 'h', 9, 0,
  /* 1410 */ 's', 'h', 9, 0,
  /* 1414 */ 's', 't', 'h', 9, 0,
  /* 1419 */ 'a', 'f', 'i', 9, 0,
  /* 1424 */ 'c', 'f', 'i', 9, 0,
  /* 1429 */ 'a', 'g', 'f', 'i', 9, 0,
  /* 1435 */ 'c', 'g', 'f', 'i', 9, 0,
  /* 1441 */ 'a', 'l', 'g', 'f', 'i', 9, 0,
  /* 1448 */ 'c', 'l', 'g', 'f', 'i', 9, 0,
  /* 1455 */ 's', 'l', 'g', 'f', 'i', 9, 0,
  /* 1462 */ 'm', 's', 'g', 'f', 'i', 9, 0,
  /* 1469 */ 'a', 'l', 'f', 'i', 9, 0,
  /* 1475 */ 'c', 'l', 'f', 'i', 9, 0,
  /* 1481 */ 's', 'l', 'f', 'i', 9, 0,
  /* 1487 */ 'm', 's', 'f', 'i', 9, 0,
  /* 1493 */ 'a', 'h', 'i', 9, 0,
  /* 1498 */ 'c', 'h', 'i', 9, 0,
  /* 1503 */ 'a', 'g', 'h', 'i', 9, 0,
  /* 1509 */ 'c', 'g', 'h', 'i', 9, 0,
  /* 1515 */ 'l', 'g', 'h', 'i', 9, 0,
  /* 1521 */ 'm', 'g', 'h', 'i', 9, 0,
  /* 1527 */ 'm', 'v', 'g', 'h', 'i', 9, 0,
  /* 1534 */ 'm', 'v', 'h', 'h', 'i', 9, 0,
  /* 1541 */ 'l', 'h', 'i', 9, 0,
  /* 1546 */ 'm', 'h', 'i', 9, 0,
  /* 1551 */ 'm', 'v', 'h', 'i', 9, 0,
  /* 1557 */ 'c', 'l', 'i', 9, 0,
  /* 1562 */ 'n', 'i', 9, 0,
  /* 1566 */ 'o', 'i', 9, 0,
  /* 1570 */ 'a', 's', 'i', 9, 0,
  /* 1575 */ 'a', 'g', 's', 'i', 9, 0,
  /* 1581 */ 'c', 'h', 's', 'i', 9, 0,
  /* 1587 */ 'c', 'l', 'f', 'h', 's', 'i', 9, 0,
  /* 1595 */ 'c', 'g', 'h', 's', 'i', 9, 0,
  /* 1602 */ 'c', 'l', 'g', 'h', 's', 'i', 9, 0,
  /* 1610 */ 'c', 'h', 'h', 's', 'i', 9, 0,
  /* 1617 */ 'c', 'l', 'h', 'h', 's', 'i', 9, 0,
  /* 1625 */ 'm', 'v', 'i', 9, 0,
  /* 1630 */ 'x', 'i', 9, 0,
  /* 1634 */ 'c', 'i', 'j', 9, 0,
  /* 1639 */ 'c', 'g', 'i', 'j', 9, 0,
  /* 1645 */ 'c', 'r', 'j', 9, 0,
  /* 1650 */ 'c', 'g', 'r', 'j', 9, 0,
  /* 1656 */ 's', 'r', 'a', 'k', 9, 0,
  /* 1662 */ 'a', 'h', 'i', 'k', 9, 0,
  /* 1668 */ 'a', 'g', 'h', 'i', 'k', 9, 0,
  /* 1675 */ 'a', 'l', 'g', 'h', 's', 'i', 'k', 9, 0,
  /* 1684 */ 'a', 'l', 'h', 's', 'i', 'k', 9, 0,
  /* 1692 */ 's', 'l', 'l', 'k', 9, 0,
  /* 1698 */ 's', 'r', 'l', 'k', 9, 0,
  /* 1704 */ 'a', 'r', 'k', 9, 0,
  /* 1709 */ 'a', 'g', 'r', 'k', 9, 0,
  /* 1715 */ 'a', 'l', 'g', 'r', 'k', 9, 0,
  /* 1722 */ 's', 'l', 'g', 'r', 'k', 9, 0,
  /* 1729 */ 'n', 'g', 'r', 'k', 9, 0,
  /* 1735 */ 'o', 'g', 'r', 'k', 9, 0,
  /* 1741 */ 's', 'g', 'r', 'k', 9, 0,
  /* 1747 */ 'x', 'g', 'r', 'k', 9, 0,
  /* 1753 */ 'a', 'l', 'r', 'k', 9, 0,
  /* 1759 */ 's', 'l', 'r', 'k', 9, 0,
  /* 1765 */ 'n', 'r', 'k', 9, 0,
  /* 1770 */ 'o', 'r', 'k', 9, 0,
  /* 1775 */ 's', 'r', 'k', 9, 0,
  /* 1780 */ 'x', 'r', 'k', 9, 0,
  /* 1785 */ 'a', 'l', 9, 0,
  /* 1789 */ 'l', 'o', 'c', 'l', 9, 0,
  /* 1795 */ 's', 't', 'o', 'c', 'l', 9, 0,
  /* 1802 */ 'b', 'r', 'c', 'l', 9, 0,
  /* 1808 */ 'd', 'l', 9, 0,
  /* 1812 */ 'l', 'o', 'c', 'g', 'l', 9, 0,
  /* 1819 */ 's', 't', 'o', 'c', 'g', 'l', 9, 0,
  /* 1827 */ 'j', 'g', 'l', 9, 0,
  /* 1832 */ 'i', 'i', 'h', 'l', 9, 0,
  /* 1838 */ 'l', 'l', 'i', 'h', 'l', 9, 0,
  /* 1845 */ 'n', 'i', 'h', 'l', 9, 0,
  /* 1851 */ 'o', 'i', 'h', 'l', 9, 0,
  /* 1857 */ 'c', 'i', 'j', 'l', 9, 0,
  /* 1863 */ 'c', 'g', 'i', 'j', 'l', 9, 0,
  /* 1870 */ 'c', 'r', 'j', 'l', 9, 0,
  /* 1876 */ 'c', 'g', 'r', 'j', 'l', 9, 0,
  /* 1883 */ 'i', 'i', 'l', 'l', 9, 0,
  /* 1889 */ 'l', 'l', 'i', 'l', 'l', 9, 0,
  /* 1896 */ 'n', 'i', 'l', 'l', 9, 0,
  /* 1902 */ 'o', 'i', 'l', 'l', 9, 0,
  /* 1908 */ 'r', 'l', 'l', 9, 0,
  /* 1913 */ 's', 'l', 'l', 9, 0,
  /* 1918 */ 'l', 'o', 'c', 'n', 'l', 9, 0,
  /* 1925 */ 's', 't', 'o', 'c', 'n', 'l', 9, 0,
  /* 1933 */ 'l', 'o', 'c', 'g', 'n', 'l', 9, 0,
  /* 1941 */ 's', 't', 'o', 'c', 'g', 'n', 'l', 9, 0,
  /* 1950 */ 'j', 'g', 'n', 'l', 9, 0,
  /* 1956 */ 'c', 'i', 'j', 'n', 'l', 9, 0,
  /* 1963 */ 'c', 'g', 'i', 'j', 'n', 'l', 9, 0,
  /* 1971 */ 'c', 'r', 'j', 'n', 'l', 9, 0,
  /* 1978 */ 'c', 'g', 'r', 'j', 'n', 'l', 9, 0,
  /* 1986 */ 'l', 'o', 'c', 'r', 'n', 'l', 9, 0,
  /* 1994 */ 'l', 'o', 'c', 'g', 'r', 'n', 'l', 9, 0,
  /* 2003 */ 'l', 'a', 'r', 'l', 9, 0,
  /* 2009 */ 'l', 'o', 'c', 'r', 'l', 9, 0,
  /* 2016 */ 'c', 'g', 'f', 'r', 'l', 9, 0,
  /* 2023 */ 'c', 'l', 'g', 'f', 'r', 'l', 9, 0,
  /* 2031 */ 'l', 'l', 'g', 'f', 'r', 'l', 9, 0,
  /* 2039 */ 'l', 'o', 'c', 'g', 'r', 'l', 9, 0,
  /* 2047 */ 'c', 'l', 'g', 'r', 'l', 9, 0,
  /* 2054 */ 's', 't', 'g', 'r', 'l', 9, 0,
  /* 2061 */ 'c', 'h', 'r', 'l', 9, 0,
  /* 2067 */ 'c', 'g', 'h', 'r', 'l', 9, 0,
  /* 2074 */ 'c', 'l', 'g', 'h', 'r', 'l', 9, 0,
  /* 2082 */ 'l', 'l', 'g', 'h', 'r', 'l', 9, 0,
  /* 2090 */ 'c', 'l', 'h', 'r', 'l', 9, 0,
  /* 2097 */ 'l', 'l', 'h', 'r', 'l', 9, 0,
  /* 2104 */ 's', 't', 'h', 'r', 'l', 9, 0,
  /* 2111 */ 'c', 'l', 'r', 'l', 9, 0,
  /* 2117 */ 's', 'r', 'l', 9, 0,
  /* 2122 */ 's', 't', 'r', 'l', 9, 0,
  /* 2128 */ 'b', 'r', 'a', 's', 'l', 9, 0,
  /* 2135 */ 'i', 'p', 'm', 9, 0,
  /* 2140 */ 'n', 9, 0,
  /* 2143 */ 'l', 'o', 'c', 'o', 9, 0,
  /* 2149 */ 's', 't', 'o', 'c', 'o', 9, 0,
  /* 2156 */ 'l', 'o', 'c', 'g', 'o', 9, 0,
  /* 2163 */ 's', 't', 'o', 'c', 'g', 'o', 9, 0,
  /* 2171 */ 'j', 'g', 'o', 9, 0,
  /* 2176 */ 'j', 'o', 9, 0,
  /* 2180 */ 'l', 'o', 'c', 'n', 'o', 9, 0,
  /* 2187 */ 's', 't', 'o', 'c', 'n', 'o', 9, 0,
  /* 2195 */ 'l', 'o', 'c', 'g', 'n', 'o', 9, 0,
  /* 2203 */ 's', 't', 'o', 'c', 'g', 'n', 'o', 9, 0,
  /* 2212 */ 'j', 'g', 'n', 'o', 9, 0,
  /* 2218 */ 'j', 'n', 'o', 9, 0,
  /* 2223 */ 'l', 'o', 'c', 'r', 'n', 'o', 9, 0,
  /* 2231 */ 'l', 'o', 'c', 'g', 'r', 'n', 'o', 9, 0,
  /* 2240 */ 'l', 'o', 'c', 'r', 'o', 9, 0,
  /* 2247 */ 'l', 'o', 'c', 'g', 'r', 'o', 9, 0,
  /* 2255 */ 'e', 'a', 'r', 9, 0,
  /* 2260 */ 'm', 'a', 'd', 'b', 'r', 9, 0,
  /* 2267 */ 'l', 'c', 'd', 'b', 'r', 9, 0,
  /* 2274 */ 'd', 'd', 'b', 'r', 9, 0,
  /* 2280 */ 'l', 'e', 'd', 'b', 'r', 9, 0,
  /* 2287 */ 'c', 'f', 'd', 'b', 'r', 9, 0,
  /* 2294 */ 'c', 'g', 'd', 'b', 'r', 9, 0,
  /* 2301 */ 'f', 'i', 'd', 'b', 'r', 9, 0,
  /* 2308 */ 'm', 'd', 'b', 'r', 9, 0,
  /* 2314 */ 'l', 'n', 'd', 'b', 'r', 9, 0,
  /* 2321 */ 'l', 'p', 'd', 'b', 'r', 9, 0,
  /* 2328 */ 's', 'q', 'd', 'b', 'r', 9, 0,
  /* 2335 */ 'm', 's', 'd', 'b', 'r', 9, 0,
  /* 2342 */ 'l', 't', 'd', 'b', 'r', 9, 0,
  /* 2349 */ 'l', 'x', 'd', 'b', 'r', 9, 0,
  /* 2356 */ 'm', 'x', 'd', 'b', 'r', 9, 0,
  /* 2363 */ 'm', 'a', 'e', 'b', 'r', 9, 0,
  /* 2370 */ 'l', 'c', 'e', 'b', 'r', 9, 0,
  /* 2377 */ 'l', 'd', 'e', 'b', 'r', 9, 0,
  /* 2384 */ 'm', 'd', 'e', 'b', 'r', 9, 0,
  /* 2391 */ 'm', 'e', 'e', 'b', 'r', 9, 0,
  /* 2398 */ 'c', 'f', 'e', 'b', 'r', 9, 0,
  /* 2405 */ 'c', 'g', 'e', 'b', 'r', 9, 0,
  /* 2412 */ 'f', 'i', 'e', 'b', 'r', 9, 0,
  /* 2419 */ 'l', 'n', 'e', 'b', 'r', 9, 0,
  /* 2426 */ 'l', 'p', 'e', 'b', 'r', 9, 0,
  /* 2433 */ 's', 'q', 'e', 'b', 'r', 9, 0,
  /* 2440 */ 'm', 's', 'e', 'b', 'r', 9, 0,
  /* 2447 */ 'l', 't', 'e', 'b', 'r', 9, 0,
  /* 2454 */ 'l', 'x', 'e', 'b', 'r', 9, 0,
  /* 2461 */ 'c', 'd', 'f', 'b', 'r', 9, 0,
  /* 2468 */ 'c', 'e', 'f', 'b', 'r', 9, 0,
  /* 2475 */ 'c', 'x', 'f', 'b', 'r', 9, 0,
  /* 2482 */ 'c', 'd', 'g', 'b', 'r', 9, 0,
  /* 2489 */ 'c', 'e', 'g', 'b', 'r', 9, 0,
  /* 2496 */ 'l', 'g', 'b', 'r', 9, 0,
  /* 2502 */ 'c', 'x', 'g', 'b', 'r', 9, 0,
  /* 2509 */ 's', 'l', 'b', 'r', 9, 0,
  /* 2515 */ 'a', 'x', 'b', 'r', 9, 0,
  /* 2521 */ 'l', 'c', 'x', 'b', 'r', 9, 0,
  /* 2528 */ 'l', 'd', 'x', 'b', 'r', 9, 0,
  /* 2535 */ 'l', 'e', 'x', 'b', 'r', 9, 0,
  /* 2542 */ 'c', 'f', 'x', 'b', 'r', 9, 0,
  /* 2549 */ 'c', 'g', 'x', 'b', 'r', 9, 0,
  /* 2556 */ 'f', 'i', 'x', 'b', 'r', 9, 0,
  /* 2563 */ 'm', 'x', 'b', 'r', 9, 0,
  /* 2569 */ 'l', 'n', 'x', 'b', 'r', 9, 0,
  /* 2576 */ 'l', 'p', 'x', 'b', 'r', 9, 0,
  /* 2583 */ 's', 'q', 'x', 'b', 'r', 9, 0,
  /* 2590 */ 's', 'x', 'b', 'r', 9, 0,
  /* 2596 */ 'l', 't', 'x', 'b', 'r', 9, 0,
  /* 2603 */ 'l', 'l', 'g', 'c', 'r', 9, 0,
  /* 2610 */ 'a', 'l', 'c', 'r', 9, 0,
  /* 2616 */ 'l', 'l', 'c', 'r', 9, 0,
  /* 2622 */ 'l', 'o', 'c', 'r', 9, 0,
  /* 2628 */ 'l', 'g', 'd', 'r', 9, 0,
  /* 2634 */ 'l', 'd', 'r', 9, 0,
  /* 2639 */ 'c', 'p', 's', 'd', 'r', 9, 0,
  /* 2646 */ 'l', 'z', 'd', 'r', 9, 0,
  /* 2652 */ 'l', 'e', 'r', 9, 0,
  /* 2657 */ 'l', 'z', 'e', 'r', 9, 0,
  /* 2663 */ 'a', 'g', 'f', 'r', 9, 0,
  /* 2669 */ 'l', 'c', 'g', 'f', 'r', 9, 0,
  /* 2676 */ 'a', 'l', 'g', 'f', 'r', 9, 0,
  /* 2683 */ 'c', 'l', 'g', 'f', 'r', 9, 0,
  /* 2690 */ 'l', 'l', 'g', 'f', 'r', 9, 0,
  /* 2697 */ 's', 'l', 'g', 'f', 'r', 9, 0,
  /* 2704 */ 'd', 's', 'g', 'f', 'r', 9, 0,
  /* 2711 */ 'm', 's', 'g', 'f', 'r', 9, 0,
  /* 2718 */ 'l', 't', 'g', 'f', 'r', 9, 0,
  /* 2725 */ 'a', 'g', 'r', 9, 0,
  /* 2730 */ 's', 'l', 'b', 'g', 'r', 9, 0,
  /* 2737 */ 'a', 'l', 'c', 'g', 'r', 9, 0,
  /* 2744 */ 'l', 'o', 'c', 'g', 'r', 9, 0,
  /* 2751 */ 'l', 'd', 'g', 'r', 9, 0,
  /* 2757 */ 'a', 'l', 'g', 'r', 9, 0,
  /* 2763 */ 'c', 'l', 'g', 'r', 9, 0,
  /* 2769 */ 'd', 'l', 'g', 'r', 9, 0,
  /* 2775 */ 'm', 'l', 'g', 'r', 9, 0,
  /* 2781 */ 's', 'l', 'g', 'r', 9, 0,
  /* 2787 */ 'n', 'g', 'r', 9, 0,
  /* 2792 */ 'f', 'l', 'o', 'g', 'r', 9, 0,
  /* 2799 */ 'd', 's', 'g', 'r', 9, 0,
  /* 2805 */ 'm', 's', 'g', 'r', 9, 0,
  /* 2811 */ 'l', 't', 'g', 'r', 9, 0,
  /* 2817 */ 'l', 'r', 'v', 'g', 'r', 9, 0,
  /* 2824 */ 'x', 'g', 'r', 9, 0,
  /* 2829 */ 'l', 'l', 'g', 'h', 'r', 9, 0,
  /* 2836 */ 'l', 'l', 'h', 'r', 9, 0,
  /* 2842 */ 'a', 'l', 'r', 9, 0,
  /* 2847 */ 'c', 'l', 'r', 9, 0,
  /* 2852 */ 'd', 'l', 'r', 9, 0,
  /* 2857 */ 's', 'l', 'r', 9, 0,
  /* 2862 */ 'n', 'r', 9, 0,
  /* 2866 */ 'o', 'r', 9, 0,
  /* 2870 */ 'b', 'a', 's', 'r', 9, 0,
  /* 2876 */ 'm', 's', 'r', 9, 0,
  /* 2881 */ 'l', 't', 'r', 9, 0,
  /* 2886 */ 'l', 'r', 'v', 'r', 9, 0,
  /* 2892 */ 'l', 'x', 'r', 9, 0,
  /* 2897 */ 'l', 'z', 'x', 'r', 9, 0,
  /* 2903 */ 'b', 'r', 'a', 's', 9, 0,
  /* 2909 */ 'c', 's', 9, 0,
  /* 2913 */ 'm', 's', 9, 0,
  /* 2917 */ 'b', 'r', 'c', 't', 9, 0,
  /* 2923 */ 'l', 't', 9, 0,
  /* 2927 */ 's', 't', 9, 0,
  /* 2931 */ 'l', 'r', 'v', 9, 0,
  /* 2936 */ 's', 't', 'r', 'v', 9, 0,
  /* 2942 */ 'x', 9, 0,
  /* 2945 */ 'l', 'a', 'y', 9, 0,
  /* 2950 */ 'i', 'c', 'y', 9, 0,
  /* 2955 */ 's', 't', 'c', 'y', 9, 0,
  /* 2961 */ 'l', 'd', 'y', 9, 0,
  /* 2966 */ 's', 't', 'd', 'y', 9, 0,
  /* 2972 */ 'l', 'e', 'y', 9, 0,
  /* 2977 */ 's', 't', 'e', 'y', 9, 0,
  /* 2983 */ 'a', 'h', 'y', 9, 0,
  /* 2988 */ 'c', 'h', 'y', 9, 0,
  /* 2993 */ 'l', 'h', 'y', 9, 0,
  /* 2998 */ 'm', 'h', 'y', 9, 0,
  /* 3003 */ 's', 'h', 'y', 9, 0,
  /* 3008 */ 's', 't', 'h', 'y', 9, 0,
  /* 3014 */ 'c', 'l', 'i', 'y', 9, 0,
  /* 3020 */ 'n', 'i', 'y', 9, 0,
  /* 3025 */ 'o', 'i', 'y', 9, 0,
  /* 3030 */ 'm', 'v', 'i', 'y', 9, 0,
  /* 3036 */ 'x', 'i', 'y', 9, 0,
  /* 3041 */ 'a', 'l', 'y', 9, 0,
  /* 3046 */ 'c', 'l', 'y', 9, 0,
  /* 3051 */ 's', 'l', 'y', 9, 0,
  /* 3056 */ 'n', 'y', 9, 0,
  /* 3060 */ 'o', 'y', 9, 0,
  /* 3064 */ 'c', 's', 'y', 9, 0,
  /* 3069 */ 'm', 's', 'y', 9, 0,
  /* 3074 */ 's', 't', 'y', 9, 0,
  /* 3079 */ 'x', 'y', 9, 0,
  /* 3083 */ 'b', 'r', 'a', 's', 'l', 9, '%', 'r', '1', '4', ',', 32, 0,
  /* 3096 */ 'b', 'a', 's', 'r', 9, '%', 'r', '1', '4', ',', 32, 0,
  /* 3108 */ 'b', 'r', 'a', 's', 9, '%', 'r', '1', '4', ',', 32, 0,
  /* 3120 */ 'b', 'r', 9, '%', 'r', '1', '4', 0,
  /* 3128 */ 'L', 'I', 'F', 'E', 'T', 'I', 'M', 'E', '_', 'E', 'N', 'D', 0,
  /* 3141 */ 'B', 'U', 'N', 'D', 'L', 'E', 0,
  /* 3148 */ 'D', 'B', 'G', '_', 'V', 'A', 'L', 'U', 'E', 0,
  /* 3158 */ 'L', 'I', 'F', 'E', 'T', 'I', 'M', 'E', '_', 'S', 'T', 'A', 'R', 'T', 0,
  /* 3173 */ 'l', 'o', 'c', 0,
  /* 3177 */ 's', 't', 'o', 'c', 0,
  /* 3182 */ 'l', 'o', 'c', 'g', 0,
  /* 3187 */ 's', 't', 'o', 'c', 'g', 0,
  /* 3193 */ 'j', 'g', 0,
  /* 3196 */ 'c', 'i', 'j', 0,
  /* 3200 */ 'c', 'g', 'i', 'j', 0,
  /* 3205 */ 'c', 'r', 'j', 0,
  /* 3209 */ 'c', 'g', 'r', 'j', 0,
  /* 3214 */ 'l', 'o', 'c', 'r', 0,
  /* 3219 */ 'l', 'o', 'c', 'g', 'r', 0,
  };

  O << "\t";

  // Emit the opcode for the instruction.
  uint32_t Bits = OpInfo[MI->getOpcode()];
  assert(Bits != 0 && "Cannot print this instruction.");
  O << AsmStrs+(Bits & 4095)-1;


  // Fragment 0 encoded into 4 bits for 12 unique commands.
  switch ((Bits >> 12) & 15) {
  default:   // unreachable.
  case 0:
    // DBG_VALUE, BUNDLE, LIFETIME_START, LIFETIME_END, RET
    return;
    break;
  case 1:
    // A, ADB, ADBR, AEB, AEBR, AFI, AG, AGF, AGFI, AGFR, AGHI, AGHIK, AGR, A...
    printOperand(MI, 0, O); 
    break;
  case 2:
    // AGSI, ASI, CGHSI, CHHSI, CHSI, CLFHSI, CLGHSI, CLHHSI, CLI, CLIY, MVGH...
    printBDAddrOperand(MI, 0, O); 
    O << ", "; 
    break;
  case 3:
    // AsmBRC, AsmBRCL
    printU4ImmOperand(MI, 0, O); 
    O << ", "; 
    printPCRelOperand(MI, 1, O); 
    return;
    break;
  case 4:
    // AsmEJ, AsmEJG, AsmHEJ, AsmHEJG, AsmHJ, AsmHJG, AsmLEJ, AsmLEJG, AsmLHJ...
    printPCRelOperand(MI, 0, O); 
    return;
    break;
  case 5:
    // BRAS, BRASL
    printCallOperand(MI, 0, O); 
    return;
    break;
  case 6:
    // BRC, BRCL
    printCond4Operand(MI, 1, O); 
    O << "\t"; 
    printPCRelOperand(MI, 2, O); 
    return;
    break;
  case 7:
    // CGIJ, CGRJ, CIJ, CRJ
    printCond4Operand(MI, 2, O); 
    O << "\t"; 
    printOperand(MI, 0, O); 
    O << ", "; 
    break;
  case 8:
    // CLC, MVC
    printBDLAddrOperand(MI, 0, O); 
    O << ", "; 
    printBDAddrOperand(MI, 3, O); 
    return;
    break;
  case 9:
    // LOC, LOCG
    printCond4Operand(MI, 5, O); 
    O << "\t"; 
    printOperand(MI, 0, O); 
    O << ", "; 
    printBDAddrOperand(MI, 2, O); 
    return;
    break;
  case 10:
    // LOCGR, LOCR
    printCond4Operand(MI, 3, O); 
    O << "\t"; 
    printOperand(MI, 0, O); 
    O << ", "; 
    printOperand(MI, 1, O); 
    return;
    break;
  case 11:
    // STOC, STOC32, STOCG
    printCond4Operand(MI, 4, O); 
    O << "\t"; 
    printOperand(MI, 0, O); 
    O << ", "; 
    printBDAddrOperand(MI, 1, O); 
    return;
    break;
  }


  // Fragment 1 encoded into 3 bits for 8 unique commands.
  switch ((Bits >> 16) & 7) {
  default:   // unreachable.
  case 0:
    // A, ADB, ADBR, AEB, AEBR, AFI, AG, AGF, AGFI, AGFR, AGHI, AGHIK, AGR, A...
    O << ", "; 
    break;
  case 1:
    // AGSI, ASI
    printS8ImmOperand(MI, 2, O); 
    return;
    break;
  case 2:
    // BASR, BR, IPM, LZDR, LZER, LZXR
    return;
    break;
  case 3:
    // CGHSI, CHHSI, CHSI, MVGHI, MVHHI, MVHI
    printS16ImmOperand(MI, 2, O); 
    return;
    break;
  case 4:
    // CGIJ, CIJ
    printS8ImmOperand(MI, 1, O); 
    O << ", "; 
    printPCRelOperand(MI, 3, O); 
    return;
    break;
  case 5:
    // CGRJ, CRJ
    printOperand(MI, 1, O); 
    O << ", "; 
    printPCRelOperand(MI, 3, O); 
    return;
    break;
  case 6:
    // CLFHSI, CLGHSI, CLHHSI
    printU16ImmOperand(MI, 2, O); 
    return;
    break;
  case 7:
    // CLI, CLIY, MVI, MVIY, NI, NIY, OI, OIY, XI, XIY
    printU8ImmOperand(MI, 2, O); 
    return;
    break;
  }


  // Fragment 2 encoded into 5 bits for 19 unique commands.
  switch ((Bits >> 19) & 31) {
  default:   // unreachable.
  case 0:
    // A, ADB, AEB, AG, AGF, AH, AHY, AL, ALC, ALCG, ALG, ALGF, ALY, AY, DDB,...
    printBDXAddrOperand(MI, 2, O); 
    return;
    break;
  case 1:
    // ADBR, AEBR, AGFR, AGR, ALCGR, ALCR, ALGFR, ALGR, ALR, AR, AXBR, AsmELO...
    printOperand(MI, 2, O); 
    break;
  case 2:
    // AFI, AGFI, MSFI, MSGFI
    printS32ImmOperand(MI, 2, O); 
    return;
    break;
  case 3:
    // AGHI, AHI, MGHI, MHI
    printS16ImmOperand(MI, 2, O); 
    return;
    break;
  case 4:
    // AGHIK, AGRK, AHIK, ALGHSIK, ALGRK, ALHSIK, ALRK, ARK, AsmBASR, AsmCGRJ...
    printOperand(MI, 1, O); 
    break;
  case 5:
    // ALFI, ALGFI, IIHF, IILF, NIHF, NILF, NILF32, OIHF, OILF, OILF32, SLFI,...
    printU32ImmOperand(MI, 2, O); 
    return;
    break;
  case 6:
    // AsmBRAS, AsmBRASL, CGFRL, CGHRL, CGRL, CHRL, CLGFRL, CLGHRL, CLGRL, CL...
    printPCRelOperand(MI, 1, O); 
    return;
    break;
  case 7:
    // AsmCGIJ, AsmCIJ, AsmJEAltCGI, AsmJEAltCI, AsmJECGI, AsmJECI, AsmJHAltC...
    printS8ImmOperand(MI, 1, O); 
    O << ", "; 
    break;
  case 8:
    // AsmELOC, AsmELOCG, AsmHELOC, AsmHELOCG, AsmHLOC, AsmHLOCG, AsmLELOC, A...
    printBDAddrOperand(MI, 2, O); 
    break;
  case 9:
    // AsmESTOC, AsmESTOCG, AsmHESTOC, AsmHESTOCG, AsmHSTOC, AsmHSTOCG, AsmLE...
    printBDAddrOperand(MI, 1, O); 
    break;
  case 10:
    // BRCT, BRCTG
    printPCRelOperand(MI, 2, O); 
    return;
    break;
  case 11:
    // C, CDB, CEB, CG, CGF, CGH, CH, CHY, CL, CLG, CLGF, CLY, CY, L, LA, LAY...
    printBDXAddrOperand(MI, 1, O); 
    return;
    break;
  case 12:
    // CFDBR, CFEBR, CFXBR, CGDBR, CGEBR, CGXBR, FIDBR, FIEBR, FIXBR
    printU4ImmOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    return;
    break;
  case 13:
    // CFI, CGFI, LGFI
    printS32ImmOperand(MI, 1, O); 
    return;
    break;
  case 14:
    // CGHI, CHI, LGHI, LHI
    printS16ImmOperand(MI, 1, O); 
    return;
    break;
  case 15:
    // CLFI, CLGFI, IILF32, LLIHF, LLILF
    printU32ImmOperand(MI, 1, O); 
    return;
    break;
  case 16:
    // EAR
    printAccessRegOperand(MI, 1, O); 
    return;
    break;
  case 17:
    // IIHH, IIHL, IILH, IILH32, IILL, IILL32, NIHH, NIHL, NILH, NILH32, NILL...
    printU16ImmOperand(MI, 2, O); 
    return;
    break;
  case 18:
    // LLIHH, LLIHL, LLILH, LLILL
    printU16ImmOperand(MI, 1, O); 
    return;
    break;
  }


  // Fragment 3 encoded into 2 bits for 4 unique commands.
  switch ((Bits >> 24) & 3) {
  default:   // unreachable.
  case 0:
    // ADBR, AEBR, AGFR, AGR, ALCGR, ALCR, ALGFR, ALGR, ALR, AR, AXBR, AsmBAS...
    return;
    break;
  case 1:
    // AGHIK, AGRK, AHIK, ALGHSIK, ALGRK, ALHSIK, ALRK, ARK, AsmCGRJ, AsmCRJ,...
    O << ", "; 
    break;
  case 2:
    // AsmCGIJ, AsmCIJ
    printU4ImmOperand(MI, 2, O); 
    O << ", "; 
    printPCRelOperand(MI, 3, O); 
    return;
    break;
  case 3:
    // AsmJEAltCGI, AsmJEAltCI, AsmJECGI, AsmJECI, AsmJHAltCGI, AsmJHAltCI, A...
    printPCRelOperand(MI, 2, O); 
    return;
    break;
  }


  // Fragment 4 encoded into 4 bits for 11 unique commands.
  switch ((Bits >> 26) & 15) {
  default:   // unreachable.
  case 0:
    // AGHIK, AHIK, ALGHSIK, ALHSIK
    printS16ImmOperand(MI, 2, O); 
    return;
    break;
  case 1:
    // AGRK, ALGRK, ALRK, ARK, CPSDRdd, CPSDRds, CPSDRsd, CPSDRss, NGRK, NRK,...
    printOperand(MI, 2, O); 
    return;
    break;
  case 2:
    // AsmCGRJ, AsmCRJ
    printU4ImmOperand(MI, 2, O); 
    O << ", "; 
    printPCRelOperand(MI, 3, O); 
    return;
    break;
  case 3:
    // AsmJEAltCGR, AsmJEAltCR, AsmJECGR, AsmJECR, AsmJHAltCGR, AsmJHAltCR, A...
    printPCRelOperand(MI, 2, O); 
    return;
    break;
  case 4:
    // AsmLOC, AsmLOCG
    printU4ImmOperand(MI, 4, O); 
    return;
    break;
  case 5:
    // AsmLOCGR, AsmLOCR, AsmSTOC, AsmSTOCG
    printU4ImmOperand(MI, 3, O); 
    return;
    break;
  case 6:
    // CS, CSG, CSY
    printBDAddrOperand(MI, 3, O); 
    return;
    break;
  case 7:
    // LMG, RLL, RLLG, SLLG, SLLK, SRAG, SRAK, SRLG, SRLK, STMG
    printBDAddrOperand(MI, 2, O); 
    return;
    break;
  case 8:
    // MADB, MAEB, MSDB, MSEB
    printBDXAddrOperand(MI, 3, O); 
    return;
    break;
  case 9:
    // MADBR, MAEBR, MSDBR, MSEBR
    printOperand(MI, 3, O); 
    return;
    break;
  case 10:
    // RISBG, RISBG32, RISBHG, RISBLG, RISBLG32, RNSBG, ROSBG, RXSBG
    printU8ImmOperand(MI, 3, O); 
    O << ", "; 
    printU8ImmOperand(MI, 4, O); 
    O << ", "; 
    printU6ImmOperand(MI, 5, O); 
    return;
    break;
  }

}


/// getRegisterName - This method is automatically generated by tblgen
/// from the register set description.  This returns the assembler name
/// for the specified register.
const char *SystemZInstPrinter::getRegisterName(unsigned RegNo) {
  assert(RegNo && RegNo < 82 && "Invalid register number!");

  static const char AsmStrs[] = {
  /* 0 */ 'f', '1', '0', 0,
  /* 4 */ 'r', '1', '0', 0,
  /* 8 */ 'f', '0', 0,
  /* 11 */ 'r', '0', 0,
  /* 14 */ 'f', '1', '1', 0,
  /* 18 */ 'r', '1', '1', 0,
  /* 22 */ 'f', '1', 0,
  /* 25 */ 'r', '1', 0,
  /* 28 */ 'f', '1', '2', 0,
  /* 32 */ 'r', '1', '2', 0,
  /* 36 */ 'f', '2', 0,
  /* 39 */ 'r', '2', 0,
  /* 42 */ 'f', '1', '3', 0,
  /* 46 */ 'r', '1', '3', 0,
  /* 50 */ 'f', '3', 0,
  /* 53 */ 'r', '3', 0,
  /* 56 */ 'f', '1', '4', 0,
  /* 60 */ 'r', '1', '4', 0,
  /* 64 */ 'f', '4', 0,
  /* 67 */ 'r', '4', 0,
  /* 70 */ 'f', '1', '5', 0,
  /* 74 */ 'r', '1', '5', 0,
  /* 78 */ 'f', '5', 0,
  /* 81 */ 'r', '5', 0,
  /* 84 */ 'f', '6', 0,
  /* 87 */ 'r', '6', 0,
  /* 90 */ 'f', '7', 0,
  /* 93 */ 'r', '7', 0,
  /* 96 */ 'f', '8', 0,
  /* 99 */ 'r', '8', 0,
  /* 102 */ 'f', '9', 0,
  /* 105 */ 'r', '9', 0,
  /* 108 */ 'c', 'c', 0,
  };

  static const uint32_t RegAsmOffset[] = {
    108, 8, 22, 36, 50, 64, 78, 84, 90, 96, 102, 0, 14, 28, 
    42, 56, 70, 8, 22, 64, 78, 96, 102, 28, 42, 8, 22, 36, 
    50, 64, 78, 84, 90, 96, 102, 0, 14, 28, 42, 56, 70, 11, 
    25, 39, 53, 67, 81, 87, 93, 99, 105, 4, 18, 32, 46, 60, 
    74, 11, 39, 67, 87, 99, 4, 32, 60, 11, 25, 39, 53, 67, 
    81, 87, 93, 99, 105, 4, 18, 32, 46, 60, 74, 
  };

  assert (*(AsmStrs+RegAsmOffset[RegNo-1]) &&
          "Invalid alt name index for register!");
  return AsmStrs+RegAsmOffset[RegNo-1];
}

#ifdef PRINT_ALIAS_INSTR
#undef PRINT_ALIAS_INSTR

bool SystemZInstPrinter::printAliasInstr(const MCInst *MI, raw_ostream &OS) {
  return false;
}

#endif // PRINT_ALIAS_INSTR
