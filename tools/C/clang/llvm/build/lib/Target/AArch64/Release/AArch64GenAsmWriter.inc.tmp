/*===- TableGen'erated file -------------------------------------*- C++ -*-===*\
|*                                                                            *|
|*Assembly Writer Source Fragment                                             *|
|*                                                                            *|
|* Automatically generated file, do not edit!                                 *|
|*                                                                            *|
\*===----------------------------------------------------------------------===*/

/// printInstruction - This method is automatically generated by tablegen
/// from the instruction set description.
void AArch64InstPrinter::printInstruction(const MCInst *MI, raw_ostream &O) {
  static const uint32_t OpInfo[] = {
    0U,	// PHI
    0U,	// INLINEASM
    0U,	// PROLOG_LABEL
    0U,	// EH_LABEL
    0U,	// GC_LABEL
    0U,	// KILL
    0U,	// EXTRACT_SUBREG
    0U,	// INSERT_SUBREG
    0U,	// IMPLICIT_DEF
    0U,	// SUBREG_TO_REG
    0U,	// COPY_TO_REGCLASS
    1768U,	// DBG_VALUE
    0U,	// REG_SEQUENCE
    0U,	// COPY
    1761U,	// BUNDLE
    1778U,	// LIFETIME_START
    1748U,	// LIFETIME_END
    3250U,	// ADCSwww
    3250U,	// ADCSxxx
    2315U,	// ADCwww
    2315U,	// ADCxxx
    8424330U,	// ADDP_16B
    16845706U,	// ADDP_2D
    25267082U,	// ADDP_2S
    33688458U,	// ADDP_4H
    42109834U,	// ADDP_4S
    50531210U,	// ADDP_8B
    58952586U,	// ADDP_8H
    3262U,	// ADDSwww_asr
    3262U,	// ADDSwww_lsl
    3262U,	// ADDSwww_lsr
    3262U,	// ADDSwww_sxtb
    3262U,	// ADDSwww_sxth
    3262U,	// ADDSwww_sxtw
    3262U,	// ADDSwww_sxtx
    3262U,	// ADDSwww_uxtb
    3262U,	// ADDSwww_uxth
    3262U,	// ADDSwww_uxtw
    3262U,	// ADDSwww_uxtx
    3262U,	// ADDSxxw_sxtb
    3262U,	// ADDSxxw_sxth
    3262U,	// ADDSxxw_sxtw
    3262U,	// ADDSxxw_uxtb
    3262U,	// ADDSxxw_uxth
    3262U,	// ADDSxxw_uxtw
    3262U,	// ADDSxxx_asr
    3262U,	// ADDSxxx_lsl
    3262U,	// ADDSxxx_lsr
    3262U,	// ADDSxxx_sxtx
    3262U,	// ADDSxxx_uxtx
    3698U,	// ADDddd
    8423742U,	// ADDvvv_16B
    16845118U,	// ADDvvv_2D
    25266494U,	// ADDvvv_2S
    33687870U,	// ADDvvv_4H
    42109246U,	// ADDvvv_4S
    50530622U,	// ADDvvv_8B
    58951998U,	// ADDvvv_8H
    268438718U,	// ADDwwi_lsl0_S
    528066U,	// ADDwwi_lsl0_cmp
    268437822U,	// ADDwwi_lsl0_s
    536874174U,	// ADDwwi_lsl12_S
    1052354U,	// ADDwwi_lsl12_cmp
    536873278U,	// ADDwwi_lsl12_s
    2366U,	// ADDwww_asr
    2366U,	// ADDwww_lsl
    2366U,	// ADDwww_lsr
    2366U,	// ADDwww_sxtb
    2366U,	// ADDwww_sxth
    2366U,	// ADDwww_sxtw
    2366U,	// ADDwww_sxtx
    2366U,	// ADDwww_uxtb
    2366U,	// ADDwww_uxth
    2366U,	// ADDwww_uxtw
    2366U,	// ADDwww_uxtx
    268438718U,	// ADDxxi_lsl0_S
    528066U,	// ADDxxi_lsl0_cmp
    268437822U,	// ADDxxi_lsl0_s
    536874174U,	// ADDxxi_lsl12_S
    1052354U,	// ADDxxi_lsl12_cmp
    536873278U,	// ADDxxi_lsl12_s
    2366U,	// ADDxxw_sxtb
    2366U,	// ADDxxw_sxth
    2366U,	// ADDxxw_sxtw
    2366U,	// ADDxxw_uxtb
    2366U,	// ADDxxw_uxth
    2366U,	// ADDxxw_uxtw
    2366U,	// ADDxxx_asr
    2366U,	// ADDxxx_lsl
    2366U,	// ADDxxx_lsr
    2366U,	// ADDxxx_sxtx
    2366U,	// ADDxxx_uxtx
    0U,	// ADJCALLSTACKDOWN
    0U,	// ADJCALLSTACKUP
    1575893U,	// ADRPxi
    2100264U,	// ADRxi
    805309636U,	// ANDSwwi
    3268U,	// ANDSwww_asr
    3268U,	// ANDSwww_lsl
    3268U,	// ANDSwww_lsr
    3268U,	// ANDSwww_ror
    1073745092U,	// ANDSxxi
    3268U,	// ANDSxxx_asr
    3268U,	// ANDSxxx_lsl
    3268U,	// ANDSxxx_lsr
    3268U,	// ANDSxxx_ror
    8423806U,	// ANDvvv_16B
    50530686U,	// ANDvvv_8B
    805308798U,	// ANDwwi
    2430U,	// ANDwww_asr
    2430U,	// ANDwww_lsl
    2430U,	// ANDwww_lsr
    2430U,	// ANDwww_ror
    1073744254U,	// ANDxxi
    2430U,	// ANDxxx_asr
    2430U,	// ANDxxx_lsl
    2430U,	// ANDxxx_lsr
    2430U,	// ANDxxx_ror
    3148U,	// ASRVwww
    3148U,	// ASRVxxx
    3148U,	// ASRwwi
    3148U,	// ASRxxi
    0U,	// ATOMIC_CMP_SWAP_I16
    0U,	// ATOMIC_CMP_SWAP_I32
    0U,	// ATOMIC_CMP_SWAP_I64
    0U,	// ATOMIC_CMP_SWAP_I8
    0U,	// ATOMIC_LOAD_ADD_I16
    0U,	// ATOMIC_LOAD_ADD_I32
    0U,	// ATOMIC_LOAD_ADD_I64
    0U,	// ATOMIC_LOAD_ADD_I8
    0U,	// ATOMIC_LOAD_AND_I16
    0U,	// ATOMIC_LOAD_AND_I32
    0U,	// ATOMIC_LOAD_AND_I64
    0U,	// ATOMIC_LOAD_AND_I8
    0U,	// ATOMIC_LOAD_MAX_I16
    0U,	// ATOMIC_LOAD_MAX_I32
    0U,	// ATOMIC_LOAD_MAX_I64
    0U,	// ATOMIC_LOAD_MAX_I8
    0U,	// ATOMIC_LOAD_MIN_I16
    0U,	// ATOMIC_LOAD_MIN_I32
    0U,	// ATOMIC_LOAD_MIN_I64
    0U,	// ATOMIC_LOAD_MIN_I8
    0U,	// ATOMIC_LOAD_NAND_I16
    0U,	// ATOMIC_LOAD_NAND_I32
    0U,	// ATOMIC_LOAD_NAND_I64
    0U,	// ATOMIC_LOAD_NAND_I8
    0U,	// ATOMIC_LOAD_OR_I16
    0U,	// ATOMIC_LOAD_OR_I32
    0U,	// ATOMIC_LOAD_OR_I64
    0U,	// ATOMIC_LOAD_OR_I8
    0U,	// ATOMIC_LOAD_SUB_I16
    0U,	// ATOMIC_LOAD_SUB_I32
    0U,	// ATOMIC_LOAD_SUB_I64
    0U,	// ATOMIC_LOAD_SUB_I8
    0U,	// ATOMIC_LOAD_UMAX_I16
    0U,	// ATOMIC_LOAD_UMAX_I32
    0U,	// ATOMIC_LOAD_UMAX_I64
    0U,	// ATOMIC_LOAD_UMAX_I8
    0U,	// ATOMIC_LOAD_UMIN_I16
    0U,	// ATOMIC_LOAD_UMIN_I32
    0U,	// ATOMIC_LOAD_UMIN_I64
    0U,	// ATOMIC_LOAD_UMIN_I8
    0U,	// ATOMIC_LOAD_XOR_I16
    0U,	// ATOMIC_LOAD_XOR_I32
    0U,	// ATOMIC_LOAD_XOR_I64
    0U,	// ATOMIC_LOAD_XOR_I8
    0U,	// ATOMIC_SWAP_I16
    0U,	// ATOMIC_SWAP_I32
    0U,	// ATOMIC_SWAP_I64
    0U,	// ATOMIC_SWAP_I8
    5398U,	// ATix
    1344801398U,	// BFIwwii
    1613236854U,	// BFIxxii
    1881672484U,	// BFMwwii
    1881672484U,	// BFMxxii
    1881672441U,	// BFXILwwii
    1881672441U,	// BFXILxxii
    3256U,	// BICSwww_asr
    3256U,	// BICSwww_lsl
    3256U,	// BICSwww_lsr
    3256U,	// BICSwww_ror
    3256U,	// BICSxxx_asr
    3256U,	// BICSxxx_lsl
    3256U,	// BICSxxx_lsr
    3256U,	// BICSxxx_ror
    70356587U,	// BICvi_lsl_2S
    78777963U,	// BICvi_lsl_4H
    70422123U,	// BICvi_lsl_4S
    78876267U,	// BICvi_lsl_8H
    8423696U,	// BICvvv_16B
    50530576U,	// BICvvv_8B
    2320U,	// BICwww_asr
    2320U,	// BICwww_lsl
    2320U,	// BICwww_lsr
    2320U,	// BICwww_ror
    2320U,	// BICxxx_asr
    2320U,	// BICxxx_lsl
    2320U,	// BICxxx_lsr
    2320U,	// BICxxx_ror
    1890093479U,	// BIFvvv_16B
    1932200359U,	// BIFvvv_8B
    1890094382U,	// BITvvv_16B
    1932201262U,	// BITvvv_8B
    265266U,	// BLRx
    6814U,	// BLimm
    264847U,	// BRKi
    265252U,	// BRx
    1890093824U,	// BSLvvv_16B
    1932200704U,	// BSLvvv_8B
    9937U,	// Bcc
    6211U,	// Bimm
    3673660U,	// CBNZw
    3673660U,	// CBNZx
    3673631U,	// CBZw
    3673631U,	// CBZx
    2918U,	// CCMNwi
    2918U,	// CCMNww
    2918U,	// CCMNxi
    2918U,	// CCMNxx
    2966U,	// CCMPwi
    2966U,	// CCMPww
    2966U,	// CCMPxi
    2966U,	// CCMPxx
    265725U,	// CLREXi
    83889360U,	// CLSww
    83889360U,	// CLSxx
    83889719U,	// CLZww
    83889719U,	// CLZxx
    2155908120U,	// CMEQvvi_16B
    2164329496U,	// CMEQvvi_2D
    2172750872U,	// CMEQvvi_2S
    2181172248U,	// CMEQvvi_4H
    2189593624U,	// CMEQvvi_4S
    2198015000U,	// CMEQvvi_8B
    2206436376U,	// CMEQvvi_8H
    8424472U,	// CMEQvvv_16B
    16845848U,	// CMEQvvv_2D
    25267224U,	// CMEQvvv_2S
    33688600U,	// CMEQvvv_4H
    42109976U,	// CMEQvvv_4S
    50531352U,	// CMEQvvv_8B
    58952728U,	// CMEQvvv_8H
    2155907467U,	// CMGEvvi_16B
    2164328843U,	// CMGEvvi_2D
    2172750219U,	// CMGEvvi_2S
    2181171595U,	// CMGEvvi_4H
    2189592971U,	// CMGEvvi_4S
    2198014347U,	// CMGEvvi_8B
    2206435723U,	// CMGEvvi_8H
    8423819U,	// CMGEvvv_16B
    16845195U,	// CMGEvvv_2D
    25266571U,	// CMGEvvv_2S
    33687947U,	// CMGEvvv_4H
    42109323U,	// CMGEvvv_4S
    50530699U,	// CMGEvvv_8B
    58952075U,	// CMGEvvv_8H
    2155908391U,	// CMGTvvi_16B
    2164329767U,	// CMGTvvi_2D
    2172751143U,	// CMGTvvi_2S
    2181172519U,	// CMGTvvi_4H
    2189593895U,	// CMGTvvi_4S
    2198015271U,	// CMGTvvi_8B
    2206436647U,	// CMGTvvi_8H
    8424743U,	// CMGTvvv_16B
    16846119U,	// CMGTvvv_2D
    25267495U,	// CMGTvvv_2S
    33688871U,	// CMGTvvv_4H
    42110247U,	// CMGTvvv_4S
    50531623U,	// CMGTvvv_8B
    58952999U,	// CMGTvvv_8H
    8424059U,	// CMHIvvv_16B
    16845435U,	// CMHIvvv_2D
    25266811U,	// CMHIvvv_2S
    33688187U,	// CMHIvvv_4H
    42109563U,	// CMHIvvv_4S
    50530939U,	// CMHIvvv_8B
    58952315U,	// CMHIvvv_8H
    8424650U,	// CMHSvvv_16B
    16846026U,	// CMHSvvv_2D
    25267402U,	// CMHSvvv_2S
    33688778U,	// CMHSvvv_4H
    42110154U,	// CMHSvvv_4S
    50531530U,	// CMHSvvv_8B
    58952906U,	// CMHSvvv_8H
    2155907474U,	// CMLEvvi_16B
    2164328850U,	// CMLEvvi_2D
    2172750226U,	// CMLEvvi_2S
    2181171602U,	// CMLEvvi_4H
    2189592978U,	// CMLEvvi_4S
    2198014354U,	// CMLEvvi_8B
    2206435730U,	// CMLEvvi_8H
    2155908409U,	// CMLTvvi_16B
    2164329785U,	// CMLTvvi_2D
    2172751161U,	// CMLTvvi_2S
    2181172537U,	// CMLTvvi_4H
    2189593913U,	// CMLTvvi_4S
    2198015289U,	// CMLTvvi_8B
    2206436665U,	// CMLTvvi_8H
    2415922023U,	// CMNww_asr
    2684357479U,	// CMNww_lsl
    2952792935U,	// CMNww_lsr
    3221228391U,	// CMNww_sxtb
    3489663847U,	// CMNww_sxth
    3758099303U,	// CMNww_sxtw
    4026534759U,	// CMNww_sxtx
    2919U,	// CMNww_uxtb
    268438375U,	// CMNww_uxth
    536873831U,	// CMNww_uxtw
    805309287U,	// CMNww_uxtx
    3221228391U,	// CMNxw_sxtb
    3489663847U,	// CMNxw_sxth
    3758099303U,	// CMNxw_sxtw
    2919U,	// CMNxw_uxtb
    268438375U,	// CMNxw_uxth
    536873831U,	// CMNxw_uxtw
    2415922023U,	// CMNxx_asr
    2684357479U,	// CMNxx_lsl
    2952792935U,	// CMNxx_lsr
    4026534759U,	// CMNxx_sxtx
    805309287U,	// CMNxx_uxtx
    2415922071U,	// CMPww_asr
    2684357527U,	// CMPww_lsl
    2952792983U,	// CMPww_lsr
    3221228439U,	// CMPww_sxtb
    3489663895U,	// CMPww_sxth
    3758099351U,	// CMPww_sxtw
    4026534807U,	// CMPww_sxtx
    2967U,	// CMPww_uxtb
    268438423U,	// CMPww_uxth
    536873879U,	// CMPww_uxtw
    805309335U,	// CMPww_uxtx
    3221228439U,	// CMPxw_sxtb
    3489663895U,	// CMPxw_sxth
    3758099351U,	// CMPxw_sxtw
    2967U,	// CMPxw_uxtb
    268438423U,	// CMPxw_uxth
    536873879U,	// CMPxw_uxtw
    2415922071U,	// CMPxx_asr
    2684357527U,	// CMPxx_lsl
    2952792983U,	// CMPxx_lsr
    4026534807U,	// CMPxx_sxtx
    805309335U,	// CMPxx_uxtx
    8424780U,	// CMTSTvvv_16B
    16846156U,	// CMTSTvvv_2D
    25267532U,	// CMTSTvvv_2S
    33688908U,	// CMTSTvvv_4H
    42110284U,	// CMTSTvvv_4S
    50531660U,	// CMTSTvvv_8B
    58953036U,	// CMTSTvvv_8H
    2110U,	// CRC32B_www
    2118U,	// CRC32CB_www
    2511U,	// CRC32CH_www
    3501U,	// CRC32CW_www
    3572U,	// CRC32CX_wwx
    2503U,	// CRC32H_www
    3493U,	// CRC32W_www
    3546U,	// CRC32X_wwx
    2747U,	// CSELwwwc
    2747U,	// CSELxxxc
    2330U,	// CSINCwwwc
    2330U,	// CSINCxxxc
    3480U,	// CSINVwwwc
    3480U,	// CSINVxxxc
    2496U,	// CSNEGwwwc
    2496U,	// CSNEGxxxc
    264193U,	// DCPS1i
    264207U,	// DCPS2i
    264214U,	// DCPS3i
    10508U,	// DCix
    12367U,	// DMBi
    1793U,	// DRPS
    12456U,	// DSBi
    2924U,	// EONwww_asr
    2924U,	// EONwww_lsl
    2924U,	// EONwww_lsr
    2924U,	// EONwww_ror
    2924U,	// EONxxx_asr
    2924U,	// EONxxx_lsl
    2924U,	// EONxxx_lsr
    2924U,	// EONxxx_ror
    8424509U,	// EORvvv_16B
    50531389U,	// EORvvv_8B
    805309501U,	// EORwwi
    3133U,	// EORwww_asr
    3133U,	// EORwww_lsl
    3133U,	// EORwww_lsr
    3133U,	// EORwww_ror
    1073744957U,	// EORxxi
    3133U,	// EORxxx_asr
    3133U,	// EORxxx_lsl
    3133U,	// EORxxx_lsr
    3133U,	// EORxxx_ror
    1798U,	// ERET
    3180U,	// EXTRwwwi
    3180U,	// EXTRxxxi
    0U,	// F128CSEL
    16845099U,	// FABDvvv_2D
    25266475U,	// FABDvvv_2S
    42109227U,	// FABDvvv_4S
    83889312U,	// FABSdd
    83889312U,	// FABSss
    16845187U,	// FACGEvvv_2D
    25266563U,	// FACGEvvv_2S
    42109315U,	// FACGEvvv_4S
    16846111U,	// FACGTvvv_2D
    25267487U,	// FACGTvvv_2S
    42110239U,	// FACGTvvv_4S
    16845705U,	// FADDP_2D
    25267081U,	// FADDP_2S
    42109833U,	// FADDP_4S
    2365U,	// FADDddd
    2365U,	// FADDsss
    16845117U,	// FADDvvv_2D
    25266493U,	// FADDvvv_2S
    42109245U,	// FADDvvv_4S
    2456U,	// FCCMPEdd
    2456U,	// FCCMPEss
    2965U,	// FCCMPdd
    2965U,	// FCCMPss
    1090587671U,	// FCMEQvvi_2D
    1099009047U,	// FCMEQvvi_2S
    1115851799U,	// FCMEQvvi_4S
    16845847U,	// FCMEQvvv_2D
    25267223U,	// FCMEQvvv_2S
    42109975U,	// FCMEQvvv_4S
    1090587018U,	// FCMGEvvi_2D
    1099008394U,	// FCMGEvvi_2S
    1115851146U,	// FCMGEvvi_4S
    16845194U,	// FCMGEvvv_2D
    25266570U,	// FCMGEvvv_2S
    42109322U,	// FCMGEvvv_4S
    1090587942U,	// FCMGTvvi_2D
    1099009318U,	// FCMGTvvi_2S
    1115852070U,	// FCMGTvvi_4S
    16846118U,	// FCMGTvvv_2D
    25267494U,	// FCMGTvvv_2S
    42110246U,	// FCMGTvvv_4S
    1090587025U,	// FCMLEvvi_2D
    1099008401U,	// FCMLEvvi_2S
    1115851153U,	// FCMLEvvi_4S
    1090587960U,	// FCMLTvvi_2D
    1099009336U,	// FCMLTvvi_2S
    1115852088U,	// FCMLTvvi_4S
    83889052U,	// FCMPdd_quiet
    83888544U,	// FCMPdd_sig
    4197276U,	// FCMPdi_quiet
    4196768U,	// FCMPdi_sig
    4197276U,	// FCMPsi_quiet
    4196768U,	// FCMPsi_sig
    83889052U,	// FCMPss_quiet
    83888544U,	// FCMPss_sig
    2746U,	// FCSELdddc
    2746U,	// FCSELsssc
    83889304U,	// FCVTASwd
    83889304U,	// FCVTASws
    83889304U,	// FCVTASxd
    83889304U,	// FCVTASxs
    83889497U,	// FCVTAUwd
    83889497U,	// FCVTAUws
    83889497U,	// FCVTAUxd
    83889497U,	// FCVTAUxs
    83889371U,	// FCVTMSwd
    83889371U,	// FCVTMSws
    83889371U,	// FCVTMSxd
    83889371U,	// FCVTMSxs
    83889505U,	// FCVTMUwd
    83889505U,	// FCVTMUws
    83889505U,	// FCVTMUxd
    83889505U,	// FCVTMUxs
    83889379U,	// FCVTNSwd
    83889379U,	// FCVTNSws
    83889379U,	// FCVTNSxd
    83889379U,	// FCVTNSxs
    83889513U,	// FCVTNUwd
    83889513U,	// FCVTNUws
    83889513U,	// FCVTNUxd
    83889513U,	// FCVTNUxs
    83889395U,	// FCVTPSwd
    83889395U,	// FCVTPSws
    83889395U,	// FCVTPSxd
    83889395U,	// FCVTPSxs
    83889521U,	// FCVTPUwd
    83889521U,	// FCVTPUws
    83889521U,	// FCVTPUxd
    83889521U,	// FCVTPUxs
    83889422U,	// FCVTZSwd
    1342180622U,	// FCVTZSwdi
    83889422U,	// FCVTZSws
    1342180622U,	// FCVTZSwsi
    83889422U,	// FCVTZSxd
    1342180622U,	// FCVTZSxdi
    83889422U,	// FCVTZSxs
    1342180622U,	// FCVTZSxsi
    83889529U,	// FCVTZUwd
    1342180729U,	// FCVTZUwdi
    83889529U,	// FCVTZUws
    1342180729U,	// FCVTZUwsi
    83889529U,	// FCVTZUxd
    1342180729U,	// FCVTZUxdi
    83889529U,	// FCVTZUxs
    1342180729U,	// FCVTZUxsi
    83889491U,	// FCVTdh
    83889491U,	// FCVTds
    83889491U,	// FCVThd
    83889491U,	// FCVThs
    83889491U,	// FCVTsd
    83889491U,	// FCVTsh
    3462U,	// FDIVddd
    3462U,	// FDIVsss
    16846214U,	// FDIVvvv_2D
    25267590U,	// FDIVvvv_2S
    42110342U,	// FDIVvvv_4S
    2401U,	// FMADDdddd
    2401U,	// FMADDssss
    16845739U,	// FMAXNMPvvv_2D
    25267115U,	// FMAXNMPvvv_2S
    42109867U,	// FMAXNMPvvv_4S
    2877U,	// FMAXNMddd
    2877U,	// FMAXNMsss
    16845629U,	// FMAXNMvvv_2D
    25267005U,	// FMAXNMvvv_2S
    42109757U,	// FMAXNMvvv_4S
    16845807U,	// FMAXPvvv_2D
    25267183U,	// FMAXPvvv_2S
    42109935U,	// FMAXPvvv_4S
    3554U,	// FMAXddd
    3554U,	// FMAXsss
    16846306U,	// FMAXvvv_2D
    25267682U,	// FMAXvvv_2S
    42110434U,	// FMAXvvv_4S
    16845730U,	// FMINNMPvvv_2D
    25267106U,	// FMINNMPvvv_2S
    42109858U,	// FMINNMPvvv_4S
    2869U,	// FMINNMddd
    2869U,	// FMINNMsss
    16845621U,	// FMINNMvvv_2D
    25266997U,	// FMINNMvvv_2S
    42109749U,	// FMINNMvvv_4S
    16845754U,	// FMINPvvv_2D
    25267130U,	// FMINPvvv_2S
    42109882U,	// FMINPvvv_4S
    2900U,	// FMINddd
    2900U,	// FMINsss
    16845652U,	// FMINvvv_2D
    25267028U,	// FMINvvv_2S
    42109780U,	// FMINvvv_4S
    1898514480U,	// FMLAvvv_2D
    1906935856U,	// FMLAvvv_2S
    1923778608U,	// FMLAvvv_4S
    1898515669U,	// FMLSvvv_2D
    1906937045U,	// FMLSvvv_2S
    1923779797U,	// FMLSvvv_4S
    83889567U,	// FMOVdd
    4722079U,	// FMOVdi
    83889567U,	// FMOVdx
    4722079U,	// FMOVsi
    83889567U,	// FMOVss
    83889567U,	// FMOVsw
    4787615U,	// FMOVvi_2D
    4820383U,	// FMOVvi_2S
    4885919U,	// FMOVvi_4S
    298399U,	// FMOVvx
    83889567U,	// FMOVws
    83889567U,	// FMOVxd
    92278175U,	// FMOVxv
    2281U,	// FMSUBdddd
    2281U,	// FMSUBssss
    16846352U,	// FMULXvvv_2D
    25267728U,	// FMULXvvv_2S
    42110480U,	// FMULXvvv_4S
    2832U,	// FMULddd
    2832U,	// FMULsss
    16845584U,	// FMULvvv_2D
    25266960U,	// FMULvvv_2S
    42109712U,	// FMULvvv_4S
    83888570U,	// FNEGdd
    83888570U,	// FNEGss
    2408U,	// FNMADDdddd
    2408U,	// FNMADDssss
    2288U,	// FNMSUBdddd
    2288U,	// FNMSUBssss
    2838U,	// FNMULddd
    2838U,	// FNMULsss
    16846059U,	// FRECPSvvv_2D
    25267435U,	// FRECPSvvv_2S
    42110187U,	// FRECPSvvv_4S
    83888182U,	// FRINTAdd
    83888182U,	// FRINTAss
    83888769U,	// FRINTIdd
    83888769U,	// FRINTIss
    83888965U,	// FRINTMdd
    83888965U,	// FRINTMss
    83889014U,	// FRINTNdd
    83889014U,	// FRINTNss
    83889115U,	// FRINTPdd
    83889115U,	// FRINTPss
    83889687U,	// FRINTXdd
    83889687U,	// FRINTXss
    83889736U,	// FRINTZdd
    83889736U,	// FRINTZss
    16846080U,	// FRSQRTSvvv_2D
    25267456U,	// FRSQRTSvvv_2S
    42110208U,	// FRSQRTSvvv_4S
    83889477U,	// FSQRTdd
    83889477U,	// FSQRTss
    2261U,	// FSUBddd
    2261U,	// FSUBsss
    16845013U,	// FSUBvvv_2D
    25266389U,	// FSUBvvv_2S
    42109141U,	// FSUBvvv_4S
    265535U,	// HINTi
    265523U,	// HLTi
    264481U,	// HVCi
    276753U,	// ICi
    83900689U,	// ICix
    16557U,	// ISBi
    100993108U,	// LDAR_byte
    100994078U,	// LDAR_dword
    100993529U,	// LDAR_hword
    100994078U,	// LDAR_word
    109054952U,	// LDAXP_dword
    109054952U,	// LDAXP_word
    100993162U,	// LDAXR_byte
    100994174U,	// LDAXR_dword
    100993583U,	// LDAXR_hword
    100994174U,	// LDAXR_word
    109055414U,	// LDPSWx
    1988103606U,	// LDPSWx_PostInd
    1988103606U,	// LDPSWx_PreInd
    1610942642U,	// LDRSBw
    120391858U,	// LDRSBw_PostInd
    1881999538U,	// LDRSBw_PreInd
    2147813569U,	// LDRSBw_U
    329906U,	// LDRSBw_Wm_RegOffset
    329906U,	// LDRSBw_Xm_RegOffset
    1610942642U,	// LDRSBx
    120391858U,	// LDRSBx_PostInd
    1881999538U,	// LDRSBx_PreInd
    2147813569U,	// LDRSBx_U
    329906U,	// LDRSBx_Wm_RegOffset
    329906U,	// LDRSBx_Xm_RegOffset
    2416249421U,	// LDRSHw
    120392269U,	// LDRSHw_PostInd
    1881999949U,	// LDRSHw_PreInd
    2147813980U,	// LDRSHw_U
    330317U,	// LDRSHw_Wm_RegOffset
    330317U,	// LDRSHw_Xm_RegOffset
    2416249421U,	// LDRSHx
    120392269U,	// LDRSHx_PostInd
    1881999949U,	// LDRSHx_PreInd
    2147813980U,	// LDRSHx_U
    330317U,	// LDRSHx_Wm_RegOffset
    330317U,	// LDRSHx_Xm_RegOffset
    2684685757U,	// LDRSWx
    120393149U,	// LDRSWx_PostInd
    1882000829U,	// LDRSWx_PreInd
    331197U,	// LDRSWx_Wm_RegOffset
    331197U,	// LDRSWx_Xm_RegOffset
    3673533U,	// LDRSWx_lit
    3673133U,	// LDRd_lit
    3673133U,	// LDRq_lit
    3673133U,	// LDRs_lit
    3673133U,	// LDRw_lit
    3673133U,	// LDRx_lit
    2147813561U,	// LDTRSBw
    2147813561U,	// LDTRSBx
    2147813972U,	// LDTRSHw
    2147813972U,	// LDTRSHx
    2147814852U,	// LDTRSWx
    2147814860U,	// LDURSWx
    109054980U,	// LDXP_dword
    109054980U,	// LDXP_word
    100993170U,	// LDXR_byte
    100994181U,	// LDXR_dword
    100993591U,	// LDXR_hword
    100994181U,	// LDXR_word
    2416249344U,	// LS16_LDR
    2147813921U,	// LS16_LDUR
    120392192U,	// LS16_PostInd_LDR
    120408596U,	// LS16_PostInd_STR
    1881999872U,	// LS16_PreInd_LDR
    1882016276U,	// LS16_PreInd_STR
    2416249364U,	// LS16_STR
    2147813928U,	// LS16_STUR
    2147813901U,	// LS16_UnPriv_LDR
    2147813914U,	// LS16_UnPriv_STR
    330240U,	// LS16_Wm_RegOffset_LDR
    330260U,	// LS16_Wm_RegOffset_STR
    330240U,	// LS16_Xm_RegOffset_LDR
    330260U,	// LS16_Xm_RegOffset_STR
    2684685357U,	// LS32_LDR
    2147814514U,	// LS32_LDUR
    120392749U,	// LS32_PostInd_LDR
    120409185U,	// LS32_PostInd_STR
    1882000429U,	// LS32_PreInd_LDR
    1882016865U,	// LS32_PreInd_STR
    2684685409U,	// LS32_STR
    2147814520U,	// LS32_STUR
    2147814491U,	// LS32_UnPriv_LDR
    2147814502U,	// LS32_UnPriv_STR
    330797U,	// LS32_Wm_RegOffset_LDR
    330849U,	// LS32_Wm_RegOffset_STR
    330797U,	// LS32_Xm_RegOffset_LDR
    330849U,	// LS32_Xm_RegOffset_STR
    2953120813U,	// LS64_LDR
    2147814514U,	// LS64_LDUR
    120392749U,	// LS64_PostInd_LDR
    120409185U,	// LS64_PostInd_STR
    1882000429U,	// LS64_PreInd_LDR
    1882016865U,	// LS64_PreInd_STR
    2953120865U,	// LS64_STR
    2147814520U,	// LS64_STUR
    2147814491U,	// LS64_UnPriv_LDR
    2147814502U,	// LS64_UnPriv_STR
    330797U,	// LS64_Wm_RegOffset_LDR
    330849U,	// LS64_Wm_RegOffset_STR
    330797U,	// LS64_Xm_RegOffset_LDR
    330849U,	// LS64_Xm_RegOffset_STR
    1610942555U,	// LS8_LDR
    2147813500U,	// LS8_LDUR
    120391771U,	// LS8_PostInd_LDR
    120408175U,	// LS8_PostInd_STR
    1881999451U,	// LS8_PreInd_LDR
    1882015855U,	// LS8_PreInd_STR
    1610942575U,	// LS8_STR
    2147813507U,	// LS8_STUR
    2147813480U,	// LS8_UnPriv_LDR
    2147813493U,	// LS8_UnPriv_STR
    329819U,	// LS8_Wm_RegOffset_LDR
    329839U,	// LS8_Wm_RegOffset_STR
    329819U,	// LS8_Xm_RegOffset_LDR
    329839U,	// LS8_Xm_RegOffset_STR
    3221556269U,	// LSFP128_LDR
    2147814514U,	// LSFP128_LDUR
    120392749U,	// LSFP128_PostInd_LDR
    120409185U,	// LSFP128_PostInd_STR
    1882000429U,	// LSFP128_PreInd_LDR
    1882016865U,	// LSFP128_PreInd_STR
    3221556321U,	// LSFP128_STR
    2147814520U,	// LSFP128_STUR
    330797U,	// LSFP128_Wm_RegOffset_LDR
    330849U,	// LSFP128_Wm_RegOffset_STR
    330797U,	// LSFP128_Xm_RegOffset_LDR
    330849U,	// LSFP128_Xm_RegOffset_STR
    2416249901U,	// LSFP16_LDR
    2147814514U,	// LSFP16_LDUR
    120392749U,	// LSFP16_PostInd_LDR
    120409185U,	// LSFP16_PostInd_STR
    1882000429U,	// LSFP16_PreInd_LDR
    1882016865U,	// LSFP16_PreInd_STR
    2416249953U,	// LSFP16_STR
    2147814520U,	// LSFP16_STUR
    330797U,	// LSFP16_Wm_RegOffset_LDR
    330849U,	// LSFP16_Wm_RegOffset_STR
    330797U,	// LSFP16_Xm_RegOffset_LDR
    330849U,	// LSFP16_Xm_RegOffset_STR
    2684685357U,	// LSFP32_LDR
    2147814514U,	// LSFP32_LDUR
    120392749U,	// LSFP32_PostInd_LDR
    120409185U,	// LSFP32_PostInd_STR
    1882000429U,	// LSFP32_PreInd_LDR
    1882016865U,	// LSFP32_PreInd_STR
    2684685409U,	// LSFP32_STR
    2147814520U,	// LSFP32_STUR
    330797U,	// LSFP32_Wm_RegOffset_LDR
    330849U,	// LSFP32_Wm_RegOffset_STR
    330797U,	// LSFP32_Xm_RegOffset_LDR
    330849U,	// LSFP32_Xm_RegOffset_STR
    2953120813U,	// LSFP64_LDR
    2147814514U,	// LSFP64_LDUR
    120392749U,	// LSFP64_PostInd_LDR
    120409185U,	// LSFP64_PostInd_STR
    1882000429U,	// LSFP64_PreInd_LDR
    1882016865U,	// LSFP64_PreInd_STR
    2953120865U,	// LSFP64_STR
    2147814520U,	// LSFP64_STUR
    330797U,	// LSFP64_Wm_RegOffset_LDR
    330849U,	// LSFP64_Wm_RegOffset_STR
    330797U,	// LSFP64_Xm_RegOffset_LDR
    330849U,	// LSFP64_Xm_RegOffset_STR
    1610943533U,	// LSFP8_LDR
    2147814514U,	// LSFP8_LDUR
    120392749U,	// LSFP8_PostInd_LDR
    120409185U,	// LSFP8_PostInd_STR
    1882000429U,	// LSFP8_PreInd_LDR
    1882016865U,	// LSFP8_PreInd_STR
    1610943585U,	// LSFP8_STR
    2147814520U,	// LSFP8_STUR
    330797U,	// LSFP8_Wm_RegOffset_LDR
    330849U,	// LSFP8_Wm_RegOffset_STR
    330797U,	// LSFP8_Xm_RegOffset_LDR
    330849U,	// LSFP8_Xm_RegOffset_STR
    109054864U,	// LSFPPair128_LDR
    109054900U,	// LSFPPair128_NonTemp_LDR
    109054927U,	// LSFPPair128_NonTemp_STR
    1988103056U,	// LSFPPair128_PostInd_LDR
    1990740963U,	// LSFPPair128_PostInd_STR
    1988103056U,	// LSFPPair128_PreInd_LDR
    1990740963U,	// LSFPPair128_PreInd_STR
    109054947U,	// LSFPPair128_STR
    109054864U,	// LSFPPair32_LDR
    109054900U,	// LSFPPair32_NonTemp_LDR
    109054927U,	// LSFPPair32_NonTemp_STR
    1988103056U,	// LSFPPair32_PostInd_LDR
    1990740963U,	// LSFPPair32_PostInd_STR
    1988103056U,	// LSFPPair32_PreInd_LDR
    1990740963U,	// LSFPPair32_PreInd_STR
    109054947U,	// LSFPPair32_STR
    109054864U,	// LSFPPair64_LDR
    109054900U,	// LSFPPair64_NonTemp_LDR
    109054927U,	// LSFPPair64_NonTemp_STR
    1988103056U,	// LSFPPair64_PostInd_LDR
    1990740963U,	// LSFPPair64_PostInd_STR
    1988103056U,	// LSFPPair64_PreInd_LDR
    1990740963U,	// LSFPPair64_PreInd_STR
    109054947U,	// LSFPPair64_STR
    2821U,	// LSLVwww
    2821U,	// LSLVxxx
    2821U,	// LSLwwi
    2821U,	// LSLxxi
    109054864U,	// LSPair32_LDR
    109054900U,	// LSPair32_NonTemp_LDR
    109054927U,	// LSPair32_NonTemp_STR
    1988103056U,	// LSPair32_PostInd_LDR
    1990740963U,	// LSPair32_PostInd_STR
    1988103056U,	// LSPair32_PreInd_LDR
    1990740963U,	// LSPair32_PreInd_STR
    109054947U,	// LSPair32_STR
    109054864U,	// LSPair64_LDR
    109054900U,	// LSPair64_NonTemp_LDR
    109054927U,	// LSPair64_NonTemp_STR
    1988103056U,	// LSPair64_PostInd_LDR
    1990740963U,	// LSPair64_PostInd_STR
    1988103056U,	// LSPair64_PreInd_LDR
    1990740963U,	// LSPair64_PreInd_STR
    109054947U,	// LSPair64_STR
    3153U,	// LSRVwww
    3153U,	// LSRVxxx
    3153U,	// LSRwwi
    3153U,	// LSRxxi
    2402U,	// MADDwwww
    2402U,	// MADDxxxx
    1890093105U,	// MLAvvv_16B
    1906935857U,	// MLAvvv_2S
    1915357233U,	// MLAvvv_4H
    1923778609U,	// MLAvvv_4S
    1932199985U,	// MLAvvv_8B
    1940621361U,	// MLAvvv_8H
    1890094294U,	// MLSvvv_16B
    1906937046U,	// MLSvvv_2S
    1915358422U,	// MLSvvv_4H
    1923779798U,	// MLSvvv_4S
    1932201174U,	// MLSvvv_8B
    1940622550U,	// MLSvvv_8H
    5246550U,	// MOVIdi
    89688713U,	// MOVIvi_16B
    5312086U,	// MOVIvi_2D
    89852553U,	// MOVIvi_8B
    131698308U,	// MOVIvi_lsl_2S
    140119684U,	// MOVIvi_lsl_4H
    131763844U,	// MOVIvi_lsl_4S
    140217988U,	// MOVIvi_lsl_8H
    148475524U,	// MOVIvi_msl_2S
    148541060U,	// MOVIvi_msl_4S
    6294164U,	// MOVKwii
    6294164U,	// MOVKxii
    6818691U,	// MOVNwii
    6818691U,	// MOVNxii
    6819408U,	// MOVZwii
    6819408U,	// MOVZxii
    7343355U,	// MRSxi
    21590U,	// MSRii
    23638U,	// MSRix
    2282U,	// MSUBwwww
    2282U,	// MSUBxxxx
    8424209U,	// MULvvv_16B
    25266961U,	// MULvvv_2S
    33688337U,	// MULvvv_4H
    42109713U,	// MULvvv_4S
    50531089U,	// MULvvv_8B
    58952465U,	// MULvvv_8H
    131698302U,	// MVNIvi_lsl_2S
    140119678U,	// MVNIvi_lsl_4H
    131763838U,	// MVNIvi_lsl_4S
    140217982U,	// MVNIvi_lsl_8H
    148475518U,	// MVNIvi_msl_2S
    148541054U,	// MVNIvi_msl_4S
    2415922046U,	// MVNww_asr
    2684357502U,	// MVNww_lsl
    2952792958U,	// MVNww_lsr
    3489663870U,	// MVNww_ror
    2415922046U,	// MVNxx_asr
    2684357502U,	// MVNxx_lsl
    2952792958U,	// MVNxx_lsr
    3489663870U,	// MVNxx_ror
    8424305U,	// ORNvvv_16B
    50531185U,	// ORNvvv_8B
    2929U,	// ORNwww_asr
    2929U,	// ORNwww_lsl
    2929U,	// ORNwww_lsr
    2929U,	// ORNwww_ror
    2929U,	// ORNxxx_asr
    2929U,	// ORNxxx_lsl
    2929U,	// ORNxxx_lsr
    2929U,	// ORNxxx_ror
    70356684U,	// ORRvi_lsl_2S
    78778060U,	// ORRvi_lsl_4H
    70422220U,	// ORRvi_lsl_4S
    78876364U,	// ORRvi_lsl_8H
    8424519U,	// ORRvvv_16B
    50531399U,	// ORRvvv_8B
    805309511U,	// ORRwwi
    3143U,	// ORRwww_asr
    3143U,	// ORRwww_lsl
    3143U,	// ORRwww_lsr
    3143U,	// ORRwww_ror
    1073744967U,	// ORRxxi
    3143U,	// ORRxxx_asr
    3143U,	// ORRxxx_lsl
    3143U,	// ORRxxx_lsr
    3143U,	// ORRxxx_ror
    8424221U,	// PMULvvv_16B
    50531101U,	// PMULvvv_8B
    2953143087U,	// PRFM
    353071U,	// PRFM_Wm_RegOffset
    353071U,	// PRFM_Xm_RegOffset
    3695407U,	// PRFM_lit
    2147836749U,	// PRFUM
    83889453U,	// RBITww
    83889453U,	// RBITxx
    0U,	// RET
    265498U,	// RETx
    83888157U,	// REV16ww
    83888157U,	// REV16xx
    83888136U,	// REV32xx
    83889537U,	// REVww
    83889537U,	// REVxx
    3138U,	// RORVwww
    3138U,	// RORVxxx
    1890093092U,	// SABAvvv_16B
    1906935844U,	// SABAvvv_2S
    1915357220U,	// SABAvvv_4H
    1923778596U,	// SABAvvv_4S
    1932199972U,	// SABAvvv_8B
    1940621348U,	// SABAvvv_8H
    8423729U,	// SABDvvv_16B
    25266481U,	// SABDvvv_2S
    33687857U,	// SABDvvv_4H
    42109233U,	// SABDvvv_4S
    50530609U,	// SABDvvv_8B
    58951985U,	// SABDvvv_8H
    3244U,	// SBCSwww
    3244U,	// SBCSxxx
    2310U,	// SBCwww
    2310U,	// SBCxxx
    3758100009U,	// SBFIZwwii
    4026535465U,	// SBFIZxxii
    2851U,	// SBFMwwii
    2851U,	// SBFMxxii
    3588U,	// SBFXwwii
    3588U,	// SBFXxxii
    83888556U,	// SCVTFdw
    1342179756U,	// SCVTFdwi
    83888556U,	// SCVTFdx
    1342179756U,	// SCVTFdxi
    83888556U,	// SCVTFsw
    1342179756U,	// SCVTFswi
    83888556U,	// SCVTFsx
    1342179756U,	// SCVTFsxi
    3468U,	// SDIVwww
    3468U,	// SDIVxxx
    8423763U,	// SHADDvvv_16B
    25266515U,	// SHADDvvv_2S
    33687891U,	// SHADDvvv_4H
    42109267U,	// SHADDvvv_4S
    50530643U,	// SHADDvvv_8B
    58952019U,	// SHADDvvv_8H
    8423643U,	// SHSUBvvv_16B
    25266395U,	// SHSUBvvv_2S
    33687771U,	// SHSUBvvv_4H
    42109147U,	// SHSUBvvv_4S
    50530523U,	// SHSUBvvv_8B
    58951899U,	// SHSUBvvv_8H
    2730U,	// SMADDLxwwx
    8424438U,	// SMAXPvvv_16B
    25267190U,	// SMAXPvvv_2S
    33688566U,	// SMAXPvvv_4H
    42109942U,	// SMAXPvvv_4S
    50531318U,	// SMAXPvvv_8B
    58952694U,	// SMAXPvvv_8H
    8424936U,	// SMAXvvv_16B
    25267688U,	// SMAXvvv_2S
    33689064U,	// SMAXvvv_4H
    42110440U,	// SMAXvvv_4S
    50531816U,	// SMAXvvv_8B
    58953192U,	// SMAXvvv_8H
    264469U,	// SMCi
    8424385U,	// SMINPvvv_16B
    25267137U,	// SMINPvvv_2S
    33688513U,	// SMINPvvv_4H
    42109889U,	// SMINPvvv_4S
    50531265U,	// SMINPvvv_8B
    58952641U,	// SMINPvvv_8H
    8424282U,	// SMINvvv_16B
    25267034U,	// SMINvvv_2S
    33688410U,	// SMINvvv_4H
    42109786U,	// SMINvvv_4S
    50531162U,	// SMINvvv_8B
    58952538U,	// SMINvvv_8H
    2714U,	// SMSUBLxwwx
    2539U,	// SMULHxxx
    3696U,	// SQADDbbb
    3696U,	// SQADDddd
    3696U,	// SQADDhhh
    3696U,	// SQADDsss
    8423792U,	// SQADDvvv_16B
    16845168U,	// SQADDvvv_2D
    25266544U,	// SQADDvvv_2S
    33687920U,	// SQADDvvv_4H
    42109296U,	// SQADDvvv_4S
    50530672U,	// SQADDvvv_8B
    58952048U,	// SQADDvvv_8H
    25266648U,	// SQDMULHvvv_2S
    33688024U,	// SQDMULHvvv_4H
    42109400U,	// SQDMULHvvv_4S
    58952152U,	// SQDMULHvvv_8H
    25266657U,	// SQRDMULHvvv_2S
    33688033U,	// SQRDMULHvvv_4H
    42109409U,	// SQRDMULHvvv_4S
    58952161U,	// SQRDMULHvvv_8H
    3736U,	// SQRSHLbbb
    3736U,	// SQRSHLddd
    3736U,	// SQRSHLhhh
    3736U,	// SQRSHLsss
    8424143U,	// SQRSHLvvv_16B
    16845519U,	// SQRSHLvvv_2D
    25266895U,	// SQRSHLvvv_2S
    33688271U,	// SQRSHLvvv_4H
    42109647U,	// SQRSHLvvv_4S
    50531023U,	// SQRSHLvvv_8B
    58952399U,	// SQRSHLvvv_8H
    3722U,	// SQSHLbbb
    3722U,	// SQSHLddd
    3722U,	// SQSHLhhh
    3722U,	// SQSHLsss
    8424129U,	// SQSHLvvv_16B
    16845505U,	// SQSHLvvv_2D
    25266881U,	// SQSHLvvv_2S
    33688257U,	// SQSHLvvv_4H
    42109633U,	// SQSHLvvv_4S
    50531009U,	// SQSHLvvv_8B
    58952385U,	// SQSHLvvv_8H
    3677U,	// SQSUBbbb
    3677U,	// SQSUBddd
    3677U,	// SQSUBhhh
    3677U,	// SQSUBsss
    8423672U,	// SQSUBvvv_16B
    16845048U,	// SQSUBvvv_2D
    25266424U,	// SQSUBvvv_2S
    33687800U,	// SQSUBvvv_4H
    42109176U,	// SQSUBvvv_4S
    50530552U,	// SQSUBvvv_8B
    58951928U,	// SQSUBvvv_8H
    8423747U,	// SRHADDvvv_16B
    25266499U,	// SRHADDvvv_2S
    33687875U,	// SRHADDvvv_4H
    42109251U,	// SRHADDvvv_4S
    50530627U,	// SRHADDvvv_8B
    58952003U,	// SRHADDvvv_8H
    3752U,	// SRSHLddd
    8424159U,	// SRSHLvvv_16B
    16845535U,	// SRSHLvvv_2D
    25266911U,	// SRSHLvvv_2S
    33688287U,	// SRSHLvvv_4H
    42109663U,	// SRSHLvvv_4S
    50531039U,	// SRSHLvvv_8B
    58952415U,	// SRSHLvvv_8H
    3766U,	// SSHLddd
    8424173U,	// SSHLvvv_16B
    16845549U,	// SSHLvvv_2D
    25266925U,	// SSHLvvv_2S
    33688301U,	// SSHLvvv_4H
    42109677U,	// SSHLvvv_4S
    50531053U,	// SSHLvvv_8B
    58952429U,	// SSHLvvv_8H
    100993121U,	// STLR_byte
    100994103U,	// STLR_dword
    100993542U,	// STLR_hword
    100994103U,	// STLR_word
    3082U,	// STLXP_dword
    3082U,	// STLXP_word
    109054105U,	// STLXR_byte
    109055115U,	// STLXR_dword
    109054526U,	// STLXR_hword
    109055115U,	// STLXR_word
    3089U,	// STXP_dword
    3089U,	// STXP_word
    109054113U,	// STXR_byte
    109055122U,	// STXR_dword
    109054534U,	// STXR_hword
    109055122U,	// STXR_word
    3238U,	// SUBSwww_asr
    3238U,	// SUBSwww_lsl
    3238U,	// SUBSwww_lsr
    3238U,	// SUBSwww_sxtb
    3238U,	// SUBSwww_sxth
    3238U,	// SUBSwww_sxtw
    3238U,	// SUBSwww_sxtx
    3238U,	// SUBSwww_uxtb
    3238U,	// SUBSwww_uxth
    3238U,	// SUBSwww_uxtw
    3238U,	// SUBSwww_uxtx
    3238U,	// SUBSxxw_sxtb
    3238U,	// SUBSxxw_sxth
    3238U,	// SUBSxxw_sxtw
    3238U,	// SUBSxxw_uxtb
    3238U,	// SUBSxxw_uxth
    3238U,	// SUBSxxw_uxtw
    3238U,	// SUBSxxx_asr
    3238U,	// SUBSxxx_lsl
    3238U,	// SUBSxxx_lsr
    3238U,	// SUBSxxx_sxtx
    3238U,	// SUBSxxx_uxtx
    3679U,	// SUBddd
    8423638U,	// SUBvvv_16B
    16845014U,	// SUBvvv_2D
    25266390U,	// SUBvvv_2S
    33687766U,	// SUBvvv_4H
    42109142U,	// SUBvvv_4S
    50530518U,	// SUBvvv_8B
    58951894U,	// SUBvvv_8H
    268438694U,	// SUBwwi_lsl0_S
    528071U,	// SUBwwi_lsl0_cmp
    268437718U,	// SUBwwi_lsl0_s
    536874150U,	// SUBwwi_lsl12_S
    1052359U,	// SUBwwi_lsl12_cmp
    536873174U,	// SUBwwi_lsl12_s
    2262U,	// SUBwww_asr
    2262U,	// SUBwww_lsl
    2262U,	// SUBwww_lsr
    2262U,	// SUBwww_sxtb
    2262U,	// SUBwww_sxth
    2262U,	// SUBwww_sxtw
    2262U,	// SUBwww_sxtx
    2262U,	// SUBwww_uxtb
    2262U,	// SUBwww_uxth
    2262U,	// SUBwww_uxtw
    2262U,	// SUBwww_uxtx
    268438694U,	// SUBxxi_lsl0_S
    528071U,	// SUBxxi_lsl0_cmp
    268437718U,	// SUBxxi_lsl0_s
    536874150U,	// SUBxxi_lsl12_S
    1052359U,	// SUBxxi_lsl12_cmp
    536873174U,	// SUBxxi_lsl12_s
    2262U,	// SUBxxw_sxtb
    2262U,	// SUBxxw_sxth
    2262U,	// SUBxxw_sxtw
    2262U,	// SUBxxw_uxtb
    2262U,	// SUBxxw_uxth
    2262U,	// SUBxxw_uxtw
    2262U,	// SUBxxx_asr
    2262U,	// SUBxxx_lsl
    2262U,	// SUBxxx_lsr
    2262U,	// SUBxxx_sxtx
    2262U,	// SUBxxx_uxtx
    264486U,	// SVCi
    83888329U,	// SXTBww
    83888329U,	// SXTBxw
    83888740U,	// SXTHww
    83888740U,	// SXTHxw
    83889620U,	// SXTWxw
    2826U,	// SYSLxicci
    7867657U,	// SYSiccix
    0U,	// TAIL_BRx
    0U,	// TAIL_Bimm
    268439106U,	// TBNZwii
    268439106U,	// TBNZxii
    268439076U,	// TBZwii
    268439076U,	// TBZxii
    0U,	// TC_RETURNdi
    0U,	// TC_RETURNxi
    289392U,	// TLBIi
    83913328U,	// TLBIix
    0U,	// TLSDESCCALL
    0U,	// TLSDESC_BLRx
    2415922510U,	// TSTww_asr
    2684357966U,	// TSTww_lsl
    2952793422U,	// TSTww_lsr
    3489664334U,	// TSTww_ror
    2415922510U,	// TSTxx_asr
    2684357966U,	// TSTxx_lsl
    2952793422U,	// TSTxx_lsr
    3489664334U,	// TSTxx_ror
    1890093098U,	// UABAvvv_16B
    1906935850U,	// UABAvvv_2S
    1915357226U,	// UABAvvv_4H
    1923778602U,	// UABAvvv_4S
    1932199978U,	// UABAvvv_8B
    1940621354U,	// UABAvvv_8H
    8423735U,	// UABDvvv_16B
    25266487U,	// UABDvvv_2S
    33687863U,	// UABDvvv_4H
    42109239U,	// UABDvvv_4S
    50530615U,	// UABDvvv_8B
    58951991U,	// UABDvvv_8H
    3758100016U,	// UBFIZwwii
    4026535472U,	// UBFIZxxii
    2857U,	// UBFMwwii
    2857U,	// UBFMxxii
    3594U,	// UBFXwwii
    3594U,	// UBFXxxii
    83888563U,	// UCVTFdw
    1342179763U,	// UCVTFdwi
    83888563U,	// UCVTFdx
    1342179763U,	// UCVTFdxi
    83888563U,	// UCVTFsw
    1342179763U,	// UCVTFswi
    83888563U,	// UCVTFsx
    1342179763U,	// UCVTFsxi
    3474U,	// UDIVwww
    3474U,	// UDIVxxx
    8423770U,	// UHADDvvv_16B
    25266522U,	// UHADDvvv_2S
    33687898U,	// UHADDvvv_4H
    42109274U,	// UHADDvvv_4S
    50530650U,	// UHADDvvv_8B
    58952026U,	// UHADDvvv_8H
    8423650U,	// UHSUBvvv_16B
    25266402U,	// UHSUBvvv_2S
    33687778U,	// UHSUBvvv_4H
    42109154U,	// UHSUBvvv_4S
    50530530U,	// UHSUBvvv_8B
    58951906U,	// UHSUBvvv_8H
    2738U,	// UMADDLxwwx
    8424445U,	// UMAXPvvv_16B
    25267197U,	// UMAXPvvv_2S
    33688573U,	// UMAXPvvv_4H
    42109949U,	// UMAXPvvv_4S
    50531325U,	// UMAXPvvv_8B
    58952701U,	// UMAXPvvv_8H
    8424942U,	// UMAXvvv_16B
    25267694U,	// UMAXvvv_2S
    33689070U,	// UMAXvvv_4H
    42110446U,	// UMAXvvv_4S
    50531822U,	// UMAXvvv_8B
    58953198U,	// UMAXvvv_8H
    8424392U,	// UMINPvvv_16B
    25267144U,	// UMINPvvv_2S
    33688520U,	// UMINPvvv_4H
    42109896U,	// UMINPvvv_4S
    50531272U,	// UMINPvvv_8B
    58952648U,	// UMINPvvv_8H
    8424288U,	// UMINvvv_16B
    25267040U,	// UMINvvv_2S
    33688416U,	// UMINvvv_4H
    42109792U,	// UMINvvv_4S
    50531168U,	// UMINvvv_8B
    58952544U,	// UMINvvv_8H
    2722U,	// UMSUBLxwwx
    2546U,	// UMULHxxx
    3703U,	// UQADDbbb
    3703U,	// UQADDddd
    3703U,	// UQADDhhh
    3703U,	// UQADDsss
    8423799U,	// UQADDvvv_16B
    16845175U,	// UQADDvvv_2D
    25266551U,	// UQADDvvv_2S
    33687927U,	// UQADDvvv_4H
    42109303U,	// UQADDvvv_4S
    50530679U,	// UQADDvvv_8B
    58952055U,	// UQADDvvv_8H
    3744U,	// UQRSHLbbb
    3744U,	// UQRSHLddd
    3744U,	// UQRSHLhhh
    3744U,	// UQRSHLsss
    8424151U,	// UQRSHLvvv_16B
    16845527U,	// UQRSHLvvv_2D
    25266903U,	// UQRSHLvvv_2S
    33688279U,	// UQRSHLvvv_4H
    42109655U,	// UQRSHLvvv_4S
    50531031U,	// UQRSHLvvv_8B
    58952407U,	// UQRSHLvvv_8H
    3729U,	// UQSHLbbb
    3729U,	// UQSHLddd
    3729U,	// UQSHLhhh
    3729U,	// UQSHLsss
    8424136U,	// UQSHLvvv_16B
    16845512U,	// UQSHLvvv_2D
    25266888U,	// UQSHLvvv_2S
    33688264U,	// UQSHLvvv_4H
    42109640U,	// UQSHLvvv_4S
    50531016U,	// UQSHLvvv_8B
    58952392U,	// UQSHLvvv_8H
    3684U,	// UQSUBbbb
    3684U,	// UQSUBddd
    3684U,	// UQSUBhhh
    3684U,	// UQSUBsss
    8423679U,	// UQSUBvvv_16B
    16845055U,	// UQSUBvvv_2D
    25266431U,	// UQSUBvvv_2S
    33687807U,	// UQSUBvvv_4H
    42109183U,	// UQSUBvvv_4S
    50530559U,	// UQSUBvvv_8B
    58951935U,	// UQSUBvvv_8H
    8423755U,	// URHADDvvv_16B
    25266507U,	// URHADDvvv_2S
    33687883U,	// URHADDvvv_4H
    42109259U,	// URHADDvvv_4S
    50530635U,	// URHADDvvv_8B
    58952011U,	// URHADDvvv_8H
    3759U,	// URSHLddd
    8424166U,	// URSHLvvv_16B
    16845542U,	// URSHLvvv_2D
    25266918U,	// URSHLvvv_2S
    33688294U,	// URSHLvvv_4H
    42109670U,	// URSHLvvv_4S
    50531046U,	// URSHLvvv_8B
    58952422U,	// URSHLvvv_8H
    3772U,	// USHLddd
    8424179U,	// USHLvvv_16B
    16845555U,	// USHLvvv_2D
    25266931U,	// USHLvvv_2S
    33688307U,	// USHLvvv_4H
    42109683U,	// USHLvvv_4S
    50531059U,	// USHLvvv_8B
    58952435U,	// USHLvvv_8H
    83888335U,	// UXTBww
    83888335U,	// UXTBxw
    83888746U,	// UXTHww
    83888746U,	// UXTHxw
    0U
  };

  static const uint16_t OpInfo2[] = {
    0U,	// PHI
    0U,	// INLINEASM
    0U,	// PROLOG_LABEL
    0U,	// EH_LABEL
    0U,	// GC_LABEL
    0U,	// KILL
    0U,	// EXTRACT_SUBREG
    0U,	// INSERT_SUBREG
    0U,	// IMPLICIT_DEF
    0U,	// SUBREG_TO_REG
    0U,	// COPY_TO_REGCLASS
    0U,	// DBG_VALUE
    0U,	// REG_SEQUENCE
    0U,	// COPY
    0U,	// BUNDLE
    0U,	// LIFETIME_START
    0U,	// LIFETIME_END
    0U,	// ADCSwww
    0U,	// ADCSxxx
    0U,	// ADCwww
    0U,	// ADCxxx
    4U,	// ADDP_16B
    8U,	// ADDP_2D
    12U,	// ADDP_2S
    16U,	// ADDP_4H
    20U,	// ADDP_4S
    24U,	// ADDP_8B
    28U,	// ADDP_8H
    32U,	// ADDSwww_asr
    96U,	// ADDSwww_lsl
    160U,	// ADDSwww_lsr
    224U,	// ADDSwww_sxtb
    288U,	// ADDSwww_sxth
    352U,	// ADDSwww_sxtw
    416U,	// ADDSwww_sxtx
    480U,	// ADDSwww_uxtb
    544U,	// ADDSwww_uxth
    608U,	// ADDSwww_uxtw
    672U,	// ADDSwww_uxtx
    224U,	// ADDSxxw_sxtb
    288U,	// ADDSxxw_sxth
    352U,	// ADDSxxw_sxtw
    480U,	// ADDSxxw_uxtb
    544U,	// ADDSxxw_uxth
    608U,	// ADDSxxw_uxtw
    32U,	// ADDSxxx_asr
    96U,	// ADDSxxx_lsl
    160U,	// ADDSxxx_lsr
    416U,	// ADDSxxx_sxtx
    672U,	// ADDSxxx_uxtx
    0U,	// ADDddd
    4U,	// ADDvvv_16B
    8U,	// ADDvvv_2D
    12U,	// ADDvvv_2S
    16U,	// ADDvvv_4H
    20U,	// ADDvvv_4S
    24U,	// ADDvvv_8B
    28U,	// ADDvvv_8H
    0U,	// ADDwwi_lsl0_S
    0U,	// ADDwwi_lsl0_cmp
    0U,	// ADDwwi_lsl0_s
    0U,	// ADDwwi_lsl12_S
    0U,	// ADDwwi_lsl12_cmp
    0U,	// ADDwwi_lsl12_s
    32U,	// ADDwww_asr
    96U,	// ADDwww_lsl
    160U,	// ADDwww_lsr
    224U,	// ADDwww_sxtb
    288U,	// ADDwww_sxth
    352U,	// ADDwww_sxtw
    416U,	// ADDwww_sxtx
    480U,	// ADDwww_uxtb
    544U,	// ADDwww_uxth
    608U,	// ADDwww_uxtw
    672U,	// ADDwww_uxtx
    0U,	// ADDxxi_lsl0_S
    0U,	// ADDxxi_lsl0_cmp
    0U,	// ADDxxi_lsl0_s
    0U,	// ADDxxi_lsl12_S
    0U,	// ADDxxi_lsl12_cmp
    0U,	// ADDxxi_lsl12_s
    224U,	// ADDxxw_sxtb
    288U,	// ADDxxw_sxth
    352U,	// ADDxxw_sxtw
    480U,	// ADDxxw_uxtb
    544U,	// ADDxxw_uxth
    608U,	// ADDxxw_uxtw
    32U,	// ADDxxx_asr
    96U,	// ADDxxx_lsl
    160U,	// ADDxxx_lsr
    416U,	// ADDxxx_sxtx
    672U,	// ADDxxx_uxtx
    0U,	// ADJCALLSTACKDOWN
    0U,	// ADJCALLSTACKUP
    0U,	// ADRPxi
    0U,	// ADRxi
    0U,	// ANDSwwi
    32U,	// ANDSwww_asr
    96U,	// ANDSwww_lsl
    160U,	// ANDSwww_lsr
    736U,	// ANDSwww_ror
    0U,	// ANDSxxi
    32U,	// ANDSxxx_asr
    96U,	// ANDSxxx_lsl
    160U,	// ANDSxxx_lsr
    736U,	// ANDSxxx_ror
    4U,	// ANDvvv_16B
    24U,	// ANDvvv_8B
    0U,	// ANDwwi
    32U,	// ANDwww_asr
    96U,	// ANDwww_lsl
    160U,	// ANDwww_lsr
    736U,	// ANDwww_ror
    0U,	// ANDxxi
    32U,	// ANDxxx_asr
    96U,	// ANDxxx_lsl
    160U,	// ANDxxx_lsr
    736U,	// ANDxxx_ror
    0U,	// ASRVwww
    0U,	// ASRVxxx
    0U,	// ASRwwi
    0U,	// ASRxxi
    0U,	// ATOMIC_CMP_SWAP_I16
    0U,	// ATOMIC_CMP_SWAP_I32
    0U,	// ATOMIC_CMP_SWAP_I64
    0U,	// ATOMIC_CMP_SWAP_I8
    0U,	// ATOMIC_LOAD_ADD_I16
    0U,	// ATOMIC_LOAD_ADD_I32
    0U,	// ATOMIC_LOAD_ADD_I64
    0U,	// ATOMIC_LOAD_ADD_I8
    0U,	// ATOMIC_LOAD_AND_I16
    0U,	// ATOMIC_LOAD_AND_I32
    0U,	// ATOMIC_LOAD_AND_I64
    0U,	// ATOMIC_LOAD_AND_I8
    0U,	// ATOMIC_LOAD_MAX_I16
    0U,	// ATOMIC_LOAD_MAX_I32
    0U,	// ATOMIC_LOAD_MAX_I64
    0U,	// ATOMIC_LOAD_MAX_I8
    0U,	// ATOMIC_LOAD_MIN_I16
    0U,	// ATOMIC_LOAD_MIN_I32
    0U,	// ATOMIC_LOAD_MIN_I64
    0U,	// ATOMIC_LOAD_MIN_I8
    0U,	// ATOMIC_LOAD_NAND_I16
    0U,	// ATOMIC_LOAD_NAND_I32
    0U,	// ATOMIC_LOAD_NAND_I64
    0U,	// ATOMIC_LOAD_NAND_I8
    0U,	// ATOMIC_LOAD_OR_I16
    0U,	// ATOMIC_LOAD_OR_I32
    0U,	// ATOMIC_LOAD_OR_I64
    0U,	// ATOMIC_LOAD_OR_I8
    0U,	// ATOMIC_LOAD_SUB_I16
    0U,	// ATOMIC_LOAD_SUB_I32
    0U,	// ATOMIC_LOAD_SUB_I64
    0U,	// ATOMIC_LOAD_SUB_I8
    0U,	// ATOMIC_LOAD_UMAX_I16
    0U,	// ATOMIC_LOAD_UMAX_I32
    0U,	// ATOMIC_LOAD_UMAX_I64
    0U,	// ATOMIC_LOAD_UMAX_I8
    0U,	// ATOMIC_LOAD_UMIN_I16
    0U,	// ATOMIC_LOAD_UMIN_I32
    0U,	// ATOMIC_LOAD_UMIN_I64
    0U,	// ATOMIC_LOAD_UMIN_I8
    0U,	// ATOMIC_LOAD_XOR_I16
    0U,	// ATOMIC_LOAD_XOR_I32
    0U,	// ATOMIC_LOAD_XOR_I64
    0U,	// ATOMIC_LOAD_XOR_I8
    0U,	// ATOMIC_SWAP_I16
    0U,	// ATOMIC_SWAP_I32
    0U,	// ATOMIC_SWAP_I64
    0U,	// ATOMIC_SWAP_I8
    0U,	// ATix
    0U,	// BFIwwii
    0U,	// BFIxxii
    800U,	// BFMwwii
    800U,	// BFMxxii
    864U,	// BFXILwwii
    864U,	// BFXILxxii
    32U,	// BICSwww_asr
    96U,	// BICSwww_lsl
    160U,	// BICSwww_lsr
    736U,	// BICSwww_ror
    32U,	// BICSxxx_asr
    96U,	// BICSxxx_lsl
    160U,	// BICSxxx_lsr
    736U,	// BICSxxx_ror
    0U,	// BICvi_lsl_2S
    0U,	// BICvi_lsl_4H
    0U,	// BICvi_lsl_4S
    0U,	// BICvi_lsl_8H
    4U,	// BICvvv_16B
    24U,	// BICvvv_8B
    32U,	// BICwww_asr
    96U,	// BICwww_lsl
    160U,	// BICwww_lsr
    736U,	// BICwww_ror
    32U,	// BICxxx_asr
    96U,	// BICxxx_lsl
    160U,	// BICxxx_lsr
    736U,	// BICxxx_ror
    4U,	// BIFvvv_16B
    24U,	// BIFvvv_8B
    4U,	// BITvvv_16B
    24U,	// BITvvv_8B
    0U,	// BLRx
    0U,	// BLimm
    0U,	// BRKi
    0U,	// BRx
    4U,	// BSLvvv_16B
    24U,	// BSLvvv_8B
    0U,	// Bcc
    0U,	// Bimm
    0U,	// CBNZw
    0U,	// CBNZx
    0U,	// CBZw
    0U,	// CBZx
    928U,	// CCMNwi
    928U,	// CCMNww
    928U,	// CCMNxi
    928U,	// CCMNxx
    928U,	// CCMPwi
    928U,	// CCMPww
    928U,	// CCMPxi
    928U,	// CCMPxx
    0U,	// CLREXi
    0U,	// CLSww
    0U,	// CLSxx
    0U,	// CLZww
    0U,	// CLZxx
    0U,	// CMEQvvi_16B
    0U,	// CMEQvvi_2D
    0U,	// CMEQvvi_2S
    0U,	// CMEQvvi_4H
    0U,	// CMEQvvi_4S
    0U,	// CMEQvvi_8B
    0U,	// CMEQvvi_8H
    4U,	// CMEQvvv_16B
    8U,	// CMEQvvv_2D
    12U,	// CMEQvvv_2S
    16U,	// CMEQvvv_4H
    20U,	// CMEQvvv_4S
    24U,	// CMEQvvv_8B
    28U,	// CMEQvvv_8H
    0U,	// CMGEvvi_16B
    0U,	// CMGEvvi_2D
    0U,	// CMGEvvi_2S
    0U,	// CMGEvvi_4H
    0U,	// CMGEvvi_4S
    0U,	// CMGEvvi_8B
    0U,	// CMGEvvi_8H
    4U,	// CMGEvvv_16B
    8U,	// CMGEvvv_2D
    12U,	// CMGEvvv_2S
    16U,	// CMGEvvv_4H
    20U,	// CMGEvvv_4S
    24U,	// CMGEvvv_8B
    28U,	// CMGEvvv_8H
    0U,	// CMGTvvi_16B
    0U,	// CMGTvvi_2D
    0U,	// CMGTvvi_2S
    0U,	// CMGTvvi_4H
    0U,	// CMGTvvi_4S
    0U,	// CMGTvvi_8B
    0U,	// CMGTvvi_8H
    4U,	// CMGTvvv_16B
    8U,	// CMGTvvv_2D
    12U,	// CMGTvvv_2S
    16U,	// CMGTvvv_4H
    20U,	// CMGTvvv_4S
    24U,	// CMGTvvv_8B
    28U,	// CMGTvvv_8H
    4U,	// CMHIvvv_16B
    8U,	// CMHIvvv_2D
    12U,	// CMHIvvv_2S
    16U,	// CMHIvvv_4H
    20U,	// CMHIvvv_4S
    24U,	// CMHIvvv_8B
    28U,	// CMHIvvv_8H
    4U,	// CMHSvvv_16B
    8U,	// CMHSvvv_2D
    12U,	// CMHSvvv_2S
    16U,	// CMHSvvv_4H
    20U,	// CMHSvvv_4S
    24U,	// CMHSvvv_8B
    28U,	// CMHSvvv_8H
    0U,	// CMLEvvi_16B
    0U,	// CMLEvvi_2D
    0U,	// CMLEvvi_2S
    0U,	// CMLEvvi_4H
    0U,	// CMLEvvi_4S
    0U,	// CMLEvvi_8B
    0U,	// CMLEvvi_8H
    0U,	// CMLTvvi_16B
    0U,	// CMLTvvi_2D
    0U,	// CMLTvvi_2S
    0U,	// CMLTvvi_4H
    0U,	// CMLTvvi_4S
    0U,	// CMLTvvi_8B
    0U,	// CMLTvvi_8H
    0U,	// CMNww_asr
    0U,	// CMNww_lsl
    0U,	// CMNww_lsr
    0U,	// CMNww_sxtb
    0U,	// CMNww_sxth
    0U,	// CMNww_sxtw
    0U,	// CMNww_sxtx
    1U,	// CMNww_uxtb
    1U,	// CMNww_uxth
    1U,	// CMNww_uxtw
    1U,	// CMNww_uxtx
    0U,	// CMNxw_sxtb
    0U,	// CMNxw_sxth
    0U,	// CMNxw_sxtw
    1U,	// CMNxw_uxtb
    1U,	// CMNxw_uxth
    1U,	// CMNxw_uxtw
    0U,	// CMNxx_asr
    0U,	// CMNxx_lsl
    0U,	// CMNxx_lsr
    0U,	// CMNxx_sxtx
    1U,	// CMNxx_uxtx
    0U,	// CMPww_asr
    0U,	// CMPww_lsl
    0U,	// CMPww_lsr
    0U,	// CMPww_sxtb
    0U,	// CMPww_sxth
    0U,	// CMPww_sxtw
    0U,	// CMPww_sxtx
    1U,	// CMPww_uxtb
    1U,	// CMPww_uxth
    1U,	// CMPww_uxtw
    1U,	// CMPww_uxtx
    0U,	// CMPxw_sxtb
    0U,	// CMPxw_sxth
    0U,	// CMPxw_sxtw
    1U,	// CMPxw_uxtb
    1U,	// CMPxw_uxth
    1U,	// CMPxw_uxtw
    0U,	// CMPxx_asr
    0U,	// CMPxx_lsl
    0U,	// CMPxx_lsr
    0U,	// CMPxx_sxtx
    1U,	// CMPxx_uxtx
    4U,	// CMTSTvvv_16B
    8U,	// CMTSTvvv_2D
    12U,	// CMTSTvvv_2S
    16U,	// CMTSTvvv_4H
    20U,	// CMTSTvvv_4S
    24U,	// CMTSTvvv_8B
    28U,	// CMTSTvvv_8H
    0U,	// CRC32B_www
    0U,	// CRC32CB_www
    0U,	// CRC32CH_www
    0U,	// CRC32CW_www
    0U,	// CRC32CX_wwx
    0U,	// CRC32H_www
    0U,	// CRC32W_www
    0U,	// CRC32X_wwx
    928U,	// CSELwwwc
    928U,	// CSELxxxc
    928U,	// CSINCwwwc
    928U,	// CSINCxxxc
    928U,	// CSINVwwwc
    928U,	// CSINVxxxc
    928U,	// CSNEGwwwc
    928U,	// CSNEGxxxc
    0U,	// DCPS1i
    0U,	// DCPS2i
    0U,	// DCPS3i
    0U,	// DCix
    0U,	// DMBi
    0U,	// DRPS
    0U,	// DSBi
    32U,	// EONwww_asr
    96U,	// EONwww_lsl
    160U,	// EONwww_lsr
    736U,	// EONwww_ror
    32U,	// EONxxx_asr
    96U,	// EONxxx_lsl
    160U,	// EONxxx_lsr
    736U,	// EONxxx_ror
    4U,	// EORvvv_16B
    24U,	// EORvvv_8B
    0U,	// EORwwi
    32U,	// EORwww_asr
    96U,	// EORwww_lsl
    160U,	// EORwww_lsr
    736U,	// EORwww_ror
    0U,	// EORxxi
    32U,	// EORxxx_asr
    96U,	// EORxxx_lsl
    160U,	// EORxxx_lsr
    736U,	// EORxxx_ror
    0U,	// ERET
    992U,	// EXTRwwwi
    992U,	// EXTRxxxi
    0U,	// F128CSEL
    8U,	// FABDvvv_2D
    12U,	// FABDvvv_2S
    20U,	// FABDvvv_4S
    0U,	// FABSdd
    0U,	// FABSss
    8U,	// FACGEvvv_2D
    12U,	// FACGEvvv_2S
    20U,	// FACGEvvv_4S
    8U,	// FACGTvvv_2D
    12U,	// FACGTvvv_2S
    20U,	// FACGTvvv_4S
    8U,	// FADDP_2D
    12U,	// FADDP_2S
    20U,	// FADDP_4S
    0U,	// FADDddd
    0U,	// FADDsss
    8U,	// FADDvvv_2D
    12U,	// FADDvvv_2S
    20U,	// FADDvvv_4S
    928U,	// FCCMPEdd
    928U,	// FCCMPEss
    928U,	// FCCMPdd
    928U,	// FCCMPss
    1U,	// FCMEQvvi_2D
    1U,	// FCMEQvvi_2S
    1U,	// FCMEQvvi_4S
    8U,	// FCMEQvvv_2D
    12U,	// FCMEQvvv_2S
    20U,	// FCMEQvvv_4S
    1U,	// FCMGEvvi_2D
    1U,	// FCMGEvvi_2S
    1U,	// FCMGEvvi_4S
    8U,	// FCMGEvvv_2D
    12U,	// FCMGEvvv_2S
    20U,	// FCMGEvvv_4S
    1U,	// FCMGTvvi_2D
    1U,	// FCMGTvvi_2S
    1U,	// FCMGTvvi_4S
    8U,	// FCMGTvvv_2D
    12U,	// FCMGTvvv_2S
    20U,	// FCMGTvvv_4S
    1U,	// FCMLEvvi_2D
    1U,	// FCMLEvvi_2S
    1U,	// FCMLEvvi_4S
    1U,	// FCMLTvvi_2D
    1U,	// FCMLTvvi_2S
    1U,	// FCMLTvvi_4S
    0U,	// FCMPdd_quiet
    0U,	// FCMPdd_sig
    0U,	// FCMPdi_quiet
    0U,	// FCMPdi_sig
    0U,	// FCMPsi_quiet
    0U,	// FCMPsi_sig
    0U,	// FCMPss_quiet
    0U,	// FCMPss_sig
    928U,	// FCSELdddc
    928U,	// FCSELsssc
    0U,	// FCVTASwd
    0U,	// FCVTASws
    0U,	// FCVTASxd
    0U,	// FCVTASxs
    0U,	// FCVTAUwd
    0U,	// FCVTAUws
    0U,	// FCVTAUxd
    0U,	// FCVTAUxs
    0U,	// FCVTMSwd
    0U,	// FCVTMSws
    0U,	// FCVTMSxd
    0U,	// FCVTMSxs
    0U,	// FCVTMUwd
    0U,	// FCVTMUws
    0U,	// FCVTMUxd
    0U,	// FCVTMUxs
    0U,	// FCVTNSwd
    0U,	// FCVTNSws
    0U,	// FCVTNSxd
    0U,	// FCVTNSxs
    0U,	// FCVTNUwd
    0U,	// FCVTNUws
    0U,	// FCVTNUxd
    0U,	// FCVTNUxs
    0U,	// FCVTPSwd
    0U,	// FCVTPSws
    0U,	// FCVTPSxd
    0U,	// FCVTPSxs
    0U,	// FCVTPUwd
    0U,	// FCVTPUws
    0U,	// FCVTPUxd
    0U,	// FCVTPUxs
    0U,	// FCVTZSwd
    1U,	// FCVTZSwdi
    0U,	// FCVTZSws
    1U,	// FCVTZSwsi
    0U,	// FCVTZSxd
    1U,	// FCVTZSxdi
    0U,	// FCVTZSxs
    1U,	// FCVTZSxsi
    0U,	// FCVTZUwd
    1U,	// FCVTZUwdi
    0U,	// FCVTZUws
    1U,	// FCVTZUwsi
    0U,	// FCVTZUxd
    1U,	// FCVTZUxdi
    0U,	// FCVTZUxs
    1U,	// FCVTZUxsi
    0U,	// FCVTdh
    0U,	// FCVTds
    0U,	// FCVThd
    0U,	// FCVThs
    0U,	// FCVTsd
    0U,	// FCVTsh
    0U,	// FDIVddd
    0U,	// FDIVsss
    8U,	// FDIVvvv_2D
    12U,	// FDIVvvv_2S
    20U,	// FDIVvvv_4S
    992U,	// FMADDdddd
    992U,	// FMADDssss
    8U,	// FMAXNMPvvv_2D
    12U,	// FMAXNMPvvv_2S
    20U,	// FMAXNMPvvv_4S
    0U,	// FMAXNMddd
    0U,	// FMAXNMsss
    8U,	// FMAXNMvvv_2D
    12U,	// FMAXNMvvv_2S
    20U,	// FMAXNMvvv_4S
    8U,	// FMAXPvvv_2D
    12U,	// FMAXPvvv_2S
    20U,	// FMAXPvvv_4S
    0U,	// FMAXddd
    0U,	// FMAXsss
    8U,	// FMAXvvv_2D
    12U,	// FMAXvvv_2S
    20U,	// FMAXvvv_4S
    8U,	// FMINNMPvvv_2D
    12U,	// FMINNMPvvv_2S
    20U,	// FMINNMPvvv_4S
    0U,	// FMINNMddd
    0U,	// FMINNMsss
    8U,	// FMINNMvvv_2D
    12U,	// FMINNMvvv_2S
    20U,	// FMINNMvvv_4S
    8U,	// FMINPvvv_2D
    12U,	// FMINPvvv_2S
    20U,	// FMINPvvv_4S
    0U,	// FMINddd
    0U,	// FMINsss
    8U,	// FMINvvv_2D
    12U,	// FMINvvv_2S
    20U,	// FMINvvv_4S
    8U,	// FMLAvvv_2D
    12U,	// FMLAvvv_2S
    20U,	// FMLAvvv_4S
    8U,	// FMLSvvv_2D
    12U,	// FMLSvvv_2S
    20U,	// FMLSvvv_4S
    0U,	// FMOVdd
    0U,	// FMOVdi
    0U,	// FMOVdx
    0U,	// FMOVsi
    0U,	// FMOVss
    0U,	// FMOVsw
    0U,	// FMOVvi_2D
    0U,	// FMOVvi_2S
    0U,	// FMOVvi_4S
    0U,	// FMOVvx
    0U,	// FMOVws
    0U,	// FMOVxd
    0U,	// FMOVxv
    992U,	// FMSUBdddd
    992U,	// FMSUBssss
    8U,	// FMULXvvv_2D
    12U,	// FMULXvvv_2S
    20U,	// FMULXvvv_4S
    0U,	// FMULddd
    0U,	// FMULsss
    8U,	// FMULvvv_2D
    12U,	// FMULvvv_2S
    20U,	// FMULvvv_4S
    0U,	// FNEGdd
    0U,	// FNEGss
    992U,	// FNMADDdddd
    992U,	// FNMADDssss
    992U,	// FNMSUBdddd
    992U,	// FNMSUBssss
    0U,	// FNMULddd
    0U,	// FNMULsss
    8U,	// FRECPSvvv_2D
    12U,	// FRECPSvvv_2S
    20U,	// FRECPSvvv_4S
    0U,	// FRINTAdd
    0U,	// FRINTAss
    0U,	// FRINTIdd
    0U,	// FRINTIss
    0U,	// FRINTMdd
    0U,	// FRINTMss
    0U,	// FRINTNdd
    0U,	// FRINTNss
    0U,	// FRINTPdd
    0U,	// FRINTPss
    0U,	// FRINTXdd
    0U,	// FRINTXss
    0U,	// FRINTZdd
    0U,	// FRINTZss
    8U,	// FRSQRTSvvv_2D
    12U,	// FRSQRTSvvv_2S
    20U,	// FRSQRTSvvv_4S
    0U,	// FSQRTdd
    0U,	// FSQRTss
    0U,	// FSUBddd
    0U,	// FSUBsss
    8U,	// FSUBvvv_2D
    12U,	// FSUBvvv_2S
    20U,	// FSUBvvv_4S
    0U,	// HINTi
    0U,	// HLTi
    0U,	// HVCi
    0U,	// ICi
    0U,	// ICix
    0U,	// ISBi
    0U,	// LDAR_byte
    0U,	// LDAR_dword
    0U,	// LDAR_hword
    0U,	// LDAR_word
    36U,	// LDAXP_dword
    36U,	// LDAXP_word
    0U,	// LDAXR_byte
    0U,	// LDAXR_dword
    0U,	// LDAXR_hword
    0U,	// LDAXR_word
    1056U,	// LDPSWx
    1128U,	// LDPSWx_PostInd
    5216U,	// LDPSWx_PreInd
    1U,	// LDRSBw
    0U,	// LDRSBw_PostInd
    1U,	// LDRSBw_PreInd
    1U,	// LDRSBw_U
    1184U,	// LDRSBw_Wm_RegOffset
    1248U,	// LDRSBw_Xm_RegOffset
    1U,	// LDRSBx
    0U,	// LDRSBx_PostInd
    1U,	// LDRSBx_PreInd
    1U,	// LDRSBx_U
    1184U,	// LDRSBx_Wm_RegOffset
    1248U,	// LDRSBx_Xm_RegOffset
    1U,	// LDRSHw
    0U,	// LDRSHw_PostInd
    1U,	// LDRSHw_PreInd
    1U,	// LDRSHw_U
    1312U,	// LDRSHw_Wm_RegOffset
    1376U,	// LDRSHw_Xm_RegOffset
    1U,	// LDRSHx
    0U,	// LDRSHx_PostInd
    1U,	// LDRSHx_PreInd
    1U,	// LDRSHx_U
    1312U,	// LDRSHx_Wm_RegOffset
    1376U,	// LDRSHx_Xm_RegOffset
    1U,	// LDRSWx
    0U,	// LDRSWx_PostInd
    1U,	// LDRSWx_PreInd
    1440U,	// LDRSWx_Wm_RegOffset
    1504U,	// LDRSWx_Xm_RegOffset
    0U,	// LDRSWx_lit
    0U,	// LDRd_lit
    0U,	// LDRq_lit
    0U,	// LDRs_lit
    0U,	// LDRw_lit
    0U,	// LDRx_lit
    1U,	// LDTRSBw
    1U,	// LDTRSBx
    1U,	// LDTRSHw
    1U,	// LDTRSHx
    1U,	// LDTRSWx
    1U,	// LDURSWx
    36U,	// LDXP_dword
    36U,	// LDXP_word
    0U,	// LDXR_byte
    0U,	// LDXR_dword
    0U,	// LDXR_hword
    0U,	// LDXR_word
    1U,	// LS16_LDR
    1U,	// LS16_LDUR
    0U,	// LS16_PostInd_LDR
    0U,	// LS16_PostInd_STR
    1U,	// LS16_PreInd_LDR
    1U,	// LS16_PreInd_STR
    1U,	// LS16_STR
    1U,	// LS16_STUR
    1U,	// LS16_UnPriv_LDR
    1U,	// LS16_UnPriv_STR
    1312U,	// LS16_Wm_RegOffset_LDR
    1312U,	// LS16_Wm_RegOffset_STR
    1376U,	// LS16_Xm_RegOffset_LDR
    1376U,	// LS16_Xm_RegOffset_STR
    1U,	// LS32_LDR
    1U,	// LS32_LDUR
    0U,	// LS32_PostInd_LDR
    0U,	// LS32_PostInd_STR
    1U,	// LS32_PreInd_LDR
    1U,	// LS32_PreInd_STR
    1U,	// LS32_STR
    1U,	// LS32_STUR
    1U,	// LS32_UnPriv_LDR
    1U,	// LS32_UnPriv_STR
    1440U,	// LS32_Wm_RegOffset_LDR
    1440U,	// LS32_Wm_RegOffset_STR
    1504U,	// LS32_Xm_RegOffset_LDR
    1504U,	// LS32_Xm_RegOffset_STR
    1U,	// LS64_LDR
    1U,	// LS64_LDUR
    0U,	// LS64_PostInd_LDR
    0U,	// LS64_PostInd_STR
    1U,	// LS64_PreInd_LDR
    1U,	// LS64_PreInd_STR
    1U,	// LS64_STR
    1U,	// LS64_STUR
    1U,	// LS64_UnPriv_LDR
    1U,	// LS64_UnPriv_STR
    1568U,	// LS64_Wm_RegOffset_LDR
    1568U,	// LS64_Wm_RegOffset_STR
    1632U,	// LS64_Xm_RegOffset_LDR
    1632U,	// LS64_Xm_RegOffset_STR
    1U,	// LS8_LDR
    1U,	// LS8_LDUR
    0U,	// LS8_PostInd_LDR
    0U,	// LS8_PostInd_STR
    1U,	// LS8_PreInd_LDR
    1U,	// LS8_PreInd_STR
    1U,	// LS8_STR
    1U,	// LS8_STUR
    1U,	// LS8_UnPriv_LDR
    1U,	// LS8_UnPriv_STR
    1184U,	// LS8_Wm_RegOffset_LDR
    1184U,	// LS8_Wm_RegOffset_STR
    1248U,	// LS8_Xm_RegOffset_LDR
    1248U,	// LS8_Xm_RegOffset_STR
    1U,	// LSFP128_LDR
    1U,	// LSFP128_LDUR
    0U,	// LSFP128_PostInd_LDR
    0U,	// LSFP128_PostInd_STR
    1U,	// LSFP128_PreInd_LDR
    1U,	// LSFP128_PreInd_STR
    1U,	// LSFP128_STR
    1U,	// LSFP128_STUR
    1696U,	// LSFP128_Wm_RegOffset_LDR
    1696U,	// LSFP128_Wm_RegOffset_STR
    1760U,	// LSFP128_Xm_RegOffset_LDR
    1760U,	// LSFP128_Xm_RegOffset_STR
    1U,	// LSFP16_LDR
    1U,	// LSFP16_LDUR
    0U,	// LSFP16_PostInd_LDR
    0U,	// LSFP16_PostInd_STR
    1U,	// LSFP16_PreInd_LDR
    1U,	// LSFP16_PreInd_STR
    1U,	// LSFP16_STR
    1U,	// LSFP16_STUR
    1312U,	// LSFP16_Wm_RegOffset_LDR
    1312U,	// LSFP16_Wm_RegOffset_STR
    1376U,	// LSFP16_Xm_RegOffset_LDR
    1376U,	// LSFP16_Xm_RegOffset_STR
    1U,	// LSFP32_LDR
    1U,	// LSFP32_LDUR
    0U,	// LSFP32_PostInd_LDR
    0U,	// LSFP32_PostInd_STR
    1U,	// LSFP32_PreInd_LDR
    1U,	// LSFP32_PreInd_STR
    1U,	// LSFP32_STR
    1U,	// LSFP32_STUR
    1440U,	// LSFP32_Wm_RegOffset_LDR
    1440U,	// LSFP32_Wm_RegOffset_STR
    1504U,	// LSFP32_Xm_RegOffset_LDR
    1504U,	// LSFP32_Xm_RegOffset_STR
    1U,	// LSFP64_LDR
    1U,	// LSFP64_LDUR
    0U,	// LSFP64_PostInd_LDR
    0U,	// LSFP64_PostInd_STR
    1U,	// LSFP64_PreInd_LDR
    1U,	// LSFP64_PreInd_STR
    1U,	// LSFP64_STR
    1U,	// LSFP64_STUR
    1568U,	// LSFP64_Wm_RegOffset_LDR
    1568U,	// LSFP64_Wm_RegOffset_STR
    1632U,	// LSFP64_Xm_RegOffset_LDR
    1632U,	// LSFP64_Xm_RegOffset_STR
    1U,	// LSFP8_LDR
    1U,	// LSFP8_LDUR
    0U,	// LSFP8_PostInd_LDR
    0U,	// LSFP8_PostInd_STR
    1U,	// LSFP8_PreInd_LDR
    1U,	// LSFP8_PreInd_STR
    1U,	// LSFP8_STR
    1U,	// LSFP8_STUR
    1184U,	// LSFP8_Wm_RegOffset_LDR
    1184U,	// LSFP8_Wm_RegOffset_STR
    1248U,	// LSFP8_Xm_RegOffset_LDR
    1248U,	// LSFP8_Xm_RegOffset_STR
    1824U,	// LSFPPair128_LDR
    1824U,	// LSFPPair128_NonTemp_LDR
    1824U,	// LSFPPair128_NonTemp_STR
    1896U,	// LSFPPair128_PostInd_LDR
    1896U,	// LSFPPair128_PostInd_STR
    5984U,	// LSFPPair128_PreInd_LDR
    5984U,	// LSFPPair128_PreInd_STR
    1824U,	// LSFPPair128_STR
    1056U,	// LSFPPair32_LDR
    1056U,	// LSFPPair32_NonTemp_LDR
    1056U,	// LSFPPair32_NonTemp_STR
    1128U,	// LSFPPair32_PostInd_LDR
    1128U,	// LSFPPair32_PostInd_STR
    5216U,	// LSFPPair32_PreInd_LDR
    5216U,	// LSFPPair32_PreInd_STR
    1056U,	// LSFPPair32_STR
    1952U,	// LSFPPair64_LDR
    1952U,	// LSFPPair64_NonTemp_LDR
    1952U,	// LSFPPair64_NonTemp_STR
    2024U,	// LSFPPair64_PostInd_LDR
    2024U,	// LSFPPair64_PostInd_STR
    6112U,	// LSFPPair64_PreInd_LDR
    6112U,	// LSFPPair64_PreInd_STR
    1952U,	// LSFPPair64_STR
    0U,	// LSLVwww
    0U,	// LSLVxxx
    0U,	// LSLwwi
    0U,	// LSLxxi
    1056U,	// LSPair32_LDR
    1056U,	// LSPair32_NonTemp_LDR
    1056U,	// LSPair32_NonTemp_STR
    1128U,	// LSPair32_PostInd_LDR
    1128U,	// LSPair32_PostInd_STR
    5216U,	// LSPair32_PreInd_LDR
    5216U,	// LSPair32_PreInd_STR
    1056U,	// LSPair32_STR
    1952U,	// LSPair64_LDR
    1952U,	// LSPair64_NonTemp_LDR
    1952U,	// LSPair64_NonTemp_STR
    2024U,	// LSPair64_PostInd_LDR
    2024U,	// LSPair64_PostInd_STR
    6112U,	// LSPair64_PreInd_LDR
    6112U,	// LSPair64_PreInd_STR
    1952U,	// LSPair64_STR
    0U,	// LSRVwww
    0U,	// LSRVxxx
    0U,	// LSRwwi
    0U,	// LSRxxi
    992U,	// MADDwwww
    992U,	// MADDxxxx
    4U,	// MLAvvv_16B
    12U,	// MLAvvv_2S
    16U,	// MLAvvv_4H
    20U,	// MLAvvv_4S
    24U,	// MLAvvv_8B
    28U,	// MLAvvv_8H
    4U,	// MLSvvv_16B
    12U,	// MLSvvv_2S
    16U,	// MLSvvv_4H
    20U,	// MLSvvv_4S
    24U,	// MLSvvv_8B
    28U,	// MLSvvv_8H
    0U,	// MOVIdi
    0U,	// MOVIvi_16B
    0U,	// MOVIvi_2D
    0U,	// MOVIvi_8B
    0U,	// MOVIvi_lsl_2S
    0U,	// MOVIvi_lsl_4H
    0U,	// MOVIvi_lsl_4S
    0U,	// MOVIvi_lsl_8H
    0U,	// MOVIvi_msl_2S
    0U,	// MOVIvi_msl_4S
    0U,	// MOVKwii
    0U,	// MOVKxii
    0U,	// MOVNwii
    0U,	// MOVNxii
    0U,	// MOVZwii
    0U,	// MOVZxii
    0U,	// MRSxi
    0U,	// MSRii
    0U,	// MSRix
    992U,	// MSUBwwww
    992U,	// MSUBxxxx
    4U,	// MULvvv_16B
    12U,	// MULvvv_2S
    16U,	// MULvvv_4H
    20U,	// MULvvv_4S
    24U,	// MULvvv_8B
    28U,	// MULvvv_8H
    0U,	// MVNIvi_lsl_2S
    0U,	// MVNIvi_lsl_4H
    0U,	// MVNIvi_lsl_4S
    0U,	// MVNIvi_lsl_8H
    0U,	// MVNIvi_msl_2S
    0U,	// MVNIvi_msl_4S
    0U,	// MVNww_asr
    0U,	// MVNww_lsl
    0U,	// MVNww_lsr
    1U,	// MVNww_ror
    0U,	// MVNxx_asr
    0U,	// MVNxx_lsl
    0U,	// MVNxx_lsr
    1U,	// MVNxx_ror
    4U,	// ORNvvv_16B
    24U,	// ORNvvv_8B
    32U,	// ORNwww_asr
    96U,	// ORNwww_lsl
    160U,	// ORNwww_lsr
    736U,	// ORNwww_ror
    32U,	// ORNxxx_asr
    96U,	// ORNxxx_lsl
    160U,	// ORNxxx_lsr
    736U,	// ORNxxx_ror
    0U,	// ORRvi_lsl_2S
    0U,	// ORRvi_lsl_4H
    0U,	// ORRvi_lsl_4S
    0U,	// ORRvi_lsl_8H
    4U,	// ORRvvv_16B
    24U,	// ORRvvv_8B
    0U,	// ORRwwi
    32U,	// ORRwww_asr
    96U,	// ORRwww_lsl
    160U,	// ORRwww_lsr
    736U,	// ORRwww_ror
    0U,	// ORRxxi
    32U,	// ORRxxx_asr
    96U,	// ORRxxx_lsl
    160U,	// ORRxxx_lsr
    736U,	// ORRxxx_ror
    4U,	// PMULvvv_16B
    24U,	// PMULvvv_8B
    1U,	// PRFM
    1568U,	// PRFM_Wm_RegOffset
    1632U,	// PRFM_Xm_RegOffset
    0U,	// PRFM_lit
    1U,	// PRFUM
    0U,	// RBITww
    0U,	// RBITxx
    0U,	// RET
    0U,	// RETx
    0U,	// REV16ww
    0U,	// REV16xx
    0U,	// REV32xx
    0U,	// REVww
    0U,	// REVxx
    0U,	// RORVwww
    0U,	// RORVxxx
    4U,	// SABAvvv_16B
    12U,	// SABAvvv_2S
    16U,	// SABAvvv_4H
    20U,	// SABAvvv_4S
    24U,	// SABAvvv_8B
    28U,	// SABAvvv_8H
    4U,	// SABDvvv_16B
    12U,	// SABDvvv_2S
    16U,	// SABDvvv_4H
    20U,	// SABDvvv_4S
    24U,	// SABDvvv_8B
    28U,	// SABDvvv_8H
    0U,	// SBCSwww
    0U,	// SBCSxxx
    0U,	// SBCwww
    0U,	// SBCxxx
    1U,	// SBFIZwwii
    1U,	// SBFIZxxii
    992U,	// SBFMwwii
    992U,	// SBFMxxii
    2080U,	// SBFXwwii
    2080U,	// SBFXxxii
    0U,	// SCVTFdw
    1U,	// SCVTFdwi
    0U,	// SCVTFdx
    1U,	// SCVTFdxi
    0U,	// SCVTFsw
    1U,	// SCVTFswi
    0U,	// SCVTFsx
    1U,	// SCVTFsxi
    0U,	// SDIVwww
    0U,	// SDIVxxx
    4U,	// SHADDvvv_16B
    12U,	// SHADDvvv_2S
    16U,	// SHADDvvv_4H
    20U,	// SHADDvvv_4S
    24U,	// SHADDvvv_8B
    28U,	// SHADDvvv_8H
    4U,	// SHSUBvvv_16B
    12U,	// SHSUBvvv_2S
    16U,	// SHSUBvvv_4H
    20U,	// SHSUBvvv_4S
    24U,	// SHSUBvvv_8B
    28U,	// SHSUBvvv_8H
    992U,	// SMADDLxwwx
    4U,	// SMAXPvvv_16B
    12U,	// SMAXPvvv_2S
    16U,	// SMAXPvvv_4H
    20U,	// SMAXPvvv_4S
    24U,	// SMAXPvvv_8B
    28U,	// SMAXPvvv_8H
    4U,	// SMAXvvv_16B
    12U,	// SMAXvvv_2S
    16U,	// SMAXvvv_4H
    20U,	// SMAXvvv_4S
    24U,	// SMAXvvv_8B
    28U,	// SMAXvvv_8H
    0U,	// SMCi
    4U,	// SMINPvvv_16B
    12U,	// SMINPvvv_2S
    16U,	// SMINPvvv_4H
    20U,	// SMINPvvv_4S
    24U,	// SMINPvvv_8B
    28U,	// SMINPvvv_8H
    4U,	// SMINvvv_16B
    12U,	// SMINvvv_2S
    16U,	// SMINvvv_4H
    20U,	// SMINvvv_4S
    24U,	// SMINvvv_8B
    28U,	// SMINvvv_8H
    992U,	// SMSUBLxwwx
    0U,	// SMULHxxx
    0U,	// SQADDbbb
    0U,	// SQADDddd
    0U,	// SQADDhhh
    0U,	// SQADDsss
    4U,	// SQADDvvv_16B
    8U,	// SQADDvvv_2D
    12U,	// SQADDvvv_2S
    16U,	// SQADDvvv_4H
    20U,	// SQADDvvv_4S
    24U,	// SQADDvvv_8B
    28U,	// SQADDvvv_8H
    12U,	// SQDMULHvvv_2S
    16U,	// SQDMULHvvv_4H
    20U,	// SQDMULHvvv_4S
    28U,	// SQDMULHvvv_8H
    12U,	// SQRDMULHvvv_2S
    16U,	// SQRDMULHvvv_4H
    20U,	// SQRDMULHvvv_4S
    28U,	// SQRDMULHvvv_8H
    0U,	// SQRSHLbbb
    0U,	// SQRSHLddd
    0U,	// SQRSHLhhh
    0U,	// SQRSHLsss
    4U,	// SQRSHLvvv_16B
    8U,	// SQRSHLvvv_2D
    12U,	// SQRSHLvvv_2S
    16U,	// SQRSHLvvv_4H
    20U,	// SQRSHLvvv_4S
    24U,	// SQRSHLvvv_8B
    28U,	// SQRSHLvvv_8H
    0U,	// SQSHLbbb
    0U,	// SQSHLddd
    0U,	// SQSHLhhh
    0U,	// SQSHLsss
    4U,	// SQSHLvvv_16B
    8U,	// SQSHLvvv_2D
    12U,	// SQSHLvvv_2S
    16U,	// SQSHLvvv_4H
    20U,	// SQSHLvvv_4S
    24U,	// SQSHLvvv_8B
    28U,	// SQSHLvvv_8H
    0U,	// SQSUBbbb
    0U,	// SQSUBddd
    0U,	// SQSUBhhh
    0U,	// SQSUBsss
    4U,	// SQSUBvvv_16B
    8U,	// SQSUBvvv_2D
    12U,	// SQSUBvvv_2S
    16U,	// SQSUBvvv_4H
    20U,	// SQSUBvvv_4S
    24U,	// SQSUBvvv_8B
    28U,	// SQSUBvvv_8H
    4U,	// SRHADDvvv_16B
    12U,	// SRHADDvvv_2S
    16U,	// SRHADDvvv_4H
    20U,	// SRHADDvvv_4S
    24U,	// SRHADDvvv_8B
    28U,	// SRHADDvvv_8H
    0U,	// SRSHLddd
    4U,	// SRSHLvvv_16B
    8U,	// SRSHLvvv_2D
    12U,	// SRSHLvvv_2S
    16U,	// SRSHLvvv_4H
    20U,	// SRSHLvvv_4S
    24U,	// SRSHLvvv_8B
    28U,	// SRSHLvvv_8H
    0U,	// SSHLddd
    4U,	// SSHLvvv_16B
    8U,	// SSHLvvv_2D
    12U,	// SSHLvvv_2S
    16U,	// SSHLvvv_4H
    20U,	// SSHLvvv_4S
    24U,	// SSHLvvv_8B
    28U,	// SSHLvvv_8H
    0U,	// STLR_byte
    0U,	// STLR_dword
    0U,	// STLR_hword
    0U,	// STLR_word
    44U,	// STLXP_dword
    44U,	// STLXP_word
    36U,	// STLXR_byte
    36U,	// STLXR_dword
    36U,	// STLXR_hword
    36U,	// STLXR_word
    44U,	// STXP_dword
    44U,	// STXP_word
    36U,	// STXR_byte
    36U,	// STXR_dword
    36U,	// STXR_hword
    36U,	// STXR_word
    32U,	// SUBSwww_asr
    96U,	// SUBSwww_lsl
    160U,	// SUBSwww_lsr
    224U,	// SUBSwww_sxtb
    288U,	// SUBSwww_sxth
    352U,	// SUBSwww_sxtw
    416U,	// SUBSwww_sxtx
    480U,	// SUBSwww_uxtb
    544U,	// SUBSwww_uxth
    608U,	// SUBSwww_uxtw
    672U,	// SUBSwww_uxtx
    224U,	// SUBSxxw_sxtb
    288U,	// SUBSxxw_sxth
    352U,	// SUBSxxw_sxtw
    480U,	// SUBSxxw_uxtb
    544U,	// SUBSxxw_uxth
    608U,	// SUBSxxw_uxtw
    32U,	// SUBSxxx_asr
    96U,	// SUBSxxx_lsl
    160U,	// SUBSxxx_lsr
    416U,	// SUBSxxx_sxtx
    672U,	// SUBSxxx_uxtx
    0U,	// SUBddd
    4U,	// SUBvvv_16B
    8U,	// SUBvvv_2D
    12U,	// SUBvvv_2S
    16U,	// SUBvvv_4H
    20U,	// SUBvvv_4S
    24U,	// SUBvvv_8B
    28U,	// SUBvvv_8H
    0U,	// SUBwwi_lsl0_S
    0U,	// SUBwwi_lsl0_cmp
    0U,	// SUBwwi_lsl0_s
    0U,	// SUBwwi_lsl12_S
    0U,	// SUBwwi_lsl12_cmp
    0U,	// SUBwwi_lsl12_s
    32U,	// SUBwww_asr
    96U,	// SUBwww_lsl
    160U,	// SUBwww_lsr
    224U,	// SUBwww_sxtb
    288U,	// SUBwww_sxth
    352U,	// SUBwww_sxtw
    416U,	// SUBwww_sxtx
    480U,	// SUBwww_uxtb
    544U,	// SUBwww_uxth
    608U,	// SUBwww_uxtw
    672U,	// SUBwww_uxtx
    0U,	// SUBxxi_lsl0_S
    0U,	// SUBxxi_lsl0_cmp
    0U,	// SUBxxi_lsl0_s
    0U,	// SUBxxi_lsl12_S
    0U,	// SUBxxi_lsl12_cmp
    0U,	// SUBxxi_lsl12_s
    224U,	// SUBxxw_sxtb
    288U,	// SUBxxw_sxth
    352U,	// SUBxxw_sxtw
    480U,	// SUBxxw_uxtb
    544U,	// SUBxxw_uxth
    608U,	// SUBxxw_uxtw
    32U,	// SUBxxx_asr
    96U,	// SUBxxx_lsl
    160U,	// SUBxxx_lsr
    416U,	// SUBxxx_sxtx
    672U,	// SUBxxx_uxtx
    0U,	// SVCi
    0U,	// SXTBww
    0U,	// SXTBxw
    0U,	// SXTHww
    0U,	// SXTHxw
    0U,	// SXTWxw
    2U,	// SYSLxicci
    0U,	// SYSiccix
    0U,	// TAIL_BRx
    0U,	// TAIL_Bimm
    2U,	// TBNZwii
    2U,	// TBNZxii
    2U,	// TBZwii
    2U,	// TBZxii
    0U,	// TC_RETURNdi
    0U,	// TC_RETURNxi
    0U,	// TLBIi
    0U,	// TLBIix
    0U,	// TLSDESCCALL
    0U,	// TLSDESC_BLRx
    0U,	// TSTww_asr
    0U,	// TSTww_lsl
    0U,	// TSTww_lsr
    1U,	// TSTww_ror
    0U,	// TSTxx_asr
    0U,	// TSTxx_lsl
    0U,	// TSTxx_lsr
    1U,	// TSTxx_ror
    4U,	// UABAvvv_16B
    12U,	// UABAvvv_2S
    16U,	// UABAvvv_4H
    20U,	// UABAvvv_4S
    24U,	// UABAvvv_8B
    28U,	// UABAvvv_8H
    4U,	// UABDvvv_16B
    12U,	// UABDvvv_2S
    16U,	// UABDvvv_4H
    20U,	// UABDvvv_4S
    24U,	// UABDvvv_8B
    28U,	// UABDvvv_8H
    1U,	// UBFIZwwii
    1U,	// UBFIZxxii
    992U,	// UBFMwwii
    992U,	// UBFMxxii
    2080U,	// UBFXwwii
    2080U,	// UBFXxxii
    0U,	// UCVTFdw
    1U,	// UCVTFdwi
    0U,	// UCVTFdx
    1U,	// UCVTFdxi
    0U,	// UCVTFsw
    1U,	// UCVTFswi
    0U,	// UCVTFsx
    1U,	// UCVTFsxi
    0U,	// UDIVwww
    0U,	// UDIVxxx
    4U,	// UHADDvvv_16B
    12U,	// UHADDvvv_2S
    16U,	// UHADDvvv_4H
    20U,	// UHADDvvv_4S
    24U,	// UHADDvvv_8B
    28U,	// UHADDvvv_8H
    4U,	// UHSUBvvv_16B
    12U,	// UHSUBvvv_2S
    16U,	// UHSUBvvv_4H
    20U,	// UHSUBvvv_4S
    24U,	// UHSUBvvv_8B
    28U,	// UHSUBvvv_8H
    992U,	// UMADDLxwwx
    4U,	// UMAXPvvv_16B
    12U,	// UMAXPvvv_2S
    16U,	// UMAXPvvv_4H
    20U,	// UMAXPvvv_4S
    24U,	// UMAXPvvv_8B
    28U,	// UMAXPvvv_8H
    4U,	// UMAXvvv_16B
    12U,	// UMAXvvv_2S
    16U,	// UMAXvvv_4H
    20U,	// UMAXvvv_4S
    24U,	// UMAXvvv_8B
    28U,	// UMAXvvv_8H
    4U,	// UMINPvvv_16B
    12U,	// UMINPvvv_2S
    16U,	// UMINPvvv_4H
    20U,	// UMINPvvv_4S
    24U,	// UMINPvvv_8B
    28U,	// UMINPvvv_8H
    4U,	// UMINvvv_16B
    12U,	// UMINvvv_2S
    16U,	// UMINvvv_4H
    20U,	// UMINvvv_4S
    24U,	// UMINvvv_8B
    28U,	// UMINvvv_8H
    992U,	// UMSUBLxwwx
    0U,	// UMULHxxx
    0U,	// UQADDbbb
    0U,	// UQADDddd
    0U,	// UQADDhhh
    0U,	// UQADDsss
    4U,	// UQADDvvv_16B
    8U,	// UQADDvvv_2D
    12U,	// UQADDvvv_2S
    16U,	// UQADDvvv_4H
    20U,	// UQADDvvv_4S
    24U,	// UQADDvvv_8B
    28U,	// UQADDvvv_8H
    0U,	// UQRSHLbbb
    0U,	// UQRSHLddd
    0U,	// UQRSHLhhh
    0U,	// UQRSHLsss
    4U,	// UQRSHLvvv_16B
    8U,	// UQRSHLvvv_2D
    12U,	// UQRSHLvvv_2S
    16U,	// UQRSHLvvv_4H
    20U,	// UQRSHLvvv_4S
    24U,	// UQRSHLvvv_8B
    28U,	// UQRSHLvvv_8H
    0U,	// UQSHLbbb
    0U,	// UQSHLddd
    0U,	// UQSHLhhh
    0U,	// UQSHLsss
    4U,	// UQSHLvvv_16B
    8U,	// UQSHLvvv_2D
    12U,	// UQSHLvvv_2S
    16U,	// UQSHLvvv_4H
    20U,	// UQSHLvvv_4S
    24U,	// UQSHLvvv_8B
    28U,	// UQSHLvvv_8H
    0U,	// UQSUBbbb
    0U,	// UQSUBddd
    0U,	// UQSUBhhh
    0U,	// UQSUBsss
    4U,	// UQSUBvvv_16B
    8U,	// UQSUBvvv_2D
    12U,	// UQSUBvvv_2S
    16U,	// UQSUBvvv_4H
    20U,	// UQSUBvvv_4S
    24U,	// UQSUBvvv_8B
    28U,	// UQSUBvvv_8H
    4U,	// URHADDvvv_16B
    12U,	// URHADDvvv_2S
    16U,	// URHADDvvv_4H
    20U,	// URHADDvvv_4S
    24U,	// URHADDvvv_8B
    28U,	// URHADDvvv_8H
    0U,	// URSHLddd
    4U,	// URSHLvvv_16B
    8U,	// URSHLvvv_2D
    12U,	// URSHLvvv_2S
    16U,	// URSHLvvv_4H
    20U,	// URSHLvvv_4S
    24U,	// URSHLvvv_8B
    28U,	// URSHLvvv_8H
    0U,	// USHLddd
    4U,	// USHLvvv_16B
    8U,	// USHLvvv_2D
    12U,	// USHLvvv_2S
    16U,	// USHLvvv_4H
    20U,	// USHLvvv_4S
    24U,	// USHLvvv_8B
    28U,	// USHLvvv_8H
    0U,	// UXTBww
    0U,	// UXTBxw
    0U,	// UXTHww
    0U,	// UXTHxw
    0U
  };

  const char AsmStrs[] = {
  /* 0 */ 'd', 'c', 'p', 's', '1', 9, 0,
  /* 7 */ 'r', 'e', 'v', '3', '2', 9, 0,
  /* 14 */ 'd', 'c', 'p', 's', '2', 9, 0,
  /* 21 */ 'd', 'c', 'p', 's', '3', 9, 0,
  /* 28 */ 'r', 'e', 'v', '1', '6', 9, 0,
  /* 35 */ 's', 'a', 'b', 'a', 9, 0,
  /* 41 */ 'u', 'a', 'b', 'a', 9, 0,
  /* 47 */ 'f', 'm', 'l', 'a', 9, 0,
  /* 53 */ 'f', 'r', 'i', 'n', 't', 'a', 9, 0,
  /* 61 */ 'c', 'r', 'c', '3', '2', 'b', 9, 0,
  /* 69 */ 'c', 'r', 'c', '3', '2', 'c', 'b', 9, 0,
  /* 78 */ 'd', 'm', 'b', 9, 0,
  /* 83 */ 'l', 'd', 'a', 'r', 'b', 9, 0,
  /* 90 */ 'l', 'd', 'r', 'b', 9, 0,
  /* 96 */ 's', 't', 'l', 'r', 'b', 9, 0,
  /* 103 */ 'l', 'd', 't', 'r', 'b', 9, 0,
  /* 110 */ 's', 't', 'r', 'b', 9, 0,
  /* 116 */ 's', 't', 't', 'r', 'b', 9, 0,
  /* 123 */ 'l', 'd', 'u', 'r', 'b', 9, 0,
  /* 130 */ 's', 't', 'u', 'r', 'b', 9, 0,
  /* 137 */ 'l', 'd', 'a', 'x', 'r', 'b', 9, 0,
  /* 145 */ 'l', 'd', 'x', 'r', 'b', 9, 0,
  /* 152 */ 's', 't', 'l', 'x', 'r', 'b', 9, 0,
  /* 160 */ 's', 't', 'x', 'r', 'b', 9, 0,
  /* 167 */ 'd', 's', 'b', 9, 0,
  /* 172 */ 'i', 's', 'b', 9, 0,
  /* 177 */ 'l', 'd', 'r', 's', 'b', 9, 0,
  /* 184 */ 'l', 'd', 't', 'r', 's', 'b', 9, 0,
  /* 192 */ 'l', 'd', 'u', 'r', 's', 'b', 9, 0,
  /* 200 */ 's', 'x', 't', 'b', 9, 0,
  /* 206 */ 'u', 'x', 't', 'b', 9, 0,
  /* 212 */ 'f', 's', 'u', 'b', 9, 0,
  /* 218 */ 's', 'h', 's', 'u', 'b', 9, 0,
  /* 225 */ 'u', 'h', 's', 'u', 'b', 9, 0,
  /* 232 */ 'f', 'm', 's', 'u', 'b', 9, 0,
  /* 239 */ 'f', 'n', 'm', 's', 'u', 'b', 9, 0,
  /* 247 */ 's', 'q', 's', 'u', 'b', 9, 0,
  /* 254 */ 'u', 'q', 's', 'u', 'b', 9, 0,
  /* 261 */ 's', 'b', 'c', 9, 0,
  /* 266 */ 'a', 'd', 'c', 9, 0,
  /* 271 */ 'b', 'i', 'c', 9, 0,
  /* 276 */ 's', 'm', 'c', 9, 0,
  /* 281 */ 'c', 's', 'i', 'n', 'c', 9, 0,
  /* 288 */ 'h', 'v', 'c', 9, 0,
  /* 293 */ 's', 'v', 'c', 9, 0,
  /* 298 */ 'f', 'a', 'b', 'd', 9, 0,
  /* 304 */ 's', 'a', 'b', 'd', 9, 0,
  /* 310 */ 'u', 'a', 'b', 'd', 9, 0,
  /* 316 */ 'f', 'a', 'd', 'd', 9, 0,
  /* 322 */ 's', 'r', 'h', 'a', 'd', 'd', 9, 0,
  /* 330 */ 'u', 'r', 'h', 'a', 'd', 'd', 9, 0,
  /* 338 */ 's', 'h', 'a', 'd', 'd', 9, 0,
  /* 345 */ 'u', 'h', 'a', 'd', 'd', 9, 0,
  /* 352 */ 'f', 'm', 'a', 'd', 'd', 9, 0,
  /* 359 */ 'f', 'n', 'm', 'a', 'd', 'd', 9, 0,
  /* 367 */ 's', 'q', 'a', 'd', 'd', 9, 0,
  /* 374 */ 'u', 'q', 'a', 'd', 'd', 9, 0,
  /* 381 */ 'a', 'n', 'd', 9, 0,
  /* 386 */ 'f', 'a', 'c', 'g', 'e', 9, 0,
  /* 393 */ 'f', 'c', 'm', 'g', 'e', 9, 0,
  /* 400 */ 'f', 'c', 'm', 'l', 'e', 9, 0,
  /* 407 */ 'f', 'c', 'c', 'm', 'p', 'e', 9, 0,
  /* 415 */ 'f', 'c', 'm', 'p', 'e', 9, 0,
  /* 422 */ 'b', 'i', 'f', 9, 0,
  /* 427 */ 's', 'c', 'v', 't', 'f', 9, 0,
  /* 434 */ 'u', 'c', 'v', 't', 'f', 9, 0,
  /* 441 */ 'f', 'n', 'e', 'g', 9, 0,
  /* 447 */ 'c', 's', 'n', 'e', 'g', 9, 0,
  /* 454 */ 'c', 'r', 'c', '3', '2', 'h', 9, 0,
  /* 462 */ 'c', 'r', 'c', '3', '2', 'c', 'h', 9, 0,
  /* 471 */ 's', 'q', 'd', 'm', 'u', 'l', 'h', 9, 0,
  /* 480 */ 's', 'q', 'r', 'd', 'm', 'u', 'l', 'h', 9, 0,
  /* 490 */ 's', 'm', 'u', 'l', 'h', 9, 0,
  /* 497 */ 'u', 'm', 'u', 'l', 'h', 9, 0,
  /* 504 */ 'l', 'd', 'a', 'r', 'h', 9, 0,
  /* 511 */ 'l', 'd', 'r', 'h', 9, 0,
  /* 517 */ 's', 't', 'l', 'r', 'h', 9, 0,
  /* 524 */ 'l', 'd', 't', 'r', 'h', 9, 0,
  /* 531 */ 's', 't', 'r', 'h', 9, 0,
  /* 537 */ 's', 't', 't', 'r', 'h', 9, 0,
  /* 544 */ 'l', 'd', 'u', 'r', 'h', 9, 0,
  /* 551 */ 's', 't', 'u', 'r', 'h', 9, 0,
  /* 558 */ 'l', 'd', 'a', 'x', 'r', 'h', 9, 0,
  /* 566 */ 'l', 'd', 'x', 'r', 'h', 9, 0,
  /* 573 */ 's', 't', 'l', 'x', 'r', 'h', 9, 0,
  /* 581 */ 's', 't', 'x', 'r', 'h', 9, 0,
  /* 588 */ 'l', 'd', 'r', 's', 'h', 9, 0,
  /* 595 */ 'l', 'd', 't', 'r', 's', 'h', 9, 0,
  /* 603 */ 'l', 'd', 'u', 'r', 's', 'h', 9, 0,
  /* 611 */ 's', 'x', 't', 'h', 9, 0,
  /* 617 */ 'u', 'x', 't', 'h', 9, 0,
  /* 623 */ 't', 'l', 'b', 'i', 9, 0,
  /* 629 */ 'b', 'f', 'i', 9, 0,
  /* 634 */ 'c', 'm', 'h', 'i', 9, 0,
  /* 640 */ 'f', 'r', 'i', 'n', 't', 'i', 9, 0,
  /* 648 */ 'm', 'o', 'v', 'i', 9, 0,
  /* 654 */ 'b', 'r', 'k', 9, 0,
  /* 659 */ 'm', 'o', 'v', 'k', 9, 0,
  /* 665 */ 's', 'm', 's', 'u', 'b', 'l', 9, 0,
  /* 673 */ 'u', 'm', 's', 'u', 'b', 'l', 9, 0,
  /* 681 */ 's', 'm', 'a', 'd', 'd', 'l', 9, 0,
  /* 689 */ 'u', 'm', 'a', 'd', 'd', 'l', 9, 0,
  /* 697 */ 'f', 'c', 's', 'e', 'l', 9, 0,
  /* 704 */ 's', 'q', 's', 'h', 'l', 9, 0,
  /* 711 */ 'u', 'q', 's', 'h', 'l', 9, 0,
  /* 718 */ 's', 'q', 'r', 's', 'h', 'l', 9, 0,
  /* 726 */ 'u', 'q', 'r', 's', 'h', 'l', 9, 0,
  /* 734 */ 's', 'r', 's', 'h', 'l', 9, 0,
  /* 741 */ 'u', 'r', 's', 'h', 'l', 9, 0,
  /* 748 */ 's', 's', 'h', 'l', 9, 0,
  /* 754 */ 'u', 's', 'h', 'l', 9, 0,
  /* 760 */ 'b', 'f', 'x', 'i', 'l', 9, 0,
  /* 767 */ 'b', 's', 'l', 9, 0,
  /* 772 */ 'l', 's', 'l', 9, 0,
  /* 777 */ 's', 'y', 's', 'l', 9, 0,
  /* 783 */ 'f', 'm', 'u', 'l', 9, 0,
  /* 789 */ 'f', 'n', 'm', 'u', 'l', 9, 0,
  /* 796 */ 'p', 'm', 'u', 'l', 9, 0,
  /* 802 */ 's', 'b', 'f', 'm', 9, 0,
  /* 808 */ 'u', 'b', 'f', 'm', 9, 0,
  /* 814 */ 'p', 'r', 'f', 'm', 9, 0,
  /* 820 */ 'f', 'm', 'i', 'n', 'n', 'm', 9, 0,
  /* 828 */ 'f', 'm', 'a', 'x', 'n', 'm', 9, 0,
  /* 836 */ 'f', 'r', 'i', 'n', 't', 'm', 9, 0,
  /* 844 */ 'p', 'r', 'f', 'u', 'm', 9, 0,
  /* 851 */ 'f', 'm', 'i', 'n', 9, 0,
  /* 857 */ 's', 'm', 'i', 'n', 9, 0,
  /* 863 */ 'u', 'm', 'i', 'n', 9, 0,
  /* 869 */ 'c', 'c', 'm', 'n', 9, 0,
  /* 875 */ 'e', 'o', 'n', 9, 0,
  /* 880 */ 'o', 'r', 'n', 9, 0,
  /* 885 */ 'f', 'r', 'i', 'n', 't', 'n', 9, 0,
  /* 893 */ 'm', 'v', 'n', 9, 0,
  /* 898 */ 'm', 'o', 'v', 'n', 9, 0,
  /* 904 */ 'f', 'a', 'd', 'd', 'p', 9, 0,
  /* 911 */ 'l', 'd', 'p', 9, 0,
  /* 916 */ 'f', 'c', 'c', 'm', 'p', 9, 0,
  /* 923 */ 'f', 'c', 'm', 'p', 9, 0,
  /* 929 */ 'f', 'm', 'i', 'n', 'n', 'm', 'p', 9, 0,
  /* 938 */ 'f', 'm', 'a', 'x', 'n', 'm', 'p', 9, 0,
  /* 947 */ 'l', 'd', 'n', 'p', 9, 0,
  /* 953 */ 'f', 'm', 'i', 'n', 'p', 9, 0,
  /* 960 */ 's', 'm', 'i', 'n', 'p', 9, 0,
  /* 967 */ 'u', 'm', 'i', 'n', 'p', 9, 0,
  /* 974 */ 's', 't', 'n', 'p', 9, 0,
  /* 980 */ 'a', 'd', 'r', 'p', 9, 0,
  /* 986 */ 'f', 'r', 'i', 'n', 't', 'p', 9, 0,
  /* 994 */ 's', 't', 'p', 9, 0,
  /* 999 */ 'l', 'd', 'a', 'x', 'p', 9, 0,
  /* 1006 */ 'f', 'm', 'a', 'x', 'p', 9, 0,
  /* 1013 */ 's', 'm', 'a', 'x', 'p', 9, 0,
  /* 1020 */ 'u', 'm', 'a', 'x', 'p', 9, 0,
  /* 1027 */ 'l', 'd', 'x', 'p', 9, 0,
  /* 1033 */ 's', 't', 'l', 'x', 'p', 9, 0,
  /* 1040 */ 's', 't', 'x', 'p', 9, 0,
  /* 1046 */ 'f', 'c', 'm', 'e', 'q', 9, 0,
  /* 1053 */ 'l', 'd', 'a', 'r', 9, 0,
  /* 1059 */ 'b', 'r', 9, 0,
  /* 1063 */ 'a', 'd', 'r', 9, 0,
  /* 1068 */ 'l', 'd', 'r', 9, 0,
  /* 1073 */ 'b', 'l', 'r', 9, 0,
  /* 1078 */ 's', 't', 'l', 'r', 9, 0,
  /* 1084 */ 'e', 'o', 'r', 9, 0,
  /* 1089 */ 'r', 'o', 'r', 9, 0,
  /* 1094 */ 'o', 'r', 'r', 9, 0,
  /* 1099 */ 'a', 's', 'r', 9, 0,
  /* 1104 */ 'l', 's', 'r', 9, 0,
  /* 1109 */ 'm', 's', 'r', 9, 0,
  /* 1114 */ 'l', 'd', 't', 'r', 9, 0,
  /* 1120 */ 's', 't', 'r', 9, 0,
  /* 1125 */ 's', 't', 't', 'r', 9, 0,
  /* 1131 */ 'e', 'x', 't', 'r', 9, 0,
  /* 1137 */ 'l', 'd', 'u', 'r', 9, 0,
  /* 1143 */ 's', 't', 'u', 'r', 9, 0,
  /* 1149 */ 'l', 'd', 'a', 'x', 'r', 9, 0,
  /* 1156 */ 'l', 'd', 'x', 'r', 9, 0,
  /* 1162 */ 's', 't', 'l', 'x', 'r', 9, 0,
  /* 1169 */ 's', 't', 'x', 'r', 9, 0,
  /* 1175 */ 'f', 'c', 'v', 't', 'a', 's', 9, 0,
  /* 1183 */ 'f', 'a', 'b', 's', 9, 0,
  /* 1189 */ 's', 'u', 'b', 's', 9, 0,
  /* 1195 */ 's', 'b', 'c', 's', 9, 0,
  /* 1201 */ 'a', 'd', 'c', 's', 9, 0,
  /* 1207 */ 'b', 'i', 'c', 's', 9, 0,
  /* 1213 */ 'a', 'd', 'd', 's', 9, 0,
  /* 1219 */ 'a', 'n', 'd', 's', 9, 0,
  /* 1225 */ 'c', 'm', 'h', 's', 9, 0,
  /* 1231 */ 'c', 'l', 's', 9, 0,
  /* 1236 */ 'f', 'm', 'l', 's', 9, 0,
  /* 1242 */ 'f', 'c', 'v', 't', 'm', 's', 9, 0,
  /* 1250 */ 'f', 'c', 'v', 't', 'n', 's', 9, 0,
  /* 1258 */ 'f', 'r', 'e', 'c', 'p', 's', 9, 0,
  /* 1266 */ 'f', 'c', 'v', 't', 'p', 's', 9, 0,
  /* 1274 */ 'm', 'r', 's', 9, 0,
  /* 1279 */ 'f', 'r', 's', 'q', 'r', 't', 's', 9, 0,
  /* 1288 */ 's', 'y', 's', 9, 0,
  /* 1293 */ 'f', 'c', 'v', 't', 'z', 's', 9, 0,
  /* 1301 */ 'a', 't', 9, 0,
  /* 1305 */ 'r', 'e', 't', 9, 0,
  /* 1310 */ 'f', 'a', 'c', 'g', 't', 9, 0,
  /* 1317 */ 'f', 'c', 'm', 'g', 't', 9, 0,
  /* 1324 */ 'r', 'b', 'i', 't', 9, 0,
  /* 1330 */ 'h', 'l', 't', 9, 0,
  /* 1335 */ 'f', 'c', 'm', 'l', 't', 9, 0,
  /* 1342 */ 'h', 'i', 'n', 't', 9, 0,
  /* 1348 */ 'f', 's', 'q', 'r', 't', 9, 0,
  /* 1355 */ 'c', 'm', 't', 's', 't', 9, 0,
  /* 1362 */ 'f', 'c', 'v', 't', 9, 0,
  /* 1368 */ 'f', 'c', 'v', 't', 'a', 'u', 9, 0,
  /* 1376 */ 'f', 'c', 'v', 't', 'm', 'u', 9, 0,
  /* 1384 */ 'f', 'c', 'v', 't', 'n', 'u', 9, 0,
  /* 1392 */ 'f', 'c', 'v', 't', 'p', 'u', 9, 0,
  /* 1400 */ 'f', 'c', 'v', 't', 'z', 'u', 9, 0,
  /* 1408 */ 'r', 'e', 'v', 9, 0,
  /* 1413 */ 'f', 'd', 'i', 'v', 9, 0,
  /* 1419 */ 's', 'd', 'i', 'v', 9, 0,
  /* 1425 */ 'u', 'd', 'i', 'v', 9, 0,
  /* 1431 */ 'c', 's', 'i', 'n', 'v', 9, 0,
  /* 1438 */ 'f', 'm', 'o', 'v', 9, 0,
  /* 1444 */ 'c', 'r', 'c', '3', '2', 'w', 9, 0,
  /* 1452 */ 'c', 'r', 'c', '3', '2', 'c', 'w', 9, 0,
  /* 1461 */ 'l', 'd', 'p', 's', 'w', 9, 0,
  /* 1468 */ 'l', 'd', 'r', 's', 'w', 9, 0,
  /* 1475 */ 'l', 'd', 't', 'r', 's', 'w', 9, 0,
  /* 1483 */ 'l', 'd', 'u', 'r', 's', 'w', 9, 0,
  /* 1491 */ 's', 'x', 't', 'w', 9, 0,
  /* 1497 */ 'c', 'r', 'c', '3', '2', 'x', 9, 0,
  /* 1505 */ 'f', 'm', 'a', 'x', 9, 0,
  /* 1511 */ 's', 'm', 'a', 'x', 9, 0,
  /* 1517 */ 'u', 'm', 'a', 'x', 9, 0,
  /* 1523 */ 'c', 'r', 'c', '3', '2', 'c', 'x', 9, 0,
  /* 1532 */ 'c', 'l', 'r', 'e', 'x', 9, 0,
  /* 1539 */ 's', 'b', 'f', 'x', 9, 0,
  /* 1545 */ 'u', 'b', 'f', 'x', 9, 0,
  /* 1551 */ 'f', 'm', 'u', 'l', 'x', 9, 0,
  /* 1558 */ 'f', 'r', 'i', 'n', 't', 'x', 9, 0,
  /* 1566 */ 'c', 'b', 'z', 9, 0,
  /* 1571 */ 't', 'b', 'z', 9, 0,
  /* 1576 */ 's', 'b', 'f', 'i', 'z', 9, 0,
  /* 1583 */ 'u', 'b', 'f', 'i', 'z', 9, 0,
  /* 1590 */ 'c', 'l', 'z', 9, 0,
  /* 1595 */ 'c', 'b', 'n', 'z', 9, 0,
  /* 1601 */ 't', 'b', 'n', 'z', 9, 0,
  /* 1607 */ 'f', 'r', 'i', 'n', 't', 'z', 9, 0,
  /* 1615 */ 'm', 'o', 'v', 'z', 9, 0,
  /* 1621 */ 'm', 'o', 'v', 'i', 9, 32, 0,
  /* 1628 */ 's', 'q', 's', 'u', 'b', 32, 0,
  /* 1635 */ 'u', 'q', 's', 'u', 'b', 32, 0,
  /* 1642 */ 'b', 'i', 'c', 32, 0,
  /* 1647 */ 's', 'q', 'a', 'd', 'd', 32, 0,
  /* 1654 */ 'u', 'q', 'a', 'd', 'd', 32, 0,
  /* 1661 */ 'm', 'v', 'n', 'i', 32, 0,
  /* 1667 */ 'm', 'o', 'v', 'i', 32, 0,
  /* 1673 */ 's', 'q', 's', 'h', 'l', 32, 0,
  /* 1680 */ 'u', 'q', 's', 'h', 'l', 32, 0,
  /* 1687 */ 's', 'q', 'r', 's', 'h', 'l', 32, 0,
  /* 1695 */ 'u', 'q', 'r', 's', 'h', 'l', 32, 0,
  /* 1703 */ 's', 'r', 's', 'h', 'l', 32, 0,
  /* 1710 */ 'u', 'r', 's', 'h', 'l', 32, 0,
  /* 1717 */ 's', 's', 'h', 'l', 32, 0,
  /* 1723 */ 'u', 's', 'h', 'l', 32, 0,
  /* 1729 */ 'c', 'm', 'n', 32, 0,
  /* 1734 */ 'c', 'm', 'p', 32, 0,
  /* 1739 */ 'o', 'r', 'r', 32, 0,
  /* 1744 */ 'b', '.', 0,
  /* 1747 */ 'L', 'I', 'F', 'E', 'T', 'I', 'M', 'E', '_', 'E', 'N', 'D', 0,
  /* 1760 */ 'B', 'U', 'N', 'D', 'L', 'E', 0,
  /* 1767 */ 'D', 'B', 'G', '_', 'V', 'A', 'L', 'U', 'E', 0,
  /* 1777 */ 'L', 'I', 'F', 'E', 'T', 'I', 'M', 'E', '_', 'S', 'T', 'A', 'R', 'T', 0,
  /* 1792 */ 'd', 'r', 'p', 's', 0,
  /* 1797 */ 'e', 'r', 'e', 't', 0,
  };

  O << "\t";

  // Emit the opcode for the instruction.
  uint64_t Bits1 = OpInfo[MI->getOpcode()];
  uint64_t Bits2 = OpInfo2[MI->getOpcode()];
  uint64_t Bits = (Bits2 << 32) | Bits1;
  assert(Bits != 0 && "Cannot print this instruction.");
  O << AsmStrs+(Bits & 2047)-1;


  // Fragment 0 encoded into 4 bits for 14 unique commands.
  switch ((Bits >> 11) & 15) {
  default:   // unreachable.
  case 0:
    // DBG_VALUE, BUNDLE, LIFETIME_START, LIFETIME_END, DRPS, ERET
    return;
    break;
  case 1:
    // ADCSwww, ADCSxxx, ADCwww, ADCxxx, ADDP_16B, ADDP_2D, ADDP_2S, ADDP_4H,...
    printOperand(MI, 0, O); 
    break;
  case 2:
    // ATix
    printNamedImmOperand<A64AT::ATMapper>(MI, 0, O); 
    O << ", "; 
    printOperand(MI, 1, O); 
    return;
    break;
  case 3:
    // BLimm, Bimm
    printLabelOperand<26, 4>(MI, 0, O); 
    return;
    break;
  case 4:
    // Bcc
    printCondCodeOperand(MI, 0, O); 
    O << ' '; 
    printLabelOperand<19, 4>(MI, 1, O); 
    return;
    break;
  case 5:
    // DCix
    printNamedImmOperand<A64DC::DCMapper>(MI, 0, O); 
    O << ", "; 
    printOperand(MI, 1, O); 
    return;
    break;
  case 6:
    // DMBi, DSBi
    printNamedImmOperand<A64DB::DBarrierMapper>(MI, 0, O); 
    return;
    break;
  case 7:
    // ICi, ICix
    printNamedImmOperand<A64IC::ICMapper>(MI, 0, O); 
    break;
  case 8:
    // ISBi
    printNamedImmOperand<A64ISB::ISBMapper>(MI, 0, O); 
    return;
    break;
  case 9:
    // LS16_PostInd_STR, LS16_PreInd_STR, LS32_PostInd_STR, LS32_PreInd_STR, ...
    printOperand(MI, 1, O); 
    break;
  case 10:
    // MSRii
    printNamedImmOperand<A64PState::PStateMapper>(MI, 0, O); 
    O << ", "; 
    printOperand(MI, 1, O); 
    return;
    break;
  case 11:
    // MSRix
    printMSROperand(MI, 0, O); 
    O << ", "; 
    printOperand(MI, 1, O); 
    return;
    break;
  case 12:
    // PRFM, PRFM_Wm_RegOffset, PRFM_Xm_RegOffset, PRFM_lit, PRFUM
    printNamedImmOperand<A64PRFM::PRFMMapper>(MI, 0, O); 
    break;
  case 13:
    // TLBIi, TLBIix
    printNamedImmOperand<A64TLBI::TLBIMapper>(MI, 0, O); 
    break;
  }


  // Fragment 1 encoded into 4 bits for 11 unique commands.
  switch ((Bits >> 15) & 15) {
  default:   // unreachable.
  case 0:
    // ADCSwww, ADCSxxx, ADCwww, ADCxxx, ADDSwww_asr, ADDSwww_lsl, ADDSwww_ls...
    O << ", "; 
    break;
  case 1:
    // ADDP_16B, ADDvvv_16B, ANDvvv_16B, BICvvv_16B, BIFvvv_16B, BITvvv_16B, ...
    O << ".16b, "; 
    break;
  case 2:
    // ADDP_2D, ADDvvv_2D, CMEQvvi_2D, CMEQvvv_2D, CMGEvvi_2D, CMGEvvv_2D, CM...
    O << ".2d, "; 
    break;
  case 3:
    // ADDP_2S, ADDvvv_2S, BICvi_lsl_2S, CMEQvvi_2S, CMEQvvv_2S, CMGEvvi_2S, ...
    O << ".2s, "; 
    break;
  case 4:
    // ADDP_4H, ADDvvv_4H, BICvi_lsl_4H, CMEQvvi_4H, CMEQvvv_4H, CMGEvvi_4H, ...
    O << ".4h, "; 
    break;
  case 5:
    // ADDP_4S, ADDvvv_4S, BICvi_lsl_4S, CMEQvvi_4S, CMEQvvv_4S, CMGEvvi_4S, ...
    O << ".4s, "; 
    break;
  case 6:
    // ADDP_8B, ADDvvv_8B, ANDvvv_8B, BICvvv_8B, BIFvvv_8B, BITvvv_8B, BSLvvv...
    O << ".8b, "; 
    break;
  case 7:
    // ADDP_8H, ADDvvv_8H, BICvi_lsl_8H, CMEQvvi_8H, CMEQvvv_8H, CMGEvvi_8H, ...
    O << ".8h, "; 
    break;
  case 8:
    // BLRx, BRKi, BRx, CLREXi, DCPS1i, DCPS2i, DCPS3i, HINTi, HLTi, HVCi, IC...
    return;
    break;
  case 9:
    // FMOVvx
    O << ".d["; 
    printBareImmOperand(MI, 2, O); 
    O << "], "; 
    printOperand(MI, 1, O); 
    return;
    break;
  case 10:
    // LDAR_byte, LDAR_dword, LDAR_hword, LDAR_word, LDAXR_byte, LDAXR_dword,...
    O << ", ["; 
    break;
  }


  // Fragment 2 encoded into 4 bits for 16 unique commands.
  switch ((Bits >> 19) & 15) {
  default:   // unreachable.
  case 0:
    // ADCSwww, ADCSxxx, ADCwww, ADCxxx, ADDP_16B, ADDP_2D, ADDP_2S, ADDP_4H,...
    printOperand(MI, 1, O); 
    break;
  case 1:
    // ADDwwi_lsl0_cmp, ADDxxi_lsl0_cmp, SUBwwi_lsl0_cmp, SUBxxi_lsl0_cmp
    printAddSubImmLSL0Operand(MI, 1, O); 
    return;
    break;
  case 2:
    // ADDwwi_lsl12_cmp, ADDxxi_lsl12_cmp, SUBwwi_lsl12_cmp, SUBxxi_lsl12_cmp
    printAddSubImmLSL12Operand(MI, 1, O); 
    return;
    break;
  case 3:
    // ADRPxi
    printLabelOperand<21, 4096>(MI, 1, O); 
    return;
    break;
  case 4:
    // ADRxi
    printLabelOperand<21, 1>(MI, 1, O); 
    return;
    break;
  case 5:
    // BFIwwii, BFIxxii, BFMwwii, BFMxxii, BFXILwwii, BFXILxxii, BIFvvv_16B, ...
    printOperand(MI, 2, O); 
    break;
  case 6:
    // BICvi_lsl_2S, BICvi_lsl_4H, BICvi_lsl_4S, BICvi_lsl_8H, ORRvi_lsl_2S, ...
    printNeonUImm8Operand(MI, 2, O); 
    break;
  case 7:
    // CBNZw, CBNZx, CBZw, CBZx, LDRSWx_lit, LDRd_lit, LDRq_lit, LDRs_lit, LD...
    printLabelOperand<19, 4>(MI, 1, O); 
    return;
    break;
  case 8:
    // FCMPdi_quiet, FCMPdi_sig, FCMPsi_quiet, FCMPsi_sig
    printFPZeroOperand(MI, 1, O); 
    return;
    break;
  case 9:
    // FMOVdi, FMOVsi, FMOVvi_2D, FMOVvi_2S, FMOVvi_4S
    printFPImmOperand(MI, 1, O); 
    return;
    break;
  case 10:
    // MOVIdi, MOVIvi_2D
    printNeonUImm64MaskOperand(MI, 1, O); 
    return;
    break;
  case 11:
    // MOVIvi_16B, MOVIvi_8B, MOVIvi_lsl_2S, MOVIvi_lsl_4H, MOVIvi_lsl_4S, MO...
    printNeonUImm8Operand(MI, 1, O); 
    break;
  case 12:
    // MOVKwii, MOVKxii
    printMoveWideImmOperand(MI, 2, O); 
    return;
    break;
  case 13:
    // MOVNwii, MOVNxii, MOVZwii, MOVZxii
    printMoveWideImmOperand(MI, 1, O); 
    return;
    break;
  case 14:
    // MRSxi
    printMRSOperand(MI, 1, O); 
    return;
    break;
  case 15:
    // SYSiccix
    printCRxOperand(MI, 1, O); 
    O << ", "; 
    printCRxOperand(MI, 2, O); 
    O << ", "; 
    printOperand(MI, 3, O); 
    O << ", "; 
    printOperand(MI, 4, O); 
    return;
    break;
  }


  // Fragment 3 encoded into 5 bits for 18 unique commands.
  switch ((Bits >> 23) & 31) {
  default:   // unreachable.
  case 0:
    // ADCSwww, ADCSxxx, ADCwww, ADCxxx, ADDSwww_asr, ADDSwww_lsl, ADDSwww_ls...
    O << ", "; 
    break;
  case 1:
    // ADDP_16B, ADDvvv_16B, ANDvvv_16B, BICvvv_16B, BIFvvv_16B, BITvvv_16B, ...
    O << ".16b, "; 
    break;
  case 2:
    // ADDP_2D, ADDvvv_2D, CMEQvvi_2D, CMEQvvv_2D, CMGEvvi_2D, CMGEvvv_2D, CM...
    O << ".2d, "; 
    break;
  case 3:
    // ADDP_2S, ADDvvv_2S, CMEQvvi_2S, CMEQvvv_2S, CMGEvvi_2S, CMGEvvv_2S, CM...
    O << ".2s, "; 
    break;
  case 4:
    // ADDP_4H, ADDvvv_4H, CMEQvvi_4H, CMEQvvv_4H, CMGEvvi_4H, CMGEvvv_4H, CM...
    O << ".4h, "; 
    break;
  case 5:
    // ADDP_4S, ADDvvv_4S, CMEQvvi_4S, CMEQvvv_4S, CMGEvvi_4S, CMGEvvv_4S, CM...
    O << ".4s, "; 
    break;
  case 6:
    // ADDP_8B, ADDvvv_8B, ANDvvv_8B, BICvvv_8B, BIFvvv_8B, BITvvv_8B, BSLvvv...
    O << ".8b, "; 
    break;
  case 7:
    // ADDP_8H, ADDvvv_8H, CMEQvvi_8H, CMEQvvv_8H, CMGEvvi_8H, CMGEvvv_8H, CM...
    O << ".8h, "; 
    break;
  case 8:
    // BICvi_lsl_2S, BICvi_lsl_4S, ORRvi_lsl_2S, ORRvi_lsl_4S
    printNeonMovImmShiftOperand<A64SE::LSL, false>(MI, 3, O); 
    return;
    break;
  case 9:
    // BICvi_lsl_4H, BICvi_lsl_8H, ORRvi_lsl_4H, ORRvi_lsl_8H
    printNeonMovImmShiftOperand<A64SE::LSL, true>(MI, 3, O); 
    return;
    break;
  case 10:
    // CLSww, CLSxx, CLZww, CLZxx, FABSdd, FABSss, FCMPdd_quiet, FCMPdd_sig, ...
    return;
    break;
  case 11:
    // FMOVxv
    O << ".d["; 
    printBareImmOperand(MI, 2, O); 
    O << ']'; 
    return;
    break;
  case 12:
    // LDAR_byte, LDAR_dword, LDAR_hword, LDAR_word, LDAXR_byte, LDAXR_dword,...
    O << ']'; 
    return;
    break;
  case 13:
    // LDAXP_dword, LDAXP_word, LDPSWx, LDPSWx_PostInd, LDPSWx_PreInd, LDXP_d...
    O << ", ["; 
    break;
  case 14:
    // LDRSBw_PostInd, LDRSBx_PostInd, LDRSHw_PostInd, LDRSHx_PostInd, LDRSWx...
    O << "], "; 
    printOffsetSImm9Operand(MI, 3, O); 
    return;
    break;
  case 15:
    // MOVIvi_lsl_2S, MOVIvi_lsl_4S, MVNIvi_lsl_2S, MVNIvi_lsl_4S
    printNeonMovImmShiftOperand<A64SE::LSL, false>(MI, 2, O); 
    return;
    break;
  case 16:
    // MOVIvi_lsl_4H, MOVIvi_lsl_8H, MVNIvi_lsl_4H, MVNIvi_lsl_8H
    printNeonMovImmShiftOperand<A64SE::LSL, true>(MI, 2, O); 
    return;
    break;
  case 17:
    // MOVIvi_msl_2S, MOVIvi_msl_4S, MVNIvi_msl_2S, MVNIvi_msl_4S
    printNeonMovImmShiftOperand<A64SE::MSL, false>(MI, 2, O); 
    return;
    break;
  }


  // Fragment 4 encoded into 6 bits for 34 unique commands.
  switch ((Bits >> 28) & 63) {
  default:   // unreachable.
  case 0:
    // ADCSwww, ADCSxxx, ADCwww, ADCxxx, ADDP_16B, ADDP_2D, ADDP_2S, ADDP_4H,...
    printOperand(MI, 2, O); 
    break;
  case 1:
    // ADDwwi_lsl0_S, ADDwwi_lsl0_s, ADDxxi_lsl0_S, ADDxxi_lsl0_s, SUBwwi_lsl...
    printAddSubImmLSL0Operand(MI, 2, O); 
    return;
    break;
  case 2:
    // ADDwwi_lsl12_S, ADDwwi_lsl12_s, ADDxxi_lsl12_S, ADDxxi_lsl12_s, SUBwwi...
    printAddSubImmLSL12Operand(MI, 2, O); 
    return;
    break;
  case 3:
    // ANDSwwi, ANDwwi, EORwwi, ORRwwi
    printLogicalImmOperand<32>(MI, 2, O); 
    return;
    break;
  case 4:
    // ANDSxxi, ANDxxi, EORxxi, ORRxxi
    printLogicalImmOperand<64>(MI, 2, O); 
    return;
    break;
  case 5:
    // BFIwwii
    printBFILSBOperand<32>(MI, 3, O); 
    O << ", "; 
    printBFIWidthOperand(MI, 4, O); 
    return;
    break;
  case 6:
    // BFIxxii
    printBFILSBOperand<64>(MI, 3, O); 
    O << ", "; 
    printBFIWidthOperand(MI, 4, O); 
    return;
    break;
  case 7:
    // BFMwwii, BFMxxii, BFXILwwii, BFXILxxii, BIFvvv_16B, BIFvvv_8B, BITvvv_...
    printOperand(MI, 3, O); 
    break;
  case 8:
    // CMEQvvi_16B, CMEQvvi_2D, CMEQvvi_2S, CMEQvvi_4H, CMEQvvi_4S, CMEQvvi_8...
    printNeonUImm0Operand(MI, 2, O); 
    return;
    break;
  case 9:
    // CMNww_asr, CMNxx_asr, CMPww_asr, CMPxx_asr, MVNww_asr, MVNxx_asr, TSTw...
    printShiftOperand<A64SE::ASR>(MI, 2, O); 
    return;
    break;
  case 10:
    // CMNww_lsl, CMNxx_lsl, CMPww_lsl, CMPxx_lsl, MVNww_lsl, MVNxx_lsl, TSTw...
    printShiftOperand<A64SE::LSL>(MI, 2, O); 
    return;
    break;
  case 11:
    // CMNww_lsr, CMNxx_lsr, CMPww_lsr, CMPxx_lsr, MVNww_lsr, MVNxx_lsr, TSTw...
    printShiftOperand<A64SE::LSR>(MI, 2, O); 
    return;
    break;
  case 12:
    // CMNww_sxtb, CMNxw_sxtb, CMPww_sxtb, CMPxw_sxtb
    printRegExtendOperand<A64SE::SXTB>(MI, 2, O); 
    return;
    break;
  case 13:
    // CMNww_sxth, CMNxw_sxth, CMPww_sxth, CMPxw_sxth
    printRegExtendOperand<A64SE::SXTH>(MI, 2, O); 
    return;
    break;
  case 14:
    // CMNww_sxtw, CMNxw_sxtw, CMPww_sxtw, CMPxw_sxtw
    printRegExtendOperand<A64SE::SXTW>(MI, 2, O); 
    return;
    break;
  case 15:
    // CMNww_sxtx, CMNxx_sxtx, CMPww_sxtx, CMPxx_sxtx
    printRegExtendOperand<A64SE::SXTX>(MI, 2, O); 
    return;
    break;
  case 16:
    // CMNww_uxtb, CMNxw_uxtb, CMPww_uxtb, CMPxw_uxtb
    printRegExtendOperand<A64SE::UXTB>(MI, 2, O); 
    return;
    break;
  case 17:
    // CMNww_uxth, CMNxw_uxth, CMPww_uxth, CMPxw_uxth
    printRegExtendOperand<A64SE::UXTH>(MI, 2, O); 
    return;
    break;
  case 18:
    // CMNww_uxtw, CMNxw_uxtw, CMPww_uxtw, CMPxw_uxtw
    printRegExtendOperand<A64SE::UXTW>(MI, 2, O); 
    return;
    break;
  case 19:
    // CMNww_uxtx, CMNxx_uxtx, CMPww_uxtx, CMPxx_uxtx
    printRegExtendOperand<A64SE::UXTX>(MI, 2, O); 
    return;
    break;
  case 20:
    // FCMEQvvi_2D, FCMEQvvi_2S, FCMEQvvi_4S, FCMGEvvi_2D, FCMGEvvi_2S, FCMGE...
    printFPZeroOperand(MI, 2, O); 
    return;
    break;
  case 21:
    // FCVTZSwdi, FCVTZSwsi, FCVTZSxdi, FCVTZSxsi, FCVTZUwdi, FCVTZUwsi, FCVT...
    printCVTFixedPosOperand(MI, 2, O); 
    return;
    break;
  case 22:
    // LDRSBw, LDRSBx, LS8_LDR, LS8_STR, LSFP8_LDR, LSFP8_STR
    printOffsetUImm12Operand<1>(MI, 2, O); 
    O << ']'; 
    return;
    break;
  case 23:
    // LDRSBw_PreInd, LDRSBx_PreInd, LDRSHw_PreInd, LDRSHx_PreInd, LDRSWx_Pre...
    printOffsetSImm9Operand(MI, 3, O); 
    O << "]!"; 
    return;
    break;
  case 24:
    // LDRSBw_U, LDRSBx_U, LDRSHw_U, LDRSHx_U, LDTRSBw, LDTRSBx, LDTRSHw, LDT...
    printOffsetSImm9Operand(MI, 2, O); 
    O << ']'; 
    return;
    break;
  case 25:
    // LDRSHw, LDRSHx, LS16_LDR, LS16_STR, LSFP16_LDR, LSFP16_STR
    printOffsetUImm12Operand<2>(MI, 2, O); 
    O << ']'; 
    return;
    break;
  case 26:
    // LDRSWx, LS32_LDR, LS32_STR, LSFP32_LDR, LSFP32_STR
    printOffsetUImm12Operand<4>(MI, 2, O); 
    O << ']'; 
    return;
    break;
  case 27:
    // LS64_LDR, LS64_STR, LSFP64_LDR, LSFP64_STR, PRFM
    printOffsetUImm12Operand<8>(MI, 2, O); 
    O << ']'; 
    return;
    break;
  case 28:
    // LSFP128_LDR, LSFP128_STR
    printOffsetUImm12Operand<16>(MI, 2, O); 
    O << ']'; 
    return;
    break;
  case 29:
    // MVNww_ror, MVNxx_ror, TSTww_ror, TSTxx_ror
    printShiftOperand<A64SE::ROR>(MI, 2, O); 
    return;
    break;
  case 30:
    // SBFIZwwii, UBFIZwwii
    printBFILSBOperand<32>(MI, 2, O); 
    O << ", "; 
    printBFIWidthOperand(MI, 3, O); 
    return;
    break;
  case 31:
    // SBFIZxxii, UBFIZxxii
    printBFILSBOperand<64>(MI, 2, O); 
    O << ", "; 
    printBFIWidthOperand(MI, 3, O); 
    return;
    break;
  case 32:
    // SYSLxicci
    printCRxOperand(MI, 2, O); 
    O << ", "; 
    printCRxOperand(MI, 3, O); 
    O << ", "; 
    printOperand(MI, 4, O); 
    return;
    break;
  case 33:
    // TBNZwii, TBNZxii, TBZwii, TBZxii
    printLabelOperand<14, 4>(MI, 2, O); 
    return;
    break;
  }


  // Fragment 5 encoded into 4 bits for 12 unique commands.
  switch ((Bits >> 34) & 15) {
  default:   // unreachable.
  case 0:
    // ADCSwww, ADCSxxx, ADCwww, ADCxxx, ADDddd, ASRVwww, ASRVxxx, ASRwwi, AS...
    return;
    break;
  case 1:
    // ADDP_16B, ADDvvv_16B, ANDvvv_16B, BICvvv_16B, BIFvvv_16B, BITvvv_16B, ...
    O << ".16b"; 
    return;
    break;
  case 2:
    // ADDP_2D, ADDvvv_2D, CMEQvvv_2D, CMGEvvv_2D, CMGTvvv_2D, CMHIvvv_2D, CM...
    O << ".2d"; 
    return;
    break;
  case 3:
    // ADDP_2S, ADDvvv_2S, CMEQvvv_2S, CMGEvvv_2S, CMGTvvv_2S, CMHIvvv_2S, CM...
    O << ".2s"; 
    return;
    break;
  case 4:
    // ADDP_4H, ADDvvv_4H, CMEQvvv_4H, CMGEvvv_4H, CMGTvvv_4H, CMHIvvv_4H, CM...
    O << ".4h"; 
    return;
    break;
  case 5:
    // ADDP_4S, ADDvvv_4S, CMEQvvv_4S, CMGEvvv_4S, CMGTvvv_4S, CMHIvvv_4S, CM...
    O << ".4s"; 
    return;
    break;
  case 6:
    // ADDP_8B, ADDvvv_8B, ANDvvv_8B, BICvvv_8B, BIFvvv_8B, BITvvv_8B, BSLvvv...
    O << ".8b"; 
    return;
    break;
  case 7:
    // ADDP_8H, ADDvvv_8H, CMEQvvv_8H, CMGEvvv_8H, CMGTvvv_8H, CMHIvvv_8H, CM...
    O << ".8h"; 
    return;
    break;
  case 8:
    // ADDSwww_asr, ADDSwww_lsl, ADDSwww_lsr, ADDSwww_sxtb, ADDSwww_sxth, ADD...
    O << ", "; 
    break;
  case 9:
    // LDAXP_dword, LDAXP_word, LDXP_dword, LDXP_word, STLXR_byte, STLXR_dwor...
    O << ']'; 
    return;
    break;
  case 10:
    // LDPSWx_PostInd, LSFPPair128_PostInd_LDR, LSFPPair128_PostInd_STR, LSFP...
    O << "], "; 
    break;
  case 11:
    // STLXP_dword, STLXP_word, STXP_dword, STXP_word
    O << ", ["; 
    printOperand(MI, 3, O); 
    O << ']'; 
    return;
    break;
  }


  // Fragment 6 encoded into 6 bits for 33 unique commands.
  switch ((Bits >> 38) & 63) {
  default:   // unreachable.
  case 0:
    // ADDSwww_asr, ADDSxxx_asr, ADDwww_asr, ADDxxx_asr, ANDSwww_asr, ANDSxxx...
    printShiftOperand<A64SE::ASR>(MI, 3, O); 
    return;
    break;
  case 1:
    // ADDSwww_lsl, ADDSxxx_lsl, ADDwww_lsl, ADDxxx_lsl, ANDSwww_lsl, ANDSxxx...
    printShiftOperand<A64SE::LSL>(MI, 3, O); 
    return;
    break;
  case 2:
    // ADDSwww_lsr, ADDSxxx_lsr, ADDwww_lsr, ADDxxx_lsr, ANDSwww_lsr, ANDSxxx...
    printShiftOperand<A64SE::LSR>(MI, 3, O); 
    return;
    break;
  case 3:
    // ADDSwww_sxtb, ADDSxxw_sxtb, ADDwww_sxtb, ADDxxw_sxtb, SUBSwww_sxtb, SU...
    printRegExtendOperand<A64SE::SXTB>(MI, 3, O); 
    return;
    break;
  case 4:
    // ADDSwww_sxth, ADDSxxw_sxth, ADDwww_sxth, ADDxxw_sxth, SUBSwww_sxth, SU...
    printRegExtendOperand<A64SE::SXTH>(MI, 3, O); 
    return;
    break;
  case 5:
    // ADDSwww_sxtw, ADDSxxw_sxtw, ADDwww_sxtw, ADDxxw_sxtw, SUBSwww_sxtw, SU...
    printRegExtendOperand<A64SE::SXTW>(MI, 3, O); 
    return;
    break;
  case 6:
    // ADDSwww_sxtx, ADDSxxx_sxtx, ADDwww_sxtx, ADDxxx_sxtx, SUBSwww_sxtx, SU...
    printRegExtendOperand<A64SE::SXTX>(MI, 3, O); 
    return;
    break;
  case 7:
    // ADDSwww_uxtb, ADDSxxw_uxtb, ADDwww_uxtb, ADDxxw_uxtb, SUBSwww_uxtb, SU...
    printRegExtendOperand<A64SE::UXTB>(MI, 3, O); 
    return;
    break;
  case 8:
    // ADDSwww_uxth, ADDSxxw_uxth, ADDwww_uxth, ADDxxw_uxth, SUBSwww_uxth, SU...
    printRegExtendOperand<A64SE::UXTH>(MI, 3, O); 
    return;
    break;
  case 9:
    // ADDSwww_uxtw, ADDSxxw_uxtw, ADDwww_uxtw, ADDxxw_uxtw, SUBSwww_uxtw, SU...
    printRegExtendOperand<A64SE::UXTW>(MI, 3, O); 
    return;
    break;
  case 10:
    // ADDSwww_uxtx, ADDSxxx_uxtx, ADDwww_uxtx, ADDxxx_uxtx, SUBSwww_uxtx, SU...
    printRegExtendOperand<A64SE::UXTX>(MI, 3, O); 
    return;
    break;
  case 11:
    // ANDSwww_ror, ANDSxxx_ror, ANDwww_ror, ANDxxx_ror, BICSwww_ror, BICSxxx...
    printShiftOperand<A64SE::ROR>(MI, 3, O); 
    return;
    break;
  case 12:
    // BFMwwii, BFMxxii
    printOperand(MI, 4, O); 
    return;
    break;
  case 13:
    // BFXILwwii, BFXILxxii
    printBFXWidthOperand(MI, 4, O); 
    return;
    break;
  case 14:
    // CCMNwi, CCMNww, CCMNxi, CCMNxx, CCMPwi, CCMPww, CCMPxi, CCMPxx, CSELww...
    printCondCodeOperand(MI, 3, O); 
    return;
    break;
  case 15:
    // EXTRwwwi, EXTRxxxi, FMADDdddd, FMADDssss, FMSUBdddd, FMSUBssss, FNMADD...
    printOperand(MI, 3, O); 
    return;
    break;
  case 16:
    // LDPSWx, LSFPPair32_LDR, LSFPPair32_NonTemp_LDR, LSFPPair32_NonTemp_STR...
    printSImm7ScaledOperand<4>(MI, 3, O); 
    O << ']'; 
    return;
    break;
  case 17:
    // LDPSWx_PostInd, LDPSWx_PreInd, LSFPPair32_PostInd_LDR, LSFPPair32_Post...
    printSImm7ScaledOperand<4>(MI, 4, O); 
    break;
  case 18:
    // LDRSBw_Wm_RegOffset, LDRSBx_Wm_RegOffset, LS8_Wm_RegOffset_LDR, LS8_Wm...
    printAddrRegExtendOperand<1, 32>(MI, 3, O); 
    O << ']'; 
    return;
    break;
  case 19:
    // LDRSBw_Xm_RegOffset, LDRSBx_Xm_RegOffset, LS8_Xm_RegOffset_LDR, LS8_Xm...
    printAddrRegExtendOperand<1, 64>(MI, 3, O); 
    O << ']'; 
    return;
    break;
  case 20:
    // LDRSHw_Wm_RegOffset, LDRSHx_Wm_RegOffset, LS16_Wm_RegOffset_LDR, LS16_...
    printAddrRegExtendOperand<2, 32>(MI, 3, O); 
    O << ']'; 
    return;
    break;
  case 21:
    // LDRSHw_Xm_RegOffset, LDRSHx_Xm_RegOffset, LS16_Xm_RegOffset_LDR, LS16_...
    printAddrRegExtendOperand<2, 64>(MI, 3, O); 
    O << ']'; 
    return;
    break;
  case 22:
    // LDRSWx_Wm_RegOffset, LS32_Wm_RegOffset_LDR, LS32_Wm_RegOffset_STR, LSF...
    printAddrRegExtendOperand<4, 32>(MI, 3, O); 
    O << ']'; 
    return;
    break;
  case 23:
    // LDRSWx_Xm_RegOffset, LS32_Xm_RegOffset_LDR, LS32_Xm_RegOffset_STR, LSF...
    printAddrRegExtendOperand<4, 64>(MI, 3, O); 
    O << ']'; 
    return;
    break;
  case 24:
    // LS64_Wm_RegOffset_LDR, LS64_Wm_RegOffset_STR, LSFP64_Wm_RegOffset_LDR,...
    printAddrRegExtendOperand<8, 32>(MI, 3, O); 
    O << ']'; 
    return;
    break;
  case 25:
    // LS64_Xm_RegOffset_LDR, LS64_Xm_RegOffset_STR, LSFP64_Xm_RegOffset_LDR,...
    printAddrRegExtendOperand<8, 64>(MI, 3, O); 
    O << ']'; 
    return;
    break;
  case 26:
    // LSFP128_Wm_RegOffset_LDR, LSFP128_Wm_RegOffset_STR
    printAddrRegExtendOperand<16, 32>(MI, 3, O); 
    O << ']'; 
    return;
    break;
  case 27:
    // LSFP128_Xm_RegOffset_LDR, LSFP128_Xm_RegOffset_STR
    printAddrRegExtendOperand<16, 64>(MI, 3, O); 
    O << ']'; 
    return;
    break;
  case 28:
    // LSFPPair128_LDR, LSFPPair128_NonTemp_LDR, LSFPPair128_NonTemp_STR, LSF...
    printSImm7ScaledOperand<16>(MI, 3, O); 
    O << ']'; 
    return;
    break;
  case 29:
    // LSFPPair128_PostInd_LDR, LSFPPair128_PostInd_STR, LSFPPair128_PreInd_L...
    printSImm7ScaledOperand<16>(MI, 4, O); 
    break;
  case 30:
    // LSFPPair64_LDR, LSFPPair64_NonTemp_LDR, LSFPPair64_NonTemp_STR, LSFPPa...
    printSImm7ScaledOperand<8>(MI, 3, O); 
    O << ']'; 
    return;
    break;
  case 31:
    // LSFPPair64_PostInd_LDR, LSFPPair64_PostInd_STR, LSFPPair64_PreInd_LDR,...
    printSImm7ScaledOperand<8>(MI, 4, O); 
    break;
  case 32:
    // SBFXwwii, SBFXxxii, UBFXwwii, UBFXxxii
    printBFXWidthOperand(MI, 3, O); 
    return;
    break;
  }


  // Fragment 7 encoded into 1 bits for 2 unique commands.
  if ((Bits >> 44) & 1) {
    // LDPSWx_PreInd, LSFPPair128_PreInd_LDR, LSFPPair128_PreInd_STR, LSFPPai...
    O << "]!"; 
    return;
  } else {
    // LDPSWx_PostInd, LSFPPair128_PostInd_LDR, LSFPPair128_PostInd_STR, LSFP...
    return;
  }

}


/// getRegisterName - This method is automatically generated by tblgen
/// from the register set description.  This returns the assembler name
/// for the specified register.
const char *AArch64InstPrinter::getRegisterName(unsigned RegNo) {
  assert(RegNo && RegNo < 260 && "Invalid register number!");

  static const char AsmStrs[] = {
  /* 0 */ 'b', '1', '0', 0,
  /* 4 */ 'd', '1', '0', 0,
  /* 8 */ 'h', '1', '0', 0,
  /* 12 */ 'q', '1', '0', 0,
  /* 16 */ 's', '1', '0', 0,
  /* 20 */ 'v', '1', '0', 0,
  /* 24 */ 'w', '1', '0', 0,
  /* 28 */ 'x', '1', '0', 0,
  /* 32 */ 'b', '2', '0', 0,
  /* 36 */ 'd', '2', '0', 0,
  /* 40 */ 'h', '2', '0', 0,
  /* 44 */ 'q', '2', '0', 0,
  /* 48 */ 's', '2', '0', 0,
  /* 52 */ 'v', '2', '0', 0,
  /* 56 */ 'w', '2', '0', 0,
  /* 60 */ 'x', '2', '0', 0,
  /* 64 */ 'b', '3', '0', 0,
  /* 68 */ 'd', '3', '0', 0,
  /* 72 */ 'h', '3', '0', 0,
  /* 76 */ 'q', '3', '0', 0,
  /* 80 */ 's', '3', '0', 0,
  /* 84 */ 'v', '3', '0', 0,
  /* 88 */ 'w', '3', '0', 0,
  /* 92 */ 'x', '3', '0', 0,
  /* 96 */ 'b', '0', 0,
  /* 99 */ 'd', '0', 0,
  /* 102 */ 'h', '0', 0,
  /* 105 */ 'q', '0', 0,
  /* 108 */ 's', '0', 0,
  /* 111 */ 'v', '0', 0,
  /* 114 */ 'w', '0', 0,
  /* 117 */ 'x', '0', 0,
  /* 120 */ 'b', '1', '1', 0,
  /* 124 */ 'd', '1', '1', 0,
  /* 128 */ 'h', '1', '1', 0,
  /* 132 */ 'q', '1', '1', 0,
  /* 136 */ 's', '1', '1', 0,
  /* 140 */ 'v', '1', '1', 0,
  /* 144 */ 'w', '1', '1', 0,
  /* 148 */ 'x', '1', '1', 0,
  /* 152 */ 'b', '2', '1', 0,
  /* 156 */ 'd', '2', '1', 0,
  /* 160 */ 'h', '2', '1', 0,
  /* 164 */ 'q', '2', '1', 0,
  /* 168 */ 's', '2', '1', 0,
  /* 172 */ 'v', '2', '1', 0,
  /* 176 */ 'w', '2', '1', 0,
  /* 180 */ 'x', '2', '1', 0,
  /* 184 */ 'b', '3', '1', 0,
  /* 188 */ 'd', '3', '1', 0,
  /* 192 */ 'h', '3', '1', 0,
  /* 196 */ 'q', '3', '1', 0,
  /* 200 */ 's', '3', '1', 0,
  /* 204 */ 'v', '3', '1', 0,
  /* 208 */ 'b', '1', 0,
  /* 211 */ 'd', '1', 0,
  /* 214 */ 'h', '1', 0,
  /* 217 */ 'q', '1', 0,
  /* 220 */ 's', '1', 0,
  /* 223 */ 'v', '1', 0,
  /* 226 */ 'w', '1', 0,
  /* 229 */ 'x', '1', 0,
  /* 232 */ 'b', '1', '2', 0,
  /* 236 */ 'd', '1', '2', 0,
  /* 240 */ 'h', '1', '2', 0,
  /* 244 */ 'q', '1', '2', 0,
  /* 248 */ 's', '1', '2', 0,
  /* 252 */ 'v', '1', '2', 0,
  /* 256 */ 'w', '1', '2', 0,
  /* 260 */ 'x', '1', '2', 0,
  /* 264 */ 'b', '2', '2', 0,
  /* 268 */ 'd', '2', '2', 0,
  /* 272 */ 'h', '2', '2', 0,
  /* 276 */ 'q', '2', '2', 0,
  /* 280 */ 's', '2', '2', 0,
  /* 284 */ 'v', '2', '2', 0,
  /* 288 */ 'w', '2', '2', 0,
  /* 292 */ 'x', '2', '2', 0,
  /* 296 */ 'b', '2', 0,
  /* 299 */ 'd', '2', 0,
  /* 302 */ 'h', '2', 0,
  /* 305 */ 'q', '2', 0,
  /* 308 */ 's', '2', 0,
  /* 311 */ 'v', '2', 0,
  /* 314 */ 'w', '2', 0,
  /* 317 */ 'x', '2', 0,
  /* 320 */ 'b', '1', '3', 0,
  /* 324 */ 'd', '1', '3', 0,
  /* 328 */ 'h', '1', '3', 0,
  /* 332 */ 'q', '1', '3', 0,
  /* 336 */ 's', '1', '3', 0,
  /* 340 */ 'v', '1', '3', 0,
  /* 344 */ 'w', '1', '3', 0,
  /* 348 */ 'x', '1', '3', 0,
  /* 352 */ 'b', '2', '3', 0,
  /* 356 */ 'd', '2', '3', 0,
  /* 360 */ 'h', '2', '3', 0,
  /* 364 */ 'q', '2', '3', 0,
  /* 368 */ 's', '2', '3', 0,
  /* 372 */ 'v', '2', '3', 0,
  /* 376 */ 'w', '2', '3', 0,
  /* 380 */ 'x', '2', '3', 0,
  /* 384 */ 'b', '3', 0,
  /* 387 */ 'd', '3', 0,
  /* 390 */ 'h', '3', 0,
  /* 393 */ 'q', '3', 0,
  /* 396 */ 's', '3', 0,
  /* 399 */ 'v', '3', 0,
  /* 402 */ 'w', '3', 0,
  /* 405 */ 'x', '3', 0,
  /* 408 */ 'b', '1', '4', 0,
  /* 412 */ 'd', '1', '4', 0,
  /* 416 */ 'h', '1', '4', 0,
  /* 420 */ 'q', '1', '4', 0,
  /* 424 */ 's', '1', '4', 0,
  /* 428 */ 'v', '1', '4', 0,
  /* 432 */ 'w', '1', '4', 0,
  /* 436 */ 'x', '1', '4', 0,
  /* 440 */ 'b', '2', '4', 0,
  /* 444 */ 'd', '2', '4', 0,
  /* 448 */ 'h', '2', '4', 0,
  /* 452 */ 'q', '2', '4', 0,
  /* 456 */ 's', '2', '4', 0,
  /* 460 */ 'v', '2', '4', 0,
  /* 464 */ 'w', '2', '4', 0,
  /* 468 */ 'x', '2', '4', 0,
  /* 472 */ 'b', '4', 0,
  /* 475 */ 'd', '4', 0,
  /* 478 */ 'h', '4', 0,
  /* 481 */ 'q', '4', 0,
  /* 484 */ 's', '4', 0,
  /* 487 */ 'v', '4', 0,
  /* 490 */ 'w', '4', 0,
  /* 493 */ 'x', '4', 0,
  /* 496 */ 'b', '1', '5', 0,
  /* 500 */ 'd', '1', '5', 0,
  /* 504 */ 'h', '1', '5', 0,
  /* 508 */ 'q', '1', '5', 0,
  /* 512 */ 's', '1', '5', 0,
  /* 516 */ 'v', '1', '5', 0,
  /* 520 */ 'w', '1', '5', 0,
  /* 524 */ 'x', '1', '5', 0,
  /* 528 */ 'b', '2', '5', 0,
  /* 532 */ 'd', '2', '5', 0,
  /* 536 */ 'h', '2', '5', 0,
  /* 540 */ 'q', '2', '5', 0,
  /* 544 */ 's', '2', '5', 0,
  /* 548 */ 'v', '2', '5', 0,
  /* 552 */ 'w', '2', '5', 0,
  /* 556 */ 'x', '2', '5', 0,
  /* 560 */ 'b', '5', 0,
  /* 563 */ 'd', '5', 0,
  /* 566 */ 'h', '5', 0,
  /* 569 */ 'q', '5', 0,
  /* 572 */ 's', '5', 0,
  /* 575 */ 'v', '5', 0,
  /* 578 */ 'w', '5', 0,
  /* 581 */ 'x', '5', 0,
  /* 584 */ 'b', '1', '6', 0,
  /* 588 */ 'd', '1', '6', 0,
  /* 592 */ 'h', '1', '6', 0,
  /* 596 */ 'q', '1', '6', 0,
  /* 600 */ 's', '1', '6', 0,
  /* 604 */ 'v', '1', '6', 0,
  /* 608 */ 'w', '1', '6', 0,
  /* 612 */ 'x', '1', '6', 0,
  /* 616 */ 'b', '2', '6', 0,
  /* 620 */ 'd', '2', '6', 0,
  /* 624 */ 'h', '2', '6', 0,
  /* 628 */ 'q', '2', '6', 0,
  /* 632 */ 's', '2', '6', 0,
  /* 636 */ 'v', '2', '6', 0,
  /* 640 */ 'w', '2', '6', 0,
  /* 644 */ 'x', '2', '6', 0,
  /* 648 */ 'b', '6', 0,
  /* 651 */ 'd', '6', 0,
  /* 654 */ 'h', '6', 0,
  /* 657 */ 'q', '6', 0,
  /* 660 */ 's', '6', 0,
  /* 663 */ 'v', '6', 0,
  /* 666 */ 'w', '6', 0,
  /* 669 */ 'x', '6', 0,
  /* 672 */ 'b', '1', '7', 0,
  /* 676 */ 'd', '1', '7', 0,
  /* 680 */ 'h', '1', '7', 0,
  /* 684 */ 'q', '1', '7', 0,
  /* 688 */ 's', '1', '7', 0,
  /* 692 */ 'v', '1', '7', 0,
  /* 696 */ 'w', '1', '7', 0,
  /* 700 */ 'x', '1', '7', 0,
  /* 704 */ 'b', '2', '7', 0,
  /* 708 */ 'd', '2', '7', 0,
  /* 712 */ 'h', '2', '7', 0,
  /* 716 */ 'q', '2', '7', 0,
  /* 720 */ 's', '2', '7', 0,
  /* 724 */ 'v', '2', '7', 0,
  /* 728 */ 'w', '2', '7', 0,
  /* 732 */ 'x', '2', '7', 0,
  /* 736 */ 'b', '7', 0,
  /* 739 */ 'd', '7', 0,
  /* 742 */ 'h', '7', 0,
  /* 745 */ 'q', '7', 0,
  /* 748 */ 's', '7', 0,
  /* 751 */ 'v', '7', 0,
  /* 754 */ 'w', '7', 0,
  /* 757 */ 'x', '7', 0,
  /* 760 */ 'b', '1', '8', 0,
  /* 764 */ 'd', '1', '8', 0,
  /* 768 */ 'h', '1', '8', 0,
  /* 772 */ 'q', '1', '8', 0,
  /* 776 */ 's', '1', '8', 0,
  /* 780 */ 'v', '1', '8', 0,
  /* 784 */ 'w', '1', '8', 0,
  /* 788 */ 'x', '1', '8', 0,
  /* 792 */ 'b', '2', '8', 0,
  /* 796 */ 'd', '2', '8', 0,
  /* 800 */ 'h', '2', '8', 0,
  /* 804 */ 'q', '2', '8', 0,
  /* 808 */ 's', '2', '8', 0,
  /* 812 */ 'v', '2', '8', 0,
  /* 816 */ 'w', '2', '8', 0,
  /* 820 */ 'x', '2', '8', 0,
  /* 824 */ 'b', '8', 0,
  /* 827 */ 'd', '8', 0,
  /* 830 */ 'h', '8', 0,
  /* 833 */ 'q', '8', 0,
  /* 836 */ 's', '8', 0,
  /* 839 */ 'v', '8', 0,
  /* 842 */ 'w', '8', 0,
  /* 845 */ 'x', '8', 0,
  /* 848 */ 'b', '1', '9', 0,
  /* 852 */ 'd', '1', '9', 0,
  /* 856 */ 'h', '1', '9', 0,
  /* 860 */ 'q', '1', '9', 0,
  /* 864 */ 's', '1', '9', 0,
  /* 868 */ 'v', '1', '9', 0,
  /* 872 */ 'w', '1', '9', 0,
  /* 876 */ 'x', '1', '9', 0,
  /* 880 */ 'b', '2', '9', 0,
  /* 884 */ 'd', '2', '9', 0,
  /* 888 */ 'h', '2', '9', 0,
  /* 892 */ 'q', '2', '9', 0,
  /* 896 */ 's', '2', '9', 0,
  /* 900 */ 'v', '2', '9', 0,
  /* 904 */ 'w', '2', '9', 0,
  /* 908 */ 'x', '2', '9', 0,
  /* 912 */ 'b', '9', 0,
  /* 915 */ 'd', '9', 0,
  /* 918 */ 'h', '9', 0,
  /* 921 */ 'q', '9', 0,
  /* 924 */ 's', '9', 0,
  /* 927 */ 'v', '9', 0,
  /* 930 */ 'w', '9', 0,
  /* 933 */ 'x', '9', 0,
  /* 936 */ 'w', 's', 'p', 0,
  /* 940 */ 'w', 'z', 'r', 0,
  /* 944 */ 'x', 'z', 'r', 0,
  /* 948 */ 'n', 'z', 'c', 'v', 0,
  };

  static const uint32_t RegAsmOffset[] = {
    948, 936, 940, 937, 944, 96, 208, 296, 384, 472, 560, 648, 736, 824, 
    912, 0, 120, 232, 320, 408, 496, 584, 672, 760, 848, 32, 152, 264, 
    352, 440, 528, 616, 704, 792, 880, 64, 184, 99, 211, 299, 387, 475, 
    563, 651, 739, 827, 915, 4, 124, 236, 324, 412, 500, 588, 676, 764, 
    852, 36, 156, 268, 356, 444, 532, 620, 708, 796, 884, 68, 188, 102, 
    214, 302, 390, 478, 566, 654, 742, 830, 918, 8, 128, 240, 328, 416, 
    504, 592, 680, 768, 856, 40, 160, 272, 360, 448, 536, 624, 712, 800, 
    888, 72, 192, 105, 217, 305, 393, 481, 569, 657, 745, 833, 921, 12, 
    132, 244, 332, 420, 508, 596, 684, 772, 860, 44, 164, 276, 364, 452, 
    540, 628, 716, 804, 892, 76, 196, 108, 220, 308, 396, 484, 572, 660, 
    748, 836, 924, 16, 136, 248, 336, 424, 512, 600, 688, 776, 864, 48, 
    168, 280, 368, 456, 544, 632, 720, 808, 896, 80, 200, 111, 223, 311, 
    399, 487, 575, 663, 751, 839, 927, 20, 140, 252, 340, 428, 516, 604, 
    692, 780, 868, 52, 172, 284, 372, 460, 548, 636, 724, 812, 900, 84, 
    204, 114, 226, 314, 402, 490, 578, 666, 754, 842, 930, 24, 144, 256, 
    344, 432, 520, 608, 696, 784, 872, 56, 176, 288, 376, 464, 552, 640, 
    728, 816, 904, 88, 117, 229, 317, 405, 493, 581, 669, 757, 845, 933, 
    28, 148, 260, 348, 436, 524, 612, 700, 788, 876, 60, 180, 292, 380, 
    468, 556, 644, 732, 820, 908, 92, 
  };

  assert (*(AsmStrs+RegAsmOffset[RegNo-1]) &&
          "Invalid alt name index for register!");
  return AsmStrs+RegAsmOffset[RegNo-1];
}

#ifdef PRINT_ALIAS_INSTR
#undef PRINT_ALIAS_INSTR

static unsigned getMapOperandNumber(const SmallVectorImpl<std::pair<StringRef, unsigned> > &OpMap,
                                    StringRef Name) {
  for (SmallVectorImpl<std::pair<StringRef, unsigned> >::const_iterator
         I = OpMap.begin(), E = OpMap.end(); I != E; ++I)
    if (I->first == Name)
      return I->second;
  llvm_unreachable("Operand not in map!");
}

bool AArch64InstPrinter::printAliasInstr(const MCInst *MI, raw_ostream &OS) {
  StringRef AsmString;
  SmallVector<std::pair<StringRef, unsigned>, 4> OpMap;
  switch (MI->getOpcode()) {
  default: return false;
  case AArch64::ADDSwww_lsl:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (ADDSwww_lsl GPR32:$Rd, GPR32:$Rn, GPR32:$Rm, 0)
      AsmString = "adds $Rd, $Rn, $Rm";
      OpMap.push_back(std::make_pair("Rd", 0));
      OpMap.push_back(std::make_pair("Rm", 2));
      OpMap.push_back(std::make_pair("Rn", 1));
      break;
    }
    return false;
  case AArch64::ADDSwww_uxtw:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::RwspRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (ADDSwww_uxtw GPR32:$Rd, Rwsp:$Rn, GPR32:$Rm, 0)
      AsmString = "adds $Rd, $Rn, $Rm";
      OpMap.push_back(std::make_pair("Rd", 0));
      OpMap.push_back(std::make_pair("Rm", 2));
      OpMap.push_back(std::make_pair("Rn", 1));
      break;
    }
    return false;
  case AArch64::ADDSxxx_lsl:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (ADDSxxx_lsl GPR64:$Rd, GPR64:$Rn, GPR64:$Rm, 0)
      AsmString = "adds $Rd, $Rn, $Rm";
      OpMap.push_back(std::make_pair("Rd", 0));
      OpMap.push_back(std::make_pair("Rm", 2));
      OpMap.push_back(std::make_pair("Rn", 1));
      break;
    }
    return false;
  case AArch64::ADDSxxx_uxtx:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::RxspRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (ADDSxxx_uxtx GPR64:$Rd, Rxsp:$Rn, GPR64:$Rm, 0)
      AsmString = "adds $Rd, $Rn, $Rm";
      OpMap.push_back(std::make_pair("Rd", 0));
      OpMap.push_back(std::make_pair("Rm", 2));
      OpMap.push_back(std::make_pair("Rn", 1));
      break;
    }
    return false;
  case AArch64::ADDwwi_lsl0_s:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32wspRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::RwspRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (ADDwwi_lsl0_s GPR32wsp:$Rd, Rwsp:$Rn, 0)
      AsmString = "mov $Rd, $Rn";
      OpMap.push_back(std::make_pair("Rd", 0));
      OpMap.push_back(std::make_pair("Rn", 1));
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::RwspRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32wspRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (ADDwwi_lsl0_s Rwsp:$Rd, GPR32wsp:$Rn, 0)
      AsmString = "mov $Rd, $Rn";
      OpMap.push_back(std::make_pair("Rd", 0));
      OpMap.push_back(std::make_pair("Rn", 1));
      break;
    }
    return false;
  case AArch64::ADDwww_lsl:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (ADDwww_lsl GPR32:$Rd, GPR32:$Rn, GPR32:$Rm, 0)
      AsmString = "add $Rd, $Rn, $Rm";
      OpMap.push_back(std::make_pair("Rd", 0));
      OpMap.push_back(std::make_pair("Rm", 2));
      OpMap.push_back(std::make_pair("Rn", 1));
      break;
    }
    return false;
  case AArch64::ADDwww_uxtw:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::RwspRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32wspRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (ADDwww_uxtw Rwsp:$Rd, GPR32wsp:$Rn, GPR32:$Rm, 0)
      AsmString = "add $Rd, $Rn, $Rm";
      OpMap.push_back(std::make_pair("Rd", 0));
      OpMap.push_back(std::make_pair("Rm", 2));
      OpMap.push_back(std::make_pair("Rn", 1));
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32wspRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::RwspRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (ADDwww_uxtw GPR32wsp:$Rd, Rwsp:$Rn, GPR32:$Rm, 0)
      AsmString = "add $Rd, $Rn, $Rm";
      OpMap.push_back(std::make_pair("Rd", 0));
      OpMap.push_back(std::make_pair("Rm", 2));
      OpMap.push_back(std::make_pair("Rn", 1));
      break;
    }
    return false;
  case AArch64::ADDxxi_lsl0_s:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64xspRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::RxspRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (ADDxxi_lsl0_s GPR64xsp:$Rd, Rxsp:$Rn, 0)
      AsmString = "mov $Rd, $Rn";
      OpMap.push_back(std::make_pair("Rd", 0));
      OpMap.push_back(std::make_pair("Rn", 1));
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::RxspRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64xspRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (ADDxxi_lsl0_s Rxsp:$Rd, GPR64xsp:$Rn, 0)
      AsmString = "mov $Rd, $Rn";
      OpMap.push_back(std::make_pair("Rd", 0));
      OpMap.push_back(std::make_pair("Rn", 1));
      break;
    }
    return false;
  case AArch64::ADDxxx_lsl:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (ADDxxx_lsl GPR64:$Rd, GPR64:$Rn, GPR64:$Rm, 0)
      AsmString = "add $Rd, $Rn, $Rm";
      OpMap.push_back(std::make_pair("Rd", 0));
      OpMap.push_back(std::make_pair("Rm", 2));
      OpMap.push_back(std::make_pair("Rn", 1));
      break;
    }
    return false;
  case AArch64::ADDxxx_uxtx:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::RxspRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64xspRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (ADDxxx_uxtx Rxsp:$Rd, GPR64xsp:$Rn, GPR64:$Rm, 0)
      AsmString = "add $Rd, $Rn, $Rm";
      OpMap.push_back(std::make_pair("Rd", 0));
      OpMap.push_back(std::make_pair("Rm", 2));
      OpMap.push_back(std::make_pair("Rn", 1));
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64xspRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::RxspRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (ADDxxx_uxtx GPR64xsp:$Rd, Rxsp:$Rn, GPR64:$Rm, 0)
      AsmString = "add $Rd, $Rn, $Rm";
      OpMap.push_back(std::make_pair("Rd", 0));
      OpMap.push_back(std::make_pair("Rm", 2));
      OpMap.push_back(std::make_pair("Rn", 1));
      break;
    }
    return false;
  case AArch64::ANDSwww_lsl:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (ANDSwww_lsl GPR32:$Rd, GPR32:$Rn, GPR32:$Rm, 0)
      AsmString = "ands $Rd, $Rn, $Rm";
      OpMap.push_back(std::make_pair("Rd", 0));
      OpMap.push_back(std::make_pair("Rm", 2));
      OpMap.push_back(std::make_pair("Rn", 1));
      break;
    }
    return false;
  case AArch64::ANDSxxx_lsl:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (ANDSxxx_lsl GPR64:$Rd, GPR64:$Rn, GPR64:$Rm, 0)
      AsmString = "ands $Rd, $Rn, $Rm";
      OpMap.push_back(std::make_pair("Rd", 0));
      OpMap.push_back(std::make_pair("Rm", 2));
      OpMap.push_back(std::make_pair("Rn", 1));
      break;
    }
    return false;
  case AArch64::ANDwww_lsl:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (ANDwww_lsl GPR32:$Rd, GPR32:$Rn, GPR32:$Rm, 0)
      AsmString = "and $Rd, $Rn, $Rm";
      OpMap.push_back(std::make_pair("Rd", 0));
      OpMap.push_back(std::make_pair("Rm", 2));
      OpMap.push_back(std::make_pair("Rn", 1));
      break;
    }
    return false;
  case AArch64::ANDxxx_lsl:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (ANDxxx_lsl GPR64:$Rd, GPR64:$Rn, GPR64:$Rm, 0)
      AsmString = "and $Rd, $Rn, $Rm";
      OpMap.push_back(std::make_pair("Rd", 0));
      OpMap.push_back(std::make_pair("Rm", 2));
      OpMap.push_back(std::make_pair("Rn", 1));
      break;
    }
    return false;
  case AArch64::BICSwww_lsl:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (BICSwww_lsl GPR32:$Rd, GPR32:$Rn, GPR32:$Rm, 0)
      AsmString = "bics $Rd, $Rn, $Rm";
      OpMap.push_back(std::make_pair("Rd", 0));
      OpMap.push_back(std::make_pair("Rm", 2));
      OpMap.push_back(std::make_pair("Rn", 1));
      break;
    }
    return false;
  case AArch64::BICSxxx_lsl:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (BICSxxx_lsl GPR64:$Rd, GPR64:$Rn, GPR64:$Rm, 0)
      AsmString = "bics $Rd, $Rn, $Rm";
      OpMap.push_back(std::make_pair("Rd", 0));
      OpMap.push_back(std::make_pair("Rm", 2));
      OpMap.push_back(std::make_pair("Rn", 1));
      break;
    }
    return false;
  case AArch64::BICwww_lsl:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (BICwww_lsl GPR32:$Rd, GPR32:$Rn, GPR32:$Rm, 0)
      AsmString = "bic $Rd, $Rn, $Rm";
      OpMap.push_back(std::make_pair("Rd", 0));
      OpMap.push_back(std::make_pair("Rm", 2));
      OpMap.push_back(std::make_pair("Rn", 1));
      break;
    }
    return false;
  case AArch64::BICxxx_lsl:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (BICxxx_lsl GPR64:$Rd, GPR64:$Rn, GPR64:$Rm, 0)
      AsmString = "bic $Rd, $Rn, $Rm";
      OpMap.push_back(std::make_pair("Rd", 0));
      OpMap.push_back(std::make_pair("Rm", 2));
      OpMap.push_back(std::make_pair("Rn", 1));
      break;
    }
    return false;
  case AArch64::CLREXi:
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 15) {
      // (CLREXi 15)
      AsmString = "clrex";
      break;
    }
    return false;
  case AArch64::CMNww_lsl:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (CMNww_lsl GPR32:$Rn, GPR32:$Rm, 0)
      AsmString = "cmn $Rn, $Rm";
      OpMap.push_back(std::make_pair("Rm", 1));
      OpMap.push_back(std::make_pair("Rn", 0));
      break;
    }
    return false;
  case AArch64::CMNww_uxtw:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::RwspRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (CMNww_uxtw Rwsp:$Rn, GPR32:$Rm, 0)
      AsmString = "cmn $Rn, $Rm";
      OpMap.push_back(std::make_pair("Rm", 1));
      OpMap.push_back(std::make_pair("Rn", 0));
      break;
    }
    return false;
  case AArch64::CMNxx_lsl:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (CMNxx_lsl GPR64:$Rn, GPR64:$Rm, 0)
      AsmString = "cmn $Rn, $Rm";
      OpMap.push_back(std::make_pair("Rm", 1));
      OpMap.push_back(std::make_pair("Rn", 0));
      break;
    }
    return false;
  case AArch64::CMNxx_uxtx:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::RxspRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (CMNxx_uxtx Rxsp:$Rn, GPR64:$Rm, 0)
      AsmString = "cmn $Rn, $Rm";
      OpMap.push_back(std::make_pair("Rm", 1));
      OpMap.push_back(std::make_pair("Rn", 0));
      break;
    }
    return false;
  case AArch64::CMPww_lsl:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (CMPww_lsl GPR32:$Rn, GPR32:$Rm, 0)
      AsmString = "cmp $Rn, $Rm";
      OpMap.push_back(std::make_pair("Rm", 1));
      OpMap.push_back(std::make_pair("Rn", 0));
      break;
    }
    return false;
  case AArch64::CMPww_uxtw:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::RwspRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (CMPww_uxtw Rwsp:$Rn, GPR32:$Rm, 0)
      AsmString = "cmp $Rn, $Rm";
      OpMap.push_back(std::make_pair("Rm", 1));
      OpMap.push_back(std::make_pair("Rn", 0));
      break;
    }
    return false;
  case AArch64::CMPxx_lsl:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (CMPxx_lsl GPR64:$Rn, GPR64:$Rm, 0)
      AsmString = "cmp $Rn, $Rm";
      OpMap.push_back(std::make_pair("Rm", 1));
      OpMap.push_back(std::make_pair("Rn", 0));
      break;
    }
    return false;
  case AArch64::CMPxx_uxtx:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::RxspRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (CMPxx_uxtx Rxsp:$Rn, GPR64:$Rm, 0)
      AsmString = "cmp $Rn, $Rm";
      OpMap.push_back(std::make_pair("Rm", 1));
      OpMap.push_back(std::make_pair("Rn", 0));
      break;
    }
    return false;
  case AArch64::DCPS1i:
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 0) {
      // (DCPS1i 0)
      AsmString = "dcps1";
      break;
    }
    return false;
  case AArch64::DCPS2i:
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 0) {
      // (DCPS2i 0)
      AsmString = "dcps2";
      break;
    }
    return false;
  case AArch64::DCPS3i:
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 0) {
      // (DCPS3i 0)
      AsmString = "dcps3";
      break;
    }
    return false;
  case AArch64::EONwww_lsl:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (EONwww_lsl GPR32:$Rd, GPR32:$Rn, GPR32:$Rm, 0)
      AsmString = "eon $Rd, $Rn, $Rm";
      OpMap.push_back(std::make_pair("Rd", 0));
      OpMap.push_back(std::make_pair("Rm", 2));
      OpMap.push_back(std::make_pair("Rn", 1));
      break;
    }
    return false;
  case AArch64::EONxxx_lsl:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (EONxxx_lsl GPR64:$Rd, GPR64:$Rn, GPR64:$Rm, 0)
      AsmString = "eon $Rd, $Rn, $Rm";
      OpMap.push_back(std::make_pair("Rd", 0));
      OpMap.push_back(std::make_pair("Rm", 2));
      OpMap.push_back(std::make_pair("Rn", 1));
      break;
    }
    return false;
  case AArch64::EORwww_lsl:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (EORwww_lsl GPR32:$Rd, GPR32:$Rn, GPR32:$Rm, 0)
      AsmString = "eor $Rd, $Rn, $Rm";
      OpMap.push_back(std::make_pair("Rd", 0));
      OpMap.push_back(std::make_pair("Rm", 2));
      OpMap.push_back(std::make_pair("Rn", 1));
      break;
    }
    return false;
  case AArch64::EORxxx_lsl:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (EORxxx_lsl GPR64:$Rd, GPR64:$Rn, GPR64:$Rm, 0)
      AsmString = "eor $Rd, $Rn, $Rm";
      OpMap.push_back(std::make_pair("Rd", 0));
      OpMap.push_back(std::make_pair("Rm", 2));
      OpMap.push_back(std::make_pair("Rn", 1));
      break;
    }
    return false;
  case AArch64::HINTi:
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 0) {
      // (HINTi 0)
      AsmString = "nop";
      break;
    }
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 1) {
      // (HINTi 1)
      AsmString = "yield";
      break;
    }
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 2) {
      // (HINTi 2)
      AsmString = "wfe";
      break;
    }
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 3) {
      // (HINTi 3)
      AsmString = "wfi";
      break;
    }
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 4) {
      // (HINTi 4)
      AsmString = "sev";
      break;
    }
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 5) {
      // (HINTi 5)
      AsmString = "sevl";
      break;
    }
    return false;
  case AArch64::ISBi:
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 15) {
      // (ISBi 15)
      AsmString = "isb";
      break;
    }
    return false;
  case AArch64::LDPSWx:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64xspRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (LDPSWx GPR64:$Rt, GPR64:$Rt2, GPR64xsp:$Rn, 0)
      AsmString = "ldpsw $Rt, $Rt2, [$Rn]";
      OpMap.push_back(std::make_pair("Rn", 2));
      OpMap.push_back(std::make_pair("Rt", 0));
      OpMap.push_back(std::make_pair("Rt2", 1));
      break;
    }
    return false;
  case AArch64::LDRSBw:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64xspRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LDRSBw GPR32:$Rt, GPR64xsp:$Rn, 0)
      AsmString = "ldrsb $Rt, [$Rn]";
      OpMap.push_back(std::make_pair("Rn", 1));
      OpMap.push_back(std::make_pair("Rt", 0));
      break;
    }
    return false;
  case AArch64::LDRSBw_Xm_RegOffset:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64xspRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 2) {
      // (LDRSBw_Xm_RegOffset GPR32:$Rt, GPR64xsp:$Rn, GPR64:$Rm, 2)
      AsmString = "ldrsb $Rt, [$Rn, $Rm]";
      OpMap.push_back(std::make_pair("Rm", 2));
      OpMap.push_back(std::make_pair("Rn", 1));
      OpMap.push_back(std::make_pair("Rt", 0));
      break;
    }
    return false;
  case AArch64::LDRSBx:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64xspRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LDRSBx GPR64:$Rt, GPR64xsp:$Rn, 0)
      AsmString = "ldrsb $Rt, [$Rn]";
      OpMap.push_back(std::make_pair("Rn", 1));
      OpMap.push_back(std::make_pair("Rt", 0));
      break;
    }
    return false;
  case AArch64::LDRSBx_Xm_RegOffset:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64xspRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 2) {
      // (LDRSBx_Xm_RegOffset GPR64:$Rt, GPR64xsp:$Rn, GPR64:$Rm, 2)
      AsmString = "ldrsb $Rt, [$Rn, $Rm]";
      OpMap.push_back(std::make_pair("Rm", 2));
      OpMap.push_back(std::make_pair("Rn", 1));
      OpMap.push_back(std::make_pair("Rt", 0));
      break;
    }
    return false;
  case AArch64::LDRSHw:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64xspRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LDRSHw GPR32:$Rt, GPR64xsp:$Rn, 0)
      AsmString = "ldrsh $Rt, [$Rn]";
      OpMap.push_back(std::make_pair("Rn", 1));
      OpMap.push_back(std::make_pair("Rt", 0));
      break;
    }
    return false;
  case AArch64::LDRSHw_Xm_RegOffset:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64xspRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 2) {
      // (LDRSHw_Xm_RegOffset GPR32:$Rt, GPR64xsp:$Rn, GPR64:$Rm, 2)
      AsmString = "ldrsh $Rt, [$Rn, $Rm]";
      OpMap.push_back(std::make_pair("Rm", 2));
      OpMap.push_back(std::make_pair("Rn", 1));
      OpMap.push_back(std::make_pair("Rt", 0));
      break;
    }
    return false;
  case AArch64::LDRSHx:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64xspRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LDRSHx GPR64:$Rt, GPR64xsp:$Rn, 0)
      AsmString = "ldrsh $Rt, [$Rn]";
      OpMap.push_back(std::make_pair("Rn", 1));
      OpMap.push_back(std::make_pair("Rt", 0));
      break;
    }
    return false;
  case AArch64::LDRSHx_Xm_RegOffset:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64xspRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 2) {
      // (LDRSHx_Xm_RegOffset GPR64:$Rt, GPR64xsp:$Rn, GPR64:$Rm, 2)
      AsmString = "ldrsh $Rt, [$Rn, $Rm]";
      OpMap.push_back(std::make_pair("Rm", 2));
      OpMap.push_back(std::make_pair("Rn", 1));
      OpMap.push_back(std::make_pair("Rt", 0));
      break;
    }
    return false;
  case AArch64::LDRSWx:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64xspRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LDRSWx GPR64:$Rt, GPR64xsp:$Rn, 0)
      AsmString = "ldrsw $Rt, [$Rn]";
      OpMap.push_back(std::make_pair("Rn", 1));
      OpMap.push_back(std::make_pair("Rt", 0));
      break;
    }
    return false;
  case AArch64::LDRSWx_Xm_RegOffset:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64xspRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 2) {
      // (LDRSWx_Xm_RegOffset GPR64:$Rt, GPR64xsp:$Rn, GPR64:$Rm, 2)
      AsmString = "ldrsw $Rt, [$Rn, $Rm]";
      OpMap.push_back(std::make_pair("Rm", 2));
      OpMap.push_back(std::make_pair("Rn", 1));
      OpMap.push_back(std::make_pair("Rt", 0));
      break;
    }
    return false;
  case AArch64::LDTRSBw:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64xspRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LDTRSBw GPR32:$Rt, GPR64xsp:$Rn, 0)
      AsmString = "ldtrsb $Rt, [$Rn]";
      OpMap.push_back(std::make_pair("Rn", 1));
      OpMap.push_back(std::make_pair("Rt", 0));
      break;
    }
    return false;
  case AArch64::LDTRSBx:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64xspRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LDTRSBx GPR64:$Rt, GPR64xsp:$Rn, 0)
      AsmString = "ldtrsb $Rt, [$Rn]";
      OpMap.push_back(std::make_pair("Rn", 1));
      OpMap.push_back(std::make_pair("Rt", 0));
      break;
    }
    return false;
  case AArch64::LDTRSHw:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64xspRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LDTRSHw GPR32:$Rt, GPR64xsp:$Rn, 0)
      AsmString = "ldtrsh $Rt, [$Rn]";
      OpMap.push_back(std::make_pair("Rn", 1));
      OpMap.push_back(std::make_pair("Rt", 0));
      break;
    }
    return false;
  case AArch64::LDTRSHx:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64xspRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LDTRSHx GPR64:$Rt, GPR64xsp:$Rn, 0)
      AsmString = "ldtrsh $Rt, [$Rn]";
      OpMap.push_back(std::make_pair("Rn", 1));
      OpMap.push_back(std::make_pair("Rt", 0));
      break;
    }
    return false;
  case AArch64::LDTRSWx:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64xspRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LDTRSWx GPR64:$Rt, GPR64xsp:$Rn, 0)
      AsmString = "ldtrsw $Rt, [$Rn]";
      OpMap.push_back(std::make_pair("Rn", 1));
      OpMap.push_back(std::make_pair("Rt", 0));
      break;
    }
    return false;
  case AArch64::LDURSWx:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64xspRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LDURSWx GPR64:$Rt, GPR64xsp:$Rn, 0)
      AsmString = "ldursw $Rt, [$Rn]";
      OpMap.push_back(std::make_pair("Rn", 1));
      OpMap.push_back(std::make_pair("Rt", 0));
      break;
    }
    return false;
  case AArch64::LS16_LDR:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64xspRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LS16_LDR GPR32:$Rt, GPR64xsp:$Rn, 0)
      AsmString = "ldrh $Rt, [$Rn]";
      OpMap.push_back(std::make_pair("Rn", 1));
      OpMap.push_back(std::make_pair("Rt", 0));
      break;
    }
    return false;
  case AArch64::LS16_LDUR:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64xspRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LS16_LDUR GPR32:$Rt, GPR64xsp:$Rn, 0)
      AsmString = "ldurh $Rt, [$Rn]";
      OpMap.push_back(std::make_pair("Rn", 1));
      OpMap.push_back(std::make_pair("Rt", 0));
      break;
    }
    return false;
  case AArch64::LS16_STR:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64xspRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LS16_STR GPR32:$Rt, GPR64xsp:$Rn, 0)
      AsmString = "strh $Rt, [$Rn]";
      OpMap.push_back(std::make_pair("Rn", 1));
      OpMap.push_back(std::make_pair("Rt", 0));
      break;
    }
    return false;
  case AArch64::LS16_STUR:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64xspRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LS16_STUR GPR32:$Rt, GPR64xsp:$Rn, 0)
      AsmString = "sturh $Rt, [$Rn]";
      OpMap.push_back(std::make_pair("Rn", 1));
      OpMap.push_back(std::make_pair("Rt", 0));
      break;
    }
    return false;
  case AArch64::LS16_UnPriv_LDR:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64xspRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LS16_UnPriv_LDR GPR32:$Rt, GPR64xsp:$Rn, 0)
      AsmString = "ldtrh $Rt, [$Rn]";
      OpMap.push_back(std::make_pair("Rn", 1));
      OpMap.push_back(std::make_pair("Rt", 0));
      break;
    }
    return false;
  case AArch64::LS16_UnPriv_STR:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64xspRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LS16_UnPriv_STR GPR32:$Rt, GPR64xsp:$Rn, 0)
      AsmString = "sttrh $Rt, [$Rn]";
      OpMap.push_back(std::make_pair("Rn", 1));
      OpMap.push_back(std::make_pair("Rt", 0));
      break;
    }
    return false;
  case AArch64::LS16_Xm_RegOffset_LDR:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64xspRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 2) {
      // (LS16_Xm_RegOffset_LDR GPR32:$Rt, GPR64xsp:$Rn, GPR64:$Rm, 2)
      AsmString = "ldrh $Rt, [$Rn, $Rm]";
      OpMap.push_back(std::make_pair("Rm", 2));
      OpMap.push_back(std::make_pair("Rn", 1));
      OpMap.push_back(std::make_pair("Rt", 0));
      break;
    }
    return false;
  case AArch64::LS16_Xm_RegOffset_STR:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64xspRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 2) {
      // (LS16_Xm_RegOffset_STR GPR32:$Rt, GPR64xsp:$Rn, GPR64:$Rm, 2)
      AsmString = "strh $Rt, [$Rn, $Rm]";
      OpMap.push_back(std::make_pair("Rm", 2));
      OpMap.push_back(std::make_pair("Rn", 1));
      OpMap.push_back(std::make_pair("Rt", 0));
      break;
    }
    return false;
  case AArch64::LS32_LDR:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64xspRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LS32_LDR GPR32:$Rt, GPR64xsp:$Rn, 0)
      AsmString = "ldr $Rt, [$Rn]";
      OpMap.push_back(std::make_pair("Rn", 1));
      OpMap.push_back(std::make_pair("Rt", 0));
      break;
    }
    return false;
  case AArch64::LS32_LDUR:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64xspRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LS32_LDUR GPR32:$Rt, GPR64xsp:$Rn, 0)
      AsmString = "ldur $Rt, [$Rn]";
      OpMap.push_back(std::make_pair("Rn", 1));
      OpMap.push_back(std::make_pair("Rt", 0));
      break;
    }
    return false;
  case AArch64::LS32_STR:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64xspRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LS32_STR GPR32:$Rt, GPR64xsp:$Rn, 0)
      AsmString = "str $Rt, [$Rn]";
      OpMap.push_back(std::make_pair("Rn", 1));
      OpMap.push_back(std::make_pair("Rt", 0));
      break;
    }
    return false;
  case AArch64::LS32_STUR:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64xspRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LS32_STUR GPR32:$Rt, GPR64xsp:$Rn, 0)
      AsmString = "stur $Rt, [$Rn]";
      OpMap.push_back(std::make_pair("Rn", 1));
      OpMap.push_back(std::make_pair("Rt", 0));
      break;
    }
    return false;
  case AArch64::LS32_UnPriv_LDR:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64xspRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LS32_UnPriv_LDR GPR32:$Rt, GPR64xsp:$Rn, 0)
      AsmString = "ldtr $Rt, [$Rn]";
      OpMap.push_back(std::make_pair("Rn", 1));
      OpMap.push_back(std::make_pair("Rt", 0));
      break;
    }
    return false;
  case AArch64::LS32_UnPriv_STR:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64xspRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LS32_UnPriv_STR GPR32:$Rt, GPR64xsp:$Rn, 0)
      AsmString = "sttr $Rt, [$Rn]";
      OpMap.push_back(std::make_pair("Rn", 1));
      OpMap.push_back(std::make_pair("Rt", 0));
      break;
    }
    return false;
  case AArch64::LS32_Xm_RegOffset_LDR:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64xspRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 2) {
      // (LS32_Xm_RegOffset_LDR GPR32:$Rt, GPR64xsp:$Rn, GPR64:$Rm, 2)
      AsmString = "ldr $Rt, [$Rn, $Rm]";
      OpMap.push_back(std::make_pair("Rm", 2));
      OpMap.push_back(std::make_pair("Rn", 1));
      OpMap.push_back(std::make_pair("Rt", 0));
      break;
    }
    return false;
  case AArch64::LS32_Xm_RegOffset_STR:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64xspRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 2) {
      // (LS32_Xm_RegOffset_STR GPR32:$Rt, GPR64xsp:$Rn, GPR64:$Rm, 2)
      AsmString = "str $Rt, [$Rn, $Rm]";
      OpMap.push_back(std::make_pair("Rm", 2));
      OpMap.push_back(std::make_pair("Rn", 1));
      OpMap.push_back(std::make_pair("Rt", 0));
      break;
    }
    return false;
  case AArch64::LS64_LDR:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64xspRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LS64_LDR GPR64:$Rt, GPR64xsp:$Rn, 0)
      AsmString = "ldr $Rt, [$Rn]";
      OpMap.push_back(std::make_pair("Rn", 1));
      OpMap.push_back(std::make_pair("Rt", 0));
      break;
    }
    return false;
  case AArch64::LS64_LDUR:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64xspRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LS64_LDUR GPR64:$Rt, GPR64xsp:$Rn, 0)
      AsmString = "ldur $Rt, [$Rn]";
      OpMap.push_back(std::make_pair("Rn", 1));
      OpMap.push_back(std::make_pair("Rt", 0));
      break;
    }
    return false;
  case AArch64::LS64_STR:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64xspRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LS64_STR GPR64:$Rt, GPR64xsp:$Rn, 0)
      AsmString = "str $Rt, [$Rn]";
      OpMap.push_back(std::make_pair("Rn", 1));
      OpMap.push_back(std::make_pair("Rt", 0));
      break;
    }
    return false;
  case AArch64::LS64_STUR:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64xspRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LS64_STUR GPR64:$Rt, GPR64xsp:$Rn, 0)
      AsmString = "stur $Rt, [$Rn]";
      OpMap.push_back(std::make_pair("Rn", 1));
      OpMap.push_back(std::make_pair("Rt", 0));
      break;
    }
    return false;
  case AArch64::LS64_UnPriv_LDR:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64xspRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LS64_UnPriv_LDR GPR64:$Rt, GPR64xsp:$Rn, 0)
      AsmString = "ldtr $Rt, [$Rn]";
      OpMap.push_back(std::make_pair("Rn", 1));
      OpMap.push_back(std::make_pair("Rt", 0));
      break;
    }
    return false;
  case AArch64::LS64_UnPriv_STR:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64xspRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LS64_UnPriv_STR GPR64:$Rt, GPR64xsp:$Rn, 0)
      AsmString = "sttr $Rt, [$Rn]";
      OpMap.push_back(std::make_pair("Rn", 1));
      OpMap.push_back(std::make_pair("Rt", 0));
      break;
    }
    return false;
  case AArch64::LS64_Xm_RegOffset_LDR:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64xspRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 2) {
      // (LS64_Xm_RegOffset_LDR GPR64:$Rt, GPR64xsp:$Rn, GPR64:$Rm, 2)
      AsmString = "ldr $Rt, [$Rn, $Rm]";
      OpMap.push_back(std::make_pair("Rm", 2));
      OpMap.push_back(std::make_pair("Rn", 1));
      OpMap.push_back(std::make_pair("Rt", 0));
      break;
    }
    return false;
  case AArch64::LS64_Xm_RegOffset_STR:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64xspRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 2) {
      // (LS64_Xm_RegOffset_STR GPR64:$Rt, GPR64xsp:$Rn, GPR64:$Rm, 2)
      AsmString = "str $Rt, [$Rn, $Rm]";
      OpMap.push_back(std::make_pair("Rm", 2));
      OpMap.push_back(std::make_pair("Rn", 1));
      OpMap.push_back(std::make_pair("Rt", 0));
      break;
    }
    return false;
  case AArch64::LS8_LDR:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64xspRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LS8_LDR GPR32:$Rt, GPR64xsp:$Rn, 0)
      AsmString = "ldrb $Rt, [$Rn]";
      OpMap.push_back(std::make_pair("Rn", 1));
      OpMap.push_back(std::make_pair("Rt", 0));
      break;
    }
    return false;
  case AArch64::LS8_LDUR:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64xspRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LS8_LDUR GPR32:$Rt, GPR64xsp:$Rn, 0)
      AsmString = "ldurb $Rt, [$Rn]";
      OpMap.push_back(std::make_pair("Rn", 1));
      OpMap.push_back(std::make_pair("Rt", 0));
      break;
    }
    return false;
  case AArch64::LS8_STR:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64xspRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LS8_STR GPR32:$Rt, GPR64xsp:$Rn, 0)
      AsmString = "strb $Rt, [$Rn]";
      OpMap.push_back(std::make_pair("Rn", 1));
      OpMap.push_back(std::make_pair("Rt", 0));
      break;
    }
    return false;
  case AArch64::LS8_STUR:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64xspRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LS8_STUR GPR32:$Rt, GPR64xsp:$Rn, 0)
      AsmString = "sturb $Rt, [$Rn]";
      OpMap.push_back(std::make_pair("Rn", 1));
      OpMap.push_back(std::make_pair("Rt", 0));
      break;
    }
    return false;
  case AArch64::LS8_UnPriv_LDR:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64xspRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LS8_UnPriv_LDR GPR32:$Rt, GPR64xsp:$Rn, 0)
      AsmString = "ldtrb $Rt, [$Rn]";
      OpMap.push_back(std::make_pair("Rn", 1));
      OpMap.push_back(std::make_pair("Rt", 0));
      break;
    }
    return false;
  case AArch64::LS8_UnPriv_STR:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64xspRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LS8_UnPriv_STR GPR32:$Rt, GPR64xsp:$Rn, 0)
      AsmString = "sttrb $Rt, [$Rn]";
      OpMap.push_back(std::make_pair("Rn", 1));
      OpMap.push_back(std::make_pair("Rt", 0));
      break;
    }
    return false;
  case AArch64::LS8_Xm_RegOffset_LDR:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64xspRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 2) {
      // (LS8_Xm_RegOffset_LDR GPR32:$Rt, GPR64xsp:$Rn, GPR64:$Rm, 2)
      AsmString = "ldrb $Rt, [$Rn, $Rm]";
      OpMap.push_back(std::make_pair("Rm", 2));
      OpMap.push_back(std::make_pair("Rn", 1));
      OpMap.push_back(std::make_pair("Rt", 0));
      break;
    }
    return false;
  case AArch64::LS8_Xm_RegOffset_STR:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64xspRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 2) {
      // (LS8_Xm_RegOffset_STR GPR32:$Rt, GPR64xsp:$Rn, GPR64:$Rm, 2)
      AsmString = "strb $Rt, [$Rn, $Rm]";
      OpMap.push_back(std::make_pair("Rm", 2));
      OpMap.push_back(std::make_pair("Rn", 1));
      OpMap.push_back(std::make_pair("Rt", 0));
      break;
    }
    return false;
  case AArch64::LSFP128_LDR:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64xspRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LSFP128_LDR FPR128:$Rt, GPR64xsp:$Rn, 0)
      AsmString = "ldr $Rt, [$Rn]";
      OpMap.push_back(std::make_pair("Rn", 1));
      OpMap.push_back(std::make_pair("Rt", 0));
      break;
    }
    return false;
  case AArch64::LSFP128_LDUR:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64xspRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LSFP128_LDUR FPR128:$Rt, GPR64xsp:$Rn, 0)
      AsmString = "ldur $Rt, [$Rn]";
      OpMap.push_back(std::make_pair("Rn", 1));
      OpMap.push_back(std::make_pair("Rt", 0));
      break;
    }
    return false;
  case AArch64::LSFP128_STR:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64xspRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LSFP128_STR FPR128:$Rt, GPR64xsp:$Rn, 0)
      AsmString = "str $Rt, [$Rn]";
      OpMap.push_back(std::make_pair("Rn", 1));
      OpMap.push_back(std::make_pair("Rt", 0));
      break;
    }
    return false;
  case AArch64::LSFP128_STUR:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64xspRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LSFP128_STUR FPR128:$Rt, GPR64xsp:$Rn, 0)
      AsmString = "stur $Rt, [$Rn]";
      OpMap.push_back(std::make_pair("Rn", 1));
      OpMap.push_back(std::make_pair("Rt", 0));
      break;
    }
    return false;
  case AArch64::LSFP128_Xm_RegOffset_LDR:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64xspRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 2) {
      // (LSFP128_Xm_RegOffset_LDR FPR128:$Rt, GPR64xsp:$Rn, GPR64:$Rm, 2)
      AsmString = "ldr $Rt, [$Rn, $Rm]";
      OpMap.push_back(std::make_pair("Rm", 2));
      OpMap.push_back(std::make_pair("Rn", 1));
      OpMap.push_back(std::make_pair("Rt", 0));
      break;
    }
    return false;
  case AArch64::LSFP128_Xm_RegOffset_STR:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64xspRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 2) {
      // (LSFP128_Xm_RegOffset_STR FPR128:$Rt, GPR64xsp:$Rn, GPR64:$Rm, 2)
      AsmString = "str $Rt, [$Rn, $Rm]";
      OpMap.push_back(std::make_pair("Rm", 2));
      OpMap.push_back(std::make_pair("Rn", 1));
      OpMap.push_back(std::make_pair("Rt", 0));
      break;
    }
    return false;
  case AArch64::LSFP16_LDR:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR16RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64xspRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LSFP16_LDR FPR16:$Rt, GPR64xsp:$Rn, 0)
      AsmString = "ldr $Rt, [$Rn]";
      OpMap.push_back(std::make_pair("Rn", 1));
      OpMap.push_back(std::make_pair("Rt", 0));
      break;
    }
    return false;
  case AArch64::LSFP16_LDUR:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR16RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64xspRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LSFP16_LDUR FPR16:$Rt, GPR64xsp:$Rn, 0)
      AsmString = "ldur $Rt, [$Rn]";
      OpMap.push_back(std::make_pair("Rn", 1));
      OpMap.push_back(std::make_pair("Rt", 0));
      break;
    }
    return false;
  case AArch64::LSFP16_STR:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR16RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64xspRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LSFP16_STR FPR16:$Rt, GPR64xsp:$Rn, 0)
      AsmString = "str $Rt, [$Rn]";
      OpMap.push_back(std::make_pair("Rn", 1));
      OpMap.push_back(std::make_pair("Rt", 0));
      break;
    }
    return false;
  case AArch64::LSFP16_STUR:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR16RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64xspRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LSFP16_STUR FPR16:$Rt, GPR64xsp:$Rn, 0)
      AsmString = "stur $Rt, [$Rn]";
      OpMap.push_back(std::make_pair("Rn", 1));
      OpMap.push_back(std::make_pair("Rt", 0));
      break;
    }
    return false;
  case AArch64::LSFP16_Xm_RegOffset_LDR:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR16RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64xspRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 2) {
      // (LSFP16_Xm_RegOffset_LDR FPR16:$Rt, GPR64xsp:$Rn, GPR64:$Rm, 2)
      AsmString = "ldr $Rt, [$Rn, $Rm]";
      OpMap.push_back(std::make_pair("Rm", 2));
      OpMap.push_back(std::make_pair("Rn", 1));
      OpMap.push_back(std::make_pair("Rt", 0));
      break;
    }
    return false;
  case AArch64::LSFP16_Xm_RegOffset_STR:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR16RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64xspRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 2) {
      // (LSFP16_Xm_RegOffset_STR FPR16:$Rt, GPR64xsp:$Rn, GPR64:$Rm, 2)
      AsmString = "str $Rt, [$Rn, $Rm]";
      OpMap.push_back(std::make_pair("Rm", 2));
      OpMap.push_back(std::make_pair("Rn", 1));
      OpMap.push_back(std::make_pair("Rt", 0));
      break;
    }
    return false;
  case AArch64::LSFP32_LDR:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64xspRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LSFP32_LDR FPR32:$Rt, GPR64xsp:$Rn, 0)
      AsmString = "ldr $Rt, [$Rn]";
      OpMap.push_back(std::make_pair("Rn", 1));
      OpMap.push_back(std::make_pair("Rt", 0));
      break;
    }
    return false;
  case AArch64::LSFP32_LDUR:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64xspRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LSFP32_LDUR FPR32:$Rt, GPR64xsp:$Rn, 0)
      AsmString = "ldur $Rt, [$Rn]";
      OpMap.push_back(std::make_pair("Rn", 1));
      OpMap.push_back(std::make_pair("Rt", 0));
      break;
    }
    return false;
  case AArch64::LSFP32_STR:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64xspRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LSFP32_STR FPR32:$Rt, GPR64xsp:$Rn, 0)
      AsmString = "str $Rt, [$Rn]";
      OpMap.push_back(std::make_pair("Rn", 1));
      OpMap.push_back(std::make_pair("Rt", 0));
      break;
    }
    return false;
  case AArch64::LSFP32_STUR:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64xspRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LSFP32_STUR FPR32:$Rt, GPR64xsp:$Rn, 0)
      AsmString = "stur $Rt, [$Rn]";
      OpMap.push_back(std::make_pair("Rn", 1));
      OpMap.push_back(std::make_pair("Rt", 0));
      break;
    }
    return false;
  case AArch64::LSFP32_Xm_RegOffset_LDR:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64xspRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 2) {
      // (LSFP32_Xm_RegOffset_LDR FPR32:$Rt, GPR64xsp:$Rn, GPR64:$Rm, 2)
      AsmString = "ldr $Rt, [$Rn, $Rm]";
      OpMap.push_back(std::make_pair("Rm", 2));
      OpMap.push_back(std::make_pair("Rn", 1));
      OpMap.push_back(std::make_pair("Rt", 0));
      break;
    }
    return false;
  case AArch64::LSFP32_Xm_RegOffset_STR:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64xspRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 2) {
      // (LSFP32_Xm_RegOffset_STR FPR32:$Rt, GPR64xsp:$Rn, GPR64:$Rm, 2)
      AsmString = "str $Rt, [$Rn, $Rm]";
      OpMap.push_back(std::make_pair("Rm", 2));
      OpMap.push_back(std::make_pair("Rn", 1));
      OpMap.push_back(std::make_pair("Rt", 0));
      break;
    }
    return false;
  case AArch64::LSFP64_LDR:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64xspRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LSFP64_LDR FPR64:$Rt, GPR64xsp:$Rn, 0)
      AsmString = "ldr $Rt, [$Rn]";
      OpMap.push_back(std::make_pair("Rn", 1));
      OpMap.push_back(std::make_pair("Rt", 0));
      break;
    }
    return false;
  case AArch64::LSFP64_LDUR:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64xspRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LSFP64_LDUR FPR64:$Rt, GPR64xsp:$Rn, 0)
      AsmString = "ldur $Rt, [$Rn]";
      OpMap.push_back(std::make_pair("Rn", 1));
      OpMap.push_back(std::make_pair("Rt", 0));
      break;
    }
    return false;
  case AArch64::LSFP64_STR:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64xspRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LSFP64_STR FPR64:$Rt, GPR64xsp:$Rn, 0)
      AsmString = "str $Rt, [$Rn]";
      OpMap.push_back(std::make_pair("Rn", 1));
      OpMap.push_back(std::make_pair("Rt", 0));
      break;
    }
    return false;
  case AArch64::LSFP64_STUR:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64xspRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LSFP64_STUR FPR64:$Rt, GPR64xsp:$Rn, 0)
      AsmString = "stur $Rt, [$Rn]";
      OpMap.push_back(std::make_pair("Rn", 1));
      OpMap.push_back(std::make_pair("Rt", 0));
      break;
    }
    return false;
  case AArch64::LSFP64_Xm_RegOffset_LDR:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64xspRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 2) {
      // (LSFP64_Xm_RegOffset_LDR FPR64:$Rt, GPR64xsp:$Rn, GPR64:$Rm, 2)
      AsmString = "ldr $Rt, [$Rn, $Rm]";
      OpMap.push_back(std::make_pair("Rm", 2));
      OpMap.push_back(std::make_pair("Rn", 1));
      OpMap.push_back(std::make_pair("Rt", 0));
      break;
    }
    return false;
  case AArch64::LSFP64_Xm_RegOffset_STR:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64xspRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 2) {
      // (LSFP64_Xm_RegOffset_STR FPR64:$Rt, GPR64xsp:$Rn, GPR64:$Rm, 2)
      AsmString = "str $Rt, [$Rn, $Rm]";
      OpMap.push_back(std::make_pair("Rm", 2));
      OpMap.push_back(std::make_pair("Rn", 1));
      OpMap.push_back(std::make_pair("Rt", 0));
      break;
    }
    return false;
  case AArch64::LSFP8_LDR:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR8RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64xspRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LSFP8_LDR FPR8:$Rt, GPR64xsp:$Rn, 0)
      AsmString = "ldr $Rt, [$Rn]";
      OpMap.push_back(std::make_pair("Rn", 1));
      OpMap.push_back(std::make_pair("Rt", 0));
      break;
    }
    return false;
  case AArch64::LSFP8_LDUR:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR8RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64xspRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LSFP8_LDUR FPR8:$Rt, GPR64xsp:$Rn, 0)
      AsmString = "ldur $Rt, [$Rn]";
      OpMap.push_back(std::make_pair("Rn", 1));
      OpMap.push_back(std::make_pair("Rt", 0));
      break;
    }
    return false;
  case AArch64::LSFP8_STR:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR8RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64xspRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LSFP8_STR FPR8:$Rt, GPR64xsp:$Rn, 0)
      AsmString = "str $Rt, [$Rn]";
      OpMap.push_back(std::make_pair("Rn", 1));
      OpMap.push_back(std::make_pair("Rt", 0));
      break;
    }
    return false;
  case AArch64::LSFP8_STUR:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR8RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64xspRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LSFP8_STUR FPR8:$Rt, GPR64xsp:$Rn, 0)
      AsmString = "stur $Rt, [$Rn]";
      OpMap.push_back(std::make_pair("Rn", 1));
      OpMap.push_back(std::make_pair("Rt", 0));
      break;
    }
    return false;
  case AArch64::LSFP8_Xm_RegOffset_LDR:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR8RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64xspRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 2) {
      // (LSFP8_Xm_RegOffset_LDR FPR8:$Rt, GPR64xsp:$Rn, GPR64:$Rm, 2)
      AsmString = "ldr $Rt, [$Rn, $Rm]";
      OpMap.push_back(std::make_pair("Rm", 2));
      OpMap.push_back(std::make_pair("Rn", 1));
      OpMap.push_back(std::make_pair("Rt", 0));
      break;
    }
    return false;
  case AArch64::LSFP8_Xm_RegOffset_STR:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR8RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64xspRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 2) {
      // (LSFP8_Xm_RegOffset_STR FPR8:$Rt, GPR64xsp:$Rn, GPR64:$Rm, 2)
      AsmString = "str $Rt, [$Rn, $Rm]";
      OpMap.push_back(std::make_pair("Rm", 2));
      OpMap.push_back(std::make_pair("Rn", 1));
      OpMap.push_back(std::make_pair("Rt", 0));
      break;
    }
    return false;
  case AArch64::LSFPPair128_LDR:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64xspRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (LSFPPair128_LDR FPR128:$Rt, FPR128:$Rt2, GPR64xsp:$Rn, 0)
      AsmString = "ldp $Rt, $Rt2, [$Rn]";
      OpMap.push_back(std::make_pair("Rn", 2));
      OpMap.push_back(std::make_pair("Rt", 0));
      OpMap.push_back(std::make_pair("Rt2", 1));
      break;
    }
    return false;
  case AArch64::LSFPPair128_NonTemp_LDR:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64xspRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (LSFPPair128_NonTemp_LDR FPR128:$Rt, FPR128:$Rt2, GPR64xsp:$Rn, 0)
      AsmString = "ldnp $Rt, $Rt2, [$Rn]";
      OpMap.push_back(std::make_pair("Rn", 2));
      OpMap.push_back(std::make_pair("Rt", 0));
      OpMap.push_back(std::make_pair("Rt2", 1));
      break;
    }
    return false;
  case AArch64::LSFPPair128_NonTemp_STR:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64xspRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (LSFPPair128_NonTemp_STR FPR128:$Rt, FPR128:$Rt2, GPR64xsp:$Rn, 0)
      AsmString = "stnp $Rt, $Rt2, [$Rn]";
      OpMap.push_back(std::make_pair("Rn", 2));
      OpMap.push_back(std::make_pair("Rt", 0));
      OpMap.push_back(std::make_pair("Rt2", 1));
      break;
    }
    return false;
  case AArch64::LSFPPair128_STR:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64xspRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (LSFPPair128_STR FPR128:$Rt, FPR128:$Rt2, GPR64xsp:$Rn, 0)
      AsmString = "stp $Rt, $Rt2, [$Rn]";
      OpMap.push_back(std::make_pair("Rn", 2));
      OpMap.push_back(std::make_pair("Rt", 0));
      OpMap.push_back(std::make_pair("Rt2", 1));
      break;
    }
    return false;
  case AArch64::LSFPPair32_LDR:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64xspRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (LSFPPair32_LDR FPR32:$Rt, FPR32:$Rt2, GPR64xsp:$Rn, 0)
      AsmString = "ldp $Rt, $Rt2, [$Rn]";
      OpMap.push_back(std::make_pair("Rn", 2));
      OpMap.push_back(std::make_pair("Rt", 0));
      OpMap.push_back(std::make_pair("Rt2", 1));
      break;
    }
    return false;
  case AArch64::LSFPPair32_NonTemp_LDR:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64xspRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (LSFPPair32_NonTemp_LDR FPR32:$Rt, FPR32:$Rt2, GPR64xsp:$Rn, 0)
      AsmString = "ldnp $Rt, $Rt2, [$Rn]";
      OpMap.push_back(std::make_pair("Rn", 2));
      OpMap.push_back(std::make_pair("Rt", 0));
      OpMap.push_back(std::make_pair("Rt2", 1));
      break;
    }
    return false;
  case AArch64::LSFPPair32_NonTemp_STR:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64xspRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (LSFPPair32_NonTemp_STR FPR32:$Rt, FPR32:$Rt2, GPR64xsp:$Rn, 0)
      AsmString = "stnp $Rt, $Rt2, [$Rn]";
      OpMap.push_back(std::make_pair("Rn", 2));
      OpMap.push_back(std::make_pair("Rt", 0));
      OpMap.push_back(std::make_pair("Rt2", 1));
      break;
    }
    return false;
  case AArch64::LSFPPair32_STR:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64xspRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (LSFPPair32_STR FPR32:$Rt, FPR32:$Rt2, GPR64xsp:$Rn, 0)
      AsmString = "stp $Rt, $Rt2, [$Rn]";
      OpMap.push_back(std::make_pair("Rn", 2));
      OpMap.push_back(std::make_pair("Rt", 0));
      OpMap.push_back(std::make_pair("Rt2", 1));
      break;
    }
    return false;
  case AArch64::LSFPPair64_LDR:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64xspRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (LSFPPair64_LDR FPR64:$Rt, FPR64:$Rt2, GPR64xsp:$Rn, 0)
      AsmString = "ldp $Rt, $Rt2, [$Rn]";
      OpMap.push_back(std::make_pair("Rn", 2));
      OpMap.push_back(std::make_pair("Rt", 0));
      OpMap.push_back(std::make_pair("Rt2", 1));
      break;
    }
    return false;
  case AArch64::LSFPPair64_NonTemp_LDR:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64xspRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (LSFPPair64_NonTemp_LDR FPR64:$Rt, FPR64:$Rt2, GPR64xsp:$Rn, 0)
      AsmString = "ldnp $Rt, $Rt2, [$Rn]";
      OpMap.push_back(std::make_pair("Rn", 2));
      OpMap.push_back(std::make_pair("Rt", 0));
      OpMap.push_back(std::make_pair("Rt2", 1));
      break;
    }
    return false;
  case AArch64::LSFPPair64_NonTemp_STR:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64xspRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (LSFPPair64_NonTemp_STR FPR64:$Rt, FPR64:$Rt2, GPR64xsp:$Rn, 0)
      AsmString = "stnp $Rt, $Rt2, [$Rn]";
      OpMap.push_back(std::make_pair("Rn", 2));
      OpMap.push_back(std::make_pair("Rt", 0));
      OpMap.push_back(std::make_pair("Rt2", 1));
      break;
    }
    return false;
  case AArch64::LSFPPair64_STR:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64xspRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (LSFPPair64_STR FPR64:$Rt, FPR64:$Rt2, GPR64xsp:$Rn, 0)
      AsmString = "stp $Rt, $Rt2, [$Rn]";
      OpMap.push_back(std::make_pair("Rn", 2));
      OpMap.push_back(std::make_pair("Rt", 0));
      OpMap.push_back(std::make_pair("Rt2", 1));
      break;
    }
    return false;
  case AArch64::LSPair32_LDR:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64xspRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (LSPair32_LDR GPR32:$Rt, GPR32:$Rt2, GPR64xsp:$Rn, 0)
      AsmString = "ldp $Rt, $Rt2, [$Rn]";
      OpMap.push_back(std::make_pair("Rn", 2));
      OpMap.push_back(std::make_pair("Rt", 0));
      OpMap.push_back(std::make_pair("Rt2", 1));
      break;
    }
    return false;
  case AArch64::LSPair32_NonTemp_LDR:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64xspRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (LSPair32_NonTemp_LDR GPR32:$Rt, GPR32:$Rt2, GPR64xsp:$Rn, 0)
      AsmString = "ldnp $Rt, $Rt2, [$Rn]";
      OpMap.push_back(std::make_pair("Rn", 2));
      OpMap.push_back(std::make_pair("Rt", 0));
      OpMap.push_back(std::make_pair("Rt2", 1));
      break;
    }
    return false;
  case AArch64::LSPair32_NonTemp_STR:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64xspRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (LSPair32_NonTemp_STR GPR32:$Rt, GPR32:$Rt2, GPR64xsp:$Rn, 0)
      AsmString = "stnp $Rt, $Rt2, [$Rn]";
      OpMap.push_back(std::make_pair("Rn", 2));
      OpMap.push_back(std::make_pair("Rt", 0));
      OpMap.push_back(std::make_pair("Rt2", 1));
      break;
    }
    return false;
  case AArch64::LSPair32_STR:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64xspRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (LSPair32_STR GPR32:$Rt, GPR32:$Rt2, GPR64xsp:$Rn, 0)
      AsmString = "stp $Rt, $Rt2, [$Rn]";
      OpMap.push_back(std::make_pair("Rn", 2));
      OpMap.push_back(std::make_pair("Rt", 0));
      OpMap.push_back(std::make_pair("Rt2", 1));
      break;
    }
    return false;
  case AArch64::LSPair64_LDR:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64xspRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (LSPair64_LDR GPR64:$Rt, GPR64:$Rt2, GPR64xsp:$Rn, 0)
      AsmString = "ldp $Rt, $Rt2, [$Rn]";
      OpMap.push_back(std::make_pair("Rn", 2));
      OpMap.push_back(std::make_pair("Rt", 0));
      OpMap.push_back(std::make_pair("Rt2", 1));
      break;
    }
    return false;
  case AArch64::LSPair64_NonTemp_LDR:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64xspRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (LSPair64_NonTemp_LDR GPR64:$Rt, GPR64:$Rt2, GPR64xsp:$Rn, 0)
      AsmString = "ldnp $Rt, $Rt2, [$Rn]";
      OpMap.push_back(std::make_pair("Rn", 2));
      OpMap.push_back(std::make_pair("Rt", 0));
      OpMap.push_back(std::make_pair("Rt2", 1));
      break;
    }
    return false;
  case AArch64::LSPair64_NonTemp_STR:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64xspRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (LSPair64_NonTemp_STR GPR64:$Rt, GPR64:$Rt2, GPR64xsp:$Rn, 0)
      AsmString = "stnp $Rt, $Rt2, [$Rn]";
      OpMap.push_back(std::make_pair("Rn", 2));
      OpMap.push_back(std::make_pair("Rt", 0));
      OpMap.push_back(std::make_pair("Rt2", 1));
      break;
    }
    return false;
  case AArch64::LSPair64_STR:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64xspRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (LSPair64_STR GPR64:$Rt, GPR64:$Rt2, GPR64xsp:$Rn, 0)
      AsmString = "stp $Rt, $Rt2, [$Rn]";
      OpMap.push_back(std::make_pair("Rn", 2));
      OpMap.push_back(std::make_pair("Rt", 0));
      OpMap.push_back(std::make_pair("Rt2", 1));
      break;
    }
    return false;
  case AArch64::MADDwwww:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::WZR) {
      // (MADDwwww GPR32:$Rd, GPR32:$Rn, GPR32:$Rm, WZR)
      AsmString = "mul $Rd, $Rn, $Rm";
      OpMap.push_back(std::make_pair("Rd", 0));
      OpMap.push_back(std::make_pair("Rm", 2));
      OpMap.push_back(std::make_pair("Rn", 1));
      break;
    }
    return false;
  case AArch64::MADDxxxx:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR) {
      // (MADDxxxx GPR64:$Rd, GPR64:$Rn, GPR64:$Rm, XZR)
      AsmString = "mul $Rd, $Rn, $Rm";
      OpMap.push_back(std::make_pair("Rd", 0));
      OpMap.push_back(std::make_pair("Rm", 2));
      OpMap.push_back(std::make_pair("Rn", 1));
      break;
    }
    return false;
  case AArch64::MSUBwwww:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::WZR) {
      // (MSUBwwww GPR32:$Rd, GPR32:$Rn, GPR32:$Rm, WZR)
      AsmString = "mneg $Rd, $Rn, $Rm";
      OpMap.push_back(std::make_pair("Rd", 0));
      OpMap.push_back(std::make_pair("Rm", 2));
      OpMap.push_back(std::make_pair("Rn", 1));
      break;
    }
    return false;
  case AArch64::MSUBxxxx:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR) {
      // (MSUBxxxx GPR64:$Rd, GPR64:$Rn, GPR64:$Rm, XZR)
      AsmString = "mneg $Rd, $Rn, $Rm";
      OpMap.push_back(std::make_pair("Rd", 0));
      OpMap.push_back(std::make_pair("Rm", 2));
      OpMap.push_back(std::make_pair("Rn", 1));
      break;
    }
    return false;
  case AArch64::MVNww_lsl:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (MVNww_lsl GPR32:$Rn, GPR32:$Rm, 0)
      AsmString = "mvn $Rn, $Rm";
      OpMap.push_back(std::make_pair("Rm", 1));
      OpMap.push_back(std::make_pair("Rn", 0));
      break;
    }
    return false;
  case AArch64::MVNxx_lsl:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (MVNxx_lsl GPR64:$Rn, GPR64:$Rm, 0)
      AsmString = "mvn $Rn, $Rm";
      OpMap.push_back(std::make_pair("Rm", 1));
      OpMap.push_back(std::make_pair("Rn", 0));
      break;
    }
    return false;
  case AArch64::ORNwww_lsl:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (ORNwww_lsl GPR32:$Rd, GPR32:$Rn, GPR32:$Rm, 0)
      AsmString = "orn $Rd, $Rn, $Rm";
      OpMap.push_back(std::make_pair("Rd", 0));
      OpMap.push_back(std::make_pair("Rm", 2));
      OpMap.push_back(std::make_pair("Rn", 1));
      break;
    }
    return false;
  case AArch64::ORNxxx_lsl:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (ORNxxx_lsl GPR64:$Rd, GPR64:$Rn, GPR64:$Rm, 0)
      AsmString = "orn $Rd, $Rn, $Rm";
      OpMap.push_back(std::make_pair("Rd", 0));
      OpMap.push_back(std::make_pair("Rm", 2));
      OpMap.push_back(std::make_pair("Rn", 1));
      break;
    }
    return false;
  case AArch64::ORRvvv_16B:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::VPR128RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::VPR128RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MI->getOperand(2).getReg() == MI->getOperand(1).getReg()) {
      // (ORRvvv_16B VPR128:$Rd, VPR128:$Rn, VPR128:$Rn)
      AsmString = "mov $Rd.16b, $Rn.16b";
      OpMap.push_back(std::make_pair("Rd", 0));
      OpMap.push_back(std::make_pair("Rn", 1));
      break;
    }
    return false;
  case AArch64::ORRvvv_8B:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::VPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::VPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MI->getOperand(2).getReg() == MI->getOperand(1).getReg()) {
      // (ORRvvv_8B VPR64:$Rd, VPR64:$Rn, VPR64:$Rn)
      AsmString = "mov $Rd.8b, $Rn.8b";
      OpMap.push_back(std::make_pair("Rd", 0));
      OpMap.push_back(std::make_pair("Rn", 1));
      break;
    }
    return false;
  case AArch64::ORRwww_lsl:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).getReg() == AArch64::WZR &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (ORRwww_lsl GPR32:$Rd, WZR, GPR32:$Rm, 0)
      AsmString = "mov $Rd, $Rm";
      OpMap.push_back(std::make_pair("Rd", 0));
      OpMap.push_back(std::make_pair("Rm", 2));
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (ORRwww_lsl GPR32:$Rd, GPR32:$Rn, GPR32:$Rm, 0)
      AsmString = "orr $Rd, $Rn, $Rm";
      OpMap.push_back(std::make_pair("Rd", 0));
      OpMap.push_back(std::make_pair("Rm", 2));
      OpMap.push_back(std::make_pair("Rn", 1));
      break;
    }
    return false;
  case AArch64::ORRxxx_lsl:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).getReg() == AArch64::XZR &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (ORRxxx_lsl GPR64:$Rd, XZR, GPR64:$Rm, 0)
      AsmString = "mov $Rd, $Rm";
      OpMap.push_back(std::make_pair("Rd", 0));
      OpMap.push_back(std::make_pair("Rm", 2));
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (ORRxxx_lsl GPR64:$Rd, GPR64:$Rn, GPR64:$Rm, 0)
      AsmString = "orr $Rd, $Rn, $Rm";
      OpMap.push_back(std::make_pair("Rd", 0));
      OpMap.push_back(std::make_pair("Rm", 2));
      OpMap.push_back(std::make_pair("Rn", 1));
      break;
    }
    return false;
  case AArch64::RETx:
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).getReg() == AArch64::X30) {
      // (RETx X30)
      AsmString = "ret";
      break;
    }
    return false;
  case AArch64::SBCSwww:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).getReg() == AArch64::WZR &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg())) {
      // (SBCSwww GPR32:$Rd, WZR, GPR32:$Rm)
      AsmString = "ngcs $Rd, $Rm";
      OpMap.push_back(std::make_pair("Rd", 0));
      OpMap.push_back(std::make_pair("Rm", 2));
      break;
    }
    return false;
  case AArch64::SBCSxxx:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).getReg() == AArch64::XZR &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg())) {
      // (SBCSxxx GPR64:$Rd, XZR, GPR64:$Rm)
      AsmString = "ngcs $Rd, $Rm";
      OpMap.push_back(std::make_pair("Rd", 0));
      OpMap.push_back(std::make_pair("Rm", 2));
      break;
    }
    return false;
  case AArch64::SBCwww:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).getReg() == AArch64::WZR &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg())) {
      // (SBCwww GPR32:$Rd, WZR, GPR32:$Rm)
      AsmString = "ngc $Rd, $Rm";
      OpMap.push_back(std::make_pair("Rd", 0));
      OpMap.push_back(std::make_pair("Rm", 2));
      break;
    }
    return false;
  case AArch64::SBCxxx:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).getReg() == AArch64::XZR &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg())) {
      // (SBCxxx GPR64:$Rd, XZR, GPR64:$Rm)
      AsmString = "ngc $Rd, $Rm";
      OpMap.push_back(std::make_pair("Rd", 0));
      OpMap.push_back(std::make_pair("Rm", 2));
      break;
    }
    return false;
  case AArch64::SMADDLxwwx:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR) {
      // (SMADDLxwwx GPR64:$Rd, GPR32:$Rn, GPR32:$Rm, XZR)
      AsmString = "smull $Rd, $Rn, $Rm";
      OpMap.push_back(std::make_pair("Rd", 0));
      OpMap.push_back(std::make_pair("Rm", 2));
      OpMap.push_back(std::make_pair("Rn", 1));
      break;
    }
    return false;
  case AArch64::SMSUBLxwwx:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR) {
      // (SMSUBLxwwx GPR64:$Rd, GPR32:$Rn, GPR32:$Rm, XZR)
      AsmString = "smnegl $Rd, $Rn, $Rm";
      OpMap.push_back(std::make_pair("Rd", 0));
      OpMap.push_back(std::make_pair("Rm", 2));
      OpMap.push_back(std::make_pair("Rn", 1));
      break;
    }
    return false;
  case AArch64::SUBSwww_lsl:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (SUBSwww_lsl GPR32:$Rd, GPR32:$Rn, GPR32:$Rm, 0)
      AsmString = "subs $Rd, $Rn, $Rm";
      OpMap.push_back(std::make_pair("Rd", 0));
      OpMap.push_back(std::make_pair("Rm", 2));
      OpMap.push_back(std::make_pair("Rn", 1));
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).getReg() == AArch64::WZR &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (SUBSwww_lsl GPR32:$Rd, WZR, GPR32:$Rm, 0)
      AsmString = "negs $Rd, $Rm";
      OpMap.push_back(std::make_pair("Rd", 0));
      OpMap.push_back(std::make_pair("Rm", 2));
      break;
    }
    return false;
  case AArch64::SUBSwww_uxtw:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::RwspRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (SUBSwww_uxtw GPR32:$Rd, Rwsp:$Rn, GPR32:$Rm, 0)
      AsmString = "subs $Rd, $Rn, $Rm";
      OpMap.push_back(std::make_pair("Rd", 0));
      OpMap.push_back(std::make_pair("Rm", 2));
      OpMap.push_back(std::make_pair("Rn", 1));
      break;
    }
    return false;
  case AArch64::SUBSxxx_lsl:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (SUBSxxx_lsl GPR64:$Rd, GPR64:$Rn, GPR64:$Rm, 0)
      AsmString = "subs $Rd, $Rn, $Rm";
      OpMap.push_back(std::make_pair("Rd", 0));
      OpMap.push_back(std::make_pair("Rm", 2));
      OpMap.push_back(std::make_pair("Rn", 1));
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).getReg() == AArch64::XZR &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (SUBSxxx_lsl GPR64:$Rd, XZR, GPR64:$Rm, 0)
      AsmString = "negs $Rd, $Rm";
      OpMap.push_back(std::make_pair("Rd", 0));
      OpMap.push_back(std::make_pair("Rm", 2));
      break;
    }
    return false;
  case AArch64::SUBSxxx_uxtx:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::RxspRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (SUBSxxx_uxtx GPR64:$Rd, Rxsp:$Rn, GPR64:$Rm, 0)
      AsmString = "subs $Rd, $Rn, $Rm";
      OpMap.push_back(std::make_pair("Rd", 0));
      OpMap.push_back(std::make_pair("Rm", 2));
      OpMap.push_back(std::make_pair("Rn", 1));
      break;
    }
    return false;
  case AArch64::SUBwww_lsl:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (SUBwww_lsl GPR32:$Rd, GPR32:$Rn, GPR32:$Rm, 0)
      AsmString = "sub $Rd, $Rn, $Rm";
      OpMap.push_back(std::make_pair("Rd", 0));
      OpMap.push_back(std::make_pair("Rm", 2));
      OpMap.push_back(std::make_pair("Rn", 1));
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).getReg() == AArch64::WZR &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (SUBwww_lsl GPR32:$Rd, WZR, GPR32:$Rm, 0)
      AsmString = "neg $Rd, $Rm";
      OpMap.push_back(std::make_pair("Rd", 0));
      OpMap.push_back(std::make_pair("Rm", 2));
      break;
    }
    return false;
  case AArch64::SUBwww_uxtw:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::RwspRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32wspRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (SUBwww_uxtw Rwsp:$Rd, GPR32wsp:$Rn, GPR32:$Rm, 0)
      AsmString = "sub $Rd, $Rn, $Rm";
      OpMap.push_back(std::make_pair("Rd", 0));
      OpMap.push_back(std::make_pair("Rm", 2));
      OpMap.push_back(std::make_pair("Rn", 1));
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32wspRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::RwspRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (SUBwww_uxtw GPR32wsp:$Rd, Rwsp:$Rn, GPR32:$Rm, 0)
      AsmString = "sub $Rd, $Rn, $Rm";
      OpMap.push_back(std::make_pair("Rd", 0));
      OpMap.push_back(std::make_pair("Rm", 2));
      OpMap.push_back(std::make_pair("Rn", 1));
      break;
    }
    return false;
  case AArch64::SUBxxx_lsl:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (SUBxxx_lsl GPR64:$Rd, GPR64:$Rn, GPR64:$Rm, 0)
      AsmString = "sub $Rd, $Rn, $Rm";
      OpMap.push_back(std::make_pair("Rd", 0));
      OpMap.push_back(std::make_pair("Rm", 2));
      OpMap.push_back(std::make_pair("Rn", 1));
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).getReg() == AArch64::XZR &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (SUBxxx_lsl GPR64:$Rd, XZR, GPR64:$Rm, 0)
      AsmString = "neg $Rd, $Rm";
      OpMap.push_back(std::make_pair("Rd", 0));
      OpMap.push_back(std::make_pair("Rm", 2));
      break;
    }
    return false;
  case AArch64::SUBxxx_uxtx:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::RxspRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64xspRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (SUBxxx_uxtx Rxsp:$Rd, GPR64xsp:$Rn, GPR64:$Rm, 0)
      AsmString = "sub $Rd, $Rn, $Rm";
      OpMap.push_back(std::make_pair("Rd", 0));
      OpMap.push_back(std::make_pair("Rm", 2));
      OpMap.push_back(std::make_pair("Rn", 1));
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64xspRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::RxspRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (SUBxxx_uxtx GPR64xsp:$Rd, Rxsp:$Rn, GPR64:$Rm, 0)
      AsmString = "sub $Rd, $Rn, $Rm";
      OpMap.push_back(std::make_pair("Rd", 0));
      OpMap.push_back(std::make_pair("Rm", 2));
      OpMap.push_back(std::make_pair("Rn", 1));
      break;
    }
    return false;
  case AArch64::TSTww_lsl:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (TSTww_lsl GPR32:$Rn, GPR32:$Rm, 0)
      AsmString = "tst $Rn, $Rm";
      OpMap.push_back(std::make_pair("Rm", 1));
      OpMap.push_back(std::make_pair("Rn", 0));
      break;
    }
    return false;
  case AArch64::TSTxx_lsl:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (TSTxx_lsl GPR64:$Rn, GPR64:$Rm, 0)
      AsmString = "tst $Rn, $Rm";
      OpMap.push_back(std::make_pair("Rm", 1));
      OpMap.push_back(std::make_pair("Rn", 0));
      break;
    }
    return false;
  case AArch64::UMADDLxwwx:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR) {
      // (UMADDLxwwx GPR64:$Rd, GPR32:$Rn, GPR32:$Rm, XZR)
      AsmString = "umull $Rd, $Rn, $Rm";
      OpMap.push_back(std::make_pair("Rd", 0));
      OpMap.push_back(std::make_pair("Rm", 2));
      OpMap.push_back(std::make_pair("Rn", 1));
      break;
    }
    return false;
  case AArch64::UMSUBLxwwx:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR) {
      // (UMSUBLxwwx GPR64:$Rd, GPR32:$Rn, GPR32:$Rm, XZR)
      AsmString = "umnegl $Rd, $Rn, $Rm";
      OpMap.push_back(std::make_pair("Rd", 0));
      OpMap.push_back(std::make_pair("Rm", 2));
      OpMap.push_back(std::make_pair("Rn", 1));
      break;
    }
    return false;
  }

  std::pair<StringRef, StringRef> ASM = AsmString.split(' ');
  OS << '\t' << ASM.first;
  if (!ASM.second.empty()) {
    OS << '\t';
    for (StringRef::iterator
         I = ASM.second.begin(), E = ASM.second.end(); I != E; ) {
      if (*I == '$') {
        StringRef::iterator Start = ++I;
        while (I != E &&
               ((*I >= 'a' && *I <= 'z') ||
                (*I >= 'A' && *I <= 'Z') ||
                (*I >= '0' && *I <= '9') ||
                *I == '_'))
          ++I;
        StringRef Name(Start, I - Start);
        printOperand(MI, getMapOperandNumber(OpMap, Name), OS);
      } else {
        OS << *I++;
      }
    }
  }

  return true;
}

#endif // PRINT_ALIAS_INSTR
