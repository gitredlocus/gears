<?xml version="1.0" encoding="ANSI_X3.4-1968" standalone="no"?>
<pmd-cpd>
<duplication lines="17" tokens="162">
<file line="483" path="/var/lib/jenkins/jobs/redis-cpd/workspace/src/anet.c"/>
<file line="505" path="/var/lib/jenkins/jobs/redis-cpd/workspace/src/anet.c"/>
<codefragment><![CDATA[    if (getpeername(fd,(struct sockaddr*)&sa,&salen) == -1) {
        *port = 0;
        ip[0] = '?';
        ip[1] = '\0';
        return -1;
    }
    if (sa.ss_family == AF_INET) {
        struct sockaddr_in *s = (struct sockaddr_in *)&sa;
        if (ip) inet_ntop(AF_INET,(void*)&(s->sin_addr),ip,ip_len);
        if (port) *port = ntohs(s->sin_port);
    } else {
        struct sockaddr_in6 *s = (struct sockaddr_in6 *)&sa;
        if (ip) inet_ntop(AF_INET6,(void*)&(s->sin6_addr),ip,ip_len);
        if (port) *port = ntohs(s->sin6_port);
    }
    return 0;
}]]></codefragment>
</duplication>
<duplication lines="9" tokens="136">
<file line="183" path="/var/lib/jenkins/jobs/redis-cpd/workspace/src/lzf_c.c"/>
<file line="193" path="/var/lib/jenkins/jobs/redis-cpd/workspace/src/lzf_c.c"/>
<codefragment><![CDATA[                  len++; if (ref [len] != ip [len]) break;
                  len++; if (ref [len] != ip [len]) break;
                  len++; if (ref [len] != ip [len]) break;
                  len++; if (ref [len] != ip [len]) break;

                  len++; if (ref [len] != ip [len]) break;
                  len++; if (ref [len] != ip [len]) break;
                  len++; if (ref [len] != ip [len]) break;
                  len++; if (ref [len] != ip [len]) break;]]></codefragment>
</duplication>
<duplication lines="15" tokens="134">
<file line="1399" path="/var/lib/jenkins/jobs/redis-cpd/workspace/src/redis-cli.c"/>
<file line="2192" path="/var/lib/jenkins/jobs/redis-cpd/workspace/src/redis.c"/>
<codefragment><![CDATA[    if (n < 1024) {
        /* Bytes */
        sprintf(s,"%lluB",n);
        return;
    } else if (n < (1024*1024)) {
        d = (double)n/(1024);
        sprintf(s,"%.2fK",d);
    } else if (n < (1024LL*1024*1024)) {
        d = (double)n/(1024*1024);
        sprintf(s,"%.2fM",d);
    } else if (n < (1024LL*1024*1024*1024)) {
        d = (double)n/(1024LL*1024*1024);
        sprintf(s,"%.2fG",d);
    }
}]]></codefragment>
</duplication>
<duplication lines="8" tokens="119">
<file line="183" path="/var/lib/jenkins/jobs/redis-cpd/workspace/src/lzf_c.c"/>
<file line="194" path="/var/lib/jenkins/jobs/redis-cpd/workspace/src/lzf_c.c"/>
<codefragment><![CDATA[                  len++; if (ref [len] != ip [len]) break;
                  len++; if (ref [len] != ip [len]) break;
                  len++; if (ref [len] != ip [len]) break;
                  len++; if (ref [len] != ip [len]) break;

                  len++; if (ref [len] != ip [len]) break;
                  len++; if (ref [len] != ip [len]) break;
                  len++; if (ref [len] != ip [len]) break;]]></codefragment>
</duplication>
<duplication lines="10" tokens="116">
<file line="457" path="/var/lib/jenkins/jobs/redis-cpd/workspace/src/anet.c"/>
<file line="489" path="/var/lib/jenkins/jobs/redis-cpd/workspace/src/anet.c"/>
<file line="511" path="/var/lib/jenkins/jobs/redis-cpd/workspace/src/anet.c"/>
<codefragment><![CDATA[    if (sa.ss_family == AF_INET) {
        struct sockaddr_in *s = (struct sockaddr_in *)&sa;
        if (ip) inet_ntop(AF_INET,(void*)&(s->sin_addr),ip,ip_len);
        if (port) *port = ntohs(s->sin_port);
    } else {
        struct sockaddr_in6 *s = (struct sockaddr_in6 *)&sa;
        if (ip) inet_ntop(AF_INET6,(void*)&(s->sin6_addr),ip,ip_len);
        if (port) *port = ntohs(s->sin6_port);
    }
    return fd;]]></codefragment>
</duplication>
<duplication lines="18" tokens="106">
<file line="167" path="/var/lib/jenkins/jobs/redis-cpd/workspace/src/debug.c"/>
<file line="708" path="/var/lib/jenkins/jobs/redis-cpd/workspace/src/aof.c"/>
<codefragment><![CDATA[                unsigned char eledigest[20];

                if (o->encoding == REDIS_ENCODING_ZIPLIST) {
                    unsigned char *zl = o->ptr;
                    unsigned char *eptr, *sptr;
                    unsigned char *vstr;
                    unsigned int vlen;
                    long long vll;
                    double score;

                    eptr = ziplistIndex(zl,0);
                    redisAssert(eptr != NULL);
                    sptr = ziplistNext(zl,eptr);
                    redisAssert(sptr != NULL);

                    while (eptr != NULL) {
                        redisAssert(ziplistGet(eptr,&vstr,&vlen,&vll));
                        score = zzlGetScore(sptr);]]></codefragment>
</duplication>
<duplication lines="7" tokens="102">
<file line="183" path="/var/lib/jenkins/jobs/redis-cpd/workspace/src/lzf_c.c"/>
<file line="195" path="/var/lib/jenkins/jobs/redis-cpd/workspace/src/lzf_c.c"/>
<codefragment><![CDATA[                  len++; if (ref [len] != ip [len]) break;
                  len++; if (ref [len] != ip [len]) break;
                  len++; if (ref [len] != ip [len]) break;
                  len++; if (ref [len] != ip [len]) break;

                  len++; if (ref [len] != ip [len]) break;
                  len++; if (ref [len] != ip [len]) break;]]></codefragment>
</duplication>
</pmd-cpd>

